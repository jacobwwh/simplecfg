#read python cfgs (generated by ControlFlow.py) and collect target paths
from data_utils import read_jsonl, write_jsonl, add_lineno_comment

def collect_path(cfg, func_name, target_line, num_paths=5, max_len=30):
    """collect a group of paths from entry to target_line"""
    target_paths=[]
    all_nodes=list(cfg.keys())
    #print(all_nodes)
    all_lines=[cfg[node]['lineno'] for node in all_nodes]
    #print(all_lines)
    visited_times={node:0 for node in all_nodes}
    #assert target_line in all_lines, f'{target_line} not in {all_lines}'
    if target_line not in all_lines:
        print(f'{target_line} not in cfg: {func_name}')
        return []

    for node in all_nodes:
        #print(node, cfg[node]['lineno'],cfg[node]['code'])
        if cfg[node]['code'].startswith('enter:') and func_name in cfg[node]['code']:
            start_node=node
            break
    
    def dfs(cfg, cur_node, cur_path):
        if cfg[str(cur_node)]['lineno']==target_line: #dict keys are str
            cur_path.append(cfg[str(cur_node)]['lineno'])
            target_paths.append(cur_path)
            if len(target_paths)>=2*num_paths:
                return
        else:
            visited_times[str(cur_node)]+=1
            if visited_times[str(cur_node)]>10: #you can visit a node for at most 10 times
                return
            if len(cur_path)>=max_len:
                return
            if not cfg[str(cur_node)]['code'].startswith('exit:'): #do not add exit nodes to path
                cur_path.append(cfg[str(cur_node)]['lineno'])
            for next_node in cfg[str(cur_node)]['children']:
                dfs(cfg, next_node, cur_path.copy())
    dfs(cfg, start_node, [])
    target_paths=sorted(target_paths, key=lambda x: len(x))
    target_paths=target_paths[:num_paths]
    print(target_paths)
    return target_paths

if __name__ == '__main__':
    dataset=read_jsonl('data/lc-py-cfg.jsonl')
    for i, data in enumerate(dataset):
        task_id=data['task_num']
        func_name=data['func_name']
        desc=data['description']
        code=data['python_solution']
        code_withlineno=add_lineno_comment(code)

        difficulty=data['difficulty']
        cfg=data['cfg']
        target_branches=data['blocks']
        target_lines=data['target_lines']
        print(task_id, func_name)
        for line in target_lines:
            #print(line)
            #target line not in cfg:
            #770: line 38 (del statement)
            #1579: 53 (else is mistakenly include in target_lines)
            #1722: 56 (del statement)
            #1896: 37 (else is mistakenly include in target_lines)
            #2983: 36,39,42,45,47,48 (multiline statements, should be fixed->fixed)
            collect_path(cfg, func_name, line)
