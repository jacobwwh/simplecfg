{"task_num": 4, "task_title": "Median of Two Sorted Arrays", "difficulty": 3, "func_name": "findMedianSortedArrays", "description": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively,\nreturn the median of the two sorted arrays.\n\nThe overall run time complexity should be `O(log (m+n))`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n    n1 = len(nums1)\n    n2 = len(nums2)\n    if n1 > n2:\n      return self.findMedianSortedArrays(nums2, nums1)\n\n    l = 0\n    r = n1\n\n    while l <= r:\n      partition1 = (l + r) // 2\n      partition2 = (n1 + n2 + 1) // 2 - partition1\n      if partition1 == 0: \n        maxLeft1 = -2**31\n      else: \n        maxLeft1 = nums1[partition1 - 1]\n      if partition2 == 0:\n        maxLeft2 = -2**31 \n      else:\n        maxLeft2 = nums2[partition2 - 1]\n      if partition1 == n1:\n        minRight1 = 2**31 - 1 \n      else:\n        minRight1 = nums1[partition1]\n      if partition2 == n2:\n        minRight2 = 2**31 - 1 \n      else:\n        minRight2 = nums2[partition2]\n      if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n        if (n1 + n2) % 2 == 0:\n          return (max(maxLeft1, maxLeft2) + min(minRight1, minRight2)) * 0.5\n        else:\n          return max(maxLeft1, maxLeft2)\n      elif maxLeft1 > minRight2:\n        r = partition1 - 1\n      else:\n        l = partition1 + 1\n", "blocks": [{"type": "if", "start": 15, "end": 16}, {"type": "if", "start": 24, "end": 25}, {"type": "else", "start": 26, "end": 27}, {"type": "if", "start": 28, "end": 29}, {"type": "else", "start": 30, "end": 31}, {"type": "if", "start": 32, "end": 33}, {"type": "else", "start": 34, "end": 35}, {"type": "if", "start": 36, "end": 37}, {"type": "else", "start": 38, "end": 39}, {"type": "if", "start": 40, "end": 44}, {"type": "if", "start": 41, "end": 42}, {"type": "else", "start": 43, "end": 44}, {"type": "if", "start": 45, "end": 46}, {"type": "else", "start": 47, "end": 48}], "target_lines": [16, 25, 27, 29, 31, 33, 35, 37, 39, 41, 42, 44, 46, 48], "cfg": {"0": {"lineno": 0, "parents": [], "children": [31], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [5], "children": [3], "function": "findMedianSortedArrays", "code": "enter: findMedianSortedArrays(self, nums1, nums2)"}, "2": {"lineno": 12, "parents": [9, 26, 27, 6], "children": [], "function": "findMedianSortedArrays", "code": "exit: findMedianSortedArrays(self, nums1, nums2)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "findMedianSortedArrays", "code": "n1 = len(nums1)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "findMedianSortedArrays", "code": "n2 = len(nums2)"}, "5": {"lineno": 15, "parents": [4], "children": [6, 7], "calls": ["findMedianSortedArrays"], "function": "findMedianSortedArrays", "code": "_if: n1 > n2"}, "6": {"lineno": 16, "parents": [2, 5], "children": [2], "function": "findMedianSortedArrays", "code": "return self.findMedianSortedArrays(nums2, nums1)"}, "7": {"lineno": 18, "parents": [2, 5], "children": [8], "function": "findMedianSortedArrays", "code": "l = 0"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "findMedianSortedArrays", "code": "r = n1"}, "9": {"lineno": 21, "parents": [8, 29, 30], "children": [10, 2], "function": "findMedianSortedArrays", "code": "_while: l <= r"}, "10": {"lineno": 22, "parents": [9], "children": [11], "function": "findMedianSortedArrays", "code": "partition1 = (l + r) // 2"}, "11": {"lineno": 23, "parents": [10], "children": [12], "function": "findMedianSortedArrays", "code": "partition2 = (n1 + n2 + 1) // 2 - partition1"}, "12": {"lineno": 24, "parents": [11], "children": [13, 14], "function": "findMedianSortedArrays", "code": "_if: partition1 == 0"}, "13": {"lineno": 25, "parents": [12], "children": [15], "function": "findMedianSortedArrays", "code": "maxLeft1 = -2 ** 31"}, "14": {"lineno": 27, "parents": [12], "children": [15], "function": "findMedianSortedArrays", "code": "maxLeft1 = nums1[partition1 - 1]"}, "15": {"lineno": 28, "parents": [13, 14], "children": [16, 17], "function": "findMedianSortedArrays", "code": "_if: partition2 == 0"}, "16": {"lineno": 29, "parents": [15], "children": [18], "function": "findMedianSortedArrays", "code": "maxLeft2 = -2 ** 31"}, "17": {"lineno": 31, "parents": [15], "children": [18], "function": "findMedianSortedArrays", "code": "maxLeft2 = nums2[partition2 - 1]"}, "18": {"lineno": 32, "parents": [16, 17], "children": [19, 20], "function": "findMedianSortedArrays", "code": "_if: partition1 == n1"}, "19": {"lineno": 33, "parents": [18], "children": [21], "function": "findMedianSortedArrays", "code": "minRight1 = 2 ** 31 - 1"}, "20": {"lineno": 35, "parents": [18], "children": [21], "function": "findMedianSortedArrays", "code": "minRight1 = nums1[partition1]"}, "21": {"lineno": 36, "parents": [19, 20], "children": [22, 23], "function": "findMedianSortedArrays", "code": "_if: partition2 == n2"}, "22": {"lineno": 37, "parents": [21], "children": [24], "function": "findMedianSortedArrays", "code": "minRight2 = 2 ** 31 - 1"}, "23": {"lineno": 39, "parents": [21], "children": [24], "function": "findMedianSortedArrays", "code": "minRight2 = nums2[partition2]"}, "24": {"lineno": 40, "parents": [22, 23], "children": [25, 28], "function": "findMedianSortedArrays", "code": "_if: maxLeft1 <= minRight2 and maxLeft2 <= minRight1"}, "25": {"lineno": 41, "parents": [24], "children": [26, 27], "calls": ["max", "min", "max"], "function": "findMedianSortedArrays", "code": "_if: (n1 + n2) % 2 == 0"}, "26": {"lineno": 42, "parents": [25], "children": [2], "function": "findMedianSortedArrays", "code": "return (max(maxLeft1, maxLeft2) + min(minRight1, minRight2)) * 0.5"}, "27": {"lineno": 44, "parents": [25], "children": [2], "function": "findMedianSortedArrays", "code": "return max(maxLeft1, maxLeft2)"}, "28": {"lineno": 45, "parents": [24], "children": [29, 30], "function": "findMedianSortedArrays", "code": "_if: maxLeft1 > minRight2"}, "29": {"lineno": 46, "parents": [28], "children": [9], "function": "findMedianSortedArrays", "code": "r = partition1 - 1"}, "30": {"lineno": 48, "parents": [28], "children": [9], "function": "findMedianSortedArrays", "code": "l = partition1 + 1"}, "31": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 10, "task_title": "Regular Expression Matching", "difficulty": 3, "func_name": "isMatch", "description": "Given an input string `s` and a pattern `p`, implement regular expression\nmatching with support for `'.'` and `'*'` where:\n\n* `'.'` Matches any single character.\u200b\u200b\u200b\u200b\n* `'*'` Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def isMatch(self, s: str, p: str) -> bool:\n    m = len(s)\n    n = len(p)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n\n    def isMatch(i: int, j: int) -> bool:\n      return j >= 0 and p[j] == '.' or s[i] == p[j]\n\n    for j, c in enumerate(p):\n      if c == '*' and dp[0][j - 1]:\n        dp[0][j + 1] = True\n\n    for i in range(m):\n      for j in range(n):\n        if p[j] == '*':\n          noRepeat = dp[i + 1][j - 1]\n          doRepeat = isMatch(i, j - 1) and dp[i][j + 1]\n          dp[i + 1][j + 1] = noRepeat or doRepeat\n        elif isMatch(i, j):\n          dp[i + 1][j + 1] = dp[i][j]\n\n    return dp[m][n]\n", "blocks": [{"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 27, "end": 30}, {"type": "if", "start": 31, "end": 32}], "target_lines": [23, 28, 29, 30, 32], "cfg": {"0": {"lineno": 0, "parents": [], "children": [28], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [25], "children": [3], "function": "isMatch", "code": "enter: isMatch(self, s, p)"}, "2": {"lineno": 12, "parents": [27], "children": [], "function": "isMatch", "code": "exit: isMatch(self, s, p)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "isMatch", "code": "m = len(s)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "isMatch", "code": "n = len(p)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "isMatch", "code": "dp = [[False] * (n + 1) for _ in range(m + 1)]"}, "6": {"lineno": 16, "parents": [5], "children": [10], "function": "isMatch", "code": "dp[0][0] = True"}, "7": {"lineno": 18, "parents": [], "children": [9], "function": "isMatch", "code": "enter: isMatch(i, j)"}, "8": {"lineno": 18, "parents": [9], "children": [], "function": "isMatch", "code": "exit: isMatch(i, j)"}, "9": {"lineno": 19, "parents": [7], "children": [8], "function": "isMatch", "code": "return j >= 0 and p[j] == '.' or s[i] == p[j]"}, "10": {"lineno": 21, "parents": [6], "children": [11], "function": "isMatch", "code": "__iv = iter(enumerate(p))"}, "11": {"lineno": 21, "parents": [10, 13, 14], "children": [12, 15], "calls": ["enumerate"], "function": "isMatch", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "isMatch", "code": "j, c = next(__iv)"}, "13": {"lineno": 22, "parents": [12], "children": [11, 14], "function": "isMatch", "code": "_if: c == '*' and dp[0][j - 1]"}, "14": {"lineno": 23, "parents": [13], "children": [11], "function": "isMatch", "code": "dp[0][j + 1] = True"}, "15": {"lineno": 25, "parents": [11], "children": [16], "function": "isMatch", "code": "__iv = iter(range(m))"}, "16": {"lineno": 25, "parents": [19, 15], "children": [17, 27], "calls": ["range"], "function": "isMatch", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 25, "parents": [16], "children": [18], "function": "isMatch", "code": "i = next(__iv)"}, "18": {"lineno": 26, "parents": [17], "children": [19], "function": "isMatch", "code": "__iv = iter(range(n))"}, "19": {"lineno": 26, "parents": [2, 18, 24, 25, 26], "children": [16, 20], "calls": ["range"], "function": "isMatch", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 26, "parents": [19], "children": [21], "function": "isMatch", "code": "j = next(__iv)"}, "21": {"lineno": 27, "parents": [20], "children": [25, 22], "function": "isMatch", "code": "_if: p[j] == '*'"}, "22": {"lineno": 28, "parents": [21], "children": [23], "function": "isMatch", "code": "noRepeat = dp[i + 1][j - 1]"}, "23": {"lineno": 29, "parents": [22], "children": [24], "function": "isMatch", "code": "doRepeat = isMatch(i, j - 1) and dp[i][j + 1]"}, "24": {"lineno": 30, "parents": [23], "children": [19], "function": "isMatch", "code": "dp[i + 1][j + 1] = noRepeat or doRepeat"}, "25": {"lineno": 31, "parents": [21], "children": [26, 19], "calls": ["isMatch"], "function": "isMatch", "code": "_if: isMatch(i, j)"}, "26": {"lineno": 32, "parents": [25, 2], "children": [19], "function": "isMatch", "code": "dp[i + 1][j + 1] = dp[i][j]"}, "27": {"lineno": 34, "parents": [16], "children": [2], "function": "isMatch", "code": "return dp[m][n]"}, "28": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 15, "task_title": "3Sum", "difficulty": 2, "func_name": "threeSum", "description": "Given an integer array nums, return all the triplets `[nums[i], nums[j],\nnums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] +\nnums[k] == 0`.\n\nNotice that the solution set must not contain duplicate triplets.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def threeSum(self, nums: List[int]) -> List[List[int]]:\n    if len(nums) < 3:\n      return []\n\n    ans = []\n\n    nums.sort()\n\n    for i in range(len(nums) - 2):\n      if i > 0 and nums[i] == nums[i - 1]:\n        continue\n\n      l = i + 1\n      r = len(nums) - 1\n      while l < r:\n        summ = nums[i] + nums[l] + nums[r]\n        if summ == 0:\n          ans.append((nums[i], nums[l], nums[r]))\n          l += 1\n          r -= 1\n          while nums[l] == nums[l - 1] and l < r:\n            l += 1\n          while nums[r] == nums[r + 1] and l < r:\n            r -= 1\n        elif summ < 0:\n          l += 1\n        else:\n          r -= 1\n\n    return ans\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 28, "end": 35}, {"type": "if", "start": 36, "end": 37}, {"type": "else", "start": 38, "end": 39}], "target_lines": [14, 22, 29, 30, 31, 32, 33, 34, 35, 37, 39], "cfg": {"0": {"lineno": 0, "parents": [], "children": [28], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "threeSum", "code": "enter: threeSum(self, nums)"}, "2": {"lineno": 12, "parents": [27, 4], "children": [], "function": "threeSum", "code": "exit: threeSum(self, nums)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "calls": ["len"], "function": "threeSum", "code": "_if: len(nums) < 3"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "threeSum", "code": "return []"}, "5": {"lineno": 16, "parents": [3], "children": [6], "function": "threeSum", "code": "ans = []"}, "6": {"lineno": 18, "parents": [5], "children": [7], "calls": ["sort"], "function": "threeSum", "code": "nums.sort()"}, "7": {"lineno": 20, "parents": [6], "children": [8], "function": "threeSum", "code": "__iv = iter(range(len(nums) - 2))"}, "8": {"lineno": 20, "parents": [11, 14, 7], "children": [9, 27], "calls": ["len", "range"], "function": "threeSum", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "threeSum", "code": "i = next(__iv)"}, "10": {"lineno": 21, "parents": [9], "children": [11, 12], "function": "threeSum", "code": "_if: i > 0 and nums[i] == nums[i - 1]"}, "11": {"lineno": 22, "parents": [10], "children": [8], "function": "threeSum", "code": "continue"}, "12": {"lineno": 24, "parents": [10], "children": [13], "function": "threeSum", "code": "l = i + 1"}, "13": {"lineno": 25, "parents": [12], "children": [14], "calls": ["len"], "function": "threeSum", "code": "r = len(nums) - 1"}, "14": {"lineno": 26, "parents": [25, 26, 13, 22], "children": [8, 15], "function": "threeSum", "code": "_while: l < r"}, "15": {"lineno": 27, "parents": [14], "children": [16], "function": "threeSum", "code": "summ = nums[i] + nums[l] + nums[r]"}, "16": {"lineno": 28, "parents": [15], "children": [24, 17], "function": "threeSum", "code": "_if: summ == 0"}, "17": {"lineno": 29, "parents": [16], "children": [18], "calls": ["append"], "function": "threeSum", "code": "ans.append((nums[i], nums[l], nums[r]))"}, "18": {"lineno": 30, "parents": [17], "children": [19], "function": "threeSum", "code": "l += 1"}, "19": {"lineno": 31, "parents": [18], "children": [20], "function": "threeSum", "code": "r -= 1"}, "20": {"lineno": 32, "parents": [19, 21], "children": [21, 22], "function": "threeSum", "code": "_while: nums[l] == nums[l - 1] and l < r"}, "21": {"lineno": 33, "parents": [20], "children": [20], "function": "threeSum", "code": "l += 1"}, "22": {"lineno": 34, "parents": [20, 23], "children": [14, 23], "function": "threeSum", "code": "_while: nums[r] == nums[r + 1] and l < r"}, "23": {"lineno": 35, "parents": [22], "children": [22], "function": "threeSum", "code": "r -= 1"}, "24": {"lineno": 36, "parents": [16], "children": [25, 26], "function": "threeSum", "code": "_if: summ < 0"}, "25": {"lineno": 37, "parents": [24], "children": [14], "function": "threeSum", "code": "l += 1"}, "26": {"lineno": 39, "parents": [24], "children": [14], "function": "threeSum", "code": "r -= 1"}, "27": {"lineno": 41, "parents": [8], "children": [2], "function": "threeSum", "code": "return ans"}, "28": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 44, "task_title": "Wildcard Matching", "difficulty": 3, "func_name": "isMatch", "description": "Given an input string (`s`) and a pattern (`p`), implement wildcard pattern\nmatching with support for `'?'` and `'*'` where:\n\n* `'?'` Matches any single character.\n* `'*'` Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the entire input string (not partial).\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def isMatch(self, s: str, p: str) -> bool:\n    m = len(s)\n    n = len(p)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n\n    def isMatch(i: int, j: int) -> bool:\n      return i >= 0 and p[j] == '?' or s[i] == p[j]\n\n    for j, c in enumerate(p):\n      if c == '*':\n        dp[0][j + 1] = dp[0][j]\n\n    for i in range(m):\n      for j in range(n):\n        if p[j] == '*':\n          matchEmpty = dp[i + 1][j]\n          matchSome = dp[i][j + 1]\n          dp[i + 1][j + 1] = matchEmpty or matchSome\n        elif isMatch(i, j):\n          dp[i + 1][j + 1] = dp[i][j]\n\n    return dp[m][n]\n", "blocks": [{"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 27, "end": 30}, {"type": "if", "start": 31, "end": 32}], "target_lines": [23, 28, 29, 30, 32], "cfg": {"0": {"lineno": 0, "parents": [], "children": [28], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [25], "children": [3], "function": "isMatch", "code": "enter: isMatch(self, s, p)"}, "2": {"lineno": 12, "parents": [27], "children": [], "function": "isMatch", "code": "exit: isMatch(self, s, p)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "isMatch", "code": "m = len(s)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "isMatch", "code": "n = len(p)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "isMatch", "code": "dp = [[False] * (n + 1) for _ in range(m + 1)]"}, "6": {"lineno": 16, "parents": [5], "children": [10], "function": "isMatch", "code": "dp[0][0] = True"}, "7": {"lineno": 18, "parents": [], "children": [9], "function": "isMatch", "code": "enter: isMatch(i, j)"}, "8": {"lineno": 18, "parents": [9], "children": [], "function": "isMatch", "code": "exit: isMatch(i, j)"}, "9": {"lineno": 19, "parents": [7], "children": [8], "function": "isMatch", "code": "return i >= 0 and p[j] == '?' or s[i] == p[j]"}, "10": {"lineno": 21, "parents": [6], "children": [11], "function": "isMatch", "code": "__iv = iter(enumerate(p))"}, "11": {"lineno": 21, "parents": [10, 13, 14], "children": [12, 15], "calls": ["enumerate"], "function": "isMatch", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "isMatch", "code": "j, c = next(__iv)"}, "13": {"lineno": 22, "parents": [12], "children": [11, 14], "function": "isMatch", "code": "_if: c == '*'"}, "14": {"lineno": 23, "parents": [13], "children": [11], "function": "isMatch", "code": "dp[0][j + 1] = dp[0][j]"}, "15": {"lineno": 25, "parents": [11], "children": [16], "function": "isMatch", "code": "__iv = iter(range(m))"}, "16": {"lineno": 25, "parents": [19, 15], "children": [17, 27], "calls": ["range"], "function": "isMatch", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 25, "parents": [16], "children": [18], "function": "isMatch", "code": "i = next(__iv)"}, "18": {"lineno": 26, "parents": [17], "children": [19], "function": "isMatch", "code": "__iv = iter(range(n))"}, "19": {"lineno": 26, "parents": [2, 18, 24, 25, 26], "children": [16, 20], "calls": ["range"], "function": "isMatch", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 26, "parents": [19], "children": [21], "function": "isMatch", "code": "j = next(__iv)"}, "21": {"lineno": 27, "parents": [20], "children": [25, 22], "function": "isMatch", "code": "_if: p[j] == '*'"}, "22": {"lineno": 28, "parents": [21], "children": [23], "function": "isMatch", "code": "matchEmpty = dp[i + 1][j]"}, "23": {"lineno": 29, "parents": [22], "children": [24], "function": "isMatch", "code": "matchSome = dp[i][j + 1]"}, "24": {"lineno": 30, "parents": [23], "children": [19], "function": "isMatch", "code": "dp[i + 1][j + 1] = matchEmpty or matchSome"}, "25": {"lineno": 31, "parents": [21], "children": [26, 19], "calls": ["isMatch"], "function": "isMatch", "code": "_if: isMatch(i, j)"}, "26": {"lineno": 32, "parents": [25, 2], "children": [19], "function": "isMatch", "code": "dp[i + 1][j + 1] = dp[i][j]"}, "27": {"lineno": 34, "parents": [16], "children": [2], "function": "isMatch", "code": "return dp[m][n]"}, "28": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 54, "task_title": "Spiral Matrix", "difficulty": 2, "func_name": "spiralOrder", "description": "Given an `m x n` `matrix`, return all elements of the `matrix` in spiral\norder.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n    if not matrix:\n      return []\n\n    m = len(matrix)\n    n = len(matrix[0])\n    ans = []\n    r1 = 0\n    c1 = 0\n    r2 = m - 1\n    c2 = n - 1\n\n    while len(ans) < m * n:\n      j = c1\n      while j <= c2 and len(ans) < m * n:\n        ans.append(matrix[r1][j])\n        j += 1\n      i = r1 + 1\n      while i <= r2 - 1 and len(ans) < m * n:\n        ans.append(matrix[i][c2])\n        i += 1\n      j = c2\n      while j >= c1 and len(ans) < m * n:\n        ans.append(matrix[r2][j])\n        j -= 1\n      i = r2 - 1\n      while i >= r1 + 1 and len(ans) < m * n:\n        ans.append(matrix[i][c1])\n        i -= 1\n      r1 += 1\n      c1 += 1\n      r2 -= 1\n      c2 -= 1\n\n    return ans\n", "blocks": [{"type": "if", "start": 13, "end": 14}], "target_lines": [14], "cfg": {"0": {"lineno": 0, "parents": [], "children": [34], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "spiralOrder", "code": "enter: spiralOrder(self, matrix)"}, "2": {"lineno": 12, "parents": [33, 4], "children": [], "function": "spiralOrder", "code": "exit: spiralOrder(self, matrix)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "function": "spiralOrder", "code": "_if: not matrix"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "spiralOrder", "code": "return []"}, "5": {"lineno": 16, "parents": [3], "children": [6], "calls": ["len"], "function": "spiralOrder", "code": "m = len(matrix)"}, "6": {"lineno": 17, "parents": [5], "children": [7], "calls": ["len"], "function": "spiralOrder", "code": "n = len(matrix[0])"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "spiralOrder", "code": "ans = []"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "spiralOrder", "code": "r1 = 0"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "spiralOrder", "code": "c1 = 0"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "spiralOrder", "code": "r2 = m - 1"}, "11": {"lineno": 22, "parents": [10], "children": [12], "function": "spiralOrder", "code": "c2 = n - 1"}, "12": {"lineno": 24, "parents": [32, 11], "children": [33, 13], "calls": ["len"], "function": "spiralOrder", "code": "_while: len(ans) < m * n"}, "13": {"lineno": 25, "parents": [12], "children": [14], "function": "spiralOrder", "code": "j = c1"}, "14": {"lineno": 26, "parents": [16, 13], "children": [17, 15], "function": "spiralOrder", "code": "_while: j <= c2 and len(ans) < m * n"}, "15": {"lineno": 27, "parents": [14], "children": [16], "calls": ["append"], "function": "spiralOrder", "code": "ans.append(matrix[r1][j])"}, "16": {"lineno": 28, "parents": [15], "children": [14], "function": "spiralOrder", "code": "j += 1"}, "17": {"lineno": 29, "parents": [14], "children": [18], "function": "spiralOrder", "code": "i = r1 + 1"}, "18": {"lineno": 30, "parents": [17, 20], "children": [19, 21], "function": "spiralOrder", "code": "_while: i <= r2 - 1 and len(ans) < m * n"}, "19": {"lineno": 31, "parents": [18], "children": [20], "calls": ["append"], "function": "spiralOrder", "code": "ans.append(matrix[i][c2])"}, "20": {"lineno": 32, "parents": [19], "children": [18], "function": "spiralOrder", "code": "i += 1"}, "21": {"lineno": 33, "parents": [18], "children": [22], "function": "spiralOrder", "code": "j = c2"}, "22": {"lineno": 34, "parents": [24, 21], "children": [25, 23], "function": "spiralOrder", "code": "_while: j >= c1 and len(ans) < m * n"}, "23": {"lineno": 35, "parents": [22], "children": [24], "calls": ["append"], "function": "spiralOrder", "code": "ans.append(matrix[r2][j])"}, "24": {"lineno": 36, "parents": [23], "children": [22], "function": "spiralOrder", "code": "j -= 1"}, "25": {"lineno": 37, "parents": [22], "children": [26], "function": "spiralOrder", "code": "i = r2 - 1"}, "26": {"lineno": 38, "parents": [25, 28], "children": [27, 29], "function": "spiralOrder", "code": "_while: i >= r1 + 1 and len(ans) < m * n"}, "27": {"lineno": 39, "parents": [26], "children": [28], "calls": ["append"], "function": "spiralOrder", "code": "ans.append(matrix[i][c1])"}, "28": {"lineno": 40, "parents": [27], "children": [26], "function": "spiralOrder", "code": "i -= 1"}, "29": {"lineno": 41, "parents": [26], "children": [30], "function": "spiralOrder", "code": "r1 += 1"}, "30": {"lineno": 42, "parents": [29], "children": [31], "function": "spiralOrder", "code": "c1 += 1"}, "31": {"lineno": 43, "parents": [30], "children": [32], "function": "spiralOrder", "code": "r2 -= 1"}, "32": {"lineno": 44, "parents": [31], "children": [12], "function": "spiralOrder", "code": "c2 -= 1"}, "33": {"lineno": 46, "parents": [12], "children": [2], "function": "spiralOrder", "code": "return ans"}, "34": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 65, "task_title": "Valid Number", "difficulty": 3, "func_name": "isNumber", "description": "A valid number can be split up into these components (in order):\n\n1. A decimal number or an integer.\n2. (Optional) An `'e'` or `'E'`, followed by an integer.\n\nA decimal number can be split up into these components (in order):\n\n1. (Optional) A sign character (either `'+'` or `'-'`).\n2. One of the following formats: \n1. One or more digits, followed by a dot `'.'`.\n2. One or more digits, followed by a dot `'.'`, followed by one or more digits.\n3. A dot `'.'`, followed by one or more digits.\n\nAn integer can be split up into these components (in order):\n\n1. (Optional) A sign character (either `'+'` or `'-'`).\n2. One or more digits.\n\nFor example, all the following are valid numbers: `[\"2\", \"0089\", \"-0.1\",\n\"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\",\n\"-123.456e789\"]`, while the following are not valid numbers: `[\"abc\", \"1a\",\n\"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]`.\n\nGiven a string `s`, return `true` if `s` is a valid number.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def isNumber(self, s: str) -> bool:\n    s = s.strip()\n    if not s:\n      return False\n\n    seenNum = False\n    seenDot = False\n    seenE = False\n\n    for i, c in enumerate(s):\n      if c == '.':\n        if seenDot or seenE:\n          return False\n        seenDot = True\n      elif c == 'e' or c == 'E':\n        if seenE or not seenNum:\n          return False\n        seenE = True\n        seenNum = False\n      elif c in '+-':\n        if i > 0 and s[i - 1] not in 'eE':\n          return False\n        seenNum = False\n      else:\n        if not c.isdigit():\n          return False\n        seenNum = True\n\n    return seenNum\n", "blocks": [{"type": "if", "start": 14, "end": 15}, {"type": "if", "start": 22, "end": 25}, {"type": "if", "start": 23, "end": 24}, {"type": "if", "start": 26, "end": 30}, {"type": "if", "start": 27, "end": 28}, {"type": "if", "start": 31, "end": 34}, {"type": "else", "start": 35, "end": 38}, {"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 36, "end": 37}], "target_lines": [15, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38], "cfg": {"0": {"lineno": 0, "parents": [], "children": [29], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "isNumber", "code": "enter: isNumber(self, s)"}, "2": {"lineno": 12, "parents": [18, 5, 23, 26, 28, 14], "children": [], "function": "isNumber", "code": "exit: isNumber(self, s)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["strip"], "function": "isNumber", "code": "s = s.strip()"}, "4": {"lineno": 14, "parents": [3], "children": [5, 6], "function": "isNumber", "code": "_if: not s"}, "5": {"lineno": 15, "parents": [4], "children": [2], "function": "isNumber", "code": "return False"}, "6": {"lineno": 17, "parents": [4], "children": [7], "function": "isNumber", "code": "seenNum = False"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "isNumber", "code": "seenDot = False"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "isNumber", "code": "seenE = False"}, "9": {"lineno": 21, "parents": [8], "children": [10], "function": "isNumber", "code": "__iv = iter(enumerate(s))"}, "10": {"lineno": 21, "parents": [20, 24, 9, 27, 15], "children": [11, 28], "calls": ["enumerate"], "function": "isNumber", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 21, "parents": [10], "children": [12], "function": "isNumber", "code": "i, c = next(__iv)"}, "12": {"lineno": 22, "parents": [11], "children": [16, 13], "function": "isNumber", "code": "_if: c == '.'"}, "13": {"lineno": 23, "parents": [12], "children": [14, 15], "function": "isNumber", "code": "_if: seenDot or seenE"}, "14": {"lineno": 24, "parents": [13], "children": [2], "function": "isNumber", "code": "return False"}, "15": {"lineno": 25, "parents": [13], "children": [10], "function": "isNumber", "code": "seenDot = True"}, "16": {"lineno": 26, "parents": [12], "children": [17, 21], "function": "isNumber", "code": "_if: c == 'e' or c == 'E'"}, "17": {"lineno": 27, "parents": [16], "children": [18, 19], "function": "isNumber", "code": "_if: seenE or not seenNum"}, "18": {"lineno": 28, "parents": [17], "children": [2], "function": "isNumber", "code": "return False"}, "19": {"lineno": 29, "parents": [17], "children": [20], "function": "isNumber", "code": "seenE = True"}, "20": {"lineno": 30, "parents": [19], "children": [10], "function": "isNumber", "code": "seenNum = False"}, "21": {"lineno": 31, "parents": [16], "children": [25, 22], "function": "isNumber", "code": "_if: c in '+-'"}, "22": {"lineno": 32, "parents": [21], "children": [24, 23], "function": "isNumber", "code": "_if: i > 0 and s[i - 1] not in 'eE'"}, "23": {"lineno": 33, "parents": [22], "children": [2], "function": "isNumber", "code": "return False"}, "24": {"lineno": 34, "parents": [22], "children": [10], "function": "isNumber", "code": "seenNum = False"}, "25": {"lineno": 36, "parents": [21], "children": [26, 27], "calls": ["isdigit"], "function": "isNumber", "code": "_if: not c.isdigit()"}, "26": {"lineno": 37, "parents": [25], "children": [2], "function": "isNumber", "code": "return False"}, "27": {"lineno": 38, "parents": [25], "children": [10], "function": "isNumber", "code": "seenNum = True"}, "28": {"lineno": 40, "parents": [10], "children": [2], "function": "isNumber", "code": "return seenNum"}, "29": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 73, "task_title": "Set Matrix Zeroes", "difficulty": 2, "func_name": "setZeroes", "description": "Given an `m x n` integer matrix `matrix`, if an element is `0`, set its entire\nrow and column to `0`'s.\n\nYou must do it in place.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def setZeroes(self, matrix: List[List[int]]) -> None:\n    m = len(matrix)\n    n = len(matrix[0])\n    shouldFillFirstRow = 0 in matrix[0]\n    shouldFillFirstCol = 0 in list(zip(*matrix))[0]\n\n    for i in range(1, m):\n      for j in range(1, n):\n        if matrix[i][j] == 0:\n          matrix[i][0] = 0\n          matrix[0][j] = 0\n\n    for i in range(1, m):\n      for j in range(1, n):\n        if matrix[i][0] == 0 or matrix[0][j] == 0:\n          matrix[i][j] = 0\n\n    if shouldFillFirstRow:\n      matrix[0] = [0] * n\n\n    if shouldFillFirstCol:\n      for row in matrix:\n        row[0] = 0\n", "blocks": [{"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 32, "end": 34}, {"type": "if", "start": 20, "end": 22}, {"type": "if", "start": 26, "end": 27}], "target_lines": [21, 22, 27, 30, 33, 34], "cfg": {"0": {"lineno": 0, "parents": [], "children": [31], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "setZeroes", "code": "enter: setZeroes(self, matrix)"}, "2": {"lineno": 12, "parents": [26, 28], "children": [], "function": "setZeroes", "code": "exit: setZeroes(self, matrix)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "setZeroes", "code": "m = len(matrix)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "setZeroes", "code": "n = len(matrix[0])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "setZeroes", "code": "shouldFillFirstRow = 0 in matrix[0]"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "setZeroes", "code": "shouldFillFirstCol = 0 in list(zip(*matrix))[0]"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "setZeroes", "code": "__iv = iter(range(1, m))"}, "8": {"lineno": 18, "parents": [11, 7], "children": [16, 9], "calls": ["range"], "function": "setZeroes", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "setZeroes", "code": "i = next(__iv)"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "setZeroes", "code": "__iv = iter(range(1, n))"}, "11": {"lineno": 19, "parents": [10, 13, 15], "children": [8, 12], "calls": ["range"], "function": "setZeroes", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 19, "parents": [11], "children": [13], "function": "setZeroes", "code": "j = next(__iv)"}, "13": {"lineno": 20, "parents": [12], "children": [11, 14], "function": "setZeroes", "code": "_if: matrix[i][j] == 0"}, "14": {"lineno": 21, "parents": [13], "children": [15], "function": "setZeroes", "code": "matrix[i][0] = 0"}, "15": {"lineno": 22, "parents": [14], "children": [11], "function": "setZeroes", "code": "matrix[0][j] = 0"}, "16": {"lineno": 24, "parents": [8], "children": [17], "function": "setZeroes", "code": "__iv = iter(range(1, m))"}, "17": {"lineno": 24, "parents": [16, 20], "children": [24, 18], "calls": ["range"], "function": "setZeroes", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 24, "parents": [17], "children": [19], "function": "setZeroes", "code": "i = next(__iv)"}, "19": {"lineno": 25, "parents": [18], "children": [20], "function": "setZeroes", "code": "__iv = iter(range(1, n))"}, "20": {"lineno": 25, "parents": [19, 22, 23], "children": [17, 21], "calls": ["range"], "function": "setZeroes", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 25, "parents": [20], "children": [22], "function": "setZeroes", "code": "j = next(__iv)"}, "22": {"lineno": 26, "parents": [21], "children": [20, 23], "function": "setZeroes", "code": "_if: matrix[i][0] == 0 or matrix[0][j] == 0"}, "23": {"lineno": 27, "parents": [22], "children": [20], "function": "setZeroes", "code": "matrix[i][j] = 0"}, "24": {"lineno": 29, "parents": [17], "children": [25, 26], "function": "setZeroes", "code": "_if: shouldFillFirstRow"}, "25": {"lineno": 30, "parents": [24], "children": [26], "function": "setZeroes", "code": "matrix[0] = [0] * n"}, "26": {"lineno": 32, "parents": [24, 25], "children": [2, 27], "function": "setZeroes", "code": "_if: shouldFillFirstCol"}, "27": {"lineno": 33, "parents": [26], "children": [28], "function": "setZeroes", "code": "__iv = iter(matrix)"}, "28": {"lineno": 33, "parents": [27, 30], "children": [2, 29], "function": "setZeroes", "code": "_for: __iv.__length__hint__() > 0"}, "29": {"lineno": 33, "parents": [28], "children": [30], "function": "setZeroes", "code": "row = next(__iv)"}, "30": {"lineno": 34, "parents": [29], "children": [28], "function": "setZeroes", "code": "row[0] = 0"}, "31": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 97, "task_title": "Interleaving String", "difficulty": 2, "func_name": "isInterleave", "description": "Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an\ninterleaving of `s1` and `s2`.\n\nAn interleaving of two strings `s` and `t` is a configuration where `s` and\n`t` are divided into `n` and `m` substrings respectively, such that:\n\n* `s = s1 + s2 + ... + sn`\n* `t = t1 + t2 + ... + tm`\n* `|n - m| <= 1`\n* The interleaving is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`\n\nNote: `a + b` is the concatenation of strings `a` and `b`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n    m = len(s1)\n    n = len(s2)\n    if m + n != len(s3):\n      return False\n\n    dp=[]\n    for _ in range(m + 1):\n      dp.append([False] * (n + 1))\n    dp[0][0] = True\n\n    for i in range(1, m + 1):\n      dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n\n    for j in range(1, n + 1):\n      dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n\n    for i in range(1, m + 1):\n      for j in range(1, n + 1):\n        dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n\n    return dp[m][n]\n", "blocks": [{"type": "if", "start": 15, "end": 16}], "target_lines": [16], "cfg": {"0": {"lineno": 0, "parents": [], "children": [29], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "isInterleave", "code": "enter: isInterleave(self, s1, s2, s3)"}, "2": {"lineno": 12, "parents": [28, 6], "children": [], "function": "isInterleave", "code": "exit: isInterleave(self, s1, s2, s3)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "isInterleave", "code": "m = len(s1)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "isInterleave", "code": "n = len(s2)"}, "5": {"lineno": 15, "parents": [4], "children": [6, 7], "calls": ["len"], "function": "isInterleave", "code": "_if: m + n != len(s3)"}, "6": {"lineno": 16, "parents": [5], "children": [2], "function": "isInterleave", "code": "return False"}, "7": {"lineno": 18, "parents": [5], "children": [8], "function": "isInterleave", "code": "dp = []"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "isInterleave", "code": "__iv = iter(range(m + 1))"}, "9": {"lineno": 19, "parents": [8, 11], "children": [10, 12], "calls": ["range"], "function": "isInterleave", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "isInterleave", "code": "_ = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [9], "calls": ["append"], "function": "isInterleave", "code": "dp.append([False] * (n + 1))"}, "12": {"lineno": 21, "parents": [9], "children": [13], "function": "isInterleave", "code": "dp[0][0] = True"}, "13": {"lineno": 23, "parents": [12], "children": [14], "function": "isInterleave", "code": "__iv = iter(range(1, m + 1))"}, "14": {"lineno": 23, "parents": [16, 13], "children": [17, 15], "calls": ["range"], "function": "isInterleave", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 23, "parents": [14], "children": [16], "function": "isInterleave", "code": "i = next(__iv)"}, "16": {"lineno": 24, "parents": [15], "children": [14], "function": "isInterleave", "code": "dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]"}, "17": {"lineno": 26, "parents": [14], "children": [18], "function": "isInterleave", "code": "__iv = iter(range(1, n + 1))"}, "18": {"lineno": 26, "parents": [17, 20], "children": [19, 21], "calls": ["range"], "function": "isInterleave", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 26, "parents": [18], "children": [20], "function": "isInterleave", "code": "j = next(__iv)"}, "20": {"lineno": 27, "parents": [19], "children": [18], "function": "isInterleave", "code": "dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]"}, "21": {"lineno": 29, "parents": [18], "children": [22], "function": "isInterleave", "code": "__iv = iter(range(1, m + 1))"}, "22": {"lineno": 29, "parents": [25, 21], "children": [28, 23], "calls": ["range"], "function": "isInterleave", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 29, "parents": [22], "children": [24], "function": "isInterleave", "code": "i = next(__iv)"}, "24": {"lineno": 30, "parents": [23], "children": [25], "function": "isInterleave", "code": "__iv = iter(range(1, n + 1))"}, "25": {"lineno": 30, "parents": [24, 27], "children": [26, 22], "calls": ["range"], "function": "isInterleave", "code": "_for: __iv.__length__hint__() > 0"}, "26": {"lineno": 30, "parents": [25], "children": [27], "function": "isInterleave", "code": "j = next(__iv)"}, "27": {"lineno": 31, "parents": [26], "children": [25], "function": "isInterleave", "code": "dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i + j - 1] or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])"}, "28": {"lineno": 33, "parents": [22], "children": [2], "function": "isInterleave", "code": "return dp[m][n]"}, "29": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 126, "task_title": "Word Ladder II", "difficulty": 3, "func_name": "findLadders", "description": "A transformation sequence from word `beginWord` to word `endWord` using a\ndictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... ->\nsk` such that:\n\n* Every adjacent pair of words differs by a single letter.\n* Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n* `sk == endWord`\n\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`,\nreturn all the shortest transformation sequences from `beginWord` to\n`endWord`, or an empty list if no such sequence exists. Each sequence should\nbe returned as a list of the words `[beginWord, s1, s2, ..., sk]`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator, Set\n\nclass Solution:\n  def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n    from collections import deque\n    def connected(a: str, b: str) -> bool:\n      k = 0\n      for i in range(len(a)):\n        if a[i] != b[i]:\n          k += 1\n      return k == 1\n\n    if endWord not in wordList:\n      return []\n\n    visited = set([beginWord])\n\n    q = deque([beginWord])\n    nodes = []\n    find = False\n\n    while q and not find:\n      nodes.append(q.copy())\n      n = len(q)\n      for _ in range(n):\n        word = q.popleft()\n        for item in wordList:\n          if item in visited:\n            continue\n          if not connected(word, item):\n            continue\n          if item == endWord:\n            find = True\n            break\n          visited.add(item)\n          q.append(item)\n        if find:\n          break\n\n    if not find:\n      return []\n\n    ans = []\n\n    def backtracking(word, level: int, steps: List[str]):\n      if word == beginWord:\n        ans.append(steps[::-1])\n        return\n      if level < 0:\n        return\n      for item in nodes[level]:\n        if connected(item, word):\n          steps.append(item)\n          backtracking(item, level-1, steps)\n          steps.pop()\n\n    backtracking(endWord, len(nodes)-1, [endWord])\n    return ans\n", "blocks": [{"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 48, "end": 49}, {"type": "if", "start": 54, "end": 56}, {"type": "if", "start": 57, "end": 58}, {"type": "if", "start": 17, "end": 18}, {"type": "if", "start": 45, "end": 46}, {"type": "if", "start": 60, "end": 63}, {"type": "if", "start": 36, "end": 37}, {"type": "if", "start": 38, "end": 39}, {"type": "if", "start": 40, "end": 42}], "target_lines": [18, 22, 37, 39, 41, 42, 46, 49, 55, 56, 58, 61, 62, 63], "cfg": {"0": {"lineno": 0, "parents": [], "children": [58], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [12], "function": "findLadders", "code": "enter: findLadders(self, beginWord, endWord, wordList)"}, "2": {"lineno": 12, "parents": [40, 57, 13], "children": [], "function": "findLadders", "code": "exit: findLadders(self, beginWord, endWord, wordList)"}, "3": {"lineno": 14, "parents": [52, 30], "children": [5], "function": "connected", "code": "enter: connected(a, b)"}, "4": {"lineno": 14, "parents": [11], "children": [], "function": "connected", "code": "exit: connected(a, b)"}, "5": {"lineno": 15, "parents": [3], "children": [6], "function": "connected", "code": "k = 0"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "connected", "code": "__iv = iter(range(len(a)))"}, "7": {"lineno": 16, "parents": [9, 10, 6], "children": [8, 11], "calls": ["len", "range"], "function": "connected", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 16, "parents": [7], "children": [9], "function": "connected", "code": "i = next(__iv)"}, "9": {"lineno": 17, "parents": [8], "children": [10, 7], "function": "connected", "code": "_if: a[i] != b[i]"}, "10": {"lineno": 18, "parents": [9], "children": [7], "function": "connected", "code": "k += 1"}, "11": {"lineno": 19, "parents": [7], "children": [4], "function": "connected", "code": "return k == 1"}, "12": {"lineno": 21, "parents": [1], "children": [13, 14], "function": "findLadders", "code": "_if: endWord not in wordList"}, "13": {"lineno": 22, "parents": [12], "children": [2], "function": "findLadders", "code": "return []"}, "14": {"lineno": 24, "parents": [12], "children": [15], "calls": ["set"], "function": "findLadders", "code": "visited = set([beginWord])"}, "15": {"lineno": 26, "parents": [14], "children": [16], "calls": ["deque"], "function": "findLadders", "code": "q = deque([beginWord])"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "findLadders", "code": "nodes = []"}, "17": {"lineno": 28, "parents": [16], "children": [18], "function": "findLadders", "code": "find = False"}, "18": {"lineno": 30, "parents": [17, 22], "children": [19, 39], "function": "findLadders", "code": "_while: q and (not find)"}, "19": {"lineno": 31, "parents": [18], "children": [20], "calls": ["copy", "append"], "function": "findLadders", "code": "nodes.append(q.copy())"}, "20": {"lineno": 32, "parents": [19], "children": [21], "calls": ["len"], "function": "findLadders", "code": "n = len(q)"}, "21": {"lineno": 33, "parents": [20], "children": [22], "function": "findLadders", "code": "__iv = iter(range(n))"}, "22": {"lineno": 33, "parents": [37, 21], "children": [18, 23], "calls": ["range"], "function": "findLadders", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 33, "parents": [22], "children": [24], "function": "findLadders", "code": "_ = next(__iv)"}, "24": {"lineno": 34, "parents": [23], "children": [25], "calls": ["popleft"], "function": "findLadders", "code": "word = q.popleft()"}, "25": {"lineno": 35, "parents": [24], "children": [26], "function": "findLadders", "code": "__iv = iter(wordList)"}, "26": {"lineno": 35, "parents": [25, 36, 29, 31], "children": [27, 37], "function": "findLadders", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 35, "parents": [26], "children": [28], "function": "findLadders", "code": "item = next(__iv)"}, "28": {"lineno": 36, "parents": [27], "children": [29, 30], "function": "findLadders", "code": "_if: item in visited"}, "29": {"lineno": 37, "parents": [28], "children": [26], "function": "findLadders", "code": "continue"}, "30": {"lineno": 38, "parents": [28], "children": [32, 31], "calls": ["connected"], "function": "findLadders", "code": "_if: not connected(word, item)"}, "31": {"lineno": 39, "parents": [4, 30], "children": [26], "function": "findLadders", "code": "continue"}, "32": {"lineno": 40, "parents": [4, 30], "children": [33, 35], "function": "findLadders", "code": "_if: item == endWord"}, "33": {"lineno": 41, "parents": [32], "children": [34], "function": "findLadders", "code": "find = True"}, "34": {"lineno": 42, "parents": [33], "children": [37], "function": "findLadders", "code": "break"}, "35": {"lineno": 43, "parents": [32], "children": [36], "calls": ["add"], "function": "findLadders", "code": "visited.add(item)"}, "36": {"lineno": 44, "parents": [35], "children": [26], "calls": ["append"], "function": "findLadders", "code": "q.append(item)"}, "37": {"lineno": 45, "parents": [34, 26], "children": [38, 22], "function": "findLadders", "code": "_if: find"}, "38": {"lineno": 46, "parents": [37], "children": [], "function": "findLadders", "code": "break"}, "39": {"lineno": 48, "parents": [18], "children": [40, 41], "function": "findLadders", "code": "_if: not find"}, "40": {"lineno": 49, "parents": [39], "children": [2], "function": "findLadders", "code": "return []"}, "41": {"lineno": 51, "parents": [39], "children": [56], "function": "findLadders", "code": "ans = []"}, "42": {"lineno": 53, "parents": [56, 54], "children": [44], "function": "backtracking", "code": "enter: backtracking(word, level, steps)"}, "43": {"lineno": 53, "parents": [48, 50, 46], "children": [], "function": "backtracking", "code": "exit: backtracking(word, level, steps)"}, "44": {"lineno": 54, "parents": [42], "children": [45, 47], "function": "backtracking", "code": "_if: word == beginWord"}, "45": {"lineno": 55, "parents": [44], "children": [46], "calls": ["append"], "function": "backtracking", "code": "ans.append(steps[::-1])"}, "46": {"lineno": 56, "parents": [45], "children": [43], "function": "backtracking", "code": "return"}, "47": {"lineno": 57, "parents": [44], "children": [48, 49], "function": "backtracking", "code": "_if: level < 0"}, "48": {"lineno": 58, "parents": [47], "children": [43], "function": "backtracking", "code": "return"}, "49": {"lineno": 59, "parents": [47], "children": [50], "function": "backtracking", "code": "__iv = iter(nodes[level])"}, "50": {"lineno": 59, "parents": [49, 52, 4, 55], "children": [43, 51], "function": "backtracking", "code": "_for: __iv.__length__hint__() > 0"}, "51": {"lineno": 59, "parents": [50], "children": [52], "function": "backtracking", "code": "item = next(__iv)"}, "52": {"lineno": 60, "parents": [51], "children": [50, 53], "calls": ["connected"], "function": "backtracking", "code": "_if: connected(item, word)"}, "53": {"lineno": 61, "parents": [52, 4], "children": [54], "calls": ["append"], "function": "backtracking", "code": "steps.append(item)"}, "54": {"lineno": 62, "parents": [53], "children": [55], "calls": ["backtracking"], "function": "backtracking", "code": "backtracking(item, level - 1, steps)"}, "55": {"lineno": 63, "parents": [43, 54], "children": [50], "calls": ["pop"], "function": "backtracking", "code": "steps.pop()"}, "56": {"lineno": 65, "parents": [41], "children": [57], "calls": ["len", "backtracking"], "function": "findLadders", "code": "backtracking(endWord, len(nodes) - 1, [endWord])"}, "57": {"lineno": 66, "parents": [56, 43], "children": [2], "function": "findLadders", "code": "return ans"}, "58": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 130, "task_title": "Surrounded Regions", "difficulty": 2, "func_name": "solve", "description": "Given an `m x n` matrix `board` containing `'X'` and `'O'`, capture all\nregions that are 4-directionally surrounded by `'X'`.\n\nA region is captured by flipping all `'O'`s into `'X'`s in that surrounded\nregion.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def solve(self, board: List[List[str]]) -> None:\n    if not board:\n      return\n\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    m = len(board)\n    n = len(board[0])\n    q = collections.deque()\n\n    for i in range(m):\n      for j in range(n):\n        if i * j == 0 or i == m - 1 or j == n - 1:\n          if board[i][j] == 'O':\n            q.append((i, j))\n            board[i][j] = '*'\n\n    while q:\n      i, j = q.popleft()\n      for dx, dy in dirs:\n        x = i + dx\n        y = j + dy\n        if x < 0 or x == m or y < 0 or y == n:\n          continue\n        if board[x][y] != 'O':\n          continue\n        q.append((x, y))\n        board[x][y] = '*'\n\n    for row in board:\n      for i, c in enumerate(row):\n        if c == '*':\n          row[i] = 'O'\n        else:\n          row[i] = 'X'\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "if", "start": 23, "end": 26}, {"type": "if", "start": 33, "end": 34}, {"type": "if", "start": 35, "end": 36}, {"type": "if", "start": 42, "end": 43}, {"type": "else", "start": 44, "end": 45}, {"type": "if", "start": 24, "end": 26}], "target_lines": [14, 24, 25, 26, 34, 36, 43, 45], "cfg": {"0": {"lineno": 0, "parents": [], "children": [41], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "solve", "code": "enter: solve(self, board)"}, "2": {"lineno": 12, "parents": [33, 4], "children": [], "function": "solve", "code": "exit: solve(self, board)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "function": "solve", "code": "_if: not board"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "solve", "code": "return"}, "5": {"lineno": 16, "parents": [3], "children": [6], "function": "solve", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "6": {"lineno": 17, "parents": [5], "children": [7], "calls": ["len"], "function": "solve", "code": "m = len(board)"}, "7": {"lineno": 18, "parents": [6], "children": [8], "calls": ["len"], "function": "solve", "code": "n = len(board[0])"}, "8": {"lineno": 19, "parents": [7], "children": [9], "calls": ["deque"], "function": "solve", "code": "q = collections.deque()"}, "9": {"lineno": 21, "parents": [8], "children": [10], "function": "solve", "code": "__iv = iter(range(m))"}, "10": {"lineno": 21, "parents": [9, 13], "children": [19, 11], "calls": ["range"], "function": "solve", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 21, "parents": [10], "children": [12], "function": "solve", "code": "i = next(__iv)"}, "12": {"lineno": 22, "parents": [11], "children": [13], "function": "solve", "code": "__iv = iter(range(n))"}, "13": {"lineno": 22, "parents": [16, 18, 12, 15], "children": [10, 14], "calls": ["range"], "function": "solve", "code": "_for: __iv.__length__hint__() > 0"}, "14": {"lineno": 22, "parents": [13], "children": [15], "function": "solve", "code": "j = next(__iv)"}, "15": {"lineno": 23, "parents": [14], "children": [16, 13], "function": "solve", "code": "_if: i * j == 0 or i == m - 1 or j == n - 1"}, "16": {"lineno": 24, "parents": [15], "children": [17, 13], "function": "solve", "code": "_if: board[i][j] == 'O'"}, "17": {"lineno": 25, "parents": [16], "children": [18], "calls": ["append"], "function": "solve", "code": "q.append((i, j))"}, "18": {"lineno": 26, "parents": [17], "children": [13], "function": "solve", "code": "board[i][j] = '*'"}, "19": {"lineno": 28, "parents": [10, 22], "children": [32, 20], "function": "solve", "code": "_while: q"}, "20": {"lineno": 29, "parents": [19], "children": [21], "calls": ["popleft"], "function": "solve", "code": "i, j = q.popleft()"}, "21": {"lineno": 30, "parents": [20], "children": [22], "function": "solve", "code": "__iv = iter(dirs)"}, "22": {"lineno": 30, "parents": [29, 27, 21, 31], "children": [19, 23], "function": "solve", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 30, "parents": [22], "children": [24], "function": "solve", "code": "dx, dy = next(__iv)"}, "24": {"lineno": 31, "parents": [23], "children": [25], "function": "solve", "code": "x = i + dx"}, "25": {"lineno": 32, "parents": [24], "children": [26], "function": "solve", "code": "y = j + dy"}, "26": {"lineno": 33, "parents": [25], "children": [27, 28], "function": "solve", "code": "_if: x < 0 or x == m or y < 0 or (y == n)"}, "27": {"lineno": 34, "parents": [26], "children": [22], "function": "solve", "code": "continue"}, "28": {"lineno": 35, "parents": [26], "children": [29, 30], "function": "solve", "code": "_if: board[x][y] != 'O'"}, "29": {"lineno": 36, "parents": [28], "children": [22], "function": "solve", "code": "continue"}, "30": {"lineno": 37, "parents": [28], "children": [31], "calls": ["append"], "function": "solve", "code": "q.append((x, y))"}, "31": {"lineno": 38, "parents": [30], "children": [22], "function": "solve", "code": "board[x][y] = '*'"}, "32": {"lineno": 40, "parents": [19], "children": [33], "function": "solve", "code": "__iv = iter(board)"}, "33": {"lineno": 40, "parents": [32, 36], "children": [34, 2], "function": "solve", "code": "_for: __iv.__length__hint__() > 0"}, "34": {"lineno": 40, "parents": [33], "children": [35], "function": "solve", "code": "row = next(__iv)"}, "35": {"lineno": 41, "parents": [34], "children": [36], "function": "solve", "code": "__iv = iter(enumerate(row))"}, "36": {"lineno": 41, "parents": [40, 35, 39], "children": [33, 37], "calls": ["enumerate"], "function": "solve", "code": "_for: __iv.__length__hint__() > 0"}, "37": {"lineno": 41, "parents": [36], "children": [38], "function": "solve", "code": "i, c = next(__iv)"}, "38": {"lineno": 42, "parents": [37], "children": [40, 39], "function": "solve", "code": "_if: c == '*'"}, "39": {"lineno": 43, "parents": [38], "children": [36], "function": "solve", "code": "row[i] = 'O'"}, "40": {"lineno": 45, "parents": [38], "children": [36], "function": "solve", "code": "row[i] = 'X'"}, "41": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 132, "task_title": "Palindrome Partitioning II", "difficulty": 3, "func_name": "minCut", "description": "Given a string `s`, partition `s` such that every substring of the partition\nis a palindrome.\n\nReturn the minimum cuts needed for a palindrome partitioning of `s`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minCut(self, s: str) -> int:\n    n = len(s)\n    isPalindrome=[]\n    for _ in range(n):\n      isPalindrome.append([True] * n)\n    dp = [n] * n\n\n    for l in range(2, n + 1):\n      i = 0\n      for j in range(l - 1, n):\n        isPalindrome[i][j] = s[i] == s[j] and isPalindrome[i + 1][j - 1]\n        i += 1\n\n    for i in range(n):\n      if isPalindrome[0][i]:\n        dp[i] = 0\n        continue\n\n      for j in range(i):\n        if isPalindrome[j + 1][i]:\n          dp[i] = min(dp[i], dp[j] + 1)\n\n    return dp[-1]\n", "blocks": [{"type": "if", "start": 26, "end": 28}, {"type": "if", "start": 31, "end": 32}], "target_lines": [27, 28, 32], "cfg": {"0": {"lineno": 0, "parents": [], "children": [31], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minCut", "code": "enter: minCut(self, s)"}, "2": {"lineno": 12, "parents": [30], "children": [], "function": "minCut", "code": "exit: minCut(self, s)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "minCut", "code": "n = len(s)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "minCut", "code": "isPalindrome = []"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "minCut", "code": "__iv = iter(range(n))"}, "6": {"lineno": 15, "parents": [8, 5], "children": [9, 7], "calls": ["range"], "function": "minCut", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 15, "parents": [6], "children": [8], "function": "minCut", "code": "_ = next(__iv)"}, "8": {"lineno": 16, "parents": [7], "children": [6], "calls": ["append"], "function": "minCut", "code": "isPalindrome.append([True] * n)"}, "9": {"lineno": 17, "parents": [6], "children": [10], "function": "minCut", "code": "dp = [n] * n"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "minCut", "code": "__iv = iter(range(2, n + 1))"}, "11": {"lineno": 19, "parents": [10, 15], "children": [19, 12], "calls": ["range"], "function": "minCut", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 19, "parents": [11], "children": [13], "function": "minCut", "code": "l = next(__iv)"}, "13": {"lineno": 20, "parents": [12], "children": [14], "function": "minCut", "code": "i = 0"}, "14": {"lineno": 21, "parents": [13], "children": [15], "function": "minCut", "code": "__iv = iter(range(l - 1, n))"}, "15": {"lineno": 21, "parents": [18, 14], "children": [16, 11], "calls": ["range"], "function": "minCut", "code": "_for: __iv.__length__hint__() > 0"}, "16": {"lineno": 21, "parents": [15], "children": [17], "function": "minCut", "code": "j = next(__iv)"}, "17": {"lineno": 22, "parents": [16], "children": [18], "function": "minCut", "code": "isPalindrome[i][j] = s[i] == s[j] and isPalindrome[i + 1][j - 1]"}, "18": {"lineno": 23, "parents": [17], "children": [15], "function": "minCut", "code": "i += 1"}, "19": {"lineno": 25, "parents": [11], "children": [20], "function": "minCut", "code": "__iv = iter(range(n))"}, "20": {"lineno": 25, "parents": [24, 26, 19], "children": [21, 30], "calls": ["range"], "function": "minCut", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 25, "parents": [20], "children": [22], "function": "minCut", "code": "i = next(__iv)"}, "22": {"lineno": 26, "parents": [21], "children": [25, 23], "function": "minCut", "code": "_if: isPalindrome[0][i]"}, "23": {"lineno": 27, "parents": [22], "children": [24], "function": "minCut", "code": "dp[i] = 0"}, "24": {"lineno": 28, "parents": [23], "children": [20], "function": "minCut", "code": "continue"}, "25": {"lineno": 30, "parents": [22], "children": [26], "function": "minCut", "code": "__iv = iter(range(i))"}, "26": {"lineno": 30, "parents": [25, 28, 29], "children": [27, 20], "calls": ["range"], "function": "minCut", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 30, "parents": [26], "children": [28], "function": "minCut", "code": "j = next(__iv)"}, "28": {"lineno": 31, "parents": [27], "children": [26, 29], "function": "minCut", "code": "_if: isPalindrome[j + 1][i]"}, "29": {"lineno": 32, "parents": [28], "children": [26], "calls": ["min"], "function": "minCut", "code": "dp[i] = min(dp[i], dp[j] + 1)"}, "30": {"lineno": 34, "parents": [20], "children": [2], "function": "minCut", "code": "return dp[-1]"}, "31": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 218, "task_title": "The Skyline Problem", "difficulty": 3, "func_name": "getSkyline", "description": "A city's skyline is the outer contour of the silhouette formed by all the\nbuildings in that city when viewed from a distance. Given the locations and\nheights of all the buildings, return the skyline formed by these buildings\ncollectively.\n\nThe geometric information of each building is given in the array `buildings`\nwhere `buildings[i] = [lefti, righti, heighti]`:\n\n* `lefti` is the x coordinate of the left edge of the `ith` building.\n* `righti` is the x coordinate of the right edge of the `ith` building.\n* `heighti` is the height of the `ith` building.\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely\nflat surface at height `0`.\n\nThe skyline should be represented as a list of \"key points\" sorted by their\nx-coordinate in the form `[[x1,y1],[x2,y2],...]`. Each key point is the left\nendpoint of some horizontal segment in the skyline except the last point in\nthe list, which always has a y-coordinate `0` and is used to mark the\nskyline's termination where the rightmost building ends. Any ground between\nthe leftmost and rightmost buildings should be part of the skyline's contour.\n\nNote: There must be no consecutive horizontal lines of equal height in the\noutput skyline. For instance, `[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]` is\nnot acceptable; the three lines of height 5 should be merged into one in the\nfinal output as such: `[...,[2 3],[4 5],[12 7],...]`\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n    n = len(buildings)\n    if n == 0:\n      return []\n    if n == 1:\n      left, right, height = buildings[0]\n      return [[left, height], [right, 0]]\n\n    left = self.getSkyline(buildings[:n // 2])\n    right = self.getSkyline(buildings[n // 2:])\n    return self._merge(left, right)\n\n  def _merge(self, left: List[List[int]], right: List[List[int]]) -> List[List[int]]:\n    ans = []\n    i = 0\n    j = 0\n    leftY = 0\n    rightY = 0\n\n    while i < len(left) and j < len(right):\n      if left[i][0] < right[j][0]:\n        leftY = left[i][1]\n        self._addPoint(ans, left[i][0], max(left[i][1], rightY))\n        i += 1\n      else:\n        rightY = right[j][1]\n        self._addPoint(ans, right[j][0], max(right[j][1], leftY))\n        j += 1\n\n    while i < len(left):\n      self._addPoint(ans, left[i][0], left[i][1])\n      i += 1\n\n    while j < len(right):\n      self._addPoint(ans, right[j][0], right[j][1])\n      j += 1\n\n    return ans\n\n  def _addPoint(self, ans: List[List[int]], x: int, y: int) -> None:\n    if ans and ans[-1][0] == x:\n      ans[-1][1] = y\n      return\n    if ans and ans[-1][1] == y:\n      return\n    ans.append([x, y])\n", "blocks": [{"type": "if", "start": 14, "end": 15}, {"type": "if", "start": 16, "end": 18}, {"type": "if", "start": 52, "end": 54}, {"type": "if", "start": 55, "end": 56}, {"type": "if", "start": 32, "end": 35}, {"type": "else", "start": 36, "end": 39}], "target_lines": [15, 17, 18, 33, 34, 35, 37, 38, 39, 53, 54, 56], "cfg": {"0": {"lineno": 0, "parents": [], "children": [42], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [9, 10], "children": [3], "function": "getSkyline", "code": "enter: getSkyline(self, buildings)"}, "2": {"lineno": 12, "parents": [8, 11, 5], "children": [], "function": "getSkyline", "code": "exit: getSkyline(self, buildings)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "getSkyline", "code": "n = len(buildings)"}, "4": {"lineno": 14, "parents": [3], "children": [5, 6], "function": "getSkyline", "code": "_if: n == 0"}, "5": {"lineno": 15, "parents": [4], "children": [2], "function": "getSkyline", "code": "return []"}, "6": {"lineno": 16, "parents": [4], "children": [9, 7], "function": "getSkyline", "code": "_if: n == 1"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "getSkyline", "code": "left, right, height = buildings[0]"}, "8": {"lineno": 18, "parents": [7], "children": [2], "function": "getSkyline", "code": "return [[left, height], [right, 0]]"}, "9": {"lineno": 20, "parents": [6], "children": [10], "calls": ["getSkyline"], "function": "getSkyline", "code": "left = self.getSkyline(buildings[:n // 2])"}, "10": {"lineno": 21, "parents": [9, 2], "children": [11], "calls": ["getSkyline", "_merge"], "function": "getSkyline", "code": "right = self.getSkyline(buildings[n // 2:])"}, "11": {"lineno": 22, "parents": [10, 2, 13], "children": [2], "function": "getSkyline", "code": "return self._merge(left, right)"}, "12": {"lineno": 24, "parents": [10], "children": [14], "function": "_merge", "code": "enter: _merge(self, left, right)"}, "13": {"lineno": 24, "parents": [33], "children": [], "function": "_merge", "code": "exit: _merge(self, left, right)"}, "14": {"lineno": 25, "parents": [12], "children": [15], "function": "_merge", "code": "ans = []"}, "15": {"lineno": 26, "parents": [14], "children": [16], "function": "_merge", "code": "i = 0"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "_merge", "code": "j = 0"}, "17": {"lineno": 28, "parents": [16], "children": [18], "function": "_merge", "code": "leftY = 0"}, "18": {"lineno": 29, "parents": [17], "children": [19], "function": "_merge", "code": "rightY = 0"}, "19": {"lineno": 31, "parents": [18, 26, 23], "children": [27, 20], "function": "_merge", "code": "_while: i < len(left) and j < len(right)"}, "20": {"lineno": 32, "parents": [19], "children": [24, 21], "function": "_merge", "code": "_if: left[i][0] < right[j][0]"}, "21": {"lineno": 33, "parents": [20], "children": [22], "function": "_merge", "code": "leftY = left[i][1]"}, "22": {"lineno": 34, "parents": [21], "children": [23], "calls": ["max", "_addPoint"], "function": "_merge", "code": "self._addPoint(ans, left[i][0], max(left[i][1], rightY))"}, "23": {"lineno": 35, "parents": [35, 22], "children": [19], "function": "_merge", "code": "i += 1"}, "24": {"lineno": 37, "parents": [20], "children": [25], "function": "_merge", "code": "rightY = right[j][1]"}, "25": {"lineno": 38, "parents": [24], "children": [26], "calls": ["max", "_addPoint"], "function": "_merge", "code": "self._addPoint(ans, right[j][0], max(right[j][1], leftY))"}, "26": {"lineno": 39, "parents": [25, 35], "children": [19], "function": "_merge", "code": "j += 1"}, "27": {"lineno": 41, "parents": [19, 29], "children": [28, 30], "calls": ["len"], "function": "_merge", "code": "_while: i < len(left)"}, "28": {"lineno": 42, "parents": [27], "children": [29], "calls": ["_addPoint"], "function": "_merge", "code": "self._addPoint(ans, left[i][0], left[i][1])"}, "29": {"lineno": 43, "parents": [35, 28], "children": [27], "function": "_merge", "code": "i += 1"}, "30": {"lineno": 45, "parents": [32, 27], "children": [33, 31], "calls": ["len"], "function": "_merge", "code": "_while: j < len(right)"}, "31": {"lineno": 46, "parents": [30], "children": [32], "calls": ["_addPoint"], "function": "_merge", "code": "self._addPoint(ans, right[j][0], right[j][1])"}, "32": {"lineno": 47, "parents": [35, 31], "children": [30], "function": "_merge", "code": "j += 1"}, "33": {"lineno": 49, "parents": [30], "children": [13], "function": "_merge", "code": "return ans"}, "34": {"lineno": 51, "parents": [25, 28, 22, 31], "children": [36], "function": "_addPoint", "code": "enter: _addPoint(self, ans, x, y)"}, "35": {"lineno": 51, "parents": [40, 41, 38], "children": [], "function": "_addPoint", "code": "exit: _addPoint(self, ans, x, y)"}, "36": {"lineno": 52, "parents": [34], "children": [37, 39], "function": "_addPoint", "code": "_if: ans and ans[-1][0] == x"}, "37": {"lineno": 53, "parents": [36], "children": [38], "function": "_addPoint", "code": "ans[-1][1] = y"}, "38": {"lineno": 54, "parents": [37], "children": [35], "function": "_addPoint", "code": "return"}, "39": {"lineno": 55, "parents": [36], "children": [40, 41], "function": "_addPoint", "code": "_if: ans and ans[-1][1] == y"}, "40": {"lineno": 56, "parents": [39], "children": [35], "function": "_addPoint", "code": "return"}, "41": {"lineno": 57, "parents": [39], "children": [35], "calls": ["append"], "function": "_addPoint", "code": "ans.append([x, y])"}, "42": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 227, "task_title": "Basic Calculator II", "difficulty": 2, "func_name": "calculate", "description": "Given a string `s` which represents an expression, evaluate this expression\nand return its value.\n\nThe integer division should truncate toward zero.\n\nYou may assume that the given expression is always valid. All intermediate\nresults will be in the range of `[-231, 231 - 1]`.\n\nNote: You are not allowed to use any built-in function which evaluates strings\nas mathematical expressions, such as `eval()`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def calculate(self, s: str) -> int:\n    ans = 0\n    prevNum = 0\n    currNum = 0\n    op = '+'\n\n    for i, c in enumerate(s):\n      if c.isdigit():\n        currNum = currNum * 10 + int(c)\n      if not c.isdigit() and c != ' ' or i == len(s) - 1:\n        if op == '+' or op == '-':\n          ans += prevNum\n          prevNum = currNum if op == '+' else -currNum\n        elif op == '*':\n          prevNum = prevNum * currNum\n        elif op == '/':\n          if prevNum < 0:\n            prevNum = math.ceil(prevNum / currNum)\n          else:\n            prevNum = prevNum // currNum\n        op = c\n        currNum = 0\n\n    return ans + prevNum\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 33}, {"type": "if", "start": 22, "end": 24}, {"type": "if", "start": 25, "end": 26}, {"type": "if", "start": 27, "end": 31}, {"type": "if", "start": 28, "end": 29}, {"type": "else", "start": 30, "end": 31}], "target_lines": [20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33], "cfg": {"0": {"lineno": 0, "parents": [], "children": [25], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "calculate", "code": "enter: calculate(self, s)"}, "2": {"lineno": 12, "parents": [24], "children": [], "function": "calculate", "code": "exit: calculate(self, s)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "calculate", "code": "ans = 0"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "calculate", "code": "prevNum = 0"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "calculate", "code": "currNum = 0"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "calculate", "code": "op = '+'"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "calculate", "code": "__iv = iter(enumerate(s))"}, "8": {"lineno": 18, "parents": [23, 12, 7], "children": [24, 9], "calls": ["enumerate"], "function": "calculate", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "calculate", "code": "i, c = next(__iv)"}, "10": {"lineno": 19, "parents": [9], "children": [11, 12], "calls": ["isdigit"], "function": "calculate", "code": "_if: c.isdigit()"}, "11": {"lineno": 20, "parents": [10], "children": [12], "calls": ["int"], "function": "calculate", "code": "currNum = currNum * 10 + int(c)"}, "12": {"lineno": 21, "parents": [10, 11], "children": [8, 13], "function": "calculate", "code": "_if: not c.isdigit() and c != ' ' or i == len(s) - 1"}, "13": {"lineno": 22, "parents": [12], "children": [16, 14], "function": "calculate", "code": "_if: op == '+' or op == '-'"}, "14": {"lineno": 23, "parents": [13], "children": [15], "function": "calculate", "code": "ans += prevNum"}, "15": {"lineno": 24, "parents": [14], "children": [22], "function": "calculate", "code": "prevNum = currNum if op == '+' else -currNum"}, "16": {"lineno": 25, "parents": [13], "children": [17, 18], "function": "calculate", "code": "_if: op == '*'"}, "17": {"lineno": 26, "parents": [16], "children": [22], "function": "calculate", "code": "prevNum = prevNum * currNum"}, "18": {"lineno": 27, "parents": [16], "children": [19, 22], "function": "calculate", "code": "_if: op == '/'"}, "19": {"lineno": 28, "parents": [18], "children": [20, 21], "function": "calculate", "code": "_if: prevNum < 0"}, "20": {"lineno": 29, "parents": [19], "children": [22], "calls": ["ceil"], "function": "calculate", "code": "prevNum = math.ceil(prevNum / currNum)"}, "21": {"lineno": 31, "parents": [19], "children": [22], "function": "calculate", "code": "prevNum = prevNum // currNum"}, "22": {"lineno": 32, "parents": [17, 18, 20, 21, 15], "children": [23], "function": "calculate", "code": "op = c"}, "23": {"lineno": 33, "parents": [22], "children": [8], "function": "calculate", "code": "currNum = 0"}, "24": {"lineno": 35, "parents": [8], "children": [2], "function": "calculate", "code": "return ans + prevNum"}, "25": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 289, "task_title": "Game of Life", "difficulty": 2, "func_name": "gameOfLife", "description": "According to Wikipedia's article: \"The Game of Life, also known simply as\nLife, is a cellular automaton devised by the British mathematician John Horton\nConway in 1970.\"\n\nThe board is made up of an `m x n` grid of cells, where each cell has an\ninitial state: live (represented by a `1`) or dead (represented by a `0`).\nEach cell interacts with its eight neighbors (horizontal, vertical, diagonal)\nusing the following four rules (taken from the above Wikipedia article):\n\n1. Any live cell with fewer than two live neighbors dies as if caused by under-population.\n2. Any live cell with two or three live neighbors lives on to the next generation.\n3. Any live cell with more than three live neighbors dies, as if by over-population.\n4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n\nThe next state is created by applying the above rules simultaneously to every\ncell in the current state, where births and deaths occur simultaneously. Given\nthe current state of the `m x n` grid `board`, return the next state.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def gameOfLife(self, board: List[List[int]]) -> None:\n    m = len(board)\n    n = len(board[0])\n\n    for i in range(m):\n      for j in range(n):\n        ones = 0\n        for x in range(max(0, i - 1), min(m, i + 2)):\n          for y in range(max(0, j - 1), min(n, j + 2)):\n            ones += board[x][y] & 1\n\n        if board[i][j] == 1 and (ones == 3 or ones == 4):\n          board[i][j] |= 0b10\n\n        if board[i][j] == 0 and ones == 3:\n          board[i][j] |= 0b10\n\n    for i in range(m):\n      for j in range(n):\n        board[i][j] >>= 1\n", "blocks": [{"type": "if", "start": 23, "end": 24}, {"type": "if", "start": 26, "end": 27}], "target_lines": [24, 27], "cfg": {"0": {"lineno": 0, "parents": [], "children": [30], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "gameOfLife", "code": "enter: gameOfLife(self, board)"}, "2": {"lineno": 12, "parents": [24], "children": [], "function": "gameOfLife", "code": "exit: gameOfLife(self, board)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "gameOfLife", "code": "m = len(board)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "gameOfLife", "code": "n = len(board[0])"}, "5": {"lineno": 16, "parents": [4], "children": [6], "function": "gameOfLife", "code": "__iv = iter(range(m))"}, "6": {"lineno": 16, "parents": [9, 5], "children": [23, 7], "calls": ["range"], "function": "gameOfLife", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "gameOfLife", "code": "i = next(__iv)"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "gameOfLife", "code": "__iv = iter(range(n))"}, "9": {"lineno": 17, "parents": [8, 21, 22], "children": [10, 6], "calls": ["range"], "function": "gameOfLife", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 17, "parents": [9], "children": [11], "function": "gameOfLife", "code": "j = next(__iv)"}, "11": {"lineno": 18, "parents": [10], "children": [12], "function": "gameOfLife", "code": "ones = 0"}, "12": {"lineno": 19, "parents": [11], "children": [13], "function": "gameOfLife", "code": "__iv = iter(range(max(0, i - 1), min(m, i + 2)))"}, "13": {"lineno": 19, "parents": [16, 12], "children": [19, 14], "calls": ["max", "min", "range"], "function": "gameOfLife", "code": "_for: __iv.__length__hint__() > 0"}, "14": {"lineno": 19, "parents": [13], "children": [15], "function": "gameOfLife", "code": "x = next(__iv)"}, "15": {"lineno": 20, "parents": [14], "children": [16], "function": "gameOfLife", "code": "__iv = iter(range(max(0, j - 1), min(n, j + 2)))"}, "16": {"lineno": 20, "parents": [18, 15], "children": [17, 13], "calls": ["max", "min", "range"], "function": "gameOfLife", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 20, "parents": [16], "children": [18], "function": "gameOfLife", "code": "y = next(__iv)"}, "18": {"lineno": 21, "parents": [17], "children": [16], "function": "gameOfLife", "code": "ones += board[x][y] & 1"}, "19": {"lineno": 23, "parents": [13], "children": [20, 21], "function": "gameOfLife", "code": "_if: board[i][j] == 1 and (ones == 3 or ones == 4)"}, "20": {"lineno": 24, "parents": [19], "children": [21], "function": "gameOfLife", "code": "board[i][j] |= 2"}, "21": {"lineno": 26, "parents": [19, 20], "children": [9, 22], "function": "gameOfLife", "code": "_if: board[i][j] == 0 and ones == 3"}, "22": {"lineno": 27, "parents": [21], "children": [9], "function": "gameOfLife", "code": "board[i][j] |= 2"}, "23": {"lineno": 29, "parents": [6], "children": [24], "function": "gameOfLife", "code": "__iv = iter(range(m))"}, "24": {"lineno": 29, "parents": [27, 23], "children": [25, 2], "calls": ["range"], "function": "gameOfLife", "code": "_for: __iv.__length__hint__() > 0"}, "25": {"lineno": 29, "parents": [24], "children": [26], "function": "gameOfLife", "code": "i = next(__iv)"}, "26": {"lineno": 30, "parents": [25], "children": [27], "function": "gameOfLife", "code": "__iv = iter(range(n))"}, "27": {"lineno": 30, "parents": [26, 29], "children": [24, 28], "calls": ["range"], "function": "gameOfLife", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 30, "parents": [27], "children": [29], "function": "gameOfLife", "code": "j = next(__iv)"}, "29": {"lineno": 31, "parents": [28], "children": [27], "function": "gameOfLife", "code": "board[i][j] >>= 1"}, "30": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 310, "task_title": "Minimum Height Trees", "difficulty": 2, "func_name": "findMinHeightTrees", "description": "A tree is an undirected graph in which any two vertices are connected by\nexactly one path. In other words, any connected graph without simple cycles is\na tree.\n\nGiven a tree of `n` nodes labelled from `0` to `n - 1`, and an array of `n -\n1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected\nedge between the two nodes `ai` and `bi` in the tree, you can choose any node\nof the tree as the root. When you select a node `x` as the root, the result\ntree has height `h`. Among all possible rooted trees, those with minimum\nheight (i.e. `min(h)`) are called minimum height trees (MHTs).\n\nReturn a list of all MHTs' root labels. You can return the answer in any\norder.\n\nThe height of a rooted tree is the number of edges on the longest downward\npath between the root and a leaf.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n    if n == 1 or not edges:\n      return [0]\n\n    ans = []\n    graph = collections.defaultdict(set)\n\n    for u, v in edges:\n      graph[u].add(v)\n      graph[v].add(u)\n\n    for label, children in graph.items():\n      if len(children) == 1:\n        ans.append(label)\n\n    while n > 2:\n      n -= len(ans)\n      nextLeaves = []\n      for leaf in ans:\n        u = next(iter(graph[leaf]))\n        graph[u].remove(leaf)\n        if len(graph[u]) == 1:\n          nextLeaves.append(u)\n      ans = nextLeaves\n\n    return ans\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "if", "start": 24, "end": 25}, {"type": "if", "start": 33, "end": 34}], "target_lines": [14, 25, 34], "cfg": {"0": {"lineno": 0, "parents": [], "children": [29], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "findMinHeightTrees", "code": "enter: findMinHeightTrees(self, n, edges)"}, "2": {"lineno": 12, "parents": [4, 28], "children": [], "function": "findMinHeightTrees", "code": "exit: findMinHeightTrees(self, n, edges)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "function": "findMinHeightTrees", "code": "_if: n == 1 or not edges"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "findMinHeightTrees", "code": "return [0]"}, "5": {"lineno": 16, "parents": [3], "children": [6], "function": "findMinHeightTrees", "code": "ans = []"}, "6": {"lineno": 17, "parents": [5], "children": [7], "calls": ["defaultdict"], "function": "findMinHeightTrees", "code": "graph = collections.defaultdict(set)"}, "7": {"lineno": 19, "parents": [6], "children": [8], "function": "findMinHeightTrees", "code": "__iv = iter(edges)"}, "8": {"lineno": 19, "parents": [11, 7], "children": [9, 12], "function": "findMinHeightTrees", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 19, "parents": [8], "children": [10], "function": "findMinHeightTrees", "code": "u, v = next(__iv)"}, "10": {"lineno": 20, "parents": [9], "children": [11], "calls": ["add"], "function": "findMinHeightTrees", "code": "graph[u].add(v)"}, "11": {"lineno": 21, "parents": [10], "children": [8], "calls": ["add"], "function": "findMinHeightTrees", "code": "graph[v].add(u)"}, "12": {"lineno": 23, "parents": [8], "children": [13], "function": "findMinHeightTrees", "code": "__iv = iter(graph.items())"}, "13": {"lineno": 23, "parents": [16, 12, 15], "children": [17, 14], "calls": ["items"], "function": "findMinHeightTrees", "code": "_for: __iv.__length__hint__() > 0"}, "14": {"lineno": 23, "parents": [13], "children": [15], "function": "findMinHeightTrees", "code": "label, children = next(__iv)"}, "15": {"lineno": 24, "parents": [14], "children": [16, 13], "calls": ["len"], "function": "findMinHeightTrees", "code": "_if: len(children) == 1"}, "16": {"lineno": 25, "parents": [15], "children": [13], "calls": ["append"], "function": "findMinHeightTrees", "code": "ans.append(label)"}, "17": {"lineno": 27, "parents": [27, 13], "children": [18, 28], "function": "findMinHeightTrees", "code": "_while: n > 2"}, "18": {"lineno": 28, "parents": [17], "children": [19], "calls": ["len"], "function": "findMinHeightTrees", "code": "n -= len(ans)"}, "19": {"lineno": 29, "parents": [18], "children": [20], "function": "findMinHeightTrees", "code": "nextLeaves = []"}, "20": {"lineno": 30, "parents": [19], "children": [21], "function": "findMinHeightTrees", "code": "__iv = iter(ans)"}, "21": {"lineno": 30, "parents": [25, 26, 20], "children": [27, 22], "function": "findMinHeightTrees", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 30, "parents": [21], "children": [23], "function": "findMinHeightTrees", "code": "leaf = next(__iv)"}, "23": {"lineno": 31, "parents": [22], "children": [24], "calls": ["iter", "next"], "function": "findMinHeightTrees", "code": "u = next(iter(graph[leaf]))"}, "24": {"lineno": 32, "parents": [23], "children": [25], "calls": ["remove"], "function": "findMinHeightTrees", "code": "graph[u].remove(leaf)"}, "25": {"lineno": 33, "parents": [24], "children": [26, 21], "calls": ["len"], "function": "findMinHeightTrees", "code": "_if: len(graph[u]) == 1"}, "26": {"lineno": 34, "parents": [25], "children": [21], "calls": ["append"], "function": "findMinHeightTrees", "code": "nextLeaves.append(u)"}, "27": {"lineno": 35, "parents": [21], "children": [17], "function": "findMinHeightTrees", "code": "ans = nextLeaves"}, "28": {"lineno": 37, "parents": [17], "children": [2], "function": "findMinHeightTrees", "code": "return ans"}, "29": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 327, "task_title": "Count of Range Sum", "difficulty": 3, "func_name": "countRangeSum", "description": "Given an integer array `nums` and two integers `lower` and `upper`, return the\nnumber of range sums that lie in `[lower, upper]` inclusive.\n\nRange sum `S(i, j)` is defined as the sum of the elements in `nums` between\nindices `i` and `j` inclusive, where `i <= j`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:\n    n = len(nums)\n    self.ans = 0\n    prefix = [0] + list(itertools.accumulate(nums))\n\n    self._mergeSort(prefix, 0, n, lower, upper)\n    return self.ans\n\n  def _mergeSort(self, prefix: List[int], l: int, r: int, lower: int, upper: int) -> None:\n    if l >= r:\n      return\n\n    m = (l + r) // 2\n    self._mergeSort(prefix, l, m, lower, upper)\n    self._mergeSort(prefix, m + 1, r, lower, upper)\n    self._merge(prefix, l, m, r, lower, upper)\n\n  def _merge(self, prefix: List[int], l: int, m: int, r: int, lower: int, upper: int) -> None:\n    lo = m + 1\n    hi = m + 1\n\n    for i in range(l, m + 1):\n      while lo <= r and prefix[lo] - prefix[i] < lower:\n        lo += 1\n      while hi <= r and prefix[hi] - prefix[i] <= upper:\n        hi += 1\n      self.ans += hi - lo\n\n    sorted = [0] * (r - l + 1)\n    k = 0\n    i = l\n    j = m + 1\n\n    while i <= m and j <= r:\n      if prefix[i] < prefix[j]:\n        sorted[k] = prefix[i]\n        k += 1\n        i += 1\n      else:\n        sorted[k] = prefix[j]\n        k += 1\n        j += 1\n\n    while i <= m:\n      sorted[k] = prefix[i]\n      k += 1\n      i += 1\n\n    while j <= r:\n      sorted[k] = prefix[j]\n      k += 1\n      j += 1\n\n    prefix[l:l + len(sorted)] = sorted\n", "blocks": [{"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 46, "end": 49}, {"type": "else", "start": 50, "end": 53}], "target_lines": [22, 47, 48, 49, 51, 52, 53], "cfg": {"0": {"lineno": 0, "parents": [], "children": [49], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "countRangeSum", "code": "enter: countRangeSum(self, nums, lower, upper)"}, "2": {"lineno": 12, "parents": [7], "children": [], "function": "countRangeSum", "code": "exit: countRangeSum(self, nums, lower, upper)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "countRangeSum", "code": "n = len(nums)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "countRangeSum", "code": "self.ans = 0"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["accumulate", "list"], "function": "countRangeSum", "code": "prefix = [0] + list(itertools.accumulate(nums))"}, "6": {"lineno": 17, "parents": [5], "children": [7], "calls": ["_mergeSort"], "function": "countRangeSum", "code": "self._mergeSort(prefix, 0, n, lower, upper)"}, "7": {"lineno": 18, "parents": [9, 6], "children": [2], "function": "countRangeSum", "code": "return self.ans"}, "8": {"lineno": 20, "parents": [13, 6, 14], "children": [10], "function": "_mergeSort", "code": "enter: _mergeSort(self, prefix, l, r, lower, upper)"}, "9": {"lineno": 20, "parents": [17, 11, 15], "children": [], "function": "_mergeSort", "code": "exit: _mergeSort(self, prefix, l, r, lower, upper)"}, "10": {"lineno": 21, "parents": [8], "children": [11, 12], "function": "_mergeSort", "code": "_if: l >= r"}, "11": {"lineno": 22, "parents": [10], "children": [9], "function": "_mergeSort", "code": "return"}, "12": {"lineno": 24, "parents": [10], "children": [13], "function": "_mergeSort", "code": "m = (l + r) // 2"}, "13": {"lineno": 25, "parents": [12], "children": [14], "calls": ["_mergeSort"], "function": "_mergeSort", "code": "self._mergeSort(prefix, l, m, lower, upper)"}, "14": {"lineno": 26, "parents": [9, 13], "children": [15], "calls": ["_mergeSort"], "function": "_mergeSort", "code": "self._mergeSort(prefix, m + 1, r, lower, upper)"}, "15": {"lineno": 27, "parents": [9, 14], "children": [9], "calls": ["_merge"], "function": "_mergeSort", "code": "self._merge(prefix, l, m, r, lower, upper)"}, "16": {"lineno": 29, "parents": [15], "children": [18], "function": "_merge", "code": "enter: _merge(self, prefix, l, m, r, lower, upper)"}, "17": {"lineno": 29, "parents": [48], "children": [], "function": "_merge", "code": "exit: _merge(self, prefix, l, m, r, lower, upper)"}, "18": {"lineno": 30, "parents": [16], "children": [19], "function": "_merge", "code": "lo = m + 1"}, "19": {"lineno": 31, "parents": [18], "children": [20], "function": "_merge", "code": "hi = m + 1"}, "20": {"lineno": 33, "parents": [19], "children": [21], "function": "_merge", "code": "__iv = iter(range(l, m + 1))"}, "21": {"lineno": 33, "parents": [27, 20], "children": [28, 22], "calls": ["range"], "function": "_merge", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 33, "parents": [21], "children": [23], "function": "_merge", "code": "i = next(__iv)"}, "23": {"lineno": 34, "parents": [24, 22], "children": [24, 25], "function": "_merge", "code": "_while: lo <= r and prefix[lo] - prefix[i] < lower"}, "24": {"lineno": 35, "parents": [23], "children": [23], "function": "_merge", "code": "lo += 1"}, "25": {"lineno": 36, "parents": [26, 23], "children": [26, 27], "function": "_merge", "code": "_while: hi <= r and prefix[hi] - prefix[i] <= upper"}, "26": {"lineno": 37, "parents": [25], "children": [25], "function": "_merge", "code": "hi += 1"}, "27": {"lineno": 38, "parents": [25], "children": [21], "function": "_merge", "code": "self.ans += hi - lo"}, "28": {"lineno": 40, "parents": [21], "children": [29], "function": "_merge", "code": "sorted = [0] * (r - l + 1)"}, "29": {"lineno": 41, "parents": [28], "children": [30], "function": "_merge", "code": "k = 0"}, "30": {"lineno": 42, "parents": [29], "children": [31], "function": "_merge", "code": "i = l"}, "31": {"lineno": 43, "parents": [30], "children": [32], "function": "_merge", "code": "j = m + 1"}, "32": {"lineno": 45, "parents": [36, 39, 31], "children": [40, 33], "function": "_merge", "code": "_while: i <= m and j <= r"}, "33": {"lineno": 46, "parents": [32], "children": [34, 37], "function": "_merge", "code": "_if: prefix[i] < prefix[j]"}, "34": {"lineno": 47, "parents": [33], "children": [35], "function": "_merge", "code": "sorted[k] = prefix[i]"}, "35": {"lineno": 48, "parents": [34], "children": [36], "function": "_merge", "code": "k += 1"}, "36": {"lineno": 49, "parents": [35], "children": [32], "function": "_merge", "code": "i += 1"}, "37": {"lineno": 51, "parents": [33], "children": [38], "function": "_merge", "code": "sorted[k] = prefix[j]"}, "38": {"lineno": 52, "parents": [37], "children": [39], "function": "_merge", "code": "k += 1"}, "39": {"lineno": 53, "parents": [38], "children": [32], "function": "_merge", "code": "j += 1"}, "40": {"lineno": 55, "parents": [32, 43], "children": [41, 44], "function": "_merge", "code": "_while: i <= m"}, "41": {"lineno": 56, "parents": [40], "children": [42], "function": "_merge", "code": "sorted[k] = prefix[i]"}, "42": {"lineno": 57, "parents": [41], "children": [43], "function": "_merge", "code": "k += 1"}, "43": {"lineno": 58, "parents": [42], "children": [40], "function": "_merge", "code": "i += 1"}, "44": {"lineno": 60, "parents": [40, 47], "children": [48, 45], "function": "_merge", "code": "_while: j <= r"}, "45": {"lineno": 61, "parents": [44], "children": [46], "function": "_merge", "code": "sorted[k] = prefix[j]"}, "46": {"lineno": 62, "parents": [45], "children": [47], "function": "_merge", "code": "k += 1"}, "47": {"lineno": 63, "parents": [46], "children": [44], "function": "_merge", "code": "j += 1"}, "48": {"lineno": 65, "parents": [44], "children": [17], "function": "_merge", "code": "prefix[l:l + len(sorted)] = sorted"}, "49": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 335, "task_title": "Self Crossing", "difficulty": 3, "func_name": "isSelfCrossing", "description": "You are given an array of integers `distance`.\n\nYou start at the point `(0, 0)` on an X-Y plane, and you move `distance[0]`\nmeters to the north, then `distance[1]` meters to the west, `distance[2]`\nmeters to the south, `distance[3]` meters to the east, and so on. In other\nwords, after each move, your direction changes counter-clockwise.\n\nReturn `true` if your path crosses itself or `false` if it does not.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def isSelfCrossing(self, x: List[int]) -> bool:\n    if len(x) <= 3:\n      return False\n\n    for i in range(3, len(x)):\n      if x[i - 2] <= x[i] and x[i - 1] <= x[i - 3]:\n        return True\n      if i >= 4 and x[i - 1] == x[i - 3] and x[i - 2] <= x[i] + x[i - 4]:\n        return True\n      if i >= 5 and x[i - 4] <= x[i - 2] and x[i - 2] <= x[i] + x[i - 4] and x[i - 1] <= x[i - 3] and x[i - 3] <= x[i - 1] + x[i - 5]:\n        return True\n\n    return False\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "if", "start": 17, "end": 18}, {"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}], "target_lines": [14, 18, 20, 22], "cfg": {"0": {"lineno": 0, "parents": [], "children": [15], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "isSelfCrossing", "code": "enter: isSelfCrossing(self, x)"}, "2": {"lineno": 12, "parents": [4, 9, 11, 13, 14], "children": [], "function": "isSelfCrossing", "code": "exit: isSelfCrossing(self, x)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "calls": ["len"], "function": "isSelfCrossing", "code": "_if: len(x) <= 3"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "isSelfCrossing", "code": "return False"}, "5": {"lineno": 16, "parents": [3], "children": [6], "function": "isSelfCrossing", "code": "__iv = iter(range(3, len(x)))"}, "6": {"lineno": 16, "parents": [12, 5], "children": [14, 7], "calls": ["len", "range"], "function": "isSelfCrossing", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "isSelfCrossing", "code": "i = next(__iv)"}, "8": {"lineno": 17, "parents": [7], "children": [9, 10], "function": "isSelfCrossing", "code": "_if: x[i - 2] <= x[i] and x[i - 1] <= x[i - 3]"}, "9": {"lineno": 18, "parents": [8], "children": [2], "function": "isSelfCrossing", "code": "return True"}, "10": {"lineno": 19, "parents": [8], "children": [11, 12], "function": "isSelfCrossing", "code": "_if: i >= 4 and x[i - 1] == x[i - 3] and (x[i - 2] <= x[i] + x[i - 4])"}, "11": {"lineno": 20, "parents": [10], "children": [2], "function": "isSelfCrossing", "code": "return True"}, "12": {"lineno": 21, "parents": [10], "children": [13, 6], "function": "isSelfCrossing", "code": "_if: i >= 5 and x[i - 4] <= x[i - 2] and (x[i - 2] <= x[i] + x[i - 4]) and (x[i - 1] <= x[i - 3]) and (x[i - 3] <= x[i - 1] + x[i - 5])"}, "13": {"lineno": 22, "parents": [12], "children": [2], "function": "isSelfCrossing", "code": "return True"}, "14": {"lineno": 24, "parents": [6], "children": [2], "function": "isSelfCrossing", "code": "return False"}, "15": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 336, "task_title": "Palindrome Pairs", "difficulty": 3, "func_name": "palindromePairs", "description": "You are given a 0-indexed array of unique strings `words`.\n\nA palindrome pair is a pair of integers `(i, j)` such that:\n\n* `0 <= i, j < words.length`,\n* `i != j`, and\n* `words[i] + words[j]` (the concatenation of the two strings) is a palindrome.\n\nReturn an array of all the palindrome pairs of `words`.\n\nYou must write an algorithm with `O(sum of words[i].length)` runtime\ncomplexity.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def palindromePairs(self, words: List[str]) -> List[List[int]]:\n    ans = []\n    dict = {word[::-1]: i for i, word in enumerate(words)}\n\n    for i, word in enumerate(words):\n      if \"\" in dict and dict[\"\"] != i and word == word[::-1]:\n        ans.append([i, dict[\"\"]])\n\n      for j in range(1, len(word) + 1):\n        l = word[:j]\n        r = word[j:]\n        if l in dict and dict[l] != i and r == r[::-1]:\n          ans.append([i, dict[l]])\n        if r in dict and dict[r] != i and l == l[::-1]:\n          ans.append([dict[r], i])\n\n    return ans\n", "blocks": [{"type": "if", "start": 17, "end": 18}, {"type": "if", "start": 23, "end": 24}, {"type": "if", "start": 25, "end": 26}], "target_lines": [18, 24, 26], "cfg": {"0": {"lineno": 0, "parents": [], "children": [20], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "palindromePairs", "code": "enter: palindromePairs(self, words)"}, "2": {"lineno": 12, "parents": [19], "children": [], "function": "palindromePairs", "code": "exit: palindromePairs(self, words)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "palindromePairs", "code": "ans = []"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "palindromePairs", "code": "dict = {word[::-1]: i for i, word in enumerate(words)}"}, "5": {"lineno": 16, "parents": [4], "children": [6], "function": "palindromePairs", "code": "__iv = iter(enumerate(words))"}, "6": {"lineno": 16, "parents": [11, 5], "children": [19, 7], "calls": ["enumerate"], "function": "palindromePairs", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "palindromePairs", "code": "i, word = next(__iv)"}, "8": {"lineno": 17, "parents": [7], "children": [9, 10], "function": "palindromePairs", "code": "_if: '' in dict and dict[''] != i and (word == word[::-1])"}, "9": {"lineno": 18, "parents": [8], "children": [10], "calls": ["append"], "function": "palindromePairs", "code": "ans.append([i, dict['']])"}, "10": {"lineno": 20, "parents": [8, 9], "children": [11], "function": "palindromePairs", "code": "__iv = iter(range(1, len(word) + 1))"}, "11": {"lineno": 20, "parents": [17, 10, 18], "children": [12, 6], "calls": ["len", "range"], "function": "palindromePairs", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 20, "parents": [11], "children": [13], "function": "palindromePairs", "code": "j = next(__iv)"}, "13": {"lineno": 21, "parents": [12], "children": [14], "function": "palindromePairs", "code": "l = word[:j]"}, "14": {"lineno": 22, "parents": [13], "children": [15], "function": "palindromePairs", "code": "r = word[j:]"}, "15": {"lineno": 23, "parents": [14], "children": [16, 17], "function": "palindromePairs", "code": "_if: l in dict and dict[l] != i and (r == r[::-1])"}, "16": {"lineno": 24, "parents": [15], "children": [17], "calls": ["append"], "function": "palindromePairs", "code": "ans.append([i, dict[l]])"}, "17": {"lineno": 25, "parents": [16, 15], "children": [18, 11], "function": "palindromePairs", "code": "_if: r in dict and dict[r] != i and (l == l[::-1])"}, "18": {"lineno": 26, "parents": [17], "children": [11], "calls": ["append"], "function": "palindromePairs", "code": "ans.append([dict[r], i])"}, "19": {"lineno": 28, "parents": [6], "children": [2], "function": "palindromePairs", "code": "return ans"}, "20": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 391, "task_title": "Perfect Rectangle", "difficulty": 3, "func_name": "isRectangleCover", "description": "Given an array `rectangles` where `rectangles[i] = [xi, yi, ai, bi]`\nrepresents an axis-aligned rectangle. The bottom-left point of the rectangle\nis `(xi, yi)` and the top-right point of it is `(ai, bi)`.\n\nReturn `true` if all the rectangles together form an exact cover of a\nrectangular region.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator, Set\n\nclass Solution:\n  def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n    area = 0\n    x1 = math.inf\n    y1 = math.inf\n    x2 = -math.inf\n    y2 = -math.inf\n    corners: Set[Tuple[int, int]] = set()\n\n    for x, y, a, b in rectangles:\n      area += (a - x) * (b - y)\n      x1 = min(x1, x)\n      y1 = min(y1, y)\n      x2 = max(x2, a)\n      y2 = max(y2, b)\n\n      for point in [(x, y), (x, b), (a, y), (a, b)]:\n        if point in corners:\n          corners.remove(point)\n        else:\n          corners.add(point)\n\n    if len(corners) != 4:\n      return False\n    if (x1, y1) not in corners or (x1, y2) not in corners or (x2, y1) not in corners or (x2, y2) not in corners:\n      return False\n    return area == (x2 - x1) * (y2 - y1)\n", "blocks": [{"type": "if", "start": 33, "end": 34}, {"type": "if", "start": 35, "end": 36}, {"type": "if", "start": 28, "end": 29}, {"type": "else", "start": 30, "end": 31}], "target_lines": [29, 31, 34, 36], "cfg": {"0": {"lineno": 0, "parents": [], "children": [28], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "isRectangleCover", "code": "enter: isRectangleCover(self, rectangles)"}, "2": {"lineno": 12, "parents": [24, 26, 27], "children": [], "function": "isRectangleCover", "code": "exit: isRectangleCover(self, rectangles)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "isRectangleCover", "code": "area = 0"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "isRectangleCover", "code": "x1 = math.inf"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "isRectangleCover", "code": "y1 = math.inf"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "isRectangleCover", "code": "x2 = -math.inf"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "isRectangleCover", "code": "y2 = -math.inf"}, "8": {"lineno": 18, "parents": [7], "children": [9], "calls": ["set"], "function": "isRectangleCover", "code": "corners: Set[Tuple[int, int]] = set()"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "isRectangleCover", "code": "__iv = iter(rectangles)"}, "10": {"lineno": 20, "parents": [9, 18], "children": [11, 23], "function": "isRectangleCover", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "isRectangleCover", "code": "x, y, a, b = next(__iv)"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "isRectangleCover", "code": "area += (a - x) * (b - y)"}, "13": {"lineno": 22, "parents": [12], "children": [14], "calls": ["min"], "function": "isRectangleCover", "code": "x1 = min(x1, x)"}, "14": {"lineno": 23, "parents": [13], "children": [15], "calls": ["min"], "function": "isRectangleCover", "code": "y1 = min(y1, y)"}, "15": {"lineno": 24, "parents": [14], "children": [16], "calls": ["max"], "function": "isRectangleCover", "code": "x2 = max(x2, a)"}, "16": {"lineno": 25, "parents": [15], "children": [17], "calls": ["max"], "function": "isRectangleCover", "code": "y2 = max(y2, b)"}, "17": {"lineno": 27, "parents": [16], "children": [18], "function": "isRectangleCover", "code": "__iv = iter([(x, y), (x, b), (a, y), (a, b)])"}, "18": {"lineno": 27, "parents": [17, 21, 22], "children": [10, 19], "function": "isRectangleCover", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 27, "parents": [18], "children": [20], "function": "isRectangleCover", "code": "point = next(__iv)"}, "20": {"lineno": 28, "parents": [19], "children": [21, 22], "function": "isRectangleCover", "code": "_if: point in corners"}, "21": {"lineno": 29, "parents": [20], "children": [18], "calls": ["remove"], "function": "isRectangleCover", "code": "corners.remove(point)"}, "22": {"lineno": 31, "parents": [20], "children": [18], "calls": ["add"], "function": "isRectangleCover", "code": "corners.add(point)"}, "23": {"lineno": 33, "parents": [10], "children": [24, 25], "calls": ["len"], "function": "isRectangleCover", "code": "_if: len(corners) != 4"}, "24": {"lineno": 34, "parents": [23], "children": [2], "function": "isRectangleCover", "code": "return False"}, "25": {"lineno": 35, "parents": [23], "children": [26, 27], "function": "isRectangleCover", "code": "_if: (x1, y1) not in corners or (x1, y2) not in corners or (x2, y1) not in corners or ((x2, y2) not in corners)"}, "26": {"lineno": 36, "parents": [25], "children": [2], "function": "isRectangleCover", "code": "return False"}, "27": {"lineno": 37, "parents": [25], "children": [2], "function": "isRectangleCover", "code": "return area == (x2 - x1) * (y2 - y1)"}, "28": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 402, "task_title": "Remove K Digits", "difficulty": 2, "func_name": "removeKdigits", "description": "Given string num representing a non-negative integer `num`, and an integer\n`k`, return the smallest possible integer after removing `k` digits from\n`num`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def removeKdigits(self, num: str, k: int) -> str:\n    if len(num) == k:\n      return '0'\n\n    ans = []\n    stack = []\n\n    for i, digit in enumerate(num):\n      while k > 0 and stack and stack[-1] > digit:\n        stack.pop()\n        k -= 1\n      stack.append(digit)\n\n    for _ in range(k):\n      stack.pop()\n\n    for c in stack:\n      if c == '0' and not ans:\n        continue\n      ans.append(c)\n\n    return ''.join(ans) if ans else '0'\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "if", "start": 29, "end": 30}], "target_lines": [14, 30], "cfg": {"0": {"lineno": 0, "parents": [], "children": [25], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "removeKdigits", "code": "enter: removeKdigits(self, num, k)"}, "2": {"lineno": 12, "parents": [24, 4], "children": [], "function": "removeKdigits", "code": "exit: removeKdigits(self, num, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "calls": ["len"], "function": "removeKdigits", "code": "_if: len(num) == k"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "removeKdigits", "code": "return '0'"}, "5": {"lineno": 16, "parents": [3], "children": [6], "function": "removeKdigits", "code": "ans = []"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "removeKdigits", "code": "stack = []"}, "7": {"lineno": 19, "parents": [6], "children": [8], "function": "removeKdigits", "code": "__iv = iter(enumerate(num))"}, "8": {"lineno": 19, "parents": [13, 7], "children": [9, 14], "calls": ["enumerate"], "function": "removeKdigits", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 19, "parents": [8], "children": [10], "function": "removeKdigits", "code": "i, digit = next(__iv)"}, "10": {"lineno": 20, "parents": [9, 12], "children": [11, 13], "function": "removeKdigits", "code": "_while: k > 0 and stack and (stack[-1] > digit)"}, "11": {"lineno": 21, "parents": [10], "children": [12], "calls": ["pop"], "function": "removeKdigits", "code": "stack.pop()"}, "12": {"lineno": 22, "parents": [11], "children": [10], "function": "removeKdigits", "code": "k -= 1"}, "13": {"lineno": 23, "parents": [10], "children": [8], "calls": ["append"], "function": "removeKdigits", "code": "stack.append(digit)"}, "14": {"lineno": 25, "parents": [8], "children": [15], "function": "removeKdigits", "code": "__iv = iter(range(k))"}, "15": {"lineno": 25, "parents": [17, 14], "children": [16, 18], "calls": ["range"], "function": "removeKdigits", "code": "_for: __iv.__length__hint__() > 0"}, "16": {"lineno": 25, "parents": [15], "children": [17], "function": "removeKdigits", "code": "_ = next(__iv)"}, "17": {"lineno": 26, "parents": [16], "children": [15], "calls": ["pop"], "function": "removeKdigits", "code": "stack.pop()"}, "18": {"lineno": 28, "parents": [15], "children": [19], "function": "removeKdigits", "code": "__iv = iter(stack)"}, "19": {"lineno": 28, "parents": [18, 22, 23], "children": [24, 20], "function": "removeKdigits", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 28, "parents": [19], "children": [21], "function": "removeKdigits", "code": "c = next(__iv)"}, "21": {"lineno": 29, "parents": [20], "children": [22, 23], "function": "removeKdigits", "code": "_if: c == '0' and (not ans)"}, "22": {"lineno": 30, "parents": [21], "children": [19], "function": "removeKdigits", "code": "continue"}, "23": {"lineno": 31, "parents": [21], "children": [19], "calls": ["append"], "function": "removeKdigits", "code": "ans.append(c)"}, "24": {"lineno": 33, "parents": [19], "children": [2], "function": "removeKdigits", "code": "return ''.join(ans) if ans else '0'"}, "25": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 407, "task_title": "Trapping Rain Water II", "difficulty": 3, "func_name": "trapRainWater", "description": "Given an `m x n` integer matrix `heightMap` representing the height of each\nunit cell in a 2D elevation map, return the volume of water it can trap after\nraining.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def trapRainWater(self, heightMap: List[List[int]]) -> int:\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    m = len(heightMap)\n    n = len(heightMap[0])\n    ans = 0\n    minHeap = []\n    seen = set()\n\n    for i in range(m):\n      heapq.heappush(minHeap, (heightMap[i][0], i, 0))\n      heapq.heappush(minHeap, (heightMap[i][n - 1], i, n - 1))\n      seen.add((i, 0))\n      seen.add((i, n - 1))\n\n    for j in range(1, n - 1):\n      heapq.heappush(minHeap, (heightMap[0][j], 0, j))\n      heapq.heappush(minHeap, (heightMap[m - 1][j], m - 1, j))\n      seen.add((0, j))\n      seen.add((m - 1, j))\n\n    while minHeap:\n      h, i, j = heapq.heappop(minHeap)\n      for dx, dy in dirs:\n        x = i + dx\n        y = j + dy\n        if x < 0 or x == m or y < 0 or y == n:\n          continue\n        if (x, y) in seen:\n          continue\n        if heightMap[x][y] < h:\n          ans += h - heightMap[x][y]\n          heapq.heappush(minHeap, (h, x, y))\n        else:\n          heapq.heappush(minHeap, (heightMap[x][y], x, y))\n        seen.add((x, y))\n\n    return ans\n", "blocks": [{"type": "if", "start": 37, "end": 38}, {"type": "if", "start": 39, "end": 40}, {"type": "if", "start": 41, "end": 43}, {"type": "else", "start": 44, "end": 45}], "target_lines": [38, 40, 42, 43, 45], "cfg": {"0": {"lineno": 0, "parents": [], "children": [40], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "trapRainWater", "code": "enter: trapRainWater(self, heightMap)"}, "2": {"lineno": 12, "parents": [39], "children": [], "function": "trapRainWater", "code": "exit: trapRainWater(self, heightMap)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "trapRainWater", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "trapRainWater", "code": "m = len(heightMap)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["len"], "function": "trapRainWater", "code": "n = len(heightMap[0])"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "trapRainWater", "code": "ans = 0"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "trapRainWater", "code": "minHeap = []"}, "8": {"lineno": 18, "parents": [7], "children": [9], "calls": ["set"], "function": "trapRainWater", "code": "seen = set()"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "trapRainWater", "code": "__iv = iter(range(m))"}, "10": {"lineno": 20, "parents": [9, 15], "children": [16, 11], "calls": ["range"], "function": "trapRainWater", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "trapRainWater", "code": "i = next(__iv)"}, "12": {"lineno": 21, "parents": [11], "children": [13], "calls": ["heappush"], "function": "trapRainWater", "code": "heapq.heappush(minHeap, (heightMap[i][0], i, 0))"}, "13": {"lineno": 22, "parents": [12], "children": [14], "calls": ["heappush"], "function": "trapRainWater", "code": "heapq.heappush(minHeap, (heightMap[i][n - 1], i, n - 1))"}, "14": {"lineno": 23, "parents": [13], "children": [15], "calls": ["add"], "function": "trapRainWater", "code": "seen.add((i, 0))"}, "15": {"lineno": 24, "parents": [14], "children": [10], "calls": ["add"], "function": "trapRainWater", "code": "seen.add((i, n - 1))"}, "16": {"lineno": 26, "parents": [10], "children": [17], "function": "trapRainWater", "code": "__iv = iter(range(1, n - 1))"}, "17": {"lineno": 26, "parents": [16, 22], "children": [18, 23], "calls": ["range"], "function": "trapRainWater", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 26, "parents": [17], "children": [19], "function": "trapRainWater", "code": "j = next(__iv)"}, "19": {"lineno": 27, "parents": [18], "children": [20], "calls": ["heappush"], "function": "trapRainWater", "code": "heapq.heappush(minHeap, (heightMap[0][j], 0, j))"}, "20": {"lineno": 28, "parents": [19], "children": [21], "calls": ["heappush"], "function": "trapRainWater", "code": "heapq.heappush(minHeap, (heightMap[m - 1][j], m - 1, j))"}, "21": {"lineno": 29, "parents": [20], "children": [22], "calls": ["add"], "function": "trapRainWater", "code": "seen.add((0, j))"}, "22": {"lineno": 30, "parents": [21], "children": [17], "calls": ["add"], "function": "trapRainWater", "code": "seen.add((m - 1, j))"}, "23": {"lineno": 32, "parents": [17, 26], "children": [24, 39], "function": "trapRainWater", "code": "_while: minHeap"}, "24": {"lineno": 33, "parents": [23], "children": [25], "calls": ["heappop"], "function": "trapRainWater", "code": "h, i, j = heapq.heappop(minHeap)"}, "25": {"lineno": 34, "parents": [24], "children": [26], "function": "trapRainWater", "code": "__iv = iter(dirs)"}, "26": {"lineno": 34, "parents": [25, 33, 38, 31], "children": [27, 23], "function": "trapRainWater", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 34, "parents": [26], "children": [28], "function": "trapRainWater", "code": "dx, dy = next(__iv)"}, "28": {"lineno": 35, "parents": [27], "children": [29], "function": "trapRainWater", "code": "x = i + dx"}, "29": {"lineno": 36, "parents": [28], "children": [30], "function": "trapRainWater", "code": "y = j + dy"}, "30": {"lineno": 37, "parents": [29], "children": [32, 31], "function": "trapRainWater", "code": "_if: x < 0 or x == m or y < 0 or (y == n)"}, "31": {"lineno": 38, "parents": [30], "children": [26], "function": "trapRainWater", "code": "continue"}, "32": {"lineno": 39, "parents": [30], "children": [33, 34], "function": "trapRainWater", "code": "_if: (x, y) in seen"}, "33": {"lineno": 40, "parents": [32], "children": [26], "function": "trapRainWater", "code": "continue"}, "34": {"lineno": 41, "parents": [32], "children": [35, 37], "function": "trapRainWater", "code": "_if: heightMap[x][y] < h"}, "35": {"lineno": 42, "parents": [34], "children": [36], "function": "trapRainWater", "code": "ans += h - heightMap[x][y]"}, "36": {"lineno": 43, "parents": [35], "children": [38], "calls": ["heappush"], "function": "trapRainWater", "code": "heapq.heappush(minHeap, (h, x, y))"}, "37": {"lineno": 45, "parents": [34], "children": [38], "calls": ["heappush"], "function": "trapRainWater", "code": "heapq.heappush(minHeap, (heightMap[x][y], x, y))"}, "38": {"lineno": 46, "parents": [36, 37], "children": [26], "calls": ["add"], "function": "trapRainWater", "code": "seen.add((x, y))"}, "39": {"lineno": 48, "parents": [23], "children": [2], "function": "trapRainWater", "code": "return ans"}, "40": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 417, "task_title": "Pacific Atlantic Water Flow", "difficulty": 2, "func_name": "pacificAtlantic", "description": "There is an `m x n` rectangular island that borders both the Pacific Ocean and\nAtlantic Ocean. The Pacific Ocean touches the island's left and top edges, and\nthe Atlantic Ocean touches the island's right and bottom edges.\n\nThe island is partitioned into a grid of square cells. You are given an `m x\nn` integer matrix `heights` where `heights[r][c]` represents the height above\nsea level of the cell at coordinate `(r, c)`.\n\nThe island receives a lot of rain, and the rain water can flow to neighboring\ncells directly north, south, east, and west if the neighboring cell's height\nis less than or equal to the current cell's height. Water can flow from any\ncell adjacent to an ocean into the ocean.\n\nReturn a 2D list of grid coordinates `result` where `result[i] = [ri, ci]`\ndenotes that rain water can flow from cell `(ri, ci)` to both the Pacific and\nAtlantic oceans.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    m = len(heights)\n    n = len(heights[0])\n    qP = collections.deque()\n    qA = collections.deque()\n    seenP = [[False] * n for _ in range(m)]\n    seenA = [[False] * n for _ in range(m)]\n\n    for i in range(m):\n      qP.append((i, 0))\n      qA.append((i, n - 1))\n      seenP[i][0] = True\n      seenA[i][n - 1] = True\n\n    for j in range(n):\n      qP.append((0, j))\n      qA.append((m - 1, j))\n      seenP[0][j] = True\n      seenA[m - 1][j] = True\n\n    def bfs(q: collections.deque, seen: List[List[bool]]):\n      while q:\n        i, j = q.popleft()\n        h = heights[i][j]\n        for dx, dy in dirs:\n          x = i + dx\n          y = j + dy\n          if x < 0 or x == m or y < 0 or y == n:\n            continue\n          if seen[x][y] or heights[x][y] < h:\n            continue\n          q.append((x, y))\n          seen[x][y] = True\n\n    bfs(qP, seenP)\n    bfs(qA, seenA)\n\n    res=[]\n    for i in range(m):\n      for j in range(n):\n        if seenP[i][j] and seenA[i][j]:\n          res.append([i, j])\n    return res\n", "blocks": [{"type": "if", "start": 53, "end": 54}, {"type": "if", "start": 40, "end": 41}, {"type": "if", "start": 42, "end": 43}], "target_lines": [41, 43, 54], "cfg": {"0": {"lineno": 0, "parents": [], "children": [52], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "pacificAtlantic", "code": "enter: pacificAtlantic(self, heights)"}, "2": {"lineno": 12, "parents": [51], "children": [], "function": "pacificAtlantic", "code": "exit: pacificAtlantic(self, heights)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "pacificAtlantic", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "pacificAtlantic", "code": "m = len(heights)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["len"], "function": "pacificAtlantic", "code": "n = len(heights[0])"}, "6": {"lineno": 16, "parents": [5], "children": [7], "calls": ["deque"], "function": "pacificAtlantic", "code": "qP = collections.deque()"}, "7": {"lineno": 17, "parents": [6], "children": [8], "calls": ["deque"], "function": "pacificAtlantic", "code": "qA = collections.deque()"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "pacificAtlantic", "code": "seenP = [[False] * n for _ in range(m)]"}, "9": {"lineno": 19, "parents": [8], "children": [10], "function": "pacificAtlantic", "code": "seenA = [[False] * n for _ in range(m)]"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "pacificAtlantic", "code": "__iv = iter(range(m))"}, "11": {"lineno": 21, "parents": [16, 10], "children": [17, 12], "calls": ["range"], "function": "pacificAtlantic", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "pacificAtlantic", "code": "i = next(__iv)"}, "13": {"lineno": 22, "parents": [12], "children": [14], "calls": ["append"], "function": "pacificAtlantic", "code": "qP.append((i, 0))"}, "14": {"lineno": 23, "parents": [13], "children": [15], "calls": ["append"], "function": "pacificAtlantic", "code": "qA.append((i, n - 1))"}, "15": {"lineno": 24, "parents": [14], "children": [16], "function": "pacificAtlantic", "code": "seenP[i][0] = True"}, "16": {"lineno": 25, "parents": [15], "children": [11], "function": "pacificAtlantic", "code": "seenA[i][n - 1] = True"}, "17": {"lineno": 27, "parents": [11], "children": [18], "function": "pacificAtlantic", "code": "__iv = iter(range(n))"}, "18": {"lineno": 27, "parents": [17, 23], "children": [40, 19], "calls": ["range"], "function": "pacificAtlantic", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 27, "parents": [18], "children": [20], "function": "pacificAtlantic", "code": "j = next(__iv)"}, "20": {"lineno": 28, "parents": [19], "children": [21], "calls": ["append"], "function": "pacificAtlantic", "code": "qP.append((0, j))"}, "21": {"lineno": 29, "parents": [20], "children": [22], "calls": ["append"], "function": "pacificAtlantic", "code": "qA.append((m - 1, j))"}, "22": {"lineno": 30, "parents": [21], "children": [23], "function": "pacificAtlantic", "code": "seenP[0][j] = True"}, "23": {"lineno": 31, "parents": [22], "children": [18], "function": "pacificAtlantic", "code": "seenA[m - 1][j] = True"}, "24": {"lineno": 33, "parents": [40, 41], "children": [26], "function": "bfs", "code": "enter: bfs(q, seen)"}, "25": {"lineno": 33, "parents": [26], "children": [], "function": "bfs", "code": "exit: bfs(q, seen)"}, "26": {"lineno": 34, "parents": [24, 30], "children": [25, 27], "function": "bfs", "code": "_while: q"}, "27": {"lineno": 35, "parents": [26], "children": [28], "calls": ["popleft"], "function": "bfs", "code": "i, j = q.popleft()"}, "28": {"lineno": 36, "parents": [27], "children": [29], "function": "bfs", "code": "h = heights[i][j]"}, "29": {"lineno": 37, "parents": [28], "children": [30], "function": "bfs", "code": "__iv = iter(dirs)"}, "30": {"lineno": 37, "parents": [37, 35, 29, 39], "children": [26, 31], "function": "bfs", "code": "_for: __iv.__length__hint__() > 0"}, "31": {"lineno": 37, "parents": [30], "children": [32], "function": "bfs", "code": "dx, dy = next(__iv)"}, "32": {"lineno": 38, "parents": [31], "children": [33], "function": "bfs", "code": "x = i + dx"}, "33": {"lineno": 39, "parents": [32], "children": [34], "function": "bfs", "code": "y = j + dy"}, "34": {"lineno": 40, "parents": [33], "children": [35, 36], "function": "bfs", "code": "_if: x < 0 or x == m or y < 0 or (y == n)"}, "35": {"lineno": 41, "parents": [34], "children": [30], "function": "bfs", "code": "continue"}, "36": {"lineno": 42, "parents": [34], "children": [37, 38], "function": "bfs", "code": "_if: seen[x][y] or heights[x][y] < h"}, "37": {"lineno": 43, "parents": [36], "children": [30], "function": "bfs", "code": "continue"}, "38": {"lineno": 44, "parents": [36], "children": [39], "calls": ["append"], "function": "bfs", "code": "q.append((x, y))"}, "39": {"lineno": 45, "parents": [38], "children": [30], "function": "bfs", "code": "seen[x][y] = True"}, "40": {"lineno": 47, "parents": [18], "children": [41], "calls": ["bfs"], "function": "pacificAtlantic", "code": "bfs(qP, seenP)"}, "41": {"lineno": 48, "parents": [40, 25], "children": [42], "calls": ["bfs"], "function": "pacificAtlantic", "code": "bfs(qA, seenA)"}, "42": {"lineno": 50, "parents": [41, 25], "children": [43], "function": "pacificAtlantic", "code": "res = []"}, "43": {"lineno": 51, "parents": [42], "children": [44], "function": "pacificAtlantic", "code": "__iv = iter(range(m))"}, "44": {"lineno": 51, "parents": [43, 47], "children": [51, 45], "calls": ["range"], "function": "pacificAtlantic", "code": "_for: __iv.__length__hint__() > 0"}, "45": {"lineno": 51, "parents": [44], "children": [46], "function": "pacificAtlantic", "code": "i = next(__iv)"}, "46": {"lineno": 52, "parents": [45], "children": [47], "function": "pacificAtlantic", "code": "__iv = iter(range(n))"}, "47": {"lineno": 52, "parents": [49, 50, 46], "children": [48, 44], "calls": ["range"], "function": "pacificAtlantic", "code": "_for: __iv.__length__hint__() > 0"}, "48": {"lineno": 52, "parents": [47], "children": [49], "function": "pacificAtlantic", "code": "j = next(__iv)"}, "49": {"lineno": 53, "parents": [48], "children": [50, 47], "function": "pacificAtlantic", "code": "_if: seenP[i][j] and seenA[i][j]"}, "50": {"lineno": 54, "parents": [49], "children": [47], "calls": ["append"], "function": "pacificAtlantic", "code": "res.append([i, j])"}, "51": {"lineno": 55, "parents": [44], "children": [2], "function": "pacificAtlantic", "code": "return res"}, "52": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 420, "task_title": "Strong Password Checker", "difficulty": 3, "func_name": "strongPasswordChecker", "description": "A password is considered strong if the below conditions are all met:\n\n* It has at least `6` characters and at most `20` characters.\n* It contains at least one lowercase letter, at least one uppercase letter, and at least one digit.\n* It does not contain three repeating characters in a row (i.e., `\"Baaabb0\"` is weak, but `\"Baaba0\"` is strong).\n\nGiven a string `password`, return the minimum number of steps required to make\n`password` strong. if `password` is already strong, return `0`.\n\nIn one step, you can:\n\n* Insert one character to `password`,\n* Delete one character from `password`, or\n* Replace one character of `password` with another character.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def strongPasswordChecker(self, password: str) -> int:\n    n = len(password)\n    missing = self._getMissing(password)\n    replaces = 0\n    oneSeq = 0\n    twoSeq = 0\n\n    i = 2\n    while i < n:\n      if password[i] == password[i - 1] and password[i - 1] == password[i - 2]:\n        length = 2\n        while i < n and password[i] == password[i - 1]:\n          length += 1\n          i += 1\n        replaces += length // 3\n        if length % 3 == 0:\n          oneSeq += 1\n        if length % 3 == 1:\n          twoSeq += 1\n      else:\n        i += 1\n\n    if n < 6:\n      return max(6 - n, missing)\n    if n <= 20:\n      return max(replaces, missing)\n\n    deletes = n - 20\n    replaces -= min(oneSeq, deletes)\n    replaces -= min(max(deletes - oneSeq, 0), twoSeq * 2) // 2\n    replaces -= max(deletes - oneSeq - twoSeq * 2, 0) // 3\n    return deletes + max(replaces, missing)\n\n  def _getMissing(self, password: str) -> int:\n    return 3 - any(c.isupper() for c in password) - any(c.islower() for c in password) - any(c.isdigit() for c in password)\n", "blocks": [{"type": "if", "start": 34, "end": 35}, {"type": "if", "start": 36, "end": 37}, {"type": "if", "start": 21, "end": 30}, {"type": "else", "start": 31, "end": 32}, {"type": "if", "start": 27, "end": 28}, {"type": "if", "start": 29, "end": 30}], "target_lines": [22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 35, 37], "cfg": {"0": {"lineno": 0, "parents": [], "children": [33], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "strongPasswordChecker", "code": "enter: strongPasswordChecker(self, password)"}, "2": {"lineno": 12, "parents": [24, 29, 22], "children": [], "function": "strongPasswordChecker", "code": "exit: strongPasswordChecker(self, password)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "strongPasswordChecker", "code": "n = len(password)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["_getMissing"], "function": "strongPasswordChecker", "code": "missing = self._getMissing(password)"}, "5": {"lineno": 15, "parents": [4, 31], "children": [6], "function": "strongPasswordChecker", "code": "replaces = 0"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "strongPasswordChecker", "code": "oneSeq = 0"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "strongPasswordChecker", "code": "twoSeq = 0"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "strongPasswordChecker", "code": "i = 2"}, "9": {"lineno": 20, "parents": [8, 18, 19, 20], "children": [10, 21], "function": "strongPasswordChecker", "code": "_while: i < n"}, "10": {"lineno": 21, "parents": [9], "children": [11, 20], "function": "strongPasswordChecker", "code": "_if: password[i] == password[i - 1] and password[i - 1] == password[i - 2]"}, "11": {"lineno": 22, "parents": [10], "children": [12], "function": "strongPasswordChecker", "code": "length = 2"}, "12": {"lineno": 23, "parents": [11, 14], "children": [13, 15], "function": "strongPasswordChecker", "code": "_while: i < n and password[i] == password[i - 1]"}, "13": {"lineno": 24, "parents": [12], "children": [14], "function": "strongPasswordChecker", "code": "length += 1"}, "14": {"lineno": 25, "parents": [13], "children": [12], "function": "strongPasswordChecker", "code": "i += 1"}, "15": {"lineno": 26, "parents": [12], "children": [16], "function": "strongPasswordChecker", "code": "replaces += length // 3"}, "16": {"lineno": 27, "parents": [15], "children": [17, 18], "function": "strongPasswordChecker", "code": "_if: length % 3 == 0"}, "17": {"lineno": 28, "parents": [16], "children": [18], "function": "strongPasswordChecker", "code": "oneSeq += 1"}, "18": {"lineno": 29, "parents": [16, 17], "children": [9, 19], "function": "strongPasswordChecker", "code": "_if: length % 3 == 1"}, "19": {"lineno": 30, "parents": [18], "children": [9], "function": "strongPasswordChecker", "code": "twoSeq += 1"}, "20": {"lineno": 32, "parents": [10], "children": [9], "function": "strongPasswordChecker", "code": "i += 1"}, "21": {"lineno": 34, "parents": [9], "children": [22, 23], "calls": ["max"], "function": "strongPasswordChecker", "code": "_if: n < 6"}, "22": {"lineno": 35, "parents": [21], "children": [2], "function": "strongPasswordChecker", "code": "return max(6 - n, missing)"}, "23": {"lineno": 36, "parents": [21], "children": [24, 25], "calls": ["max"], "function": "strongPasswordChecker", "code": "_if: n <= 20"}, "24": {"lineno": 37, "parents": [23], "children": [2], "function": "strongPasswordChecker", "code": "return max(replaces, missing)"}, "25": {"lineno": 39, "parents": [23], "children": [26], "function": "strongPasswordChecker", "code": "deletes = n - 20"}, "26": {"lineno": 40, "parents": [25], "children": [27], "calls": ["min"], "function": "strongPasswordChecker", "code": "replaces -= min(oneSeq, deletes)"}, "27": {"lineno": 41, "parents": [26], "children": [28], "calls": ["max", "min"], "function": "strongPasswordChecker", "code": "replaces -= min(max(deletes - oneSeq, 0), twoSeq * 2) // 2"}, "28": {"lineno": 42, "parents": [27], "children": [29], "calls": ["max", "max"], "function": "strongPasswordChecker", "code": "replaces -= max(deletes - oneSeq - twoSeq * 2, 0) // 3"}, "29": {"lineno": 43, "parents": [28], "children": [2], "function": "strongPasswordChecker", "code": "return deletes + max(replaces, missing)"}, "30": {"lineno": 45, "parents": [4], "children": [32], "calls": ["any", "any", "any"], "function": "_getMissing", "code": "enter: _getMissing(self, password)"}, "31": {"lineno": 45, "parents": [32], "children": [], "function": "_getMissing", "code": "exit: _getMissing(self, password)"}, "32": {"lineno": 46, "parents": [30], "children": [31], "function": "_getMissing", "code": "return 3 - any((c.isupper() for c in password)) - any((c.islower() for c in password)) - any((c.isdigit() for c in password))"}, "33": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 423, "task_title": "Reconstruct Original Digits from English", "difficulty": 2, "func_name": "originalDigits", "description": "Given a string `s` containing an out-of-order English representation of digits\n`0-9`, return the digits in ascending order.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def originalDigits(self, s: str) -> str:\n    count = [0] * 10\n\n    for c in s:\n      if c == 'z':\n        count[0] += 1\n      if c == 'o':\n        count[1] += 1\n      if c == 'w':\n        count[2] += 1\n      if c == 'h':\n        count[3] += 1\n      if c == 'u':\n        count[4] += 1\n      if c == 'f':\n        count[5] += 1\n      if c == 'x':\n        count[6] += 1\n      if c == 's':\n        count[7] += 1\n      if c == 'g':\n        count[8] += 1\n      if c == 'i':\n        count[9] += 1\n\n    count[1] -= count[0] + count[2] + count[4]\n    count[3] -= count[8]\n    count[5] -= count[4]\n    count[7] -= count[6]\n    count[9] -= count[5] + count[6] + count[8]\n\n    return ''.join(chr(i + ord('0')) for i, c in enumerate(count) for j in range(c))\n", "blocks": [{"type": "if", "start": 16, "end": 17}, {"type": "if", "start": 18, "end": 19}, {"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 24, "end": 25}, {"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 28, "end": 29}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 34, "end": 35}], "target_lines": [17, 19, 21, 23, 25, 27, 29, 31, 33, 35], "cfg": {"0": {"lineno": 0, "parents": [], "children": [33], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "originalDigits", "code": "enter: originalDigits(self, s)"}, "2": {"lineno": 12, "parents": [32], "children": [], "function": "originalDigits", "code": "exit: originalDigits(self, s)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "originalDigits", "code": "count = [0] * 10"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "originalDigits", "code": "__iv = iter(s)"}, "5": {"lineno": 15, "parents": [25, 26, 4], "children": [27, 6], "function": "originalDigits", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "originalDigits", "code": "c = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8, 9], "function": "originalDigits", "code": "_if: c == 'z'"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "originalDigits", "code": "count[0] += 1"}, "9": {"lineno": 18, "parents": [8, 7], "children": [10, 11], "function": "originalDigits", "code": "_if: c == 'o'"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "originalDigits", "code": "count[1] += 1"}, "11": {"lineno": 20, "parents": [9, 10], "children": [12, 13], "function": "originalDigits", "code": "_if: c == 'w'"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "originalDigits", "code": "count[2] += 1"}, "13": {"lineno": 22, "parents": [11, 12], "children": [14, 15], "function": "originalDigits", "code": "_if: c == 'h'"}, "14": {"lineno": 23, "parents": [13], "children": [15], "function": "originalDigits", "code": "count[3] += 1"}, "15": {"lineno": 24, "parents": [13, 14], "children": [16, 17], "function": "originalDigits", "code": "_if: c == 'u'"}, "16": {"lineno": 25, "parents": [15], "children": [17], "function": "originalDigits", "code": "count[4] += 1"}, "17": {"lineno": 26, "parents": [16, 15], "children": [18, 19], "function": "originalDigits", "code": "_if: c == 'f'"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "originalDigits", "code": "count[5] += 1"}, "19": {"lineno": 28, "parents": [17, 18], "children": [20, 21], "function": "originalDigits", "code": "_if: c == 'x'"}, "20": {"lineno": 29, "parents": [19], "children": [21], "function": "originalDigits", "code": "count[6] += 1"}, "21": {"lineno": 30, "parents": [19, 20], "children": [22, 23], "function": "originalDigits", "code": "_if: c == 's'"}, "22": {"lineno": 31, "parents": [21], "children": [23], "function": "originalDigits", "code": "count[7] += 1"}, "23": {"lineno": 32, "parents": [21, 22], "children": [24, 25], "function": "originalDigits", "code": "_if: c == 'g'"}, "24": {"lineno": 33, "parents": [23], "children": [25], "function": "originalDigits", "code": "count[8] += 1"}, "25": {"lineno": 34, "parents": [24, 23], "children": [26, 5], "function": "originalDigits", "code": "_if: c == 'i'"}, "26": {"lineno": 35, "parents": [25], "children": [5], "function": "originalDigits", "code": "count[9] += 1"}, "27": {"lineno": 37, "parents": [5], "children": [28], "function": "originalDigits", "code": "count[1] -= count[0] + count[2] + count[4]"}, "28": {"lineno": 38, "parents": [27], "children": [29], "function": "originalDigits", "code": "count[3] -= count[8]"}, "29": {"lineno": 39, "parents": [28], "children": [30], "function": "originalDigits", "code": "count[5] -= count[4]"}, "30": {"lineno": 40, "parents": [29], "children": [31], "function": "originalDigits", "code": "count[7] -= count[6]"}, "31": {"lineno": 41, "parents": [30], "children": [32], "calls": ["join"], "function": "originalDigits", "code": "count[9] -= count[5] + count[6] + count[8]"}, "32": {"lineno": 43, "parents": [31], "children": [2], "function": "originalDigits", "code": "return ''.join((chr(i + ord('0')) for i, c in enumerate(count) for j in range(c)))"}, "33": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 457, "task_title": "Circular Array Loop", "difficulty": 2, "func_name": "circularArrayLoop", "description": "You are playing a game involving a circular array of non-zero integers `nums`.\nEach `nums[i]` denotes the number of indices forward/backward you must move if\nyou are located at index `i`:\n\n* If `nums[i]` is positive, move `nums[i]` steps forward, and\n* If `nums[i]` is negative, move `nums[i]` steps backward.\n\nSince the array is circular, you may assume that moving forward from the last\nelement puts you on the first element, and moving backwards from the first\nelement puts you on the last element.\n\nA cycle in the array consists of a sequence of indices `seq` of length `k`\nwhere:\n\n* Following the movement rules above results in the repeating index sequence `seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...`\n* Every `nums[seq[j]]` is either all positive or all negative.\n* `k > 1`\n\nReturn `true` if there is a cycle in `nums`, or `false` otherwise.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def circularArrayLoop(self, nums: List[int]) -> bool:\n    def advance(i: int) -> int:\n      return (i + nums[i]) % len(nums)\n\n    if len(nums) < 2:\n      return False\n\n    for i, num in enumerate(nums):\n      if num == 0:\n        continue\n\n      slow = i\n      fast = advance(slow)\n      while num * nums[fast] > 0 and num * nums[advance(fast)] > 0:\n        if slow == fast:\n          if slow == advance(slow):\n            break\n          return True\n        slow = advance(slow)\n        fast = advance(advance(fast))\n\n      slow = i\n      sign = num\n      while sign * nums[slow] > 0:\n        next = advance(slow)\n        nums[slow] = 0\n        slow = next\n\n    return False\n", "blocks": [{"type": "if", "start": 16, "end": 17}, {"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 26, "end": 29}, {"type": "if", "start": 27, "end": 28}], "target_lines": [17, 21, 27, 28, 29], "cfg": {"0": {"lineno": 0, "parents": [], "children": [29], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [6], "function": "circularArrayLoop", "code": "enter: circularArrayLoop(self, nums)"}, "2": {"lineno": 12, "parents": [19, 28, 7], "children": [], "function": "circularArrayLoop", "code": "exit: circularArrayLoop(self, nums)"}, "3": {"lineno": 13, "parents": [17, 20, 21, 25, 14], "children": [5], "calls": ["len"], "function": "advance", "code": "enter: advance(i)"}, "4": {"lineno": 13, "parents": [5], "children": [], "function": "advance", "code": "exit: advance(i)"}, "5": {"lineno": 14, "parents": [3], "children": [4], "function": "advance", "code": "return (i + nums[i]) % len(nums)"}, "6": {"lineno": 16, "parents": [1], "children": [8, 7], "calls": ["len"], "function": "circularArrayLoop", "code": "_if: len(nums) < 2"}, "7": {"lineno": 17, "parents": [6], "children": [2], "function": "circularArrayLoop", "code": "return False"}, "8": {"lineno": 19, "parents": [6], "children": [9], "function": "circularArrayLoop", "code": "__iv = iter(enumerate(nums))"}, "9": {"lineno": 19, "parents": [8, 24, 12], "children": [10, 28], "calls": ["enumerate"], "function": "circularArrayLoop", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "circularArrayLoop", "code": "i, num = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12, 13], "function": "circularArrayLoop", "code": "_if: num == 0"}, "12": {"lineno": 21, "parents": [11], "children": [9], "function": "circularArrayLoop", "code": "continue"}, "13": {"lineno": 23, "parents": [11], "children": [14], "function": "circularArrayLoop", "code": "slow = i"}, "14": {"lineno": 24, "parents": [13], "children": [15], "calls": ["advance"], "function": "circularArrayLoop", "code": "fast = advance(slow)"}, "15": {"lineno": 25, "parents": [4, 21, 14], "children": [16, 22], "function": "circularArrayLoop", "code": "_while: num * nums[fast] > 0 and num * nums[advance(fast)] > 0"}, "16": {"lineno": 26, "parents": [15], "children": [17, 20], "function": "circularArrayLoop", "code": "_if: slow == fast"}, "17": {"lineno": 27, "parents": [16], "children": [18, 19], "calls": ["advance"], "function": "circularArrayLoop", "code": "_if: slow == advance(slow)"}, "18": {"lineno": 28, "parents": [17, 4], "children": [22], "function": "circularArrayLoop", "code": "break"}, "19": {"lineno": 29, "parents": [17, 4], "children": [2], "function": "circularArrayLoop", "code": "return True"}, "20": {"lineno": 30, "parents": [16], "children": [21], "calls": ["advance"], "function": "circularArrayLoop", "code": "slow = advance(slow)"}, "21": {"lineno": 31, "parents": [20, 4], "children": [15], "calls": ["advance", "advance"], "function": "circularArrayLoop", "code": "fast = advance(advance(fast))"}, "22": {"lineno": 33, "parents": [18, 15], "children": [23], "function": "circularArrayLoop", "code": "slow = i"}, "23": {"lineno": 34, "parents": [22], "children": [24], "function": "circularArrayLoop", "code": "sign = num"}, "24": {"lineno": 35, "parents": [27, 23], "children": [25, 9], "function": "circularArrayLoop", "code": "_while: sign * nums[slow] > 0"}, "25": {"lineno": 36, "parents": [24], "children": [26], "calls": ["advance"], "function": "circularArrayLoop", "code": "next = advance(slow)"}, "26": {"lineno": 37, "parents": [25, 4], "children": [27], "function": "circularArrayLoop", "code": "nums[slow] = 0"}, "27": {"lineno": 38, "parents": [26], "children": [24], "function": "circularArrayLoop", "code": "slow = next"}, "28": {"lineno": 40, "parents": [9], "children": [2], "function": "circularArrayLoop", "code": "return False"}, "29": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 524, "task_title": "Longest Word in Dictionary through Deleting", "difficulty": 2, "func_name": "findLongestWord", "description": "Given a string `s` and a string array `dictionary`, return the longest string\nin the dictionary that can be formed by deleting some of the given string\ncharacters. If there is more than one possible result, return the longest word\nwith the smallest lexicographical order. If there is no possible result,\nreturn the empty string.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def findLongestWord(self, s: str, d: List[str]) -> str:\n    ans = ''\n\n    for word in d:\n      i = 0\n      for c in s:\n        if i < len(word) and c == word[i]:\n          i += 1\n      if i == len(word):\n        if len(word) > len(ans) or len(word) == len(ans) and word < ans:\n          ans = word\n\n    return ans\n", "blocks": [{"type": "if", "start": 20, "end": 22}, {"type": "if", "start": 18, "end": 19}, {"type": "if", "start": 21, "end": 22}], "target_lines": [19, 21, 22], "cfg": {"0": {"lineno": 0, "parents": [], "children": [17], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "findLongestWord", "code": "enter: findLongestWord(self, s, d)"}, "2": {"lineno": 12, "parents": [16], "children": [], "function": "findLongestWord", "code": "exit: findLongestWord(self, s, d)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "findLongestWord", "code": "ans = ''"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "findLongestWord", "code": "__iv = iter(d)"}, "5": {"lineno": 15, "parents": [4, 13, 14, 15], "children": [16, 6], "function": "findLongestWord", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "findLongestWord", "code": "word = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "findLongestWord", "code": "i = 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "findLongestWord", "code": "__iv = iter(s)"}, "9": {"lineno": 17, "parents": [8, 11, 12], "children": [10, 13], "function": "findLongestWord", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 17, "parents": [9], "children": [11], "function": "findLongestWord", "code": "c = next(__iv)"}, "11": {"lineno": 18, "parents": [10], "children": [9, 12], "function": "findLongestWord", "code": "_if: i < len(word) and c == word[i]"}, "12": {"lineno": 19, "parents": [11], "children": [9], "function": "findLongestWord", "code": "i += 1"}, "13": {"lineno": 20, "parents": [9], "children": [5, 14], "calls": ["len"], "function": "findLongestWord", "code": "_if: i == len(word)"}, "14": {"lineno": 21, "parents": [13], "children": [5, 15], "function": "findLongestWord", "code": "_if: len(word) > len(ans) or (len(word) == len(ans) and word < ans)"}, "15": {"lineno": 22, "parents": [14], "children": [5], "function": "findLongestWord", "code": "ans = word"}, "16": {"lineno": 24, "parents": [5], "children": [2], "function": "findLongestWord", "code": "return ans"}, "17": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 542, "task_title": "01 Matrix", "difficulty": 2, "func_name": "updateMatrix", "description": "Given an `m x n` binary matrix `mat`, return the distance of the nearest `0`\nfor each cell.\n\nThe distance between two adjacent cells is `1`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    m = len(mat)\n    n = len(mat[0])\n    q = collections.deque()\n    seen = [[False] * n for _ in range(m)]\n\n    for i in range(m):\n      for j in range(n):\n        if mat[i][j] == 0:\n          q.append((i, j))\n          seen[i][j] = True\n\n    while q:\n      i, j = q.popleft()\n      for dx, dy in dirs:\n        x = i + dx\n        y = j + dy\n        if x < 0 or x == m or y < 0 or y == n:\n          continue\n        if seen[x][y]:\n          continue\n        mat[x][y] = mat[i][j] + 1\n        q.append((x, y))\n        seen[x][y] = True\n\n    return mat\n", "blocks": [{"type": "if", "start": 21, "end": 23}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 32, "end": 33}], "target_lines": [22, 23, 31, 33], "cfg": {"0": {"lineno": 0, "parents": [], "children": [32], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "updateMatrix", "code": "enter: updateMatrix(self, mat)"}, "2": {"lineno": 12, "parents": [31], "children": [], "function": "updateMatrix", "code": "exit: updateMatrix(self, mat)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "updateMatrix", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "updateMatrix", "code": "m = len(mat)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["len"], "function": "updateMatrix", "code": "n = len(mat[0])"}, "6": {"lineno": 16, "parents": [5], "children": [7], "calls": ["deque"], "function": "updateMatrix", "code": "q = collections.deque()"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "updateMatrix", "code": "seen = [[False] * n for _ in range(m)]"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "updateMatrix", "code": "__iv = iter(range(m))"}, "9": {"lineno": 19, "parents": [8, 12], "children": [17, 10], "calls": ["range"], "function": "updateMatrix", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "updateMatrix", "code": "i = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "updateMatrix", "code": "__iv = iter(range(n))"}, "12": {"lineno": 20, "parents": [16, 11, 14], "children": [9, 13], "calls": ["range"], "function": "updateMatrix", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 20, "parents": [12], "children": [14], "function": "updateMatrix", "code": "j = next(__iv)"}, "14": {"lineno": 21, "parents": [13], "children": [12, 15], "function": "updateMatrix", "code": "_if: mat[i][j] == 0"}, "15": {"lineno": 22, "parents": [14], "children": [16], "calls": ["append"], "function": "updateMatrix", "code": "q.append((i, j))"}, "16": {"lineno": 23, "parents": [15], "children": [12], "function": "updateMatrix", "code": "seen[i][j] = True"}, "17": {"lineno": 25, "parents": [9, 20], "children": [18, 31], "function": "updateMatrix", "code": "_while: q"}, "18": {"lineno": 26, "parents": [17], "children": [19], "calls": ["popleft"], "function": "updateMatrix", "code": "i, j = q.popleft()"}, "19": {"lineno": 27, "parents": [18], "children": [20], "function": "updateMatrix", "code": "__iv = iter(dirs)"}, "20": {"lineno": 27, "parents": [27, 25, 19, 30], "children": [17, 21], "function": "updateMatrix", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 27, "parents": [20], "children": [22], "function": "updateMatrix", "code": "dx, dy = next(__iv)"}, "22": {"lineno": 28, "parents": [21], "children": [23], "function": "updateMatrix", "code": "x = i + dx"}, "23": {"lineno": 29, "parents": [22], "children": [24], "function": "updateMatrix", "code": "y = j + dy"}, "24": {"lineno": 30, "parents": [23], "children": [25, 26], "function": "updateMatrix", "code": "_if: x < 0 or x == m or y < 0 or (y == n)"}, "25": {"lineno": 31, "parents": [24], "children": [20], "function": "updateMatrix", "code": "continue"}, "26": {"lineno": 32, "parents": [24], "children": [27, 28], "function": "updateMatrix", "code": "_if: seen[x][y]"}, "27": {"lineno": 33, "parents": [26], "children": [20], "function": "updateMatrix", "code": "continue"}, "28": {"lineno": 34, "parents": [26], "children": [29], "function": "updateMatrix", "code": "mat[x][y] = mat[i][j] + 1"}, "29": {"lineno": 35, "parents": [28], "children": [30], "calls": ["append"], "function": "updateMatrix", "code": "q.append((x, y))"}, "30": {"lineno": 36, "parents": [29], "children": [20], "function": "updateMatrix", "code": "seen[x][y] = True"}, "31": {"lineno": 38, "parents": [17], "children": [2], "function": "updateMatrix", "code": "return mat"}, "32": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 547, "task_title": "Number of Provinces", "difficulty": 2, "func_name": "findCircleNum", "description": "There are `n` cities. Some of them are connected, while some are not. If city\n`a` is connected directly with city `b`, and city `b` is connected directly\nwith city `c`, then city `a` is connected indirectly with city `c`.\n\nA province is a group of directly or indirectly connected cities and no other\ncities outside of the group.\n\nYou are given an `n x n` matrix `isConnected` where `isConnected[i][j] = 1` if\nthe `ith` city and the `jth` city are directly connected, and\n`isConnected[i][j] = 0` otherwise.\n\nReturn the total number of provinces.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.count = n\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self._find(u)\n    j = self._find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n    self.count -= 1\n\n  def _find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self._find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def findCircleNum(self, isConnected: List[List[int]]) -> int:\n    n = len(isConnected)\n    uf = UnionFind(n)\n\n    for i in range(n):\n      for j in range(i, n):\n        if isConnected[i][j] == 1:\n          uf.unionByRank(i, j)\n\n    return uf.count\n", "blocks": [{"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 24, "end": 25}, {"type": "else", "start": 26, "end": 28}, {"type": "if", "start": 44, "end": 45}], "target_lines": [21, 23, 25, 27, 28, 33, 45], "cfg": {"0": {"lineno": 0, "parents": [], "children": [37], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [5], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "__init__", "code": "self.count = n"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "5": {"lineno": 15, "parents": [4], "children": [2], "function": "__init__", "code": "self.rank = [0] * n"}, "6": {"lineno": 17, "parents": [35], "children": [8], "function": "unionByRank", "code": "enter: unionByRank(self, u, v)"}, "7": {"lineno": 17, "parents": [18, 11], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v)"}, "8": {"lineno": 18, "parents": [6], "children": [9], "calls": ["_find"], "function": "unionByRank", "code": "i = self._find(u)"}, "9": {"lineno": 19, "parents": [8, 20], "children": [10], "calls": ["_find"], "function": "unionByRank", "code": "j = self._find(v)"}, "10": {"lineno": 20, "parents": [9, 20], "children": [11, 12], "function": "unionByRank", "code": "_if: i == j"}, "11": {"lineno": 21, "parents": [10], "children": [7], "function": "unionByRank", "code": "return"}, "12": {"lineno": 22, "parents": [10], "children": [13, 14], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "13": {"lineno": 23, "parents": [12], "children": [18], "function": "unionByRank", "code": "self.id[i] = j"}, "14": {"lineno": 24, "parents": [12], "children": [16, 15], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "15": {"lineno": 25, "parents": [14], "children": [18], "function": "unionByRank", "code": "self.id[j] = i"}, "16": {"lineno": 27, "parents": [14], "children": [17], "function": "unionByRank", "code": "self.id[i] = j"}, "17": {"lineno": 28, "parents": [16], "children": [18], "function": "unionByRank", "code": "self.rank[j] += 1"}, "18": {"lineno": 29, "parents": [17, 13, 15], "children": [7], "function": "unionByRank", "code": "self.count -= 1"}, "19": {"lineno": 31, "parents": [8, 9, 22], "children": [21], "function": "_find", "code": "enter: _find(self, u)"}, "20": {"lineno": 31, "parents": [23], "children": [], "function": "_find", "code": "exit: _find(self, u)"}, "21": {"lineno": 32, "parents": [19], "children": [22, 23], "function": "_find", "code": "_if: self.id[u] != u"}, "22": {"lineno": 33, "parents": [21], "children": [23], "calls": ["_find"], "function": "_find", "code": "self.id[u] = self._find(self.id[u])"}, "23": {"lineno": 34, "parents": [20, 21, 22], "children": [20], "function": "_find", "code": "return self.id[u]"}, "24": {"lineno": 38, "parents": [], "children": [26], "function": "findCircleNum", "code": "enter: findCircleNum(self, isConnected)"}, "25": {"lineno": 38, "parents": [36], "children": [], "function": "findCircleNum", "code": "exit: findCircleNum(self, isConnected)"}, "26": {"lineno": 39, "parents": [24], "children": [27], "calls": ["len"], "function": "findCircleNum", "code": "n = len(isConnected)"}, "27": {"lineno": 40, "parents": [26], "children": [28], "calls": ["UnionFind"], "function": "findCircleNum", "code": "uf = UnionFind(n)"}, "28": {"lineno": 42, "parents": [27], "children": [29], "function": "findCircleNum", "code": "__iv = iter(range(n))"}, "29": {"lineno": 42, "parents": [32, 28], "children": [36, 30], "calls": ["range"], "function": "findCircleNum", "code": "_for: __iv.__length__hint__() > 0"}, "30": {"lineno": 42, "parents": [29], "children": [31], "function": "findCircleNum", "code": "i = next(__iv)"}, "31": {"lineno": 43, "parents": [30], "children": [32], "function": "findCircleNum", "code": "__iv = iter(range(i, n))"}, "32": {"lineno": 43, "parents": [34, 35, 7, 31], "children": [33, 29], "calls": ["range"], "function": "findCircleNum", "code": "_for: __iv.__length__hint__() > 0"}, "33": {"lineno": 43, "parents": [32], "children": [34], "function": "findCircleNum", "code": "j = next(__iv)"}, "34": {"lineno": 44, "parents": [33], "children": [32, 35], "function": "findCircleNum", "code": "_if: isConnected[i][j] == 1"}, "35": {"lineno": 45, "parents": [34], "children": [32], "calls": ["unionByRank"], "function": "findCircleNum", "code": "uf.unionByRank(i, j)"}, "36": {"lineno": 47, "parents": [29], "children": [25], "function": "findCircleNum", "code": "return uf.count"}, "37": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 581, "task_title": "Shortest Unsorted Continuous Subarray", "difficulty": 2, "func_name": "findUnsortedSubarray", "description": "Given an integer array `nums`, you need to find one continuous subarray such\nthat if you only sort this subarray in non-decreasing order, then the whole\narray will be sorted in non-decreasing order.\n\nReturn the shortest such subarray and output its length.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def findUnsortedSubarray(self, nums: List[int]) -> int:\n    mini = math.inf\n    maxi = -math.inf\n    flag = False\n\n    for i in range(1, len(nums)):\n      if nums[i] < nums[i - 1]:\n        flag = True\n      if flag:\n        mini = min(mini, nums[i])\n\n    flag = False\n\n    for i in reversed(range(len(nums) - 1)):\n      if nums[i] > nums[i + 1]:\n        flag = True\n      if flag:\n        maxi = max(maxi, nums[i])\n\n    for l in range(len(nums)):\n      if nums[l] > mini:\n        break\n\n    for r, num in reversed(list(enumerate(nums))):\n      if num < maxi:\n        break\n\n    return 0 if l >= r else r - l + 1\n", "blocks": [{"type": "if", "start": 18, "end": 19}, {"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 28, "end": 29}, {"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 36, "end": 37}], "target_lines": [19, 21, 27, 29, 33, 37], "cfg": {"0": {"lineno": 0, "parents": [], "children": [32], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "findUnsortedSubarray", "code": "enter: findUnsortedSubarray(self, nums)"}, "2": {"lineno": 12, "parents": [31], "children": [], "function": "findUnsortedSubarray", "code": "exit: findUnsortedSubarray(self, nums)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "findUnsortedSubarray", "code": "mini = math.inf"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "findUnsortedSubarray", "code": "maxi = -math.inf"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "findUnsortedSubarray", "code": "flag = False"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "findUnsortedSubarray", "code": "__iv = iter(range(1, len(nums)))"}, "7": {"lineno": 17, "parents": [11, 12, 6], "children": [8, 13], "calls": ["len", "range"], "function": "findUnsortedSubarray", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "findUnsortedSubarray", "code": "i = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10, 11], "function": "findUnsortedSubarray", "code": "_if: nums[i] < nums[i - 1]"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "findUnsortedSubarray", "code": "flag = True"}, "11": {"lineno": 20, "parents": [9, 10], "children": [12, 7], "function": "findUnsortedSubarray", "code": "_if: flag"}, "12": {"lineno": 21, "parents": [11], "children": [7], "calls": ["min"], "function": "findUnsortedSubarray", "code": "mini = min(mini, nums[i])"}, "13": {"lineno": 23, "parents": [7], "children": [14], "function": "findUnsortedSubarray", "code": "flag = False"}, "14": {"lineno": 25, "parents": [13], "children": [15], "function": "findUnsortedSubarray", "code": "__iv = iter(reversed(range(len(nums) - 1)))"}, "15": {"lineno": 25, "parents": [19, 20, 14], "children": [16, 21], "calls": ["len", "range", "reversed"], "function": "findUnsortedSubarray", "code": "_for: __iv.__length__hint__() > 0"}, "16": {"lineno": 25, "parents": [15], "children": [17], "function": "findUnsortedSubarray", "code": "i = next(__iv)"}, "17": {"lineno": 26, "parents": [16], "children": [18, 19], "function": "findUnsortedSubarray", "code": "_if: nums[i] > nums[i + 1]"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "findUnsortedSubarray", "code": "flag = True"}, "19": {"lineno": 28, "parents": [17, 18], "children": [20, 15], "function": "findUnsortedSubarray", "code": "_if: flag"}, "20": {"lineno": 29, "parents": [19], "children": [15], "calls": ["max"], "function": "findUnsortedSubarray", "code": "maxi = max(maxi, nums[i])"}, "21": {"lineno": 31, "parents": [15], "children": [22], "function": "findUnsortedSubarray", "code": "__iv = iter(range(len(nums)))"}, "22": {"lineno": 31, "parents": [24, 21], "children": [26, 23], "calls": ["len", "range"], "function": "findUnsortedSubarray", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 31, "parents": [22], "children": [24], "function": "findUnsortedSubarray", "code": "l = next(__iv)"}, "24": {"lineno": 32, "parents": [23], "children": [25, 22], "function": "findUnsortedSubarray", "code": "_if: nums[l] > mini"}, "25": {"lineno": 33, "parents": [24], "children": [26], "function": "findUnsortedSubarray", "code": "break"}, "26": {"lineno": 35, "parents": [25, 22], "children": [27], "function": "findUnsortedSubarray", "code": "__iv = iter(reversed(list(enumerate(nums))))"}, "27": {"lineno": 35, "parents": [26, 29], "children": [28, 31], "calls": ["enumerate", "list", "reversed"], "function": "findUnsortedSubarray", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 35, "parents": [27], "children": [29], "function": "findUnsortedSubarray", "code": "r, num = next(__iv)"}, "29": {"lineno": 36, "parents": [28], "children": [27, 30], "function": "findUnsortedSubarray", "code": "_if: num < maxi"}, "30": {"lineno": 37, "parents": [29], "children": [31], "function": "findUnsortedSubarray", "code": "break"}, "31": {"lineno": 39, "parents": [27, 30], "children": [2], "function": "findUnsortedSubarray", "code": "return 0 if l >= r else r - l + 1"}, "32": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 591, "task_title": "Tag Validator", "difficulty": 3, "func_name": "isValid", "description": "Given a string representing a code snippet, implement a tag validator to parse\nthe code and return whether it is valid.\n\nA code snippet is valid if all the following rules hold:\n\n1. The code must be wrapped in a valid closed tag. Otherwise, the code is invalid.\n2. A closed tag (not necessarily valid) has exactly the following format : `<TAG_NAME>TAG_CONTENT</TAG_NAME>`. Among them, `<TAG_NAME>` is the start tag, and `</TAG_NAME>` is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.\n3. A valid `TAG_NAME` only contain upper-case letters, and has length in range [1,9]. Otherwise, the `TAG_NAME` is invalid.\n4. A valid `TAG_CONTENT` may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched `<`, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the `TAG_CONTENT` is invalid.\n5. A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\n6. A `<` is unmatched if you cannot find a subsequent `>`. And when you find a `<` or `</`, all the subsequent characters until the next `>` should be parsed as TAG_NAME (not necessarily valid).\n7. The cdata has the following format : `<![CDATA[CDATA_CONTENT]]>`. The range of `CDATA_CONTENT` is defined as the characters between `<![CDATA[` and the first subsequent `]]>`.\n8. `CDATA_CONTENT` may contain any characters. The function of cdata is to forbid the validator to parse `CDATA_CONTENT`, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def isValid(self, code: str) -> bool:\n    if code[0] != '<' or code[-1] != '>':\n      return False\n\n    containsTag = False\n    stack = []\n\n    def isValidCdata(s: str) -> bool:\n      return s.find('[CDATA[') == 0\n\n    def isValidTagName(tagName: str, isEndTag: bool) -> bool:\n      nonlocal containsTag\n      if not tagName or len(tagName) > 9:\n        return False\n      if any(not c.isupper() for c in tagName):\n        return False\n\n      if isEndTag:\n        return stack and stack.pop() == tagName\n\n      containsTag = True\n      stack.append(tagName)\n      return True\n\n    i = 0\n    while i < len(code):\n      if not stack and containsTag:\n        return False\n      if code[i] == '<':\n        if stack and code[i + 1] == '!':\n          closeIndex = code.find(']]>', i + 2)\n          if closeIndex == -1 or not isValidCdata(code[i + 2:closeIndex]):\n            return False\n        elif code[i + 1] == '/':\n          closeIndex = code.find('>', i + 2)\n          if closeIndex == -1 or not isValidTagName(code[i + 2:closeIndex], True):\n            return False\n        else:\n          closeIndex = code.find('>', i + 1)\n          if closeIndex == -1 or not isValidTagName(code[i + 1:closeIndex], False):\n            return False\n        i = closeIndex\n      i += 1\n\n    return not stack and containsTag\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "if", "start": 24, "end": 25}, {"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 38, "end": 39}, {"type": "if", "start": 40, "end": 53}, {"type": "if", "start": 41, "end": 44}, {"type": "if", "start": 43, "end": 44}, {"type": "if", "start": 45, "end": 48}, {"type": "else", "start": 49, "end": 52}, {"type": "if", "start": 47, "end": 48}, {"type": "if", "start": 51, "end": 52}], "target_lines": [14, 25, 27, 30, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53], "cfg": {"0": {"lineno": 0, "parents": [], "children": [40], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "isValid", "code": "enter: isValid(self, code)"}, "2": {"lineno": 12, "parents": [33, 4, 36, 39, 24, 29], "children": [], "function": "isValid", "code": "exit: isValid(self, code)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "function": "isValid", "code": "_if: code[0] != '<' or code[-1] != '>'"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "isValid", "code": "return False"}, "5": {"lineno": 16, "parents": [3], "children": [6], "function": "isValid", "code": "containsTag = False"}, "6": {"lineno": 17, "parents": [5], "children": [21], "function": "isValid", "code": "stack = []"}, "7": {"lineno": 19, "parents": [], "children": [9], "calls": ["find"], "function": "isValidCdata", "code": "enter: isValidCdata(s)"}, "8": {"lineno": 19, "parents": [9], "children": [], "function": "isValidCdata", "code": "exit: isValidCdata(s)"}, "9": {"lineno": 20, "parents": [7], "children": [8], "function": "isValidCdata", "code": "return s.find('[CDATA[') == 0"}, "10": {"lineno": 22, "parents": [], "children": [12], "function": "isValidTagName", "code": "enter: isValidTagName(tagName, isEndTag)"}, "11": {"lineno": 22, "parents": [17, 20, 13, 15], "children": [], "function": "isValidTagName", "code": "exit: isValidTagName(tagName, isEndTag)"}, "12": {"lineno": 24, "parents": [10], "children": [13, 14], "function": "isValidTagName", "code": "_if: not tagName or len(tagName) > 9"}, "13": {"lineno": 25, "parents": [12], "children": [11], "function": "isValidTagName", "code": "return False"}, "14": {"lineno": 26, "parents": [12], "children": [16, 15], "calls": ["any"], "function": "isValidTagName", "code": "_if: any((not c.isupper() for c in tagName))"}, "15": {"lineno": 27, "parents": [14], "children": [11], "function": "isValidTagName", "code": "return False"}, "16": {"lineno": 29, "parents": [14], "children": [17, 18], "function": "isValidTagName", "code": "_if: isEndTag"}, "17": {"lineno": 30, "parents": [16], "children": [11], "function": "isValidTagName", "code": "return stack and stack.pop() == tagName"}, "18": {"lineno": 32, "parents": [16], "children": [19], "function": "isValidTagName", "code": "containsTag = True"}, "19": {"lineno": 33, "parents": [18], "children": [20], "calls": ["append"], "function": "isValidTagName", "code": "stack.append(tagName)"}, "20": {"lineno": 34, "parents": [19], "children": [11], "function": "isValidTagName", "code": "return True"}, "21": {"lineno": 36, "parents": [6], "children": [22], "function": "isValid", "code": "i = 0"}, "22": {"lineno": 37, "parents": [21, 38], "children": [39, 23], "calls": ["len"], "function": "isValid", "code": "_while: i < len(code)"}, "23": {"lineno": 38, "parents": [22], "children": [24, 25], "function": "isValid", "code": "_if: not stack and containsTag"}, "24": {"lineno": 39, "parents": [23], "children": [2], "function": "isValid", "code": "return False"}, "25": {"lineno": 40, "parents": [23], "children": [26, 38], "function": "isValid", "code": "_if: code[i] == '<'"}, "26": {"lineno": 41, "parents": [25], "children": [27, 30], "function": "isValid", "code": "_if: stack and code[i + 1] == '!'"}, "27": {"lineno": 42, "parents": [26], "children": [28], "calls": ["find"], "function": "isValid", "code": "closeIndex = code.find(']]>', i + 2)"}, "28": {"lineno": 43, "parents": [27], "children": [37, 29], "function": "isValid", "code": "_if: closeIndex == -1 or not isValidCdata(code[i + 2:closeIndex])"}, "29": {"lineno": 44, "parents": [28], "children": [2], "function": "isValid", "code": "return False"}, "30": {"lineno": 45, "parents": [26], "children": [34, 31], "function": "isValid", "code": "_if: code[i + 1] == '/'"}, "31": {"lineno": 46, "parents": [30], "children": [32], "calls": ["find"], "function": "isValid", "code": "closeIndex = code.find('>', i + 2)"}, "32": {"lineno": 47, "parents": [31], "children": [33, 37], "function": "isValid", "code": "_if: closeIndex == -1 or not isValidTagName(code[i + 2:closeIndex], True)"}, "33": {"lineno": 48, "parents": [32], "children": [2], "function": "isValid", "code": "return False"}, "34": {"lineno": 50, "parents": [30], "children": [35], "calls": ["find"], "function": "isValid", "code": "closeIndex = code.find('>', i + 1)"}, "35": {"lineno": 51, "parents": [34], "children": [36, 37], "function": "isValid", "code": "_if: closeIndex == -1 or not isValidTagName(code[i + 1:closeIndex], False)"}, "36": {"lineno": 52, "parents": [35], "children": [2], "function": "isValid", "code": "return False"}, "37": {"lineno": 53, "parents": [32, 35, 28], "children": [38], "function": "isValid", "code": "i = closeIndex"}, "38": {"lineno": 54, "parents": [25, 37], "children": [22], "function": "isValid", "code": "i += 1"}, "39": {"lineno": 56, "parents": [22], "children": [2], "function": "isValid", "code": "return not stack and containsTag"}, "40": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 648, "task_title": "Replace Words", "difficulty": 2, "func_name": "replaceWords", "description": "In English, we have a concept called root, which can be followed by some other\nword to form another longer word - let's call this word successor. For\nexample, when the root `\"help\"` is followed by the successor word `\"ful\"`, we\ncan form a new word `\"helpful\"`.\n\nGiven a `dictionary` consisting of many roots and a `sentence` consisting of\nwords separated by spaces, replace all the successors in the sentence with the\nroot forming it. If a successor can be replaced by more than one root, replace\nit with the root that has the shortest length.\n\nReturn the `sentence` after the replacement.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def __init__(self):\n    self.root = {}\n\n  def insert(self, word: str) -> None:\n    node = self.root\n    for c in word:\n      if c not in node:\n        node[c] = {}\n      node = node[c]\n    node['word'] = word\n\n  def search(self, word: str) -> str:\n    node = self.root\n    for c in word:\n      if 'word' in node:\n        return node['word']\n      if c not in node:\n        return word\n      node = node[c]\n    return word\n\n  def replaceWords(self, dictionary: List[str], sentence: str) -> str:\n    for word in dictionary:\n      self.insert(word)\n\n    words = sentence.split(' ')\n    return ' '.join([self.search(word) for word in words])\n", "blocks": [{"type": "if", "start": 18, "end": 19}, {"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 28, "end": 29}], "target_lines": [19, 27, 29], "cfg": {"0": {"lineno": 0, "parents": [], "children": [34], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self)"}, "2": {"lineno": 12, "parents": [3], "children": [], "function": "__init__", "code": "exit: __init__(self)"}, "3": {"lineno": 13, "parents": [1], "children": [2], "function": "__init__", "code": "self.root = {}"}, "4": {"lineno": 15, "parents": [31], "children": [6], "function": "insert", "code": "enter: insert(self, word)"}, "5": {"lineno": 15, "parents": [13], "children": [], "function": "insert", "code": "exit: insert(self, word)"}, "6": {"lineno": 16, "parents": [4], "children": [7], "function": "insert", "code": "node = self.root"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "insert", "code": "__iv = iter(word)"}, "8": {"lineno": 17, "parents": [12, 7], "children": [9, 13], "function": "insert", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 17, "parents": [8], "children": [10], "function": "insert", "code": "c = next(__iv)"}, "10": {"lineno": 18, "parents": [9], "children": [11, 12], "function": "insert", "code": "_if: c not in node"}, "11": {"lineno": 19, "parents": [10], "children": [12], "function": "insert", "code": "node[c] = {}"}, "12": {"lineno": 20, "parents": [10, 11], "children": [8], "function": "insert", "code": "node = node[c]"}, "13": {"lineno": 21, "parents": [8], "children": [5], "function": "insert", "code": "node['word'] = word"}, "14": {"lineno": 23, "parents": [], "children": [16], "function": "search", "code": "enter: search(self, word)"}, "15": {"lineno": 23, "parents": [25, 21, 23], "children": [], "function": "search", "code": "exit: search(self, word)"}, "16": {"lineno": 24, "parents": [14], "children": [17], "function": "search", "code": "node = self.root"}, "17": {"lineno": 25, "parents": [16], "children": [18], "function": "search", "code": "__iv = iter(word)"}, "18": {"lineno": 25, "parents": [24, 17], "children": [25, 19], "function": "search", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 25, "parents": [18], "children": [20], "function": "search", "code": "c = next(__iv)"}, "20": {"lineno": 26, "parents": [19], "children": [21, 22], "function": "search", "code": "_if: 'word' in node"}, "21": {"lineno": 27, "parents": [20], "children": [15], "function": "search", "code": "return node['word']"}, "22": {"lineno": 28, "parents": [20], "children": [24, 23], "function": "search", "code": "_if: c not in node"}, "23": {"lineno": 29, "parents": [22], "children": [15], "function": "search", "code": "return word"}, "24": {"lineno": 30, "parents": [22], "children": [18], "function": "search", "code": "node = node[c]"}, "25": {"lineno": 31, "parents": [18], "children": [15], "function": "search", "code": "return word"}, "26": {"lineno": 33, "parents": [], "children": [28], "function": "replaceWords", "code": "enter: replaceWords(self, dictionary, sentence)"}, "27": {"lineno": 33, "parents": [33], "children": [], "function": "replaceWords", "code": "exit: replaceWords(self, dictionary, sentence)"}, "28": {"lineno": 34, "parents": [26], "children": [29], "function": "replaceWords", "code": "__iv = iter(dictionary)"}, "29": {"lineno": 34, "parents": [28, 5, 31], "children": [32, 30], "function": "replaceWords", "code": "_for: __iv.__length__hint__() > 0"}, "30": {"lineno": 34, "parents": [29], "children": [31], "function": "replaceWords", "code": "word = next(__iv)"}, "31": {"lineno": 35, "parents": [30], "children": [29], "calls": ["insert"], "function": "replaceWords", "code": "self.insert(word)"}, "32": {"lineno": 37, "parents": [29], "children": [33], "calls": ["split", "join"], "function": "replaceWords", "code": "words = sentence.split(' ')"}, "33": {"lineno": 38, "parents": [32], "children": [27], "function": "replaceWords", "code": "return ' '.join([self.search(word) for word in words])"}, "34": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 673, "task_title": "Number of Longest Increasing Subsequence", "difficulty": 2, "func_name": "findNumberOfLIS", "description": "Given an integer array `nums`, return the number of longest increasing\nsubsequences.\n\nNotice that the sequence has to be strictly increasing.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def findNumberOfLIS(self, nums: List[int]) -> int:\n    ans = 0\n    maxLength = 0\n    length = [1] * len(nums)\n    count = [1] * len(nums)\n\n    for i, num in enumerate(nums):\n      for j in range(i):\n        if nums[j] < num:\n          if length[i] < length[j] + 1:\n            length[i] = length[j] + 1\n            count[i] = count[j]\n          elif length[i] == length[j] + 1:\n            count[i] += count[j]\n\n    for i, l in enumerate(length):\n      if l > maxLength:\n        maxLength = l\n        ans = count[i]\n      elif l == maxLength:\n        ans += count[i]\n\n    return ans\n", "blocks": [{"type": "if", "start": 28, "end": 30}, {"type": "if", "start": 20, "end": 25}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 21, "end": 23}, {"type": "if", "start": 24, "end": 25}], "target_lines": [21, 22, 23, 24, 25, 29, 30, 32], "cfg": {"0": {"lineno": 0, "parents": [], "children": [28], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "findNumberOfLIS", "code": "enter: findNumberOfLIS(self, nums)"}, "2": {"lineno": 12, "parents": [27], "children": [], "function": "findNumberOfLIS", "code": "exit: findNumberOfLIS(self, nums)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "findNumberOfLIS", "code": "ans = 0"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "findNumberOfLIS", "code": "maxLength = 0"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["len"], "function": "findNumberOfLIS", "code": "length = [1] * len(nums)"}, "6": {"lineno": 16, "parents": [5], "children": [7], "calls": ["len"], "function": "findNumberOfLIS", "code": "count = [1] * len(nums)"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "findNumberOfLIS", "code": "__iv = iter(enumerate(nums))"}, "8": {"lineno": 18, "parents": [11, 7], "children": [9, 19], "calls": ["enumerate"], "function": "findNumberOfLIS", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "findNumberOfLIS", "code": "i, num = next(__iv)"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "findNumberOfLIS", "code": "__iv = iter(range(i))"}, "11": {"lineno": 19, "parents": [16, 17, 18, 10, 13], "children": [8, 12], "calls": ["range"], "function": "findNumberOfLIS", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 19, "parents": [11], "children": [13], "function": "findNumberOfLIS", "code": "j = next(__iv)"}, "13": {"lineno": 20, "parents": [12], "children": [11, 14], "function": "findNumberOfLIS", "code": "_if: nums[j] < num"}, "14": {"lineno": 21, "parents": [13], "children": [17, 15], "function": "findNumberOfLIS", "code": "_if: length[i] < length[j] + 1"}, "15": {"lineno": 22, "parents": [14], "children": [16], "function": "findNumberOfLIS", "code": "length[i] = length[j] + 1"}, "16": {"lineno": 23, "parents": [15], "children": [11], "function": "findNumberOfLIS", "code": "count[i] = count[j]"}, "17": {"lineno": 24, "parents": [14], "children": [18, 11], "function": "findNumberOfLIS", "code": "_if: length[i] == length[j] + 1"}, "18": {"lineno": 25, "parents": [17], "children": [11], "function": "findNumberOfLIS", "code": "count[i] += count[j]"}, "19": {"lineno": 27, "parents": [8], "children": [20], "function": "findNumberOfLIS", "code": "__iv = iter(enumerate(length))"}, "20": {"lineno": 27, "parents": [24, 25, 26, 19], "children": [27, 21], "calls": ["enumerate"], "function": "findNumberOfLIS", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 27, "parents": [20], "children": [22], "function": "findNumberOfLIS", "code": "i, l = next(__iv)"}, "22": {"lineno": 28, "parents": [21], "children": [25, 23], "function": "findNumberOfLIS", "code": "_if: l > maxLength"}, "23": {"lineno": 29, "parents": [22], "children": [24], "function": "findNumberOfLIS", "code": "maxLength = l"}, "24": {"lineno": 30, "parents": [23], "children": [20], "function": "findNumberOfLIS", "code": "ans = count[i]"}, "25": {"lineno": 31, "parents": [22], "children": [26, 20], "function": "findNumberOfLIS", "code": "_if: l == maxLength"}, "26": {"lineno": 32, "parents": [25], "children": [20], "function": "findNumberOfLIS", "code": "ans += count[i]"}, "27": {"lineno": 34, "parents": [20], "children": [2], "function": "findNumberOfLIS", "code": "return ans"}, "28": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 684, "task_title": "Redundant Connection", "difficulty": 2, "func_name": "findRedundantConnection", "description": "In this problem, a tree is an undirected graph that is connected and has no\ncycles.\n\nYou are given a graph that started as a tree with `n` nodes labeled from `1`\nto `n`, with one additional edge added. The added edge has two different\nvertices chosen from `1` to `n`, and was not an edge that already existed. The\ngraph is represented as an array `edges` of length `n` where `edges[i] = [ai,\nbi]` indicates that there is an edge between nodes `ai` and `bi` in the graph.\n\nReturn an edge that can be removed so that the resulting graph is a tree of\n`n` nodes. If there are multiple answers, return the answer that occurs last\nin the input.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> bool:\n    i = self._find(u)\n    j = self._find(v)\n    if i == j:\n      return False\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n    return True\n\n  def _find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self._find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n    uf = UnionFind(len(edges) + 1)\n\n    for edge in edges:\n      u, v = edge\n      if not uf.unionByRank(u, v):\n        return edge\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 23, "end": 24}, {"type": "else", "start": 25, "end": 27}, {"type": "if", "start": 42, "end": 43}], "target_lines": [20, 22, 24, 26, 27, 32, 43], "cfg": {"0": {"lineno": 0, "parents": [], "children": [32], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.rank = [0] * n"}, "5": {"lineno": 16, "parents": [30], "children": [7], "function": "unionByRank", "code": "enter: unionByRank(self, u, v)"}, "6": {"lineno": 16, "parents": [17, 10], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "calls": ["_find"], "function": "unionByRank", "code": "i = self._find(u)"}, "8": {"lineno": 18, "parents": [19, 7], "children": [9], "calls": ["_find"], "function": "unionByRank", "code": "j = self._find(v)"}, "9": {"lineno": 19, "parents": [8, 19], "children": [10, 11], "function": "unionByRank", "code": "_if: i == j"}, "10": {"lineno": 20, "parents": [9], "children": [6], "function": "unionByRank", "code": "return False"}, "11": {"lineno": 21, "parents": [9], "children": [12, 13], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "12": {"lineno": 22, "parents": [11], "children": [17], "function": "unionByRank", "code": "self.id[i] = j"}, "13": {"lineno": 23, "parents": [11], "children": [14, 15], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "14": {"lineno": 24, "parents": [13], "children": [17], "function": "unionByRank", "code": "self.id[j] = i"}, "15": {"lineno": 26, "parents": [13], "children": [16], "function": "unionByRank", "code": "self.id[i] = j"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "unionByRank", "code": "self.rank[j] += 1"}, "17": {"lineno": 28, "parents": [16, 12, 14], "children": [6], "function": "unionByRank", "code": "return True"}, "18": {"lineno": 30, "parents": [8, 21, 7], "children": [20], "function": "_find", "code": "enter: _find(self, u)"}, "19": {"lineno": 30, "parents": [22], "children": [], "function": "_find", "code": "exit: _find(self, u)"}, "20": {"lineno": 31, "parents": [18], "children": [21, 22], "function": "_find", "code": "_if: self.id[u] != u"}, "21": {"lineno": 32, "parents": [20], "children": [22], "calls": ["_find"], "function": "_find", "code": "self.id[u] = self._find(self.id[u])"}, "22": {"lineno": 33, "parents": [19, 20, 21], "children": [19], "function": "_find", "code": "return self.id[u]"}, "23": {"lineno": 37, "parents": [], "children": [25], "function": "findRedundantConnection", "code": "enter: findRedundantConnection(self, edges)"}, "24": {"lineno": 37, "parents": [27, 31], "children": [], "function": "findRedundantConnection", "code": "exit: findRedundantConnection(self, edges)"}, "25": {"lineno": 38, "parents": [23], "children": [26], "calls": ["len", "UnionFind"], "function": "findRedundantConnection", "code": "uf = UnionFind(len(edges) + 1)"}, "26": {"lineno": 40, "parents": [25], "children": [27], "function": "findRedundantConnection", "code": "__iv = iter(edges)"}, "27": {"lineno": 40, "parents": [26, 30, 6], "children": [24, 28], "function": "findRedundantConnection", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 40, "parents": [27], "children": [29], "function": "findRedundantConnection", "code": "edge = next(__iv)"}, "29": {"lineno": 41, "parents": [28], "children": [30], "function": "findRedundantConnection", "code": "u, v = edge"}, "30": {"lineno": 42, "parents": [29], "children": [27, 31], "calls": ["unionByRank"], "function": "findRedundantConnection", "code": "_if: not uf.unionByRank(u, v)"}, "31": {"lineno": 43, "parents": [30, 6], "children": [24], "function": "findRedundantConnection", "code": "return edge"}, "32": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 685, "task_title": "Redundant Connection II", "difficulty": 3, "func_name": "findRedundantDirectedConnection", "description": "In this problem, a rooted tree is a directed graph such that, there is exactly\none node (the root) for which all other nodes are descendants of this node,\nplus every node has exactly one parent, except for the root node which has no\nparents.\n\nThe given input is a directed graph that started as a rooted tree with `n`\nnodes (with distinct values from `1` to `n`), with one additional directed\nedge added. The added edge has two different vertices chosen from `1` to `n`,\nand was not an edge that already existed.\n\nThe resulting graph is given as a 2D-array of `edges`. Each element of `edges`\nis a pair `[ui, vi]` that represents a directed edge connecting nodes `ui` and\n`vi`, where `ui` is a parent of child `vi`.\n\nReturn an edge that can be removed so that the resulting graph is a rooted\ntree of `n` nodes. If there are multiple answers, return the answer that\noccurs last in the given 2D-array.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> bool:\n    i = self._find(u)\n    j = self._find(v)\n    if i == j:\n      return False\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n    return True\n\n  def _find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self._find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def findRedundantDirectedConnection(self, edges: List[List[int]]) -> List[int]:\n    ids = [0] * (len(edges) + 1)\n    nodeWithTwoParents = 0\n\n    for _, v in edges:\n      ids[v] += 1\n      if ids[v] == 2:\n        nodeWithTwoParents = v\n\n    def findRedundantDirectedConnection(skippedEdgeIndex: int) -> List[int]:\n      uf = UnionFind(len(edges) + 1)\n\n      for i, edge in enumerate(edges):\n        if i == skippedEdgeIndex:\n          continue\n        if not uf.unionByRank(edge[0], edge[1]):\n          return edge\n\n      return []\n\n    if nodeWithTwoParents == 0:\n      return findRedundantDirectedConnection(-1)\n\n    for i in reversed(range(len(edges))):\n      _, v = edges[i]\n      if v == nodeWithTwoParents:\n        if not findRedundantDirectedConnection(i):\n          return edges[i]\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 57, "end": 58}, {"type": "if", "start": 23, "end": 24}, {"type": "else", "start": 25, "end": 27}, {"type": "if", "start": 43, "end": 44}, {"type": "if", "start": 62, "end": 64}, {"type": "if", "start": 50, "end": 51}, {"type": "if", "start": 52, "end": 53}, {"type": "if", "start": 63, "end": 64}], "target_lines": [20, 22, 24, 26, 27, 32, 44, 51, 53, 58, 63, 64], "cfg": {"0": {"lineno": 0, "parents": [], "children": [53], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.rank = [0] * n"}, "5": {"lineno": 16, "parents": [41], "children": [7], "function": "unionByRank", "code": "enter: unionByRank(self, u, v)"}, "6": {"lineno": 16, "parents": [17, 10], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "calls": ["_find"], "function": "unionByRank", "code": "i = self._find(u)"}, "8": {"lineno": 18, "parents": [19, 7], "children": [9], "calls": ["_find"], "function": "unionByRank", "code": "j = self._find(v)"}, "9": {"lineno": 19, "parents": [8, 19], "children": [10, 11], "function": "unionByRank", "code": "_if: i == j"}, "10": {"lineno": 20, "parents": [9], "children": [6], "function": "unionByRank", "code": "return False"}, "11": {"lineno": 21, "parents": [9], "children": [12, 13], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "12": {"lineno": 22, "parents": [11], "children": [17], "function": "unionByRank", "code": "self.id[i] = j"}, "13": {"lineno": 23, "parents": [11], "children": [14, 15], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "14": {"lineno": 24, "parents": [13], "children": [17], "function": "unionByRank", "code": "self.id[j] = i"}, "15": {"lineno": 26, "parents": [13], "children": [16], "function": "unionByRank", "code": "self.id[i] = j"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "unionByRank", "code": "self.rank[j] += 1"}, "17": {"lineno": 28, "parents": [16, 12, 14], "children": [6], "function": "unionByRank", "code": "return True"}, "18": {"lineno": 30, "parents": [8, 21, 7], "children": [20], "function": "_find", "code": "enter: _find(self, u)"}, "19": {"lineno": 30, "parents": [22], "children": [], "function": "_find", "code": "exit: _find(self, u)"}, "20": {"lineno": 31, "parents": [18], "children": [21, 22], "function": "_find", "code": "_if: self.id[u] != u"}, "21": {"lineno": 32, "parents": [20], "children": [22], "calls": ["_find"], "function": "_find", "code": "self.id[u] = self._find(self.id[u])"}, "22": {"lineno": 33, "parents": [19, 20, 21], "children": [19], "function": "_find", "code": "return self.id[u]"}, "23": {"lineno": 37, "parents": [51, 44], "children": [25], "function": "findRedundantDirectedConnection", "code": "enter: findRedundantDirectedConnection(self, edges)"}, "24": {"lineno": 37, "parents": [52, 45, 47], "children": [], "function": "findRedundantDirectedConnection", "code": "exit: findRedundantDirectedConnection(self, edges)"}, "25": {"lineno": 38, "parents": [23], "children": [26], "calls": ["len"], "function": "findRedundantDirectedConnection", "code": "ids = [0] * (len(edges) + 1)"}, "26": {"lineno": 39, "parents": [25], "children": [27], "function": "findRedundantDirectedConnection", "code": "nodeWithTwoParents = 0"}, "27": {"lineno": 41, "parents": [26], "children": [28], "function": "findRedundantDirectedConnection", "code": "__iv = iter(edges)"}, "28": {"lineno": 41, "parents": [32, 27, 31], "children": [44, 29], "function": "findRedundantDirectedConnection", "code": "_for: __iv.__length__hint__() > 0"}, "29": {"lineno": 41, "parents": [28], "children": [30], "function": "findRedundantDirectedConnection", "code": "_, v = next(__iv)"}, "30": {"lineno": 42, "parents": [29], "children": [31], "function": "findRedundantDirectedConnection", "code": "ids[v] += 1"}, "31": {"lineno": 43, "parents": [30], "children": [32, 28], "function": "findRedundantDirectedConnection", "code": "_if: ids[v] == 2"}, "32": {"lineno": 44, "parents": [31], "children": [28], "function": "findRedundantDirectedConnection", "code": "nodeWithTwoParents = v"}, "33": {"lineno": 46, "parents": [], "children": [35], "function": "findRedundantDirectedConnection", "code": "enter: findRedundantDirectedConnection(skippedEdgeIndex)"}, "34": {"lineno": 46, "parents": [42, 43], "children": [], "function": "findRedundantDirectedConnection", "code": "exit: findRedundantDirectedConnection(skippedEdgeIndex)"}, "35": {"lineno": 47, "parents": [33], "children": [36], "calls": ["len", "UnionFind"], "function": "findRedundantDirectedConnection", "code": "uf = UnionFind(len(edges) + 1)"}, "36": {"lineno": 49, "parents": [35], "children": [37], "function": "findRedundantDirectedConnection", "code": "__iv = iter(enumerate(edges))"}, "37": {"lineno": 49, "parents": [40, 41, 36, 6], "children": [43, 38], "calls": ["enumerate"], "function": "findRedundantDirectedConnection", "code": "_for: __iv.__length__hint__() > 0"}, "38": {"lineno": 49, "parents": [37], "children": [39], "function": "findRedundantDirectedConnection", "code": "i, edge = next(__iv)"}, "39": {"lineno": 50, "parents": [38], "children": [40, 41], "function": "findRedundantDirectedConnection", "code": "_if: i == skippedEdgeIndex"}, "40": {"lineno": 51, "parents": [39], "children": [37], "function": "findRedundantDirectedConnection", "code": "continue"}, "41": {"lineno": 52, "parents": [39], "children": [42, 37], "calls": ["unionByRank"], "function": "findRedundantDirectedConnection", "code": "_if: not uf.unionByRank(edge[0], edge[1])"}, "42": {"lineno": 53, "parents": [41, 6], "children": [34], "function": "findRedundantDirectedConnection", "code": "return edge"}, "43": {"lineno": 55, "parents": [37], "children": [34], "function": "findRedundantDirectedConnection", "code": "return []"}, "44": {"lineno": 57, "parents": [28], "children": [45, 46], "calls": ["findRedundantDirectedConnection"], "function": "findRedundantDirectedConnection", "code": "_if: nodeWithTwoParents == 0"}, "45": {"lineno": 58, "parents": [24, 44], "children": [24], "function": "findRedundantDirectedConnection", "code": "return findRedundantDirectedConnection(-1)"}, "46": {"lineno": 60, "parents": [24, 44], "children": [47], "function": "findRedundantDirectedConnection", "code": "__iv = iter(reversed(range(len(edges))))"}, "47": {"lineno": 60, "parents": [24, 50, 51, 46], "children": [48, 24], "calls": ["len", "range", "reversed"], "function": "findRedundantDirectedConnection", "code": "_for: __iv.__length__hint__() > 0"}, "48": {"lineno": 60, "parents": [47], "children": [49], "function": "findRedundantDirectedConnection", "code": "i = next(__iv)"}, "49": {"lineno": 61, "parents": [48], "children": [50], "function": "findRedundantDirectedConnection", "code": "_, v = edges[i]"}, "50": {"lineno": 62, "parents": [49], "children": [51, 47], "function": "findRedundantDirectedConnection", "code": "_if: v == nodeWithTwoParents"}, "51": {"lineno": 63, "parents": [50], "children": [52, 47], "calls": ["findRedundantDirectedConnection"], "function": "findRedundantDirectedConnection", "code": "_if: not findRedundantDirectedConnection(i)"}, "52": {"lineno": 64, "parents": [24, 51], "children": [24], "function": "findRedundantDirectedConnection", "code": "return edges[i]"}, "53": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 688, "task_title": "Knight Probability in Chessboard", "difficulty": 2, "func_name": "knightProbability", "description": "On an `n x n` chessboard, a knight starts at the cell `(row, column)` and\nattempts to make exactly `k` moves. The rows and columns are 0-indexed, so the\ntop-left cell is `(0, 0)`, and the bottom-right cell is `(n - 1, n - 1)`.\n\nA chess knight has eight possible moves it can make, as illustrated below.\nEach move is two cells in a cardinal direction, then one cell in an orthogonal\ndirection.\n\nEach time the knight is to move, it chooses one of eight possible moves\nuniformly at random (even if the piece would go off the chessboard) and moves\nthere.\n\nThe knight continues moving until it has made exactly `k` moves or has moved\noff the chessboard.\n\nReturn the probability that the knight remains on the board after it has\nstopped moving.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def knightProbability(self, n: int, k: int, row: int, column: int) -> float:\n    dirs = ((1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1), (-2, 1), (-1, 2))\n    dp = [[0] * n for _ in range(n)]\n    dp[row][column] = 1.0\n\n    for _ in range(k):\n      newDp = [[0] * n for _ in range(n)]\n      for i in range(n):\n        for j in range(n):\n          for dx, dy in dirs:\n            x = i + dx\n            y = j + dy\n            if 0 <= x < n and 0 <= y < n:\n              newDp[i][j] += dp[x][y]\n      dp = newDp\n\n    return sum(map(sum, dp)) / 8**k\n", "blocks": [{"type": "if", "start": 24, "end": 25}], "target_lines": [25], "cfg": {"0": {"lineno": 0, "parents": [], "children": [25], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "knightProbability", "code": "enter: knightProbability(self, n, k, row, column)"}, "2": {"lineno": 12, "parents": [24], "children": [], "function": "knightProbability", "code": "exit: knightProbability(self, n, k, row, column)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "knightProbability", "code": "dirs = ((1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1), (-2, 1), (-1, 2))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "knightProbability", "code": "dp = [[0] * n for _ in range(n)]"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "knightProbability", "code": "dp[row][column] = 1.0"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "knightProbability", "code": "__iv = iter(range(k))"}, "7": {"lineno": 17, "parents": [6, 23], "children": [8, 24], "calls": ["range", "map", "sum"], "function": "knightProbability", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "knightProbability", "code": "_ = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "knightProbability", "code": "newDp = [[0] * n for _ in range(n)]"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "knightProbability", "code": "__iv = iter(range(n))"}, "11": {"lineno": 19, "parents": [10, 14], "children": [12, 23], "calls": ["range"], "function": "knightProbability", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 19, "parents": [11], "children": [13], "function": "knightProbability", "code": "i = next(__iv)"}, "13": {"lineno": 20, "parents": [12], "children": [14], "function": "knightProbability", "code": "__iv = iter(range(n))"}, "14": {"lineno": 20, "parents": [17, 13], "children": [11, 15], "calls": ["range"], "function": "knightProbability", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 20, "parents": [14], "children": [16], "function": "knightProbability", "code": "j = next(__iv)"}, "16": {"lineno": 21, "parents": [15], "children": [17], "function": "knightProbability", "code": "__iv = iter(dirs)"}, "17": {"lineno": 21, "parents": [16, 21, 22], "children": [18, 14], "function": "knightProbability", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 21, "parents": [17], "children": [19], "function": "knightProbability", "code": "dx, dy = next(__iv)"}, "19": {"lineno": 22, "parents": [18], "children": [20], "function": "knightProbability", "code": "x = i + dx"}, "20": {"lineno": 23, "parents": [19], "children": [21], "function": "knightProbability", "code": "y = j + dy"}, "21": {"lineno": 24, "parents": [20], "children": [17, 22], "function": "knightProbability", "code": "_if: 0 <= x < n and 0 <= y < n"}, "22": {"lineno": 25, "parents": [21], "children": [17], "function": "knightProbability", "code": "newDp[i][j] += dp[x][y]"}, "23": {"lineno": 26, "parents": [11], "children": [7], "function": "knightProbability", "code": "dp = newDp"}, "24": {"lineno": 28, "parents": [7], "children": [2], "function": "knightProbability", "code": "return sum(map(sum, dp)) / 8 ** k"}, "25": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 689, "task_title": "Maximum Sum of 3 Non-Overlapping Subarrays", "difficulty": 3, "func_name": "maxSumOfThreeSubarrays", "description": "Given an integer array `nums` and an integer `k`, find three non-overlapping\nsubarrays of length `k` with maximum sum and return them.\n\nReturn the result as a list of indices representing the starting position of\neach interval (0-indexed). If there are multiple answers, return the\nlexicographically smallest one.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:\n    n = len(nums) - k + 1\n    sums = [0] * n\n    l = [0] * n\n    r = [0] * n\n\n    summ = 0\n    for i, num in enumerate(nums):\n      summ += num\n      if i >= k:\n        summ -= nums[i - k]\n      if i >= k - 1:\n        sums[i - k + 1] = summ\n\n    maxIndex = 0\n    for i in range(n):\n      if sums[i] > sums[maxIndex]:\n        maxIndex = i\n      l[i] = maxIndex\n\n    maxIndex = n - 1\n    for i in range(n - 1, -1, -1):\n      if sums[i] >= sums[maxIndex]:\n        maxIndex = i\n      r[i] = maxIndex\n\n    ans = [-1, -1, -1]\n\n    for i in range(k, n - k):\n      if ans[0] == -1 or sums[ans[0]] + sums[ans[1]] + sums[ans[2]] < sums[l[i - k]] + sums[i] + sums[r[i + k]]:\n        ans[0] = l[i - k]\n        ans[1] = i\n        ans[2] = r[i + k]\n\n    return ans\n", "blocks": [{"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 23, "end": 24}, {"type": "if", "start": 28, "end": 29}, {"type": "if", "start": 34, "end": 35}, {"type": "if", "start": 41, "end": 44}], "target_lines": [22, 24, 29, 35, 42, 43, 44], "cfg": {"0": {"lineno": 0, "parents": [], "children": [39], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "maxSumOfThreeSubarrays", "code": "enter: maxSumOfThreeSubarrays(self, nums, k)"}, "2": {"lineno": 12, "parents": [38], "children": [], "function": "maxSumOfThreeSubarrays", "code": "exit: maxSumOfThreeSubarrays(self, nums, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "maxSumOfThreeSubarrays", "code": "n = len(nums) - k + 1"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "maxSumOfThreeSubarrays", "code": "sums = [0] * n"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "maxSumOfThreeSubarrays", "code": "l = [0] * n"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "maxSumOfThreeSubarrays", "code": "r = [0] * n"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "maxSumOfThreeSubarrays", "code": "summ = 0"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "maxSumOfThreeSubarrays", "code": "__iv = iter(enumerate(nums))"}, "9": {"lineno": 19, "parents": [8, 14, 15], "children": [16, 10], "calls": ["enumerate"], "function": "maxSumOfThreeSubarrays", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "maxSumOfThreeSubarrays", "code": "i, num = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "maxSumOfThreeSubarrays", "code": "summ += num"}, "12": {"lineno": 21, "parents": [11], "children": [13, 14], "function": "maxSumOfThreeSubarrays", "code": "_if: i >= k"}, "13": {"lineno": 22, "parents": [12], "children": [14], "function": "maxSumOfThreeSubarrays", "code": "summ -= nums[i - k]"}, "14": {"lineno": 23, "parents": [12, 13], "children": [9, 15], "function": "maxSumOfThreeSubarrays", "code": "_if: i >= k - 1"}, "15": {"lineno": 24, "parents": [14], "children": [9], "function": "maxSumOfThreeSubarrays", "code": "sums[i - k + 1] = summ"}, "16": {"lineno": 26, "parents": [9], "children": [17], "function": "maxSumOfThreeSubarrays", "code": "maxIndex = 0"}, "17": {"lineno": 27, "parents": [16], "children": [18], "function": "maxSumOfThreeSubarrays", "code": "__iv = iter(range(n))"}, "18": {"lineno": 27, "parents": [17, 22], "children": [19, 23], "calls": ["range"], "function": "maxSumOfThreeSubarrays", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 27, "parents": [18], "children": [20], "function": "maxSumOfThreeSubarrays", "code": "i = next(__iv)"}, "20": {"lineno": 28, "parents": [19], "children": [21, 22], "function": "maxSumOfThreeSubarrays", "code": "_if: sums[i] > sums[maxIndex]"}, "21": {"lineno": 29, "parents": [20], "children": [22], "function": "maxSumOfThreeSubarrays", "code": "maxIndex = i"}, "22": {"lineno": 30, "parents": [20, 21], "children": [18], "function": "maxSumOfThreeSubarrays", "code": "l[i] = maxIndex"}, "23": {"lineno": 32, "parents": [18], "children": [24], "function": "maxSumOfThreeSubarrays", "code": "maxIndex = n - 1"}, "24": {"lineno": 33, "parents": [23], "children": [25], "function": "maxSumOfThreeSubarrays", "code": "__iv = iter(range(n - 1, -1, -1))"}, "25": {"lineno": 33, "parents": [24, 29], "children": [26, 30], "calls": ["range"], "function": "maxSumOfThreeSubarrays", "code": "_for: __iv.__length__hint__() > 0"}, "26": {"lineno": 33, "parents": [25], "children": [27], "function": "maxSumOfThreeSubarrays", "code": "i = next(__iv)"}, "27": {"lineno": 34, "parents": [26], "children": [28, 29], "function": "maxSumOfThreeSubarrays", "code": "_if: sums[i] >= sums[maxIndex]"}, "28": {"lineno": 35, "parents": [27], "children": [29], "function": "maxSumOfThreeSubarrays", "code": "maxIndex = i"}, "29": {"lineno": 36, "parents": [27, 28], "children": [25], "function": "maxSumOfThreeSubarrays", "code": "r[i] = maxIndex"}, "30": {"lineno": 38, "parents": [25], "children": [31], "function": "maxSumOfThreeSubarrays", "code": "ans = [-1, -1, -1]"}, "31": {"lineno": 40, "parents": [30], "children": [32], "function": "maxSumOfThreeSubarrays", "code": "__iv = iter(range(k, n - k))"}, "32": {"lineno": 40, "parents": [34, 37, 31], "children": [33, 38], "calls": ["range"], "function": "maxSumOfThreeSubarrays", "code": "_for: __iv.__length__hint__() > 0"}, "33": {"lineno": 40, "parents": [32], "children": [34], "function": "maxSumOfThreeSubarrays", "code": "i = next(__iv)"}, "34": {"lineno": 41, "parents": [33], "children": [32, 35], "function": "maxSumOfThreeSubarrays", "code": "_if: ans[0] == -1 or sums[ans[0]] + sums[ans[1]] + sums[ans[2]] < sums[l[i - k]] + sums[i] + sums[r[i + k]]"}, "35": {"lineno": 42, "parents": [34], "children": [36], "function": "maxSumOfThreeSubarrays", "code": "ans[0] = l[i - k]"}, "36": {"lineno": 43, "parents": [35], "children": [37], "function": "maxSumOfThreeSubarrays", "code": "ans[1] = i"}, "37": {"lineno": 44, "parents": [36], "children": [32], "function": "maxSumOfThreeSubarrays", "code": "ans[2] = r[i + k]"}, "38": {"lineno": 46, "parents": [32], "children": [2], "function": "maxSumOfThreeSubarrays", "code": "return ans"}, "39": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 691, "task_title": "Stickers to Spell Word", "difficulty": 3, "func_name": "minStickers", "description": "We are given `n` different types of `stickers`. Each sticker has a lowercase\nEnglish word on it.\n\nYou would like to spell out the given string `target` by cutting individual\nletters from your collection of stickers and rearranging them. You can use\neach sticker more than once if you want, and you have infinite quantities of\neach sticker.\n\nReturn the minimum number of stickers that you need to spell out `target`. If\nthe task is impossible, return `-1`.\n\nNote: In all test cases, all words were chosen randomly from the `1000` most\ncommon US English words, and `target` was chosen as a concatenation of two\nrandom words.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minStickers(self, stickers: List[str], target: str) -> int:\n    maxMask = 1 << len(target)\n    dp = [math.inf] * maxMask\n    dp[0] = 0\n\n    for mask in range(maxMask):\n      if dp[mask] == math.inf:\n        continue\n      for sticker in stickers:\n        superMask = mask\n        for c in sticker:\n          for i, t in enumerate(target):\n            if c == t and not (superMask >> i & 1):\n              superMask |= 1 << i\n              break\n        dp[superMask] = min(dp[superMask], dp[mask] + 1)\n\n    return -1 if dp[-1] == math.inf else dp[-1]\n", "blocks": [{"type": "if", "start": 18, "end": 19}, {"type": "if", "start": 24, "end": 26}], "target_lines": [19, 25, 26], "cfg": {"0": {"lineno": 0, "parents": [], "children": [26], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minStickers", "code": "enter: minStickers(self, stickers, target)"}, "2": {"lineno": 12, "parents": [25], "children": [], "function": "minStickers", "code": "exit: minStickers(self, stickers, target)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "minStickers", "code": "maxMask = 1 << len(target)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "minStickers", "code": "dp = [math.inf] * maxMask"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "minStickers", "code": "dp[0] = 0"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "minStickers", "code": "__iv = iter(range(maxMask))"}, "7": {"lineno": 17, "parents": [10, 12, 6], "children": [8, 25], "calls": ["range"], "function": "minStickers", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "minStickers", "code": "mask = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10, 11], "function": "minStickers", "code": "_if: dp[mask] == math.inf"}, "10": {"lineno": 19, "parents": [9], "children": [7], "function": "minStickers", "code": "continue"}, "11": {"lineno": 20, "parents": [9], "children": [12], "function": "minStickers", "code": "__iv = iter(stickers)"}, "12": {"lineno": 20, "parents": [24, 11], "children": [13, 7], "function": "minStickers", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 20, "parents": [12], "children": [14], "function": "minStickers", "code": "sticker = next(__iv)"}, "14": {"lineno": 21, "parents": [13], "children": [15], "function": "minStickers", "code": "superMask = mask"}, "15": {"lineno": 22, "parents": [14], "children": [16], "function": "minStickers", "code": "__iv = iter(sticker)"}, "16": {"lineno": 22, "parents": [19, 23, 15], "children": [24, 17], "function": "minStickers", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 22, "parents": [16], "children": [18], "function": "minStickers", "code": "c = next(__iv)"}, "18": {"lineno": 23, "parents": [17], "children": [19], "function": "minStickers", "code": "__iv = iter(enumerate(target))"}, "19": {"lineno": 23, "parents": [18, 21], "children": [16, 20], "calls": ["enumerate"], "function": "minStickers", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 23, "parents": [19], "children": [21], "function": "minStickers", "code": "i, t = next(__iv)"}, "21": {"lineno": 24, "parents": [20], "children": [19, 22], "function": "minStickers", "code": "_if: c == t and (not superMask >> i & 1)"}, "22": {"lineno": 25, "parents": [21], "children": [23], "function": "minStickers", "code": "superMask |= 1 << i"}, "23": {"lineno": 26, "parents": [22], "children": [16], "function": "minStickers", "code": "break"}, "24": {"lineno": 27, "parents": [16], "children": [12], "calls": ["min"], "function": "minStickers", "code": "dp[superMask] = min(dp[superMask], dp[mask] + 1)"}, "25": {"lineno": 29, "parents": [7], "children": [2], "function": "minStickers", "code": "return -1 if dp[-1] == math.inf else dp[-1]"}, "26": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 722, "task_title": "Remove Comments", "difficulty": 2, "func_name": "removeComments", "description": "Given a C++ program, remove comments from it. The program source is an array\nof strings `source` where `source[i]` is the `ith` line of the source code.\nThis represents the result of splitting the original source code string by the\nnewline character `'\\n'`.\n\nIn C++, there are two types of comments, line comments, and block comments.\n\n* The string `\"//\"` denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored.\n* The string `\"/*\"` denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of `\"*/\"` should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string `\"/*/\"` does not yet end the block comment, as the ending would be overlapping the beginning.\n\nThe first effective comment takes precedence over others.\n\n* For example, if the string `\"//\"` occurs in a block comment, it is ignored.\n* Similarly, if the string `\"/*\"` occurs in a line or block comment, it is also ignored.\n\nIf a certain line of code is empty after removing comments, you must not\noutput that line: each string in the answer list will be non-empty.\n\nThere will be no control characters, single quote, or double quote characters.\n\n* For example, `source = \"string s = \"/* Not a comment. */\";\"` will not be a test case.\n\nAlso, nothing else such as defines or macros will interfere with the comments.\n\nIt is guaranteed that every open block comment will eventually be closed, so\n`\"/*\"` outside of a line or block comment always starts a new comment.\n\nFinally, implicit newline characters can be deleted by block comments. Please\nsee the examples below for details.\n\nAfter removing the comments from the source code, return the source code in\nthe same format.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def removeComments(self, source: List[str]) -> List[str]:\n    ans = []\n    commenting = False\n    modified = ''\n\n    for line in source:\n      i = 0\n      while i < len(line):\n        if i + 1 == len(line):\n          if not commenting:\n            modified += line[i]\n          i += 1\n          break\n        twoChars = line[i:i + 2]\n        if twoChars == '/*' and not commenting:\n          commenting = True\n          i += 2\n        elif twoChars == '*/' and commenting:\n          commenting = False\n          i += 2\n        elif twoChars == '//':\n          if not commenting:\n            break\n          else:\n            i += 2\n        else:\n          if not commenting:\n            modified += line[i]\n          i += 1\n      if modified and not commenting:\n        ans.append(modified)\n        modified = ''\n\n    return ans\n", "blocks": [{"type": "if", "start": 41, "end": 43}, {"type": "if", "start": 20, "end": 24}, {"type": "if", "start": 26, "end": 28}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 29, "end": 31}, {"type": "if", "start": 32, "end": 36}, {"type": "else", "start": 37, "end": 40}, {"type": "if", "start": 33, "end": 34}, {"type": "else", "start": 35, "end": 36}, {"type": "if", "start": 38, "end": 39}], "target_lines": [21, 22, 23, 24, 27, 28, 30, 31, 33, 34, 36, 38, 39, 40, 42, 43], "cfg": {"0": {"lineno": 0, "parents": [], "children": [34], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "removeComments", "code": "enter: removeComments(self, source)"}, "2": {"lineno": 12, "parents": [33], "children": [], "function": "removeComments", "code": "exit: removeComments(self, source)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "removeComments", "code": "ans = []"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "removeComments", "code": "commenting = False"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "removeComments", "code": "modified = ''"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "removeComments", "code": "__iv = iter(source)"}, "7": {"lineno": 17, "parents": [32, 6, 30], "children": [8, 33], "function": "removeComments", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "removeComments", "code": "line = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "removeComments", "code": "i = 0"}, "10": {"lineno": 19, "parents": [19, 22, 9, 26, 29], "children": [11, 30], "calls": ["len"], "function": "removeComments", "code": "_while: i < len(line)"}, "11": {"lineno": 20, "parents": [10], "children": [16, 12], "calls": ["len"], "function": "removeComments", "code": "_if: i + 1 == len(line)"}, "12": {"lineno": 21, "parents": [11], "children": [13, 14], "function": "removeComments", "code": "_if: not commenting"}, "13": {"lineno": 22, "parents": [12], "children": [14], "function": "removeComments", "code": "modified += line[i]"}, "14": {"lineno": 23, "parents": [12, 13], "children": [15], "function": "removeComments", "code": "i += 1"}, "15": {"lineno": 24, "parents": [14], "children": [30], "function": "removeComments", "code": "break"}, "16": {"lineno": 25, "parents": [11], "children": [17], "function": "removeComments", "code": "twoChars = line[i:i + 2]"}, "17": {"lineno": 26, "parents": [16], "children": [18, 20], "function": "removeComments", "code": "_if: twoChars == '/*' and (not commenting)"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "removeComments", "code": "commenting = True"}, "19": {"lineno": 28, "parents": [18], "children": [10], "function": "removeComments", "code": "i += 2"}, "20": {"lineno": 29, "parents": [17], "children": [21, 23], "function": "removeComments", "code": "_if: twoChars == '*/' and commenting"}, "21": {"lineno": 30, "parents": [20], "children": [22], "function": "removeComments", "code": "commenting = False"}, "22": {"lineno": 31, "parents": [21], "children": [10], "function": "removeComments", "code": "i += 2"}, "23": {"lineno": 32, "parents": [20], "children": [24, 27], "function": "removeComments", "code": "_if: twoChars == '//'"}, "24": {"lineno": 33, "parents": [23], "children": [25, 26], "function": "removeComments", "code": "_if: not commenting"}, "25": {"lineno": 34, "parents": [24], "children": [30], "function": "removeComments", "code": "break"}, "26": {"lineno": 36, "parents": [24], "children": [10], "function": "removeComments", "code": "i += 2"}, "27": {"lineno": 38, "parents": [23], "children": [28, 29], "function": "removeComments", "code": "_if: not commenting"}, "28": {"lineno": 39, "parents": [27], "children": [29], "function": "removeComments", "code": "modified += line[i]"}, "29": {"lineno": 40, "parents": [27, 28], "children": [10], "function": "removeComments", "code": "i += 1"}, "30": {"lineno": 41, "parents": [25, 10, 15], "children": [7, 31], "function": "removeComments", "code": "_if: modified and (not commenting)"}, "31": {"lineno": 42, "parents": [30], "children": [32], "calls": ["append"], "function": "removeComments", "code": "ans.append(modified)"}, "32": {"lineno": 43, "parents": [31], "children": [7], "function": "removeComments", "code": "modified = ''"}, "33": {"lineno": 45, "parents": [7], "children": [2], "function": "removeComments", "code": "return ans"}, "34": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 730, "task_title": "Count Different Palindromic Subsequences", "difficulty": 3, "func_name": "countPalindromicSubsequences", "description": "Given a string s, return the number of different non-empty palindromic\nsubsequences in `s`. Since the answer may be very large, return it modulo `109\n+ 7`.\n\nA subsequence of a string is obtained by deleting zero or more characters from\nthe string.\n\nA sequence is palindromic if it is equal to the sequence reversed.\n\nTwo sequences `a1, a2, ...` and `b1, b2, ...` are different if there is some\n`i` for which `ai != bi`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def countPalindromicSubsequences(self, s: str) -> int:\n    kMod = 1_000_000_007\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n      dp[i][i] = 1\n\n    for d in range(1, n):\n      for i in range(n - d):\n        j = i + d\n        if s[i] == s[j]:\n          lo = i + 1\n          hi = j - 1\n          while lo <= hi and s[lo] != s[i]:\n            lo += 1\n          while lo <= hi and s[hi] != s[i]:\n            hi -= 1\n          if lo > hi:\n            dp[i][j] = dp[i + 1][j - 1] * 2 + 2\n          elif lo == hi:\n            dp[i][j] = dp[i + 1][j - 1] * 2 + 1\n          else:\n            dp[i][j] = dp[i + 1][j - 1] * 2 - dp[lo + 1][hi - 1]\n        else:\n          dp[i][j] = dp[i][j - 1] + dp[i + 1][j] - dp[i + 1][j - 1]\n        dp[i][j] = (dp[i][j] + kMod) % kMod\n\n    return dp[0][n - 1]\n", "blocks": [{"type": "if", "start": 23, "end": 35}, {"type": "else", "start": 36, "end": 37}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 32, "end": 33}, {"type": "else", "start": 34, "end": 35}], "target_lines": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37], "cfg": {"0": {"lineno": 0, "parents": [], "children": [32], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "countPalindromicSubsequences", "code": "enter: countPalindromicSubsequences(self, s)"}, "2": {"lineno": 12, "parents": [31], "children": [], "function": "countPalindromicSubsequences", "code": "exit: countPalindromicSubsequences(self, s)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "countPalindromicSubsequences", "code": "kMod = 1000000007"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "countPalindromicSubsequences", "code": "n = len(s)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "countPalindromicSubsequences", "code": "dp = [[0] * n for _ in range(n)]"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "countPalindromicSubsequences", "code": "__iv = iter(range(n))"}, "7": {"lineno": 17, "parents": [9, 6], "children": [8, 10], "calls": ["range"], "function": "countPalindromicSubsequences", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "countPalindromicSubsequences", "code": "i = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [7], "function": "countPalindromicSubsequences", "code": "dp[i][i] = 1"}, "10": {"lineno": 20, "parents": [7], "children": [11], "function": "countPalindromicSubsequences", "code": "__iv = iter(range(1, n))"}, "11": {"lineno": 20, "parents": [10, 14], "children": [12, 31], "calls": ["range"], "function": "countPalindromicSubsequences", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 20, "parents": [11], "children": [13], "function": "countPalindromicSubsequences", "code": "d = next(__iv)"}, "13": {"lineno": 21, "parents": [12], "children": [14], "function": "countPalindromicSubsequences", "code": "__iv = iter(range(n - d))"}, "14": {"lineno": 21, "parents": [13, 30], "children": [11, 15], "calls": ["range"], "function": "countPalindromicSubsequences", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 21, "parents": [14], "children": [16], "function": "countPalindromicSubsequences", "code": "i = next(__iv)"}, "16": {"lineno": 22, "parents": [15], "children": [17], "function": "countPalindromicSubsequences", "code": "j = i + d"}, "17": {"lineno": 23, "parents": [16], "children": [18, 29], "function": "countPalindromicSubsequences", "code": "_if: s[i] == s[j]"}, "18": {"lineno": 24, "parents": [17], "children": [19], "function": "countPalindromicSubsequences", "code": "lo = i + 1"}, "19": {"lineno": 25, "parents": [18], "children": [20], "function": "countPalindromicSubsequences", "code": "hi = j - 1"}, "20": {"lineno": 26, "parents": [19, 21], "children": [21, 22], "function": "countPalindromicSubsequences", "code": "_while: lo <= hi and s[lo] != s[i]"}, "21": {"lineno": 27, "parents": [20], "children": [20], "function": "countPalindromicSubsequences", "code": "lo += 1"}, "22": {"lineno": 28, "parents": [20, 23], "children": [24, 23], "function": "countPalindromicSubsequences", "code": "_while: lo <= hi and s[hi] != s[i]"}, "23": {"lineno": 29, "parents": [22], "children": [22], "function": "countPalindromicSubsequences", "code": "hi -= 1"}, "24": {"lineno": 30, "parents": [22], "children": [25, 26], "function": "countPalindromicSubsequences", "code": "_if: lo > hi"}, "25": {"lineno": 31, "parents": [24], "children": [30], "function": "countPalindromicSubsequences", "code": "dp[i][j] = dp[i + 1][j - 1] * 2 + 2"}, "26": {"lineno": 32, "parents": [24], "children": [27, 28], "function": "countPalindromicSubsequences", "code": "_if: lo == hi"}, "27": {"lineno": 33, "parents": [26], "children": [30], "function": "countPalindromicSubsequences", "code": "dp[i][j] = dp[i + 1][j - 1] * 2 + 1"}, "28": {"lineno": 35, "parents": [26], "children": [30], "function": "countPalindromicSubsequences", "code": "dp[i][j] = dp[i + 1][j - 1] * 2 - dp[lo + 1][hi - 1]"}, "29": {"lineno": 37, "parents": [17], "children": [30], "function": "countPalindromicSubsequences", "code": "dp[i][j] = dp[i][j - 1] + dp[i + 1][j] - dp[i + 1][j - 1]"}, "30": {"lineno": 38, "parents": [25, 27, 28, 29], "children": [14], "function": "countPalindromicSubsequences", "code": "dp[i][j] = (dp[i][j] + kMod) % kMod"}, "31": {"lineno": 40, "parents": [11], "children": [2], "function": "countPalindromicSubsequences", "code": "return dp[0][n - 1]"}, "32": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 735, "task_title": "Asteroid Collision", "difficulty": 2, "func_name": "asteroidCollision", "description": "We are given an array `asteroids` of integers representing asteroids in a row.\n\nFor each asteroid, the absolute value represents its size, and the sign\nrepresents its direction (positive meaning right, negative meaning left). Each\nasteroid moves at the same speed.\n\nFind out the state of the asteroids after all collisions. If two asteroids\nmeet, the smaller one will explode. If both are the same size, both will\nexplode. Two asteroids moving in the same direction will never meet.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n    stack = []\n\n    for a in asteroids:\n      if a > 0:\n        stack.append(a)\n      else:\n        while stack and stack[-1] > 0 and stack[-1] < -a:\n          stack.pop()\n        if not stack or stack[-1] < 0:\n          stack.append(a)\n        elif stack[-1] == -a:\n          stack.pop()\n        else:\n          pass\n\n    return stack\n", "blocks": [{"type": "if", "start": 16, "end": 17}, {"type": "else", "start": 18, "end": 26}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 23, "end": 24}, {"type": "else", "start": 25, "end": 26}], "target_lines": [17, 19, 20, 21, 22, 23, 24, 26], "cfg": {"0": {"lineno": 0, "parents": [], "children": [17], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "asteroidCollision", "code": "enter: asteroidCollision(self, asteroids)"}, "2": {"lineno": 12, "parents": [16], "children": [], "function": "asteroidCollision", "code": "exit: asteroidCollision(self, asteroids)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "asteroidCollision", "code": "stack = []"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "asteroidCollision", "code": "__iv = iter(asteroids)"}, "5": {"lineno": 15, "parents": [4, 8, 12, 14, 15], "children": [16, 6], "function": "asteroidCollision", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "asteroidCollision", "code": "a = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8, 9], "function": "asteroidCollision", "code": "_if: a > 0"}, "8": {"lineno": 17, "parents": [10, 7], "children": [5], "calls": ["append"], "function": "asteroidCollision", "code": "stack.append(a)"}, "9": {"lineno": 19, "parents": [10, 7], "children": [10, 11], "function": "asteroidCollision", "code": "_while: stack and stack[-1] > 0 and (stack[-1] < -a)"}, "10": {"lineno": 20, "parents": [9], "children": [8, 9], "calls": ["pop"], "function": "asteroidCollision", "code": "stack.pop()"}, "11": {"lineno": 21, "parents": [9], "children": [12, 13], "function": "asteroidCollision", "code": "_if: not stack or stack[-1] < 0"}, "12": {"lineno": 22, "parents": [11], "children": [5], "calls": ["append"], "function": "asteroidCollision", "code": "stack.append(a)"}, "13": {"lineno": 23, "parents": [11], "children": [14, 15], "function": "asteroidCollision", "code": "_if: stack[-1] == -a"}, "14": {"lineno": 24, "parents": [13], "children": [5], "calls": ["pop"], "function": "asteroidCollision", "code": "stack.pop()"}, "15": {"lineno": 26, "parents": [13], "children": [5], "function": "asteroidCollision", "code": "pass"}, "16": {"lineno": 28, "parents": [5], "children": [2], "function": "asteroidCollision", "code": "return stack"}, "17": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 743, "task_title": "Network Delay Time", "difficulty": 2, "func_name": "networkDelayTime", "description": "You are given a network of `n` nodes, labeled from `1` to `n`. You are also\ngiven `times`, a list of travel times as directed edges `times[i] = (ui, vi,\nwi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the\ntime it takes for a signal to travel from source to target.\n\nWe will send a signal from a given node `k`. Return the minimum time it takes\nfor all the `n` nodes to receive the signal. If it is impossible for all the\n`n` nodes to receive the signal, return `-1`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n    graph = [[] for _ in range(n)]\n\n    for u, v, w in times:\n      graph[u - 1].append((v - 1, w))\n\n    return self._dijkstra(graph, k - 1)\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int) -> int:\n    dist = [math.inf] * len(graph)\n\n    dist[src] = 0\n    minHeap = [(dist[src], src)]\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      if d > dist[u]:\n        continue\n      for v, w in graph[u]:\n        if d + w < dist[v]:\n          dist[v] = d + w\n          heapq.heappush(minHeap, (dist[v], v))\n\n    maxDist = max(dist)\n    return maxDist if maxDist != math.inf else -1\n", "blocks": [{"type": "if", "start": 28, "end": 29}, {"type": "if", "start": 31, "end": 33}], "target_lines": [29, 32, 33], "cfg": {"0": {"lineno": 0, "parents": [], "children": [26], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "networkDelayTime", "code": "enter: networkDelayTime(self, times, n, k)"}, "2": {"lineno": 12, "parents": [8], "children": [], "function": "networkDelayTime", "code": "exit: networkDelayTime(self, times, n, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "networkDelayTime", "code": "graph = [[] for _ in range(n)]"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "networkDelayTime", "code": "__iv = iter(times)"}, "5": {"lineno": 15, "parents": [4, 7], "children": [8, 6], "calls": ["_dijkstra"], "function": "networkDelayTime", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [10, 5], "children": [7], "function": "networkDelayTime", "code": "u, v, w = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [5], "calls": ["append"], "function": "networkDelayTime", "code": "graph[u - 1].append((v - 1, w))"}, "8": {"lineno": 18, "parents": [10, 5], "children": [2], "function": "networkDelayTime", "code": "return self._dijkstra(graph, k - 1)"}, "9": {"lineno": 20, "parents": [5], "children": [11], "function": "_dijkstra", "code": "enter: _dijkstra(self, graph, src)"}, "10": {"lineno": 20, "parents": [25], "children": [], "function": "_dijkstra", "code": "exit: _dijkstra(self, graph, src)"}, "11": {"lineno": 21, "parents": [9], "children": [12], "calls": ["len"], "function": "_dijkstra", "code": "dist = [math.inf] * len(graph)"}, "12": {"lineno": 23, "parents": [11], "children": [13], "function": "_dijkstra", "code": "dist[src] = 0"}, "13": {"lineno": 24, "parents": [12], "children": [14], "function": "_dijkstra", "code": "minHeap = [(dist[src], src)]"}, "14": {"lineno": 26, "parents": [17, 19, 13], "children": [24, 15], "function": "_dijkstra", "code": "_while: minHeap"}, "15": {"lineno": 27, "parents": [14], "children": [16], "calls": ["heappop"], "function": "_dijkstra", "code": "d, u = heapq.heappop(minHeap)"}, "16": {"lineno": 28, "parents": [15], "children": [17, 18], "function": "_dijkstra", "code": "_if: d > dist[u]"}, "17": {"lineno": 29, "parents": [16], "children": [14], "function": "_dijkstra", "code": "continue"}, "18": {"lineno": 30, "parents": [16], "children": [19], "function": "_dijkstra", "code": "__iv = iter(graph[u])"}, "19": {"lineno": 30, "parents": [18, 21, 23], "children": [20, 14], "function": "_dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 30, "parents": [19], "children": [21], "function": "_dijkstra", "code": "v, w = next(__iv)"}, "21": {"lineno": 31, "parents": [20], "children": [19, 22], "function": "_dijkstra", "code": "_if: d + w < dist[v]"}, "22": {"lineno": 32, "parents": [21], "children": [23], "function": "_dijkstra", "code": "dist[v] = d + w"}, "23": {"lineno": 33, "parents": [22], "children": [19], "calls": ["heappush"], "function": "_dijkstra", "code": "heapq.heappush(minHeap, (dist[v], v))"}, "24": {"lineno": 35, "parents": [14], "children": [25], "calls": ["max"], "function": "_dijkstra", "code": "maxDist = max(dist)"}, "25": {"lineno": 36, "parents": [24], "children": [10], "function": "_dijkstra", "code": "return maxDist if maxDist != math.inf else -1"}, "26": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 770, "task_title": "Basic Calculator IV", "difficulty": 3, "func_name": "basicCalculatorIV", "description": "Given an expression such as `expression = \"e + 8 - a + 5\"` and an evaluation\nmap such as `{\"e\": 1}` (given in terms of `evalvars = [\"e\"]` and `evalints =\n[1]`), return a list of tokens representing the simplified expression, such as\n`[\"-1*a\",\"14\"]`\n\n* An expression alternates chunks and symbols, with a space separating each chunk and symbol.\n* A chunk is either an expression in parentheses, a variable, or a non-negative integer.\n* A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like `\"2x\"` or `\"-x\"`.\n\nExpressions are evaluated in the usual order: brackets first, then\nmultiplication, then addition and subtraction.\n\n* For example, `expression = \"1 + 2 * 3\"` has an answer of `[\"7\"]`.\n\nThe format of the output is as follows:\n\n* For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically. \n* For example, we would never write a term like `\"b*a*c\"`, only `\"a*b*c\"`.\n* Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term. \n* For example, `\"a*a*b*c\"` has degree `4`.\n* The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.\n* An example of a well-formatted answer is `[\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"]`.\n* Terms (including constant terms) with coefficient `0` are not included. \n* For example, an expression of `\"0\"` has an output of `[]`.\n\nNote: You may assume that the given expression is always valid. All\nintermediate results will be in the range of `[-231, 231 - 1]`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Poly:\n  def __init__(self, term: str = None, coef: int = None):\n    if term and coef:\n      self.terms = collections.Counter({term: coef})\n    else:\n      self.terms = collections.Counter()\n\n  def __add__(self, other):\n    for term, coef in other.terms.items():\n      self.terms[term] += coef\n    return self\n\n  def __sub__(self, other):\n    for term, coef in other.terms.items():\n      self.terms[term] -= coef\n    return self\n\n  def __mul__(self, other):\n    res = Poly()\n    for a, aCoef in self.terms.items():\n      for b, bCoef in other.terms.items():\n        res.terms[self._merge(a, b)] += aCoef * bCoef\n    return res\n\n  def toList(self) -> List[str]:\n    for term in list(self.terms.keys()):\n      if not self.terms[term]:\n        del self.terms[term]\n\n    def cmp(term: str) -> tuple:\n      if term == '1':\n        return (0,)\n      var = term.split('*')\n      return (-len(var), term)\n\n    def concat(term: str) -> str:\n      if term == '1':\n        return str(self.terms[term])\n      return str(self.terms[term]) + '*' + term\n\n    terms = list(self.terms.keys())\n    terms.sort(key=cmp)\n    return [concat(term) for term in terms]\n\n  def _merge(self, a: str, b: str) -> str:\n    if a == '1':\n      return b\n    if b == '1':\n      return a\n    res = []\n    A = a.split('*')\n    B = b.split('*')\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n      if A[i] < B[j]:\n        res.append(A[i])\n        i += 1\n      else:\n        res.append(B[j])\n        j += 1\n    return '*'.join(res + A[i:] + B[j:])\n\n\nclass Solution:\n  def basicCalculatorIV(self, expression: str, evalvars: List[str], evalints: List[int]) -> List[str]:\n    tokens = list(self._getTokens(expression))\n    evalMap = {a: b for a, b in zip(evalvars, evalints)}\n\n    for i, token in enumerate(tokens):\n      if token in evalMap:\n        tokens[i] = str(evalMap[token])\n\n    postfix = self._infixToPostfix(tokens)\n    return self._evaluate(postfix).toList()\n\n  def _getTokens(self, s: str) -> Iterator[str]:\n    i = 0\n    for j, c in enumerate(s):\n      if c == ' ':\n        if i < j:\n          yield s[i:j]\n        i = j + 1\n      elif c in '()+-*':\n        if i < j:\n          yield s[i:j]\n        yield c\n        i = j + 1\n    if i < len(s):\n      yield s[i:]\n\n  def _infixToPostfix(self, tokens: List[str]) -> List[str]:\n    postfix = []\n    ops = []\n\n    def precedes(prevOp: str, currOp: str) -> bool:\n      if prevOp == '(':\n        return False\n      return prevOp == '*' or currOp in '+-'\n\n    for token in tokens:\n      if token == '(':\n        ops.append(token)\n      elif token == ')':\n        while ops[-1] != '(':\n          postfix.append(ops.pop())\n        ops.pop()\n      elif token in '+-*':\n        while ops and precedes(ops[-1], token):\n          postfix.append(ops.pop())\n        ops.append(token)\n      else:\n        postfix.append(token)\n    return postfix + ops[::-1]\n\n  def _evaluate(self, postfix: List[str]) -> Poly:\n    polys: List[Poly] = []\n    for token in postfix:\n      if token in '+-*':\n        b = polys.pop()\n        a = polys.pop()\n        if token == '+':\n          polys.append(a + b)\n        elif token == '-':\n          polys.append(a - b)\n        else:\n          polys.append(a * b)\n      elif token.lstrip('-').isnumeric():\n        polys.append(Poly(\"1\", int(token)))\n      else:\n        polys.append(Poly(token, 1))\n    return polys[0]\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "else", "start": 15, "end": 16}, {"type": "if", "start": 56, "end": 57}, {"type": "if", "start": 58, "end": 59}, {"type": "if", "start": 99, "end": 100}, {"type": "if", "start": 37, "end": 38}, {"type": "if", "start": 41, "end": 42}, {"type": "if", "start": 47, "end": 48}, {"type": "if", "start": 66, "end": 68}, {"type": "else", "start": 69, "end": 71}, {"type": "if", "start": 81, "end": 82}, {"type": "if", "start": 90, "end": 93}, {"type": "if", "start": 107, "end": 108}, {"type": "if", "start": 112, "end": 113}, {"type": "if", "start": 129, "end": 137}, {"type": "if", "start": 91, "end": 92}, {"type": "if", "start": 94, "end": 98}, {"type": "if", "start": 114, "end": 117}, {"type": "if", "start": 132, "end": 133}, {"type": "if", "start": 138, "end": 139}, {"type": "else", "start": 140, "end": 141}, {"type": "if", "start": 95, "end": 96}, {"type": "if", "start": 118, "end": 121}, {"type": "else", "start": 122, "end": 123}, {"type": "if", "start": 134, "end": 135}, {"type": "else", "start": 136, "end": 137}], "target_lines": [14, 16, 38, 42, 48, 57, 59, 67, 68, 70, 71, 82, 91, 92, 93, 95, 96, 97, 98, 100, 108, 113, 115, 116, 117, 119, 120, 121, 123, 130, 131, 132, 133, 134, 135, 137, 139, 141], "cfg": {"0": {"lineno": 0, "parents": [], "children": [139], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, term, coef)"}, "2": {"lineno": 12, "parents": [4, 5], "children": [], "function": "__init__", "code": "exit: __init__(self, term, coef)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "function": "__init__", "code": "_if: term and coef"}, "4": {"lineno": 14, "parents": [3], "children": [2], "calls": ["Counter"], "function": "__init__", "code": "self.terms = collections.Counter({term: coef})"}, "5": {"lineno": 16, "parents": [3], "children": [2], "calls": ["Counter"], "function": "__init__", "code": "self.terms = collections.Counter()"}, "6": {"lineno": 18, "parents": [], "children": [8], "function": "__add__", "code": "enter: __add__(self, other)"}, "7": {"lineno": 18, "parents": [12], "children": [], "function": "__add__", "code": "exit: __add__(self, other)"}, "8": {"lineno": 19, "parents": [6], "children": [9], "function": "__add__", "code": "__iv = iter(other.terms.items())"}, "9": {"lineno": 19, "parents": [8, 11], "children": [10, 12], "calls": ["items"], "function": "__add__", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "__add__", "code": "term, coef = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [9], "function": "__add__", "code": "self.terms[term] += coef"}, "12": {"lineno": 21, "parents": [9], "children": [7], "function": "__add__", "code": "return self"}, "13": {"lineno": 23, "parents": [], "children": [15], "function": "__sub__", "code": "enter: __sub__(self, other)"}, "14": {"lineno": 23, "parents": [19], "children": [], "function": "__sub__", "code": "exit: __sub__(self, other)"}, "15": {"lineno": 24, "parents": [13], "children": [16], "function": "__sub__", "code": "__iv = iter(other.terms.items())"}, "16": {"lineno": 24, "parents": [18, 15], "children": [17, 19], "calls": ["items"], "function": "__sub__", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 24, "parents": [16], "children": [18], "function": "__sub__", "code": "term, coef = next(__iv)"}, "18": {"lineno": 25, "parents": [17], "children": [16], "function": "__sub__", "code": "self.terms[term] -= coef"}, "19": {"lineno": 26, "parents": [16], "children": [14], "function": "__sub__", "code": "return self"}, "20": {"lineno": 28, "parents": [], "children": [22], "function": "__mul__", "code": "enter: __mul__(self, other)"}, "21": {"lineno": 28, "parents": [30], "children": [], "function": "__mul__", "code": "exit: __mul__(self, other)"}, "22": {"lineno": 29, "parents": [20], "children": [23], "calls": ["Poly"], "function": "__mul__", "code": "res = Poly()"}, "23": {"lineno": 30, "parents": [22], "children": [24], "function": "__mul__", "code": "__iv = iter(self.terms.items())"}, "24": {"lineno": 30, "parents": [27, 23], "children": [25, 30], "calls": ["items"], "function": "__mul__", "code": "_for: __iv.__length__hint__() > 0"}, "25": {"lineno": 30, "parents": [24], "children": [26], "function": "__mul__", "code": "a, aCoef = next(__iv)"}, "26": {"lineno": 31, "parents": [25], "children": [27], "function": "__mul__", "code": "__iv = iter(other.terms.items())"}, "27": {"lineno": 31, "parents": [26, 29], "children": [24, 28], "calls": ["items"], "function": "__mul__", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 31, "parents": [27], "children": [29], "function": "__mul__", "code": "b, bCoef = next(__iv)"}, "29": {"lineno": 32, "parents": [28], "children": [27], "function": "__mul__", "code": "res.terms[self._merge(a, b)] += aCoef * bCoef"}, "30": {"lineno": 33, "parents": [24], "children": [21], "function": "__mul__", "code": "return res"}, "31": {"lineno": 35, "parents": [78], "children": [33], "function": "toList", "code": "enter: toList(self)"}, "32": {"lineno": 35, "parents": [50], "children": [], "function": "toList", "code": "exit: toList(self)"}, "33": {"lineno": 36, "parents": [31], "children": [34], "function": "toList", "code": "__iv = iter(list(self.terms.keys()))"}, "34": {"lineno": 36, "parents": [33, 36], "children": [48, 35], "calls": ["keys", "list"], "function": "toList", "code": "_for: __iv.__length__hint__() > 0"}, "35": {"lineno": 36, "parents": [34], "children": [36], "function": "toList", "code": "term = next(__iv)"}, "36": {"lineno": 37, "parents": [35], "children": [34], "function": "toList", "code": "_if: not self.terms[term]"}, "37": {"lineno": 40, "parents": [], "children": [39], "function": "cmp", "code": "enter: cmp(term)"}, "38": {"lineno": 40, "parents": [40, 42], "children": [], "function": "cmp", "code": "exit: cmp(term)"}, "39": {"lineno": 41, "parents": [37], "children": [40, 41], "function": "cmp", "code": "_if: term == '1'"}, "40": {"lineno": 42, "parents": [39], "children": [38], "function": "cmp", "code": "return (0,)"}, "41": {"lineno": 43, "parents": [39], "children": [42], "calls": ["split"], "function": "cmp", "code": "var = term.split('*')"}, "42": {"lineno": 44, "parents": [41], "children": [38], "function": "cmp", "code": "return (-len(var), term)"}, "43": {"lineno": 46, "parents": [], "children": [45], "function": "concat", "code": "enter: concat(term)"}, "44": {"lineno": 46, "parents": [46, 47], "children": [], "function": "concat", "code": "exit: concat(term)"}, "45": {"lineno": 47, "parents": [43], "children": [46, 47], "calls": ["str", "str"], "function": "concat", "code": "_if: term == '1'"}, "46": {"lineno": 48, "parents": [45], "children": [44], "function": "concat", "code": "return str(self.terms[term])"}, "47": {"lineno": 49, "parents": [45], "children": [44], "function": "concat", "code": "return str(self.terms[term]) + '*' + term"}, "48": {"lineno": 51, "parents": [34], "children": [49], "calls": ["keys", "list"], "function": "toList", "code": "terms = list(self.terms.keys())"}, "49": {"lineno": 52, "parents": [48], "children": [50], "calls": ["sort"], "function": "toList", "code": "terms.sort(key=cmp)"}, "50": {"lineno": 53, "parents": [49], "children": [32], "function": "toList", "code": "return [concat(term) for term in terms]"}, "51": {"lineno": 55, "parents": [], "children": [53], "function": "_merge", "code": "enter: _merge(self, a, b)"}, "52": {"lineno": 55, "parents": [56, 68, 54], "children": [], "function": "_merge", "code": "exit: _merge(self, a, b)"}, "53": {"lineno": 56, "parents": [51], "children": [54, 55], "function": "_merge", "code": "_if: a == '1'"}, "54": {"lineno": 57, "parents": [53], "children": [52], "function": "_merge", "code": "return b"}, "55": {"lineno": 58, "parents": [53], "children": [56, 57], "function": "_merge", "code": "_if: b == '1'"}, "56": {"lineno": 59, "parents": [55], "children": [52], "function": "_merge", "code": "return a"}, "57": {"lineno": 60, "parents": [55], "children": [58], "function": "_merge", "code": "res = []"}, "58": {"lineno": 61, "parents": [57], "children": [59], "calls": ["split"], "function": "_merge", "code": "A = a.split('*')"}, "59": {"lineno": 62, "parents": [58], "children": [60], "calls": ["split"], "function": "_merge", "code": "B = b.split('*')"}, "60": {"lineno": 63, "parents": [59], "children": [61], "function": "_merge", "code": "i = 0"}, "61": {"lineno": 64, "parents": [60], "children": [62], "function": "_merge", "code": "j = 0"}, "62": {"lineno": 65, "parents": [65, 67, 61], "children": [68, 63], "calls": ["join"], "function": "_merge", "code": "_while: i < len(A) and j < len(B)"}, "63": {"lineno": 66, "parents": [62], "children": [64, 66], "function": "_merge", "code": "_if: A[i] < B[j]"}, "64": {"lineno": 67, "parents": [63], "children": [65], "calls": ["append"], "function": "_merge", "code": "res.append(A[i])"}, "65": {"lineno": 68, "parents": [64], "children": [62], "function": "_merge", "code": "i += 1"}, "66": {"lineno": 70, "parents": [63], "children": [67], "calls": ["append"], "function": "_merge", "code": "res.append(B[j])"}, "67": {"lineno": 71, "parents": [66], "children": [62], "function": "_merge", "code": "j += 1"}, "68": {"lineno": 72, "parents": [62], "children": [52], "function": "_merge", "code": "return '*'.join(res + A[i:] + B[j:])"}, "69": {"lineno": 76, "parents": [], "children": [71], "function": "basicCalculatorIV", "code": "enter: basicCalculatorIV(self, expression, evalvars, evalints)"}, "70": {"lineno": 76, "parents": [79], "children": [], "function": "basicCalculatorIV", "code": "exit: basicCalculatorIV(self, expression, evalvars, evalints)"}, "71": {"lineno": 77, "parents": [69], "children": [72], "calls": ["_getTokens", "list"], "function": "basicCalculatorIV", "code": "tokens = list(self._getTokens(expression))"}, "72": {"lineno": 78, "parents": [81, 71], "children": [73], "function": "basicCalculatorIV", "code": "evalMap = {a: b for a, b in zip(evalvars, evalints)}"}, "73": {"lineno": 80, "parents": [72], "children": [74], "function": "basicCalculatorIV", "code": "__iv = iter(enumerate(tokens))"}, "74": {"lineno": 80, "parents": [73, 76, 77], "children": [75, 78], "calls": ["enumerate"], "function": "basicCalculatorIV", "code": "_for: __iv.__length__hint__() > 0"}, "75": {"lineno": 80, "parents": [74], "children": [76], "function": "basicCalculatorIV", "code": "i, token = next(__iv)"}, "76": {"lineno": 81, "parents": [75], "children": [74, 77], "function": "basicCalculatorIV", "code": "_if: token in evalMap"}, "77": {"lineno": 82, "parents": [76], "children": [74], "calls": ["str"], "function": "basicCalculatorIV", "code": "tokens[i] = str(evalMap[token])"}, "78": {"lineno": 84, "parents": [74], "children": [79], "calls": ["_infixToPostfix", "toList"], "function": "basicCalculatorIV", "code": "postfix = self._infixToPostfix(tokens)"}, "79": {"lineno": 85, "parents": [32, 98, 78], "children": [70], "function": "basicCalculatorIV", "code": "return self._evaluate(postfix).toList()"}, "80": {"lineno": 87, "parents": [71], "children": [82], "function": "_getTokens", "code": "enter: _getTokens(self, s)"}, "81": {"lineno": 87, "parents": [96, 95], "children": [], "function": "_getTokens", "code": "exit: _getTokens(self, s)"}, "82": {"lineno": 88, "parents": [80], "children": [83], "function": "_getTokens", "code": "i = 0"}, "83": {"lineno": 89, "parents": [82], "children": [84], "function": "_getTokens", "code": "__iv = iter(enumerate(s))"}, "84": {"lineno": 89, "parents": [89, 90, 83, 94], "children": [85, 95], "calls": ["enumerate"], "function": "_getTokens", "code": "_for: __iv.__length__hint__() > 0"}, "85": {"lineno": 89, "parents": [84], "children": [86], "function": "_getTokens", "code": "j, c = next(__iv)"}, "86": {"lineno": 90, "parents": [85], "children": [90, 87], "function": "_getTokens", "code": "_if: c == ' '"}, "87": {"lineno": 91, "parents": [86], "children": [88, 89], "function": "_getTokens", "code": "_if: i < j"}, "88": {"lineno": 92, "parents": [87], "children": [89], "function": "_getTokens", "code": "yield s[i:j]"}, "89": {"lineno": 93, "parents": [88, 87], "children": [84], "function": "_getTokens", "code": "i = j + 1"}, "90": {"lineno": 94, "parents": [86], "children": [91, 84], "function": "_getTokens", "code": "_if: c in '()+-*'"}, "91": {"lineno": 95, "parents": [90], "children": [92, 93], "function": "_getTokens", "code": "_if: i < j"}, "92": {"lineno": 96, "parents": [91], "children": [93], "function": "_getTokens", "code": "yield s[i:j]"}, "93": {"lineno": 97, "parents": [91, 92], "children": [94], "function": "_getTokens", "code": "yield c"}, "94": {"lineno": 98, "parents": [93], "children": [84], "function": "_getTokens", "code": "i = j + 1"}, "95": {"lineno": 99, "parents": [84], "children": [96, 81], "calls": ["len"], "function": "_getTokens", "code": "_if: i < len(s)"}, "96": {"lineno": 100, "parents": [95], "children": [81], "function": "_getTokens", "code": "yield s[i:]"}, "97": {"lineno": 102, "parents": [78], "children": [99], "function": "_infixToPostfix", "code": "enter: _infixToPostfix(self, tokens)"}, "98": {"lineno": 102, "parents": [120], "children": [], "function": "_infixToPostfix", "code": "exit: _infixToPostfix(self, tokens)"}, "99": {"lineno": 103, "parents": [97], "children": [100], "function": "_infixToPostfix", "code": "postfix = []"}, "100": {"lineno": 104, "parents": [99], "children": [106], "function": "_infixToPostfix", "code": "ops = []"}, "101": {"lineno": 106, "parents": [], "children": [103], "function": "precedes", "code": "enter: precedes(prevOp, currOp)"}, "102": {"lineno": 106, "parents": [104, 105], "children": [], "function": "precedes", "code": "exit: precedes(prevOp, currOp)"}, "103": {"lineno": 107, "parents": [101], "children": [104, 105], "function": "precedes", "code": "_if: prevOp == '('"}, "104": {"lineno": 108, "parents": [103], "children": [102], "function": "precedes", "code": "return False"}, "105": {"lineno": 109, "parents": [103], "children": [102], "function": "precedes", "code": "return prevOp == '*' or currOp in '+-'"}, "106": {"lineno": 111, "parents": [100], "children": [107], "function": "_infixToPostfix", "code": "__iv = iter(tokens)"}, "107": {"lineno": 111, "parents": [114, 118, 119, 106, 110], "children": [120, 108], "function": "_infixToPostfix", "code": "_for: __iv.__length__hint__() > 0"}, "108": {"lineno": 111, "parents": [107], "children": [109], "function": "_infixToPostfix", "code": "token = next(__iv)"}, "109": {"lineno": 112, "parents": [108], "children": [110, 111], "function": "_infixToPostfix", "code": "_if: token == '('"}, "110": {"lineno": 113, "parents": [109], "children": [107], "calls": ["append"], "function": "_infixToPostfix", "code": "ops.append(token)"}, "111": {"lineno": 114, "parents": [109], "children": [112, 115], "function": "_infixToPostfix", "code": "_if: token == ')'"}, "112": {"lineno": 115, "parents": [113, 111], "children": [113, 114], "function": "_infixToPostfix", "code": "_while: ops[-1] != '('"}, "113": {"lineno": 116, "parents": [112], "children": [112, 115], "calls": ["pop", "append"], "function": "_infixToPostfix", "code": "postfix.append(ops.pop())"}, "114": {"lineno": 117, "parents": [112], "children": [107], "calls": ["pop"], "function": "_infixToPostfix", "code": "ops.pop()"}, "115": {"lineno": 118, "parents": [113, 111], "children": [116, 119], "function": "_infixToPostfix", "code": "_if: token in '+-*'"}, "116": {"lineno": 119, "parents": [115, 117], "children": [117, 118], "function": "_infixToPostfix", "code": "_while: ops and precedes(ops[-1], token)"}, "117": {"lineno": 120, "parents": [116], "children": [116, 119], "calls": ["pop", "append"], "function": "_infixToPostfix", "code": "postfix.append(ops.pop())"}, "118": {"lineno": 121, "parents": [116], "children": [107], "calls": ["append"], "function": "_infixToPostfix", "code": "ops.append(token)"}, "119": {"lineno": 123, "parents": [115, 117], "children": [107], "calls": ["append"], "function": "_infixToPostfix", "code": "postfix.append(token)"}, "120": {"lineno": 124, "parents": [107], "children": [98], "function": "_infixToPostfix", "code": "return postfix + ops[::-1]"}, "121": {"lineno": 126, "parents": [], "children": [123], "function": "_evaluate", "code": "enter: _evaluate(self, postfix)"}, "122": {"lineno": 126, "parents": [138], "children": [], "function": "_evaluate", "code": "exit: _evaluate(self, postfix)"}, "123": {"lineno": 127, "parents": [121], "children": [124], "function": "_evaluate", "code": "polys: List[Poly] = []"}, "124": {"lineno": 128, "parents": [123], "children": [125], "function": "_evaluate", "code": "__iv = iter(postfix)"}, "125": {"lineno": 128, "parents": [131, 133, 134, 136, 137, 124], "children": [138, 126], "function": "_evaluate", "code": "_for: __iv.__length__hint__() > 0"}, "126": {"lineno": 128, "parents": [125], "children": [127], "function": "_evaluate", "code": "token = next(__iv)"}, "127": {"lineno": 129, "parents": [126], "children": [128, 135], "function": "_evaluate", "code": "_if: token in '+-*'"}, "128": {"lineno": 130, "parents": [127], "children": [129], "calls": ["pop"], "function": "_evaluate", "code": "b = polys.pop()"}, "129": {"lineno": 131, "parents": [128], "children": [130], "calls": ["pop"], "function": "_evaluate", "code": "a = polys.pop()"}, "130": {"lineno": 132, "parents": [129], "children": [131, 132], "function": "_evaluate", "code": "_if: token == '+'"}, "131": {"lineno": 133, "parents": [130], "children": [125], "calls": ["append"], "function": "_evaluate", "code": "polys.append(a + b)"}, "132": {"lineno": 134, "parents": [130], "children": [133, 134], "function": "_evaluate", "code": "_if: token == '-'"}, "133": {"lineno": 135, "parents": [132], "children": [125], "calls": ["append"], "function": "_evaluate", "code": "polys.append(a - b)"}, "134": {"lineno": 137, "parents": [132], "children": [125], "calls": ["append"], "function": "_evaluate", "code": "polys.append(a * b)"}, "135": {"lineno": 138, "parents": [127], "children": [136, 137], "calls": ["isnumeric"], "function": "_evaluate", "code": "_if: token.lstrip('-').isnumeric()"}, "136": {"lineno": 139, "parents": [135], "children": [125], "calls": ["int", "Poly", "append"], "function": "_evaluate", "code": "polys.append(Poly('1', int(token)))"}, "137": {"lineno": 141, "parents": [135], "children": [125], "calls": ["Poly", "append"], "function": "_evaluate", "code": "polys.append(Poly(token, 1))"}, "138": {"lineno": 142, "parents": [125], "children": [122], "function": "_evaluate", "code": "return polys[0]"}, "139": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 777, "task_title": "Swap Adjacent in LR String", "difficulty": 2, "func_name": "canTransform", "description": "In a string composed of `'L'`, `'R'`, and `'X'` characters, like\n`\"RXXLRXRXL\"`, a move consists of either replacing one occurrence of `\"XL\"`\nwith `\"LX\"`, or replacing one occurrence of `\"RX\"` with `\"XR\"`. Given the\nstarting string `start` and the ending string `end`, return `True` if and only\nif there exists a sequence of moves to transform one string to the other.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def canTransform(self, start: str, end: str) -> bool:\n    if start.replace('X', '') != end.replace('X', ''):\n      return False\n\n    i = 0\n    j = 0\n\n    while i < len(start) and j < len(end):\n      while i < len(start) and start[i] == 'X':\n        i += 1\n      while j < len(end) and end[j] == 'X':\n        j += 1\n      if i == len(start) and j == len(end):\n        return True\n      if i == len(start) or j == len(end):\n        return False\n      if start[i] == 'L' and i < j:\n        return False\n      if start[i] == 'R' and i > j:\n        return False\n      i += 1\n      j += 1\n\n    return True\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "if", "start": 24, "end": 25}, {"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 28, "end": 29}, {"type": "if", "start": 30, "end": 31}], "target_lines": [14, 25, 27, 29, 31], "cfg": {"0": {"lineno": 0, "parents": [], "children": [23], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "canTransform", "code": "enter: canTransform(self, start, end)"}, "2": {"lineno": 12, "parents": [17, 19, 4, 22, 13, 15], "children": [], "function": "canTransform", "code": "exit: canTransform(self, start, end)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "calls": ["replace", "replace"], "function": "canTransform", "code": "_if: start.replace('X', '') != end.replace('X', '')"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "canTransform", "code": "return False"}, "5": {"lineno": 16, "parents": [3], "children": [6], "function": "canTransform", "code": "i = 0"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "canTransform", "code": "j = 0"}, "7": {"lineno": 19, "parents": [21, 6], "children": [8, 22], "function": "canTransform", "code": "_while: i < len(start) and j < len(end)"}, "8": {"lineno": 20, "parents": [9, 7], "children": [9, 10], "function": "canTransform", "code": "_while: i < len(start) and start[i] == 'X'"}, "9": {"lineno": 21, "parents": [8], "children": [8, 22], "function": "canTransform", "code": "i += 1"}, "10": {"lineno": 22, "parents": [8, 11], "children": [11, 12], "function": "canTransform", "code": "_while: j < len(end) and end[j] == 'X'"}, "11": {"lineno": 23, "parents": [10], "children": [10], "function": "canTransform", "code": "j += 1"}, "12": {"lineno": 24, "parents": [10], "children": [13, 14], "function": "canTransform", "code": "_if: i == len(start) and j == len(end)"}, "13": {"lineno": 25, "parents": [12], "children": [2], "function": "canTransform", "code": "return True"}, "14": {"lineno": 26, "parents": [12], "children": [16, 15], "function": "canTransform", "code": "_if: i == len(start) or j == len(end)"}, "15": {"lineno": 27, "parents": [14], "children": [2], "function": "canTransform", "code": "return False"}, "16": {"lineno": 28, "parents": [14], "children": [17, 18], "function": "canTransform", "code": "_if: start[i] == 'L' and i < j"}, "17": {"lineno": 29, "parents": [16], "children": [2], "function": "canTransform", "code": "return False"}, "18": {"lineno": 30, "parents": [16], "children": [19, 20], "function": "canTransform", "code": "_if: start[i] == 'R' and i > j"}, "19": {"lineno": 31, "parents": [18], "children": [2], "function": "canTransform", "code": "return False"}, "20": {"lineno": 32, "parents": [18], "children": [21], "function": "canTransform", "code": "i += 1"}, "21": {"lineno": 33, "parents": [20], "children": [7], "function": "canTransform", "code": "j += 1"}, "22": {"lineno": 35, "parents": [9, 7], "children": [2], "function": "canTransform", "code": "return True"}, "23": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 782, "task_title": "Transform to Chessboard", "difficulty": 3, "func_name": "movesToChessboard", "description": "You are given an `n x n` binary grid `board`. In each move, you can swap any\ntwo rows with each other, or any two columns with each other.\n\nReturn the minimum number of moves to transform the board into a chessboard\nboard. If the task is impossible, return `-1`.\n\nA chessboard board is a board where no `0`'s and no `1`'s are 4-directionally\nadjacent.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def movesToChessboard(self, board: List[List[int]]) -> int:\n    n = len(board)\n\n    for i in range(n):\n      for j in range(n):\n        if board[0][0] ^ board[i][0] ^ board[0][j] ^ board[i][j]:\n          return -1\n\n    rowSum = sum(board[0])\n    colSum = sum(board[i][0] for i in range(n))\n\n    if rowSum != n // 2 and rowSum != (n + 1) // 2:\n      return -1\n    if colSum != n // 2 and colSum != (n + 1) // 2:\n      return -1\n\n    rowSwaps = sum(board[i][0] == (i & 1) for i in range(n))\n    colSwaps = sum(board[0][i] == (i & 1) for i in range(n))\n\n    if n & 1:\n      if rowSwaps & 1:\n        rowSwaps = n - rowSwaps\n      if colSwaps & 1:\n        colSwaps = n - colSwaps\n    else:\n      rowSwaps = min(rowSwaps, n - rowSwaps)\n      colSwaps = min(colSwaps, n - colSwaps)\n\n    return (rowSwaps + colSwaps) // 2\n", "blocks": [{"type": "if", "start": 23, "end": 24}, {"type": "if", "start": 25, "end": 26}, {"type": "if", "start": 31, "end": 35}, {"type": "else", "start": 36, "end": 38}, {"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 34, "end": 35}, {"type": "if", "start": 17, "end": 18}], "target_lines": [18, 24, 26, 32, 33, 34, 35, 37, 38], "cfg": {"0": {"lineno": 0, "parents": [], "children": [28], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "movesToChessboard", "code": "enter: movesToChessboard(self, board)"}, "2": {"lineno": 12, "parents": [27, 17, 11, 15], "children": [], "function": "movesToChessboard", "code": "exit: movesToChessboard(self, board)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "movesToChessboard", "code": "n = len(board)"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "movesToChessboard", "code": "__iv = iter(range(n))"}, "5": {"lineno": 15, "parents": [8, 4], "children": [12, 6], "calls": ["range"], "function": "movesToChessboard", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "movesToChessboard", "code": "i = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "movesToChessboard", "code": "__iv = iter(range(n))"}, "8": {"lineno": 16, "parents": [10, 7], "children": [9, 5], "calls": ["range"], "function": "movesToChessboard", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 16, "parents": [8], "children": [10], "function": "movesToChessboard", "code": "j = next(__iv)"}, "10": {"lineno": 17, "parents": [9], "children": [8, 11], "function": "movesToChessboard", "code": "_if: board[0][0] ^ board[i][0] ^ board[0][j] ^ board[i][j]"}, "11": {"lineno": 18, "parents": [10], "children": [2], "function": "movesToChessboard", "code": "return -1"}, "12": {"lineno": 20, "parents": [5], "children": [13], "calls": ["sum"], "function": "movesToChessboard", "code": "rowSum = sum(board[0])"}, "13": {"lineno": 21, "parents": [12], "children": [14], "calls": ["sum"], "function": "movesToChessboard", "code": "colSum = sum((board[i][0] for i in range(n)))"}, "14": {"lineno": 23, "parents": [13], "children": [16, 15], "function": "movesToChessboard", "code": "_if: rowSum != n // 2 and rowSum != (n + 1) // 2"}, "15": {"lineno": 24, "parents": [14], "children": [2], "function": "movesToChessboard", "code": "return -1"}, "16": {"lineno": 25, "parents": [14], "children": [17, 18], "function": "movesToChessboard", "code": "_if: colSum != n // 2 and colSum != (n + 1) // 2"}, "17": {"lineno": 26, "parents": [16], "children": [2], "function": "movesToChessboard", "code": "return -1"}, "18": {"lineno": 28, "parents": [16], "children": [19], "calls": ["sum"], "function": "movesToChessboard", "code": "rowSwaps = sum((board[i][0] == i & 1 for i in range(n)))"}, "19": {"lineno": 29, "parents": [18], "children": [20], "calls": ["sum"], "function": "movesToChessboard", "code": "colSwaps = sum((board[0][i] == i & 1 for i in range(n)))"}, "20": {"lineno": 31, "parents": [19], "children": [25, 21], "function": "movesToChessboard", "code": "_if: n & 1"}, "21": {"lineno": 32, "parents": [20], "children": [22, 23], "function": "movesToChessboard", "code": "_if: rowSwaps & 1"}, "22": {"lineno": 33, "parents": [21], "children": [23], "function": "movesToChessboard", "code": "rowSwaps = n - rowSwaps"}, "23": {"lineno": 34, "parents": [21, 22], "children": [24, 27], "function": "movesToChessboard", "code": "_if: colSwaps & 1"}, "24": {"lineno": 35, "parents": [23], "children": [27], "function": "movesToChessboard", "code": "colSwaps = n - colSwaps"}, "25": {"lineno": 37, "parents": [20], "children": [26], "calls": ["min"], "function": "movesToChessboard", "code": "rowSwaps = min(rowSwaps, n - rowSwaps)"}, "26": {"lineno": 38, "parents": [25], "children": [27], "calls": ["min"], "function": "movesToChessboard", "code": "colSwaps = min(colSwaps, n - colSwaps)"}, "27": {"lineno": 40, "parents": [24, 26, 23], "children": [2], "function": "movesToChessboard", "code": "return (rowSwaps + colSwaps) // 2"}, "28": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 786, "task_title": "K-th Smallest Prime Fraction", "difficulty": 2, "func_name": "kthSmallestPrimeFraction", "description": "You are given a sorted integer array `arr` containing `1` and prime numbers,\nwhere all the integers of `arr` are unique. You are also given an integer `k`.\n\nFor every `i` and `j` where `0 <= i < j < arr.length`, we consider the\nfraction `arr[i] / arr[j]`.\n\nReturn the `kth` smallest fraction considered. Return your answer as an array\nof integers of size `2`, where `answer[0] == arr[i]` and `answer[1] ==\narr[j]`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def kthSmallestPrimeFraction(self, arr: List[int], k: int) -> List[int]:\n    n = len(arr)\n    ans = [0, 1]\n    l = 0\n    r = 1\n\n    while True:\n      m = (l + r) / 2\n      ans[0] = 0\n      count = 0\n      j = 1\n\n      for i in range(n):\n        while j < n and arr[i] > m * arr[j]:\n          j += 1\n        count += n - j\n        if j == n:\n          break\n        if ans[0] * arr[j] < ans[1] * arr[i]:\n          ans[0] = arr[i]\n          ans[1] = arr[j]\n\n      if count < k:\n        l = m\n      elif count > k:\n        r = m\n      else:\n        return ans\n", "blocks": [{"type": "if", "start": 34, "end": 35}, {"type": "if", "start": 28, "end": 29}, {"type": "if", "start": 30, "end": 32}, {"type": "if", "start": 36, "end": 37}, {"type": "else", "start": 38, "end": 39}], "target_lines": [29, 31, 32, 35, 37, 39], "cfg": {"0": {"lineno": 0, "parents": [], "children": [28], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "kthSmallestPrimeFraction", "code": "enter: kthSmallestPrimeFraction(self, arr, k)"}, "2": {"lineno": 12, "parents": [27, 7], "children": [], "function": "kthSmallestPrimeFraction", "code": "exit: kthSmallestPrimeFraction(self, arr, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "kthSmallestPrimeFraction", "code": "n = len(arr)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "kthSmallestPrimeFraction", "code": "ans = [0, 1]"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "kthSmallestPrimeFraction", "code": "l = 0"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "kthSmallestPrimeFraction", "code": "r = 1"}, "7": {"lineno": 18, "parents": [24, 26, 6], "children": [8, 2], "function": "kthSmallestPrimeFraction", "code": "_while: True"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "kthSmallestPrimeFraction", "code": "m = (l + r) / 2"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "kthSmallestPrimeFraction", "code": "ans[0] = 0"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "kthSmallestPrimeFraction", "code": "count = 0"}, "11": {"lineno": 22, "parents": [10], "children": [12], "function": "kthSmallestPrimeFraction", "code": "j = 1"}, "12": {"lineno": 24, "parents": [11], "children": [13], "function": "kthSmallestPrimeFraction", "code": "__iv = iter(range(n))"}, "13": {"lineno": 24, "parents": [12, 20, 22], "children": [14, 23], "calls": ["range"], "function": "kthSmallestPrimeFraction", "code": "_for: __iv.__length__hint__() > 0"}, "14": {"lineno": 24, "parents": [13], "children": [15], "function": "kthSmallestPrimeFraction", "code": "i = next(__iv)"}, "15": {"lineno": 25, "parents": [16, 14], "children": [16, 17], "function": "kthSmallestPrimeFraction", "code": "_while: j < n and arr[i] > m * arr[j]"}, "16": {"lineno": 26, "parents": [15], "children": [15], "function": "kthSmallestPrimeFraction", "code": "j += 1"}, "17": {"lineno": 27, "parents": [15], "children": [18], "function": "kthSmallestPrimeFraction", "code": "count += n - j"}, "18": {"lineno": 28, "parents": [17], "children": [19, 20], "function": "kthSmallestPrimeFraction", "code": "_if: j == n"}, "19": {"lineno": 29, "parents": [18], "children": [], "function": "kthSmallestPrimeFraction", "code": "break"}, "20": {"lineno": 30, "parents": [18], "children": [13, 21], "function": "kthSmallestPrimeFraction", "code": "_if: ans[0] * arr[j] < ans[1] * arr[i]"}, "21": {"lineno": 31, "parents": [20], "children": [22], "function": "kthSmallestPrimeFraction", "code": "ans[0] = arr[i]"}, "22": {"lineno": 32, "parents": [21], "children": [13], "function": "kthSmallestPrimeFraction", "code": "ans[1] = arr[j]"}, "23": {"lineno": 34, "parents": [13], "children": [24, 25], "function": "kthSmallestPrimeFraction", "code": "_if: count < k"}, "24": {"lineno": 35, "parents": [23], "children": [7], "function": "kthSmallestPrimeFraction", "code": "l = m"}, "25": {"lineno": 36, "parents": [23], "children": [26, 27], "function": "kthSmallestPrimeFraction", "code": "_if: count > k"}, "26": {"lineno": 37, "parents": [25], "children": [7], "function": "kthSmallestPrimeFraction", "code": "r = m"}, "27": {"lineno": 39, "parents": [25], "children": [2], "function": "kthSmallestPrimeFraction", "code": "return ans"}, "28": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 787, "task_title": "Cheapest Flights Within K Stops", "difficulty": 2, "func_name": "findCheapestPrice", "description": "There are `n` cities connected by some number of flights. You are given an\narray `flights` where `flights[i] = [fromi, toi, pricei]` indicates that there\nis a flight from city `fromi` to city `toi` with cost `pricei`.\n\nYou are also given three integers `src`, `dst`, and `k`, return the cheapest\nprice from `src` to `dst` with at most `k` stops. If there is no such route,\nreturn `-1`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:\n    graph = [[] for _ in range(n)]\n\n    for u, v, w in flights:\n      graph[u].append((v, w))\n\n    return self._dijkstra(graph, src, dst, k)\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int, dst: int, k: int) -> int:\n    dist=[]\n    for i in range(len(graph)):\n      dist.append([math.inf for _ in range(k + 2)])\n\n    dist[src][k + 1] = 0\n    minHeap = [(dist[src][k + 1], src, k + 1)]\n\n    while minHeap:\n      d, u, stops = heapq.heappop(minHeap)\n      if u == dst:\n        return d\n      if stops == 0 or d > dist[u][stops]:\n        continue\n      for v, w in graph[u]:\n        if d + w < dist[v][stops - 1]:\n          dist[v][stops - 1] = d + w\n          heapq.heappush(minHeap, (dist[v][stops - 1], v, stops - 1))\n\n    return -1\n", "blocks": [{"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 35, "end": 37}], "target_lines": [31, 33, 36, 37], "cfg": {"0": {"lineno": 0, "parents": [], "children": [31], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "findCheapestPrice", "code": "enter: findCheapestPrice(self, n, flights, src, dst, k)"}, "2": {"lineno": 12, "parents": [8], "children": [], "function": "findCheapestPrice", "code": "exit: findCheapestPrice(self, n, flights, src, dst, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "findCheapestPrice", "code": "graph = [[] for _ in range(n)]"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "findCheapestPrice", "code": "__iv = iter(flights)"}, "5": {"lineno": 15, "parents": [4, 7], "children": [8, 6], "calls": ["_dijkstra"], "function": "findCheapestPrice", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [10, 5], "children": [7], "function": "findCheapestPrice", "code": "u, v, w = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [5], "calls": ["append"], "function": "findCheapestPrice", "code": "graph[u].append((v, w))"}, "8": {"lineno": 18, "parents": [10, 5], "children": [2], "function": "findCheapestPrice", "code": "return self._dijkstra(graph, src, dst, k)"}, "9": {"lineno": 20, "parents": [5], "children": [11], "function": "_dijkstra", "code": "enter: _dijkstra(self, graph, src, dst, k)"}, "10": {"lineno": 20, "parents": [21, 30], "children": [], "function": "_dijkstra", "code": "exit: _dijkstra(self, graph, src, dst, k)"}, "11": {"lineno": 21, "parents": [9], "children": [12], "function": "_dijkstra", "code": "dist = []"}, "12": {"lineno": 22, "parents": [11], "children": [13], "function": "_dijkstra", "code": "__iv = iter(range(len(graph)))"}, "13": {"lineno": 22, "parents": [12, 15], "children": [16, 14], "calls": ["len", "range"], "function": "_dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "14": {"lineno": 22, "parents": [13], "children": [15], "function": "_dijkstra", "code": "i = next(__iv)"}, "15": {"lineno": 23, "parents": [14], "children": [13], "calls": ["append"], "function": "_dijkstra", "code": "dist.append([math.inf for _ in range(k + 2)])"}, "16": {"lineno": 25, "parents": [13], "children": [17], "function": "_dijkstra", "code": "dist[src][k + 1] = 0"}, "17": {"lineno": 26, "parents": [16], "children": [18], "function": "_dijkstra", "code": "minHeap = [(dist[src][k + 1], src, k + 1)]"}, "18": {"lineno": 28, "parents": [17, 25, 23], "children": [19, 30], "function": "_dijkstra", "code": "_while: minHeap"}, "19": {"lineno": 29, "parents": [18], "children": [20], "calls": ["heappop"], "function": "_dijkstra", "code": "d, u, stops = heapq.heappop(minHeap)"}, "20": {"lineno": 30, "parents": [19], "children": [21, 22], "function": "_dijkstra", "code": "_if: u == dst"}, "21": {"lineno": 31, "parents": [20], "children": [10], "function": "_dijkstra", "code": "return d"}, "22": {"lineno": 32, "parents": [20], "children": [24, 23], "function": "_dijkstra", "code": "_if: stops == 0 or d > dist[u][stops]"}, "23": {"lineno": 33, "parents": [22], "children": [18], "function": "_dijkstra", "code": "continue"}, "24": {"lineno": 34, "parents": [22], "children": [25], "function": "_dijkstra", "code": "__iv = iter(graph[u])"}, "25": {"lineno": 34, "parents": [24, 27, 29], "children": [26, 18], "function": "_dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "26": {"lineno": 34, "parents": [25], "children": [27], "function": "_dijkstra", "code": "v, w = next(__iv)"}, "27": {"lineno": 35, "parents": [26], "children": [25, 28], "function": "_dijkstra", "code": "_if: d + w < dist[v][stops - 1]"}, "28": {"lineno": 36, "parents": [27], "children": [29], "function": "_dijkstra", "code": "dist[v][stops - 1] = d + w"}, "29": {"lineno": 37, "parents": [28], "children": [25], "calls": ["heappush"], "function": "_dijkstra", "code": "heapq.heappush(minHeap, (dist[v][stops - 1], v, stops - 1))"}, "30": {"lineno": 39, "parents": [18], "children": [10], "function": "_dijkstra", "code": "return -1"}, "31": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 794, "task_title": "Valid Tic-Tac-Toe State", "difficulty": 2, "func_name": "validTicTacToe", "description": "Given a Tic-Tac-Toe board as a string array `board`, return `true` if and only\nif it is possible to reach this board position during the course of a valid\ntic-tac-toe game.\n\nThe board is a `3 x 3` array that consists of characters `' '`, `'X'`, and\n`'O'`. The `' '` character represents an empty square.\n\nHere are the rules of Tic-Tac-Toe:\n\n* Players take turns placing characters into empty squares `' '`.\n* The first player always places `'X'` characters, while the second player always places `'O'` characters.\n* `'X'` and `'O'` characters are always placed into empty squares, never filled ones.\n* The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.\n* The game also ends if all squares are non-empty.\n* No more moves can be played if the game is over.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def validTicTacToe(self, board: List[str]) -> bool:\n    def isWin(c: str) -> bool:\n      return any(row.count(c) == 3 for row in board) or any(row.count(c) == 3 for row in list(zip(*board))) or all(board[i][i] == c for i in range(3)) or all(board[i][2 - i] == c for i in range(3))\n\n    countX = sum(row.count('X') for row in board)\n    countO = sum(row.count('O') for row in board)\n\n    if countX < countO or countX - countO > 1:\n      return False\n    if isWin('X') and countX == countO or isWin('O') and countX != countO:\n      return False\n\n    return True\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}], "target_lines": [20, 22], "cfg": {"0": {"lineno": 0, "parents": [], "children": [13], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [6], "function": "validTicTacToe", "code": "enter: validTicTacToe(self, board)"}, "2": {"lineno": 12, "parents": [9, 11, 12], "children": [], "function": "validTicTacToe", "code": "exit: validTicTacToe(self, board)"}, "3": {"lineno": 13, "parents": [], "children": [5], "function": "isWin", "code": "enter: isWin(c)"}, "4": {"lineno": 13, "parents": [5], "children": [], "function": "isWin", "code": "exit: isWin(c)"}, "5": {"lineno": 14, "parents": [3], "children": [4], "function": "isWin", "code": "return any((row.count(c) == 3 for row in board)) or any((row.count(c) == 3 for row in list(zip(*board)))) or all((board[i][i] == c for i in range(3))) or all((board[i][2 - i] == c for i in range(3)))"}, "6": {"lineno": 16, "parents": [1], "children": [7], "calls": ["sum"], "function": "validTicTacToe", "code": "countX = sum((row.count('X') for row in board))"}, "7": {"lineno": 17, "parents": [6], "children": [8], "calls": ["sum"], "function": "validTicTacToe", "code": "countO = sum((row.count('O') for row in board))"}, "8": {"lineno": 19, "parents": [7], "children": [9, 10], "function": "validTicTacToe", "code": "_if: countX < countO or countX - countO > 1"}, "9": {"lineno": 20, "parents": [8], "children": [2], "function": "validTicTacToe", "code": "return False"}, "10": {"lineno": 21, "parents": [8], "children": [11, 12], "function": "validTicTacToe", "code": "_if: isWin('X') and countX == countO or (isWin('O') and countX != countO)"}, "11": {"lineno": 22, "parents": [10], "children": [2], "function": "validTicTacToe", "code": "return False"}, "12": {"lineno": 24, "parents": [10], "children": [2], "function": "validTicTacToe", "code": "return True"}, "13": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 805, "task_title": "Split Array With Same Average", "difficulty": 3, "func_name": "splitArraySameAverage", "description": "You are given an integer array `nums`.\n\nYou should move each element of `nums` into one of the two arrays `A` and `B`\nsuch that `A` and `B` are non-empty, and `average(A) == average(B)`.\n\nReturn `true` if it is possible to achieve that and `false` otherwise.\n\nNote that for an array `arr`, `average(arr)` is the sum of all the elements of\n`arr` over the length of `arr`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def splitArraySameAverage(self, nums: List[int]) -> bool:\n    n = len(nums)\n    summ = sum(nums)\n    if not any(i * summ % n == 0 for i in range(1, n // 2 + 1)):\n      return False\n\n    sums = [set() for _ in range(n // 2 + 1)]\n    sums[0].add(0)\n\n    for num in nums:\n      for i in range(n // 2, 0, -1):\n        for val in sums[i - 1]:\n          sums[i].add(num + val)\n\n    for i in range(1, n // 2 + 1):\n      if i * summ % n == 0 and i * summ // n in sums[i]:\n        return True\n\n    return False\n", "blocks": [{"type": "if", "start": 15, "end": 16}, {"type": "if", "start": 27, "end": 28}], "target_lines": [16, 28], "cfg": {"0": {"lineno": 0, "parents": [], "children": [25], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "splitArraySameAverage", "code": "enter: splitArraySameAverage(self, nums)"}, "2": {"lineno": 12, "parents": [24, 6, 23], "children": [], "function": "splitArraySameAverage", "code": "exit: splitArraySameAverage(self, nums)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "splitArraySameAverage", "code": "n = len(nums)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["sum"], "function": "splitArraySameAverage", "code": "summ = sum(nums)"}, "5": {"lineno": 15, "parents": [4], "children": [6, 7], "calls": ["any"], "function": "splitArraySameAverage", "code": "_if: not any((i * summ % n == 0 for i in range(1, n // 2 + 1)))"}, "6": {"lineno": 16, "parents": [5], "children": [2], "function": "splitArraySameAverage", "code": "return False"}, "7": {"lineno": 18, "parents": [5], "children": [8], "function": "splitArraySameAverage", "code": "sums = [set() for _ in range(n // 2 + 1)]"}, "8": {"lineno": 19, "parents": [7], "children": [9], "calls": ["add"], "function": "splitArraySameAverage", "code": "sums[0].add(0)"}, "9": {"lineno": 21, "parents": [8], "children": [10], "function": "splitArraySameAverage", "code": "__iv = iter(nums)"}, "10": {"lineno": 21, "parents": [9, 13], "children": [19, 11], "function": "splitArraySameAverage", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 21, "parents": [10], "children": [12], "function": "splitArraySameAverage", "code": "num = next(__iv)"}, "12": {"lineno": 22, "parents": [11], "children": [13], "function": "splitArraySameAverage", "code": "__iv = iter(range(n // 2, 0, -1))"}, "13": {"lineno": 22, "parents": [16, 12], "children": [10, 14], "calls": ["range"], "function": "splitArraySameAverage", "code": "_for: __iv.__length__hint__() > 0"}, "14": {"lineno": 22, "parents": [13], "children": [15], "function": "splitArraySameAverage", "code": "i = next(__iv)"}, "15": {"lineno": 23, "parents": [14], "children": [16], "function": "splitArraySameAverage", "code": "__iv = iter(sums[i - 1])"}, "16": {"lineno": 23, "parents": [18, 15], "children": [17, 13], "function": "splitArraySameAverage", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 23, "parents": [16], "children": [18], "function": "splitArraySameAverage", "code": "val = next(__iv)"}, "18": {"lineno": 24, "parents": [17], "children": [16], "calls": ["add"], "function": "splitArraySameAverage", "code": "sums[i].add(num + val)"}, "19": {"lineno": 26, "parents": [10], "children": [20], "function": "splitArraySameAverage", "code": "__iv = iter(range(1, n // 2 + 1))"}, "20": {"lineno": 26, "parents": [19, 22], "children": [24, 21], "calls": ["range"], "function": "splitArraySameAverage", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 26, "parents": [20], "children": [22], "function": "splitArraySameAverage", "code": "i = next(__iv)"}, "22": {"lineno": 27, "parents": [21], "children": [20, 23], "function": "splitArraySameAverage", "code": "_if: i * summ % n == 0 and i * summ // n in sums[i]"}, "23": {"lineno": 28, "parents": [22], "children": [2], "function": "splitArraySameAverage", "code": "return True"}, "24": {"lineno": 30, "parents": [20], "children": [2], "function": "splitArraySameAverage", "code": "return False"}, "25": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 815, "task_title": "Bus Routes", "difficulty": 3, "func_name": "numBusesToDestination", "description": "You are given an array `routes` representing bus routes where `routes[i]` is a\nbus route that the `ith` bus repeats forever.\n\n* For example, if `routes[0] = [1, 5, 7]`, this means that the `0th` bus travels in the sequence `1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ...` forever.\n\nYou will start at the bus stop `source` (You are not on any bus initially),\nand you want to go to the bus stop `target`. You can travel between bus stops\nby buses only.\n\nReturn the least number of buses you must take to travel from `source` to\n`target`. Return `-1` if it is not possible.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:\n    if source == target:\n      return 0\n\n    graph = collections.defaultdict(list)\n    usedBuses = set()\n\n    for i in range(len(routes)):\n      for route in routes[i]:\n        graph[route].append(i)\n\n    ans = 0\n    q = collections.deque([source])\n\n    while q:\n      ans += 1\n      for _ in range(len(q)):\n        for bus in graph[q.popleft()]:\n          if bus in usedBuses:\n            continue\n          usedBuses.add(bus)\n          for nextRoute in routes[bus]:\n            if nextRoute == target:\n              return ans\n            q.append(nextRoute)\n\n    return -1\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 34, "end": 35}], "target_lines": [14, 31, 35], "cfg": {"0": {"lineno": 0, "parents": [], "children": [34], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "numBusesToDestination", "code": "enter: numBusesToDestination(self, routes, source, target)"}, "2": {"lineno": 12, "parents": [33, 4, 31], "children": [], "function": "numBusesToDestination", "code": "exit: numBusesToDestination(self, routes, source, target)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "function": "numBusesToDestination", "code": "_if: source == target"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "numBusesToDestination", "code": "return 0"}, "5": {"lineno": 16, "parents": [3], "children": [6], "calls": ["defaultdict"], "function": "numBusesToDestination", "code": "graph = collections.defaultdict(list)"}, "6": {"lineno": 17, "parents": [5], "children": [7], "calls": ["set"], "function": "numBusesToDestination", "code": "usedBuses = set()"}, "7": {"lineno": 19, "parents": [6], "children": [8], "function": "numBusesToDestination", "code": "__iv = iter(range(len(routes)))"}, "8": {"lineno": 19, "parents": [11, 7], "children": [9, 14], "calls": ["len", "range"], "function": "numBusesToDestination", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 19, "parents": [8], "children": [10], "function": "numBusesToDestination", "code": "i = next(__iv)"}, "10": {"lineno": 20, "parents": [9], "children": [11], "function": "numBusesToDestination", "code": "__iv = iter(routes[i])"}, "11": {"lineno": 20, "parents": [10, 13], "children": [8, 12], "function": "numBusesToDestination", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 20, "parents": [11], "children": [13], "function": "numBusesToDestination", "code": "route = next(__iv)"}, "13": {"lineno": 21, "parents": [12], "children": [11], "calls": ["append"], "function": "numBusesToDestination", "code": "graph[route].append(i)"}, "14": {"lineno": 23, "parents": [8], "children": [15], "function": "numBusesToDestination", "code": "ans = 0"}, "15": {"lineno": 24, "parents": [14], "children": [16], "calls": ["deque"], "function": "numBusesToDestination", "code": "q = collections.deque([source])"}, "16": {"lineno": 26, "parents": [19, 15], "children": [17, 33], "function": "numBusesToDestination", "code": "_while: q"}, "17": {"lineno": 27, "parents": [16], "children": [18], "function": "numBusesToDestination", "code": "ans += 1"}, "18": {"lineno": 28, "parents": [17], "children": [19], "function": "numBusesToDestination", "code": "__iv = iter(range(len(q)))"}, "19": {"lineno": 28, "parents": [18, 22], "children": [16, 20], "calls": ["len", "range"], "function": "numBusesToDestination", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 28, "parents": [19], "children": [21], "function": "numBusesToDestination", "code": "_ = next(__iv)"}, "21": {"lineno": 29, "parents": [20], "children": [22], "function": "numBusesToDestination", "code": "__iv = iter(graph[q.popleft()])"}, "22": {"lineno": 29, "parents": [25, 28, 21], "children": [19, 23], "function": "numBusesToDestination", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 29, "parents": [22], "children": [24], "function": "numBusesToDestination", "code": "bus = next(__iv)"}, "24": {"lineno": 30, "parents": [23], "children": [25, 26], "function": "numBusesToDestination", "code": "_if: bus in usedBuses"}, "25": {"lineno": 31, "parents": [24], "children": [22], "function": "numBusesToDestination", "code": "continue"}, "26": {"lineno": 32, "parents": [24], "children": [27], "calls": ["add"], "function": "numBusesToDestination", "code": "usedBuses.add(bus)"}, "27": {"lineno": 33, "parents": [26], "children": [28], "function": "numBusesToDestination", "code": "__iv = iter(routes[bus])"}, "28": {"lineno": 33, "parents": [32, 27], "children": [29, 22], "function": "numBusesToDestination", "code": "_for: __iv.__length__hint__() > 0"}, "29": {"lineno": 33, "parents": [28], "children": [30], "function": "numBusesToDestination", "code": "nextRoute = next(__iv)"}, "30": {"lineno": 34, "parents": [29], "children": [32, 31], "function": "numBusesToDestination", "code": "_if: nextRoute == target"}, "31": {"lineno": 35, "parents": [30], "children": [2], "function": "numBusesToDestination", "code": "return ans"}, "32": {"lineno": 36, "parents": [30], "children": [28], "calls": ["append"], "function": "numBusesToDestination", "code": "q.append(nextRoute)"}, "33": {"lineno": 38, "parents": [16], "children": [2], "function": "numBusesToDestination", "code": "return -1"}, "34": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 838, "task_title": "Push Dominoes", "difficulty": 2, "func_name": "pushDominoes", "description": "There are `n` dominoes in a line, and we place each domino vertically upright.\nIn the beginning, we simultaneously push some of the dominoes either to the\nleft or to the right.\n\nAfter each second, each domino that is falling to the left pushes the adjacent\ndomino on the left. Similarly, the dominoes falling to the right push their\nadjacent dominoes standing on the right.\n\nWhen a vertical domino has dominoes falling on it from both sides, it stays\nstill due to the balance of the forces.\n\nFor the purposes of this question, we will consider that a falling domino\nexpends no additional force to a falling or already fallen domino.\n\nYou are given a string `dominoes` representing the initial state where:\n\n* `dominoes[i] = 'L'`, if the `ith` domino has been pushed to the left,\n* `dominoes[i] = 'R'`, if the `ith` domino has been pushed to the right, and\n* `dominoes[i] = '.'`, if the `ith` domino has not been pushed.\n\nReturn a string representing the final state.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def pushDominoes(self, dominoes: str) -> str:\n    ans = list(dominoes)\n    L = -1\n    R = -1\n\n    for i in range(len(dominoes) + 1):\n      if i == len(dominoes) or dominoes[i] == 'R':\n        if L < R:\n          while R < i:\n            ans[R] = 'R'\n            R += 1\n        R = i\n      elif dominoes[i] == 'L':\n        if R < L or (L, R) == (-1, -1):\n          if (L, R) == (-1, -1):\n            L += 1\n          while L < i:\n            ans[L] = 'L'\n            L += 1\n        else:\n          l = R + 1\n          r = i - 1\n          while l < r:\n            ans[l] = 'R'\n            ans[r] = 'L'\n            l += 1\n            r -= 1\n        L = i\n\n    return ''.join(ans)\n", "blocks": [{"type": "if", "start": 18, "end": 23}, {"type": "if", "start": 19, "end": 22}, {"type": "if", "start": 24, "end": 39}, {"type": "if", "start": 25, "end": 30}, {"type": "else", "start": 31, "end": 38}, {"type": "if", "start": 26, "end": 27}], "target_lines": [19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39], "cfg": {"0": {"lineno": 0, "parents": [], "children": [31], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "pushDominoes", "code": "enter: pushDominoes(self, dominoes)"}, "2": {"lineno": 12, "parents": [30], "children": [], "function": "pushDominoes", "code": "exit: pushDominoes(self, dominoes)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["list"], "function": "pushDominoes", "code": "ans = list(dominoes)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "pushDominoes", "code": "L = -1"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "pushDominoes", "code": "R = -1"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "pushDominoes", "code": "__iv = iter(range(len(dominoes) + 1))"}, "7": {"lineno": 17, "parents": [15, 29, 6, 14], "children": [8, 30], "calls": ["len", "range", "join"], "function": "pushDominoes", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "pushDominoes", "code": "i = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10, 15], "function": "pushDominoes", "code": "_if: i == len(dominoes) or dominoes[i] == 'R'"}, "10": {"lineno": 19, "parents": [9], "children": [11, 14], "function": "pushDominoes", "code": "_if: L < R"}, "11": {"lineno": 20, "parents": [10, 13], "children": [12, 14], "function": "pushDominoes", "code": "_while: R < i"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "pushDominoes", "code": "ans[R] = 'R'"}, "13": {"lineno": 22, "parents": [12], "children": [11, 14], "function": "pushDominoes", "code": "R += 1"}, "14": {"lineno": 23, "parents": [10, 11, 13], "children": [7], "function": "pushDominoes", "code": "R = i"}, "15": {"lineno": 24, "parents": [9], "children": [16, 7], "function": "pushDominoes", "code": "_if: dominoes[i] == 'L'"}, "16": {"lineno": 25, "parents": [15], "children": [17, 22], "function": "pushDominoes", "code": "_if: R < L or (L, R) == (-1, -1)"}, "17": {"lineno": 26, "parents": [16], "children": [18, 19], "function": "pushDominoes", "code": "_if: (L, R) == (-1, -1)"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "pushDominoes", "code": "L += 1"}, "19": {"lineno": 28, "parents": [17, 18, 21], "children": [20, 29], "function": "pushDominoes", "code": "_while: L < i"}, "20": {"lineno": 29, "parents": [19], "children": [21], "function": "pushDominoes", "code": "ans[L] = 'L'"}, "21": {"lineno": 30, "parents": [20], "children": [19], "function": "pushDominoes", "code": "L += 1"}, "22": {"lineno": 32, "parents": [16], "children": [23], "function": "pushDominoes", "code": "l = R + 1"}, "23": {"lineno": 33, "parents": [22], "children": [24], "function": "pushDominoes", "code": "r = i - 1"}, "24": {"lineno": 34, "parents": [28, 23], "children": [25, 29], "function": "pushDominoes", "code": "_while: l < r"}, "25": {"lineno": 35, "parents": [24], "children": [26], "function": "pushDominoes", "code": "ans[l] = 'R'"}, "26": {"lineno": 36, "parents": [25], "children": [27], "function": "pushDominoes", "code": "ans[r] = 'L'"}, "27": {"lineno": 37, "parents": [26], "children": [28], "function": "pushDominoes", "code": "l += 1"}, "28": {"lineno": 38, "parents": [27], "children": [24], "function": "pushDominoes", "code": "r -= 1"}, "29": {"lineno": 39, "parents": [24, 19], "children": [7], "function": "pushDominoes", "code": "L = i"}, "30": {"lineno": 41, "parents": [7], "children": [2], "function": "pushDominoes", "code": "return ''.join(ans)"}, "31": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 845, "task_title": "Longest Mountain in Array", "difficulty": 2, "func_name": "longestMountain", "description": "You may recall that an array `arr` is a mountain array if and only if:\n\n* `arr.length >= 3`\n* There exists some index `i` (0-indexed) with `0 < i < arr.length - 1` such that: \n* `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n* `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\nGiven an integer array `arr`, return the length of the longest subarray, which\nis a mountain. Return `0` if there is no mountain subarray.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def longestMountain(self, arr: List[int]) -> int:\n    ans = 0\n    i = 0\n\n    while i + 1 < len(arr):\n      while i + 1 < len(arr) and arr[i] == arr[i + 1]:\n        i += 1\n\n      increasing = 0\n      decreasing = 0\n\n      while i + 1 < len(arr) and arr[i] < arr[i + 1]:\n        increasing += 1\n        i += 1\n\n      while i + 1 < len(arr) and arr[i] > arr[i + 1]:\n        decreasing += 1\n        i += 1\n\n      if increasing > 0 and decreasing > 0:\n        ans = max(ans, increasing + decreasing + 1)\n\n    return ans\n", "blocks": [{"type": "if", "start": 31, "end": 32}], "target_lines": [32], "cfg": {"0": {"lineno": 0, "parents": [], "children": [19], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "longestMountain", "code": "enter: longestMountain(self, arr)"}, "2": {"lineno": 12, "parents": [18], "children": [], "function": "longestMountain", "code": "exit: longestMountain(self, arr)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "longestMountain", "code": "ans = 0"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "longestMountain", "code": "i = 0"}, "5": {"lineno": 16, "parents": [16, 17, 4], "children": [18, 6], "calls": ["len"], "function": "longestMountain", "code": "_while: i + 1 < len(arr)"}, "6": {"lineno": 17, "parents": [5, 7], "children": [8, 7], "function": "longestMountain", "code": "_while: i + 1 < len(arr) and arr[i] == arr[i + 1]"}, "7": {"lineno": 18, "parents": [6], "children": [18, 6], "function": "longestMountain", "code": "i += 1"}, "8": {"lineno": 20, "parents": [6], "children": [9], "function": "longestMountain", "code": "increasing = 0"}, "9": {"lineno": 21, "parents": [8], "children": [10], "function": "longestMountain", "code": "decreasing = 0"}, "10": {"lineno": 23, "parents": [9, 12], "children": [11, 13], "function": "longestMountain", "code": "_while: i + 1 < len(arr) and arr[i] < arr[i + 1]"}, "11": {"lineno": 24, "parents": [10], "children": [12], "function": "longestMountain", "code": "increasing += 1"}, "12": {"lineno": 25, "parents": [11], "children": [10], "function": "longestMountain", "code": "i += 1"}, "13": {"lineno": 27, "parents": [10, 15], "children": [16, 14], "function": "longestMountain", "code": "_while: i + 1 < len(arr) and arr[i] > arr[i + 1]"}, "14": {"lineno": 28, "parents": [13], "children": [15], "function": "longestMountain", "code": "decreasing += 1"}, "15": {"lineno": 29, "parents": [14], "children": [13], "function": "longestMountain", "code": "i += 1"}, "16": {"lineno": 31, "parents": [13], "children": [17, 5], "function": "longestMountain", "code": "_if: increasing > 0 and decreasing > 0"}, "17": {"lineno": 32, "parents": [16], "children": [5], "calls": ["max"], "function": "longestMountain", "code": "ans = max(ans, increasing + decreasing + 1)"}, "18": {"lineno": 34, "parents": [5, 7], "children": [2], "function": "longestMountain", "code": "return ans"}, "19": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 854, "task_title": "K-Similar Strings", "difficulty": 3, "func_name": "kSimilarity", "description": "Strings `s1` and `s2` are `k`-similar (for some non-negative integer `k`) if\nwe can swap the positions of two letters in `s1` exactly `k` times so that the\nresulting string equals `s2`.\n\nGiven two anagrams `s1` and `s2`, return the smallest `k` for which `s1` and\n`s2` are `k`-similar.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def kSimilarity(self, s1: str, s2: str) -> int:\n    ans = 0\n    q = collections.deque([s1])\n    seen = {s1}\n\n    while q:\n      for _ in range(len(q)):\n        curr = q.popleft()\n        if curr == s2:\n          return ans\n        for child in self._getChildren(curr, s2):\n          if child in seen:\n            continue\n          q.append(child)\n          seen.add(child)\n      ans += 1\n\n    return -1\n\n  def _getChildren(self, curr: str, target: str) -> List[str]:\n    children = []\n    s = list(curr)\n    i = 0\n    while curr[i] == target[i]:\n      i += 1\n\n    for j in range(i + 1, len(s)):\n      if s[j] == target[i]:\n        s[i], s[j] = s[j], s[i]\n        children.append(''.join(s))\n        s[i], s[j] = s[j], s[i]\n\n    return children\n", "blocks": [{"type": "if", "start": 39, "end": 42}, {"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 23, "end": 24}], "target_lines": [21, 24, 40, 41, 42], "cfg": {"0": {"lineno": 0, "parents": [], "children": [37], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "kSimilarity", "code": "enter: kSimilarity(self, s1, s2)"}, "2": {"lineno": 12, "parents": [12, 21], "children": [], "function": "kSimilarity", "code": "exit: kSimilarity(self, s1, s2)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "kSimilarity", "code": "ans = 0"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["deque"], "function": "kSimilarity", "code": "q = collections.deque([s1])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "kSimilarity", "code": "seen = {s1}"}, "6": {"lineno": 17, "parents": [20, 5], "children": [21, 7], "function": "kSimilarity", "code": "_while: q"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "kSimilarity", "code": "__iv = iter(range(len(q)))"}, "8": {"lineno": 18, "parents": [23, 14, 7], "children": [9, 20], "calls": ["len", "range"], "function": "kSimilarity", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "kSimilarity", "code": "_ = next(__iv)"}, "10": {"lineno": 19, "parents": [9], "children": [11], "calls": ["popleft"], "function": "kSimilarity", "code": "curr = q.popleft()"}, "11": {"lineno": 20, "parents": [10], "children": [12, 13], "function": "kSimilarity", "code": "_if: curr == s2"}, "12": {"lineno": 21, "parents": [11], "children": [2], "function": "kSimilarity", "code": "return ans"}, "13": {"lineno": 22, "parents": [11], "children": [14], "function": "kSimilarity", "code": "__iv = iter(self._getChildren(curr, s2))"}, "14": {"lineno": 22, "parents": [17, 19, 13], "children": [8, 15], "calls": ["_getChildren"], "function": "kSimilarity", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 22, "parents": [14, 23], "children": [16], "function": "kSimilarity", "code": "child = next(__iv)"}, "16": {"lineno": 23, "parents": [15], "children": [17, 18], "function": "kSimilarity", "code": "_if: child in seen"}, "17": {"lineno": 24, "parents": [16], "children": [14], "function": "kSimilarity", "code": "continue"}, "18": {"lineno": 25, "parents": [16], "children": [19], "calls": ["append"], "function": "kSimilarity", "code": "q.append(child)"}, "19": {"lineno": 26, "parents": [18], "children": [14], "calls": ["add"], "function": "kSimilarity", "code": "seen.add(child)"}, "20": {"lineno": 27, "parents": [8], "children": [6], "function": "kSimilarity", "code": "ans += 1"}, "21": {"lineno": 29, "parents": [6], "children": [2], "function": "kSimilarity", "code": "return -1"}, "22": {"lineno": 31, "parents": [14], "children": [24], "function": "_getChildren", "code": "enter: _getChildren(self, curr, target)"}, "23": {"lineno": 31, "parents": [36], "children": [], "function": "_getChildren", "code": "exit: _getChildren(self, curr, target)"}, "24": {"lineno": 32, "parents": [22], "children": [25], "function": "_getChildren", "code": "children = []"}, "25": {"lineno": 33, "parents": [24], "children": [26], "calls": ["list"], "function": "_getChildren", "code": "s = list(curr)"}, "26": {"lineno": 34, "parents": [25], "children": [27], "function": "_getChildren", "code": "i = 0"}, "27": {"lineno": 35, "parents": [26, 28], "children": [28, 29], "function": "_getChildren", "code": "_while: curr[i] == target[i]"}, "28": {"lineno": 36, "parents": [27], "children": [27], "function": "_getChildren", "code": "i += 1"}, "29": {"lineno": 38, "parents": [27], "children": [30], "function": "_getChildren", "code": "__iv = iter(range(i + 1, len(s)))"}, "30": {"lineno": 38, "parents": [32, 35, 29], "children": [36, 31], "calls": ["len", "range"], "function": "_getChildren", "code": "_for: __iv.__length__hint__() > 0"}, "31": {"lineno": 38, "parents": [30], "children": [32], "function": "_getChildren", "code": "j = next(__iv)"}, "32": {"lineno": 39, "parents": [31], "children": [33, 30], "function": "_getChildren", "code": "_if: s[j] == target[i]"}, "33": {"lineno": 40, "parents": [32], "children": [34], "function": "_getChildren", "code": "s[i], s[j] = (s[j], s[i])"}, "34": {"lineno": 41, "parents": [33], "children": [35], "calls": ["join", "append"], "function": "_getChildren", "code": "children.append(''.join(s))"}, "35": {"lineno": 42, "parents": [34], "children": [30], "function": "_getChildren", "code": "s[i], s[j] = (s[j], s[i])"}, "36": {"lineno": 44, "parents": [30], "children": [23], "function": "_getChildren", "code": "return children"}, "37": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 861, "task_title": "Score After Flipping Matrix", "difficulty": 2, "func_name": "matrixScore", "description": "You are given an `m x n` binary matrix `grid`.\n\nA move consists of choosing any row or column and toggling each value in that\nrow or column (i.e., changing all `0`'s to `1`'s, and all `1`'s to `0`'s).\n\nEvery row of the matrix is interpreted as a binary number, and the score of\nthe matrix is the sum of these numbers.\n\nReturn the highest possible score after making any number of moves (including\nzero moves).\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def matrixScore(self, grid: List[List[int]]) -> int:\n    for row in grid:\n      if row[0] == 0:\n        self._flip(row)\n\n    for j, col in enumerate(list(zip(*grid))):\n      if sum(col) * 2 < len(grid):\n        self._flipCol(grid, j)\n\n    return sum(self._binary(row) for row in grid)\n\n  def _flip(self, row: List[int]) -> None:\n    for i in range(len(row)):\n      row[i] ^= 1\n\n  def _flipCol(self, grid: List[List[int]], j: int) -> None:\n    for i in range(len(grid)):\n      grid[i][j] ^= 1\n\n  def _binary(self, row: List[int]) -> int:\n    res = row[0]\n    for j in range(1, len(row)):\n      res = res * 2 + row[j]\n    return res\n", "blocks": [{"type": "if", "start": 14, "end": 15}, {"type": "if", "start": 18, "end": 19}], "target_lines": [15, 19], "cfg": {"0": {"lineno": 0, "parents": [], "children": [34], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "matrixScore", "code": "enter: matrixScore(self, grid)"}, "2": {"lineno": 12, "parents": [13], "children": [], "function": "matrixScore", "code": "exit: matrixScore(self, grid)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "matrixScore", "code": "__iv = iter(grid)"}, "4": {"lineno": 13, "parents": [3, 15, 6, 7], "children": [8, 5], "function": "matrixScore", "code": "_for: __iv.__length__hint__() > 0"}, "5": {"lineno": 13, "parents": [4], "children": [6], "function": "matrixScore", "code": "row = next(__iv)"}, "6": {"lineno": 14, "parents": [5], "children": [4, 7], "function": "matrixScore", "code": "_if: row[0] == 0"}, "7": {"lineno": 15, "parents": [6], "children": [4], "calls": ["_flip"], "function": "matrixScore", "code": "self._flip(row)"}, "8": {"lineno": 17, "parents": [4], "children": [9], "function": "matrixScore", "code": "__iv = iter(enumerate(list(zip(*grid))))"}, "9": {"lineno": 17, "parents": [8, 11, 12, 21], "children": [10, 13], "calls": ["zip", "list", "enumerate", "sum"], "function": "matrixScore", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 17, "parents": [9], "children": [11], "function": "matrixScore", "code": "j, col = next(__iv)"}, "11": {"lineno": 18, "parents": [10], "children": [9, 12], "calls": ["sum", "len"], "function": "matrixScore", "code": "_if: sum(col) * 2 < len(grid)"}, "12": {"lineno": 19, "parents": [11], "children": [9], "calls": ["_flipCol"], "function": "matrixScore", "code": "self._flipCol(grid, j)"}, "13": {"lineno": 21, "parents": [9], "children": [2], "function": "matrixScore", "code": "return sum((self._binary(row) for row in grid))"}, "14": {"lineno": 23, "parents": [7], "children": [16], "function": "_flip", "code": "enter: _flip(self, row)"}, "15": {"lineno": 23, "parents": [17], "children": [], "function": "_flip", "code": "exit: _flip(self, row)"}, "16": {"lineno": 24, "parents": [14], "children": [17], "function": "_flip", "code": "__iv = iter(range(len(row)))"}, "17": {"lineno": 24, "parents": [16, 19], "children": [18, 15], "calls": ["len", "range"], "function": "_flip", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 24, "parents": [17], "children": [19], "function": "_flip", "code": "i = next(__iv)"}, "19": {"lineno": 25, "parents": [18], "children": [17], "function": "_flip", "code": "row[i] ^= 1"}, "20": {"lineno": 27, "parents": [12], "children": [22], "function": "_flipCol", "code": "enter: _flipCol(self, grid, j)"}, "21": {"lineno": 27, "parents": [23], "children": [], "function": "_flipCol", "code": "exit: _flipCol(self, grid, j)"}, "22": {"lineno": 28, "parents": [20], "children": [23], "function": "_flipCol", "code": "__iv = iter(range(len(grid)))"}, "23": {"lineno": 28, "parents": [25, 22], "children": [24, 21], "calls": ["len", "range"], "function": "_flipCol", "code": "_for: __iv.__length__hint__() > 0"}, "24": {"lineno": 28, "parents": [23], "children": [25], "function": "_flipCol", "code": "i = next(__iv)"}, "25": {"lineno": 29, "parents": [24], "children": [23], "function": "_flipCol", "code": "grid[i][j] ^= 1"}, "26": {"lineno": 31, "parents": [], "children": [28], "function": "_binary", "code": "enter: _binary(self, row)"}, "27": {"lineno": 31, "parents": [33], "children": [], "function": "_binary", "code": "exit: _binary(self, row)"}, "28": {"lineno": 32, "parents": [26], "children": [29], "function": "_binary", "code": "res = row[0]"}, "29": {"lineno": 33, "parents": [28], "children": [30], "function": "_binary", "code": "__iv = iter(range(1, len(row)))"}, "30": {"lineno": 33, "parents": [32, 29], "children": [33, 31], "calls": ["len", "range"], "function": "_binary", "code": "_for: __iv.__length__hint__() > 0"}, "31": {"lineno": 33, "parents": [30], "children": [32], "function": "_binary", "code": "j = next(__iv)"}, "32": {"lineno": 34, "parents": [31], "children": [30], "function": "_binary", "code": "res = res * 2 + row[j]"}, "33": {"lineno": 35, "parents": [30], "children": [27], "function": "_binary", "code": "return res"}, "34": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 866, "task_title": "Prime Palindrome", "difficulty": 2, "func_name": "primePalindrome", "description": "Given an integer n, return the smallest prime palindrome greater than or equal\nto `n`.\n\nAn integer is prime if it has exactly two divisors: `1` and itself. Note that\n`1` is not a prime number.\n\n* For example, `2`, `3`, `5`, `7`, `11`, and `13` are all primes.\n\nAn integer is a palindrome if it reads the same from left to right as it does\nfrom right to left.\n\n* For example, `101` and `12321` are palindromes.\n\nThe test cases are generated so that the answer always exists and is in the\nrange `[2, 2 * 108]`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def primePalindrome(self, n: int) -> int:\n    def getPalindromes(n: int):\n      length = n // 2\n      for i in range(10**(length - 1), 10**length):\n        s = str(i)\n        for j in range(10):\n          yield int(s + str(j) + s[::-1])\n\n    def isPrime(num: int) -> bool:\n      for i in range(2, int(num**0.5 + 1)):\n        if num % i == 0:\n          return False\n      return True\n\n    if n <= 2:\n      return 2\n    if n == 3:\n      return 3\n    if n <= 5:\n      return 5\n    if n <= 7:\n      return 7\n    if n <= 11:\n      return 11\n\n    nLength = len(str(n))\n\n    while True:\n      for num in getPalindromes(nLength):\n        if num >= n and isPrime(num):\n          return num\n      nLength += 1\n", "blocks": [{"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 28, "end": 29}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 34, "end": 35}, {"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 41, "end": 42}], "target_lines": [23, 27, 29, 31, 33, 35, 42], "cfg": {"0": {"lineno": 0, "parents": [], "children": [40], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [22], "function": "primePalindrome", "code": "enter: primePalindrome(self, n)"}, "2": {"lineno": 12, "parents": [33, 38, 23, 25, 27, 29, 31], "children": [], "function": "primePalindrome", "code": "exit: primePalindrome(self, n)"}, "3": {"lineno": 13, "parents": [35], "children": [5], "function": "getPalindromes", "code": "enter: getPalindromes(n)"}, "4": {"lineno": 13, "parents": [7], "children": [], "function": "getPalindromes", "code": "exit: getPalindromes(n)"}, "5": {"lineno": 14, "parents": [3], "children": [6], "function": "getPalindromes", "code": "length = n // 2"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "getPalindromes", "code": "__iv = iter(range(10 ** (length - 1), 10 ** length))"}, "7": {"lineno": 15, "parents": [11, 6], "children": [8, 4], "calls": ["range"], "function": "getPalindromes", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 15, "parents": [7], "children": [9], "function": "getPalindromes", "code": "i = next(__iv)"}, "9": {"lineno": 16, "parents": [8], "children": [10], "calls": ["str"], "function": "getPalindromes", "code": "s = str(i)"}, "10": {"lineno": 17, "parents": [9], "children": [11], "function": "getPalindromes", "code": "__iv = iter(range(10))"}, "11": {"lineno": 17, "parents": [10, 13], "children": [12, 7], "calls": ["range"], "function": "getPalindromes", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 17, "parents": [11], "children": [13], "function": "getPalindromes", "code": "j = next(__iv)"}, "13": {"lineno": 18, "parents": [12], "children": [11], "function": "getPalindromes", "code": "yield int(s + str(j) + s[::-1])"}, "14": {"lineno": 20, "parents": [], "children": [16], "function": "isPrime", "code": "enter: isPrime(num)"}, "15": {"lineno": 20, "parents": [20, 21], "children": [], "function": "isPrime", "code": "exit: isPrime(num)"}, "16": {"lineno": 21, "parents": [14], "children": [17], "function": "isPrime", "code": "__iv = iter(range(2, int(num ** 0.5 + 1)))"}, "17": {"lineno": 21, "parents": [16, 19], "children": [18, 21], "calls": ["int", "range"], "function": "isPrime", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 21, "parents": [17], "children": [19], "function": "isPrime", "code": "i = next(__iv)"}, "19": {"lineno": 22, "parents": [18], "children": [17, 20], "function": "isPrime", "code": "_if: num % i == 0"}, "20": {"lineno": 23, "parents": [19], "children": [15], "function": "isPrime", "code": "return False"}, "21": {"lineno": 24, "parents": [17], "children": [15], "function": "isPrime", "code": "return True"}, "22": {"lineno": 26, "parents": [1], "children": [24, 23], "function": "primePalindrome", "code": "_if: n <= 2"}, "23": {"lineno": 27, "parents": [22], "children": [2], "function": "primePalindrome", "code": "return 2"}, "24": {"lineno": 28, "parents": [22], "children": [25, 26], "function": "primePalindrome", "code": "_if: n == 3"}, "25": {"lineno": 29, "parents": [24], "children": [2], "function": "primePalindrome", "code": "return 3"}, "26": {"lineno": 30, "parents": [24], "children": [27, 28], "function": "primePalindrome", "code": "_if: n <= 5"}, "27": {"lineno": 31, "parents": [26], "children": [2], "function": "primePalindrome", "code": "return 5"}, "28": {"lineno": 32, "parents": [26], "children": [29, 30], "function": "primePalindrome", "code": "_if: n <= 7"}, "29": {"lineno": 33, "parents": [28], "children": [2], "function": "primePalindrome", "code": "return 7"}, "30": {"lineno": 34, "parents": [28], "children": [32, 31], "function": "primePalindrome", "code": "_if: n <= 11"}, "31": {"lineno": 35, "parents": [30], "children": [2], "function": "primePalindrome", "code": "return 11"}, "32": {"lineno": 37, "parents": [30], "children": [33], "calls": ["str", "len"], "function": "primePalindrome", "code": "nLength = len(str(n))"}, "33": {"lineno": 39, "parents": [32, 39], "children": [34, 2], "function": "primePalindrome", "code": "_while: True"}, "34": {"lineno": 40, "parents": [33], "children": [35], "function": "primePalindrome", "code": "__iv = iter(getPalindromes(nLength))"}, "35": {"lineno": 40, "parents": [34, 37], "children": [36, 39], "calls": ["getPalindromes"], "function": "primePalindrome", "code": "_for: __iv.__length__hint__() > 0"}, "36": {"lineno": 40, "parents": [35, 4], "children": [37], "function": "primePalindrome", "code": "num = next(__iv)"}, "37": {"lineno": 41, "parents": [36], "children": [35, 38], "function": "primePalindrome", "code": "_if: num >= n and isPrime(num)"}, "38": {"lineno": 42, "parents": [37], "children": [2], "function": "primePalindrome", "code": "return num"}, "39": {"lineno": 43, "parents": [35, 4], "children": [33], "function": "primePalindrome", "code": "nLength += 1"}, "40": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 882, "task_title": "Reachable Nodes In Subdivided Graph", "difficulty": 3, "func_name": "reachableNodes", "description": "You are given an undirected graph (the \"original graph\") with `n` nodes\nlabeled from `0` to `n - 1`. You decide to subdivide each edge in the graph\ninto a chain of nodes, with the number of new nodes varying between each edge.\n\nThe graph is given as a 2D array of `edges` where `edges[i] = [ui, vi, cnti]`\nindicates that there is an edge between nodes `ui` and `vi` in the original\ngraph, and `cnti` is the total number of new nodes that you will subdivide the\nedge into. Note that `cnti == 0` means you will not subdivide the edge.\n\nTo subdivide the edge `[ui, vi]`, replace it with `(cnti + 1)` new edges and\n`cnti` new nodes. The new nodes are `x1`, `x2`, ..., `xcnti`, and the new\nedges are `[ui, x1]`, `[x1, x2]`, `[x2, x3]`, ..., `[xcnti-1, xcnti]`,\n`[xcnti, vi]`.\n\nIn this new graph, you want to know how many nodes are reachable from the node\n`0`, where a node is reachable if the distance is `maxMoves` or less.\n\nGiven the original graph and `maxMoves`, return the number of nodes that are\nreachable from node `0` in the new graph.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def reachableNodes(self, edges: List[List[int]], maxMoves: int, n: int) -> int:\n    graph = [[] for _ in range(n)]\n    dist = [maxMoves + 1] * n\n\n    for u, v, cnt in edges:\n      graph[u].append((v, cnt))\n      graph[v].append((u, cnt))\n\n    reachableNodes = self._dijkstra(graph, 0, maxMoves, dist)\n    reachableSubnodes = 0\n\n    for u, v, cnt in edges:\n      a = 0 if dist[u] > maxMoves else min(maxMoves - dist[u], cnt)\n      b = 0 if dist[v] > maxMoves else min(maxMoves - dist[v], cnt)\n      reachableSubnodes += min(a + b, cnt)\n\n    return reachableNodes + reachableSubnodes\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int, maxMoves: int, dist: List[int]) -> int:\n    dist[src] = 0\n    minHeap = [(dist[src], src)]\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      if dist[u] >= maxMoves:\n        break\n      if d > dist[u]:\n        continue\n      for v, w in graph[u]:\n        newDist = d + w + 1\n        if newDist < dist[v]:\n          dist[v] = newDist\n          heapq.heappush(minHeap, (newDist, v))\n\n    return sum(d <= maxMoves for d in dist)\n", "blocks": [{"type": "if", "start": 36, "end": 37}, {"type": "if", "start": 38, "end": 39}, {"type": "if", "start": 42, "end": 44}], "target_lines": [37, 39, 43, 44], "cfg": {"0": {"lineno": 0, "parents": [], "children": [37], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "reachableNodes", "code": "enter: reachableNodes(self, edges, maxMoves, n)"}, "2": {"lineno": 12, "parents": [18], "children": [], "function": "reachableNodes", "code": "exit: reachableNodes(self, edges, maxMoves, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "reachableNodes", "code": "graph = [[] for _ in range(n)]"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "reachableNodes", "code": "dist = [maxMoves + 1] * n"}, "5": {"lineno": 16, "parents": [4], "children": [6], "function": "reachableNodes", "code": "__iv = iter(edges)"}, "6": {"lineno": 16, "parents": [9, 5], "children": [10, 7], "function": "reachableNodes", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "reachableNodes", "code": "u, v, cnt = next(__iv)"}, "8": {"lineno": 17, "parents": [7], "children": [9], "calls": ["append"], "function": "reachableNodes", "code": "graph[u].append((v, cnt))"}, "9": {"lineno": 18, "parents": [8], "children": [6], "calls": ["append"], "function": "reachableNodes", "code": "graph[v].append((u, cnt))"}, "10": {"lineno": 20, "parents": [6], "children": [11], "calls": ["_dijkstra"], "function": "reachableNodes", "code": "reachableNodes = self._dijkstra(graph, 0, maxMoves, dist)"}, "11": {"lineno": 21, "parents": [10, 20], "children": [12], "function": "reachableNodes", "code": "reachableSubnodes = 0"}, "12": {"lineno": 23, "parents": [11], "children": [13], "function": "reachableNodes", "code": "__iv = iter(edges)"}, "13": {"lineno": 23, "parents": [17, 12], "children": [18, 14], "function": "reachableNodes", "code": "_for: __iv.__length__hint__() > 0"}, "14": {"lineno": 23, "parents": [13], "children": [15], "function": "reachableNodes", "code": "u, v, cnt = next(__iv)"}, "15": {"lineno": 24, "parents": [14], "children": [16], "function": "reachableNodes", "code": "a = 0 if dist[u] > maxMoves else min(maxMoves - dist[u], cnt)"}, "16": {"lineno": 25, "parents": [15], "children": [17], "function": "reachableNodes", "code": "b = 0 if dist[v] > maxMoves else min(maxMoves - dist[v], cnt)"}, "17": {"lineno": 26, "parents": [16], "children": [13], "calls": ["min"], "function": "reachableNodes", "code": "reachableSubnodes += min(a + b, cnt)"}, "18": {"lineno": 28, "parents": [13], "children": [2], "function": "reachableNodes", "code": "return reachableNodes + reachableSubnodes"}, "19": {"lineno": 30, "parents": [10], "children": [21], "function": "_dijkstra", "code": "enter: _dijkstra(self, graph, src, maxMoves, dist)"}, "20": {"lineno": 30, "parents": [36], "children": [], "function": "_dijkstra", "code": "exit: _dijkstra(self, graph, src, maxMoves, dist)"}, "21": {"lineno": 31, "parents": [19], "children": [22], "function": "_dijkstra", "code": "dist[src] = 0"}, "22": {"lineno": 32, "parents": [21], "children": [23], "function": "_dijkstra", "code": "minHeap = [(dist[src], src)]"}, "23": {"lineno": 34, "parents": [28, 22, 30], "children": [24, 36], "function": "_dijkstra", "code": "_while: minHeap"}, "24": {"lineno": 35, "parents": [23], "children": [25], "calls": ["heappop"], "function": "_dijkstra", "code": "d, u = heapq.heappop(minHeap)"}, "25": {"lineno": 36, "parents": [24], "children": [26, 27], "function": "_dijkstra", "code": "_if: dist[u] >= maxMoves"}, "26": {"lineno": 37, "parents": [25], "children": [36], "calls": ["sum"], "function": "_dijkstra", "code": "break"}, "27": {"lineno": 38, "parents": [25], "children": [28, 29], "function": "_dijkstra", "code": "_if: d > dist[u]"}, "28": {"lineno": 39, "parents": [27], "children": [23], "function": "_dijkstra", "code": "continue"}, "29": {"lineno": 40, "parents": [27], "children": [30], "function": "_dijkstra", "code": "__iv = iter(graph[u])"}, "30": {"lineno": 40, "parents": [33, 35, 29], "children": [23, 31], "function": "_dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "31": {"lineno": 40, "parents": [30], "children": [32], "function": "_dijkstra", "code": "v, w = next(__iv)"}, "32": {"lineno": 41, "parents": [31], "children": [33], "function": "_dijkstra", "code": "newDist = d + w + 1"}, "33": {"lineno": 42, "parents": [32], "children": [34, 30], "function": "_dijkstra", "code": "_if: newDist < dist[v]"}, "34": {"lineno": 43, "parents": [33], "children": [35], "function": "_dijkstra", "code": "dist[v] = newDist"}, "35": {"lineno": 44, "parents": [34], "children": [30], "calls": ["heappush"], "function": "_dijkstra", "code": "heapq.heappush(minHeap, (newDist, v))"}, "36": {"lineno": 46, "parents": [26, 23], "children": [20], "function": "_dijkstra", "code": "return sum((d <= maxMoves for d in dist))"}, "37": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 909, "task_title": "Snakes and Ladders", "difficulty": 2, "func_name": "snakesAndLadders", "description": "You are given an `n x n` integer matrix `board` where the cells are labeled\nfrom `1` to `n2` in a Boustrophedon style starting from the bottom left of the\nboard (i.e. `board[n - 1][0]`) and alternating direction each row.\n\nYou start on square `1` of the board. In each move, starting from square\n`curr`, do the following:\n\n* Choose a destination square `next` with a label in the range `[curr + 1, min(curr + 6, n2)]`. \n* This choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.\n* If `next` has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to `next`.\n* The game ends when you reach the square `n2`.\n\nA board square on row `r` and column `c` has a snake or ladder if `board[r][c]\n!= -1`. The destination of that snake or ladder is `board[r][c]`. Squares `1`\nand `n2` do not have a snake or ladder.\n\nNote that you only take a snake or ladder at most once per move. If the\ndestination to a snake or ladder is the start of another snake or ladder, you\ndo not follow the subsequent snake or ladder.\n\n* For example, suppose the board is `[[-1,4],[-1,3]]`, and on the first move, your destination square is `2`. You follow the ladder to square `3`, but do not follow the subsequent ladder to `4`.\n\nReturn the least number of moves required to reach the square `n2`. If it is\nnot possible to reach the square, return `-1`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def snakesAndLadders(self, board: List[List[int]]) -> int:\n    n = len(board)\n    ans = 0\n    q = collections.deque([1])\n    seen = set()\n    A = [0] * (1 + n * n)\n\n    for i in range(n):\n      for j in range(n):\n        if n - i & 1 :\n          A[(n - 1 - i) * n + (j + 1)] = board[i][j]\n        else:\n          A[(n - 1 - i) * n + (n - j)] = board[i][j]\n\n    while q:\n      ans += 1\n      for _ in range(len(q)):\n        curr = q.popleft()\n        for next in range(curr + 1, min(curr + 6, n * n) + 1):\n          dest = A[next] if A[next] > 0 else next\n          if dest == n * n:\n            return ans\n          if dest in seen:\n            continue\n          q.append(dest)\n          seen.add(dest)\n\n    return -1\n", "blocks": [{"type": "if", "start": 21, "end": 22}, {"type": "else", "start": 23, "end": 24}, {"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 34, "end": 35}], "target_lines": [22, 24, 33, 35], "cfg": {"0": {"lineno": 0, "parents": [], "children": [34], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "snakesAndLadders", "code": "enter: snakesAndLadders(self, board)"}, "2": {"lineno": 12, "parents": [33, 28], "children": [], "function": "snakesAndLadders", "code": "exit: snakesAndLadders(self, board)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "snakesAndLadders", "code": "n = len(board)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "snakesAndLadders", "code": "ans = 0"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["deque"], "function": "snakesAndLadders", "code": "q = collections.deque([1])"}, "6": {"lineno": 16, "parents": [5], "children": [7], "calls": ["set"], "function": "snakesAndLadders", "code": "seen = set()"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "snakesAndLadders", "code": "A = [0] * (1 + n * n)"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "snakesAndLadders", "code": "__iv = iter(range(n))"}, "9": {"lineno": 19, "parents": [8, 12], "children": [17, 10], "calls": ["range"], "function": "snakesAndLadders", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "snakesAndLadders", "code": "i = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "snakesAndLadders", "code": "__iv = iter(range(n))"}, "12": {"lineno": 20, "parents": [16, 11, 15], "children": [9, 13], "calls": ["range"], "function": "snakesAndLadders", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 20, "parents": [12], "children": [14], "function": "snakesAndLadders", "code": "j = next(__iv)"}, "14": {"lineno": 21, "parents": [13], "children": [16, 15], "function": "snakesAndLadders", "code": "_if: n - i & 1"}, "15": {"lineno": 22, "parents": [14], "children": [12], "function": "snakesAndLadders", "code": "A[(n - 1 - i) * n + (j + 1)] = board[i][j]"}, "16": {"lineno": 24, "parents": [14], "children": [12], "function": "snakesAndLadders", "code": "A[(n - 1 - i) * n + (n - j)] = board[i][j]"}, "17": {"lineno": 26, "parents": [9, 20], "children": [33, 18], "function": "snakesAndLadders", "code": "_while: q"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "snakesAndLadders", "code": "ans += 1"}, "19": {"lineno": 28, "parents": [18], "children": [20], "function": "snakesAndLadders", "code": "__iv = iter(range(len(q)))"}, "20": {"lineno": 28, "parents": [24, 19], "children": [17, 21], "calls": ["len", "range"], "function": "snakesAndLadders", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 28, "parents": [20], "children": [22], "function": "snakesAndLadders", "code": "_ = next(__iv)"}, "22": {"lineno": 29, "parents": [21], "children": [23], "calls": ["popleft"], "function": "snakesAndLadders", "code": "curr = q.popleft()"}, "23": {"lineno": 30, "parents": [22], "children": [24], "function": "snakesAndLadders", "code": "__iv = iter(range(curr + 1, min(curr + 6, n * n) + 1))"}, "24": {"lineno": 30, "parents": [32, 30, 23], "children": [25, 20], "calls": ["min", "range"], "function": "snakesAndLadders", "code": "_for: __iv.__length__hint__() > 0"}, "25": {"lineno": 30, "parents": [24], "children": [26], "function": "snakesAndLadders", "code": "next = next(__iv)"}, "26": {"lineno": 31, "parents": [25], "children": [27], "function": "snakesAndLadders", "code": "dest = A[next] if A[next] > 0 else next"}, "27": {"lineno": 32, "parents": [26], "children": [28, 29], "function": "snakesAndLadders", "code": "_if: dest == n * n"}, "28": {"lineno": 33, "parents": [27], "children": [2], "function": "snakesAndLadders", "code": "return ans"}, "29": {"lineno": 34, "parents": [27], "children": [30, 31], "function": "snakesAndLadders", "code": "_if: dest in seen"}, "30": {"lineno": 35, "parents": [29], "children": [24], "function": "snakesAndLadders", "code": "continue"}, "31": {"lineno": 36, "parents": [29], "children": [32], "calls": ["append"], "function": "snakesAndLadders", "code": "q.append(dest)"}, "32": {"lineno": 37, "parents": [31], "children": [24], "calls": ["add"], "function": "snakesAndLadders", "code": "seen.add(dest)"}, "33": {"lineno": 39, "parents": [17], "children": [2], "function": "snakesAndLadders", "code": "return -1"}, "34": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 913, "task_title": "Cat and Mouse", "difficulty": 3, "func_name": "catMouseGame", "description": "A game on an undirected graph is played by two players, Mouse and Cat, who\nalternate turns.\n\nThe graph is given as follows: `graph[a]` is a list of all nodes `b` such that\n`ab` is an edge of the graph.\n\nThe mouse starts at node `1` and goes first, the cat starts at node `2` and\ngoes second, and there is a hole at node `0`.\n\nDuring each player's turn, they must travel along one edge of the graph that\nmeets where they are. For example, if the Mouse is at node 1, it must travel\nto any node in `graph[1]`.\n\nAdditionally, it is not allowed for the Cat to travel to the Hole (node `0`).\n\nThen, the game can end in three ways:\n\n* If ever the Cat occupies the same node as the Mouse, the Cat wins.\n* If ever the Mouse reaches the Hole, the Mouse wins.\n* If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.\n\nGiven a `graph`, and assuming both players play optimally, return\n\n* `1` if the mouse wins the game,\n* `2` if the cat wins the game, or\n* `0` if the game is a draw.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nfrom enum import IntEnum\n\n\nclass State(IntEnum):\n  kDraw = 0\n  kMouseWin = 1\n  kCatWin = 2\n\n\nclass Solution:\n  def catMouseGame(self, graph: List[List[int]]) -> int:\n    n = len(graph)\n    states = [[[0] * 2 for i in range(n)] for j in range(n)]\n    outDegree = [[[0] * 2 for i in range(n)] for j in range(n)]\n    q = collections.deque()\n\n    for cat in range(n):\n      for mouse in range(n):\n        outDegree[cat][mouse][0] = len(graph[mouse])\n        outDegree[cat][mouse][1] = len(graph[cat]) - graph[cat].count(0)\n\n    for cat in range(1, n):\n      for move in range(2):\n        states[cat][0][move] = int(State.kMouseWin)\n        q.append((cat, 0, move, int(State.kMouseWin)))\n        states[cat][cat][move] = int(State.kCatWin)\n        q.append((cat, cat, move, int(State.kCatWin)))\n\n    while q:\n      cat, mouse, move, state = q.popleft()\n      if cat == 2 and mouse == 1 and move == 0:\n        return state\n      prevMove = move ^ 1\n      for prev in graph[cat if prevMove else mouse]:\n        prevCat = prev if prevMove else cat\n        if prevCat == 0:\n          continue\n        prevMouse = mouse if prevMove else prev\n        if states[prevCat][prevMouse][prevMove]:\n          continue\n        \n        if prevMove == 0 and state == int(State.kMouseWin) or prevMove == 1 and state == int(State.kCatWin):\n          states[prevCat][prevMouse][prevMove] = state\n          q.append((prevCat, prevMouse, prevMove, state))\n        else:\n          outDegree[prevCat][prevMouse][prevMove] -= 1\n          if outDegree[prevCat][prevMouse][prevMove] == 0:\n            states[prevCat][prevMouse][prevMove] = state\n            q.append((prevCat, prevMouse, prevMove, state))\n\n    return states[2][1][0]\n", "blocks": [{"type": "if", "start": 41, "end": 42}, {"type": "if", "start": 46, "end": 47}, {"type": "if", "start": 49, "end": 50}, {"type": "if", "start": 52, "end": 54}, {"type": "else", "start": 55, "end": 59}, {"type": "if", "start": 57, "end": 59}], "target_lines": [42, 47, 50, 53, 54, 56, 57, 58, 59], "cfg": {"0": {"lineno": 0, "parents": [], "children": [1], "function": "", "code": "start"}, "1": {"lineno": 15, "parents": [0], "children": [2], "function": "", "code": "kDraw = 0"}, "2": {"lineno": 16, "parents": [1], "children": [3], "function": "", "code": "kMouseWin = 1"}, "3": {"lineno": 17, "parents": [2], "children": [50], "function": "", "code": "kCatWin = 2"}, "4": {"lineno": 21, "parents": [], "children": [6], "function": "catMouseGame", "code": "enter: catMouseGame(self, graph)"}, "5": {"lineno": 21, "parents": [49, 31], "children": [], "function": "catMouseGame", "code": "exit: catMouseGame(self, graph)"}, "6": {"lineno": 22, "parents": [4], "children": [7], "calls": ["len"], "function": "catMouseGame", "code": "n = len(graph)"}, "7": {"lineno": 23, "parents": [6], "children": [8], "function": "catMouseGame", "code": "states = [[[0] * 2 for i in range(n)] for j in range(n)]"}, "8": {"lineno": 24, "parents": [7], "children": [9], "function": "catMouseGame", "code": "outDegree = [[[0] * 2 for i in range(n)] for j in range(n)]"}, "9": {"lineno": 25, "parents": [8], "children": [10], "calls": ["deque"], "function": "catMouseGame", "code": "q = collections.deque()"}, "10": {"lineno": 27, "parents": [9], "children": [11], "function": "catMouseGame", "code": "__iv = iter(range(n))"}, "11": {"lineno": 27, "parents": [10, 14], "children": [18, 12], "calls": ["range"], "function": "catMouseGame", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 27, "parents": [11], "children": [13], "function": "catMouseGame", "code": "cat = next(__iv)"}, "13": {"lineno": 28, "parents": [12], "children": [14], "function": "catMouseGame", "code": "__iv = iter(range(n))"}, "14": {"lineno": 28, "parents": [17, 13], "children": [11, 15], "calls": ["range"], "function": "catMouseGame", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 28, "parents": [14], "children": [16], "function": "catMouseGame", "code": "mouse = next(__iv)"}, "16": {"lineno": 29, "parents": [15], "children": [17], "calls": ["len"], "function": "catMouseGame", "code": "outDegree[cat][mouse][0] = len(graph[mouse])"}, "17": {"lineno": 30, "parents": [16], "children": [14], "calls": ["len", "count"], "function": "catMouseGame", "code": "outDegree[cat][mouse][1] = len(graph[cat]) - graph[cat].count(0)"}, "18": {"lineno": 32, "parents": [11], "children": [19], "function": "catMouseGame", "code": "__iv = iter(range(1, n))"}, "19": {"lineno": 32, "parents": [18, 22], "children": [20, 28], "calls": ["range"], "function": "catMouseGame", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 32, "parents": [19], "children": [21], "function": "catMouseGame", "code": "cat = next(__iv)"}, "21": {"lineno": 33, "parents": [20], "children": [22], "function": "catMouseGame", "code": "__iv = iter(range(2))"}, "22": {"lineno": 33, "parents": [27, 21], "children": [19, 23], "calls": ["range"], "function": "catMouseGame", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 33, "parents": [22], "children": [24], "function": "catMouseGame", "code": "move = next(__iv)"}, "24": {"lineno": 34, "parents": [23], "children": [25], "calls": ["int"], "function": "catMouseGame", "code": "states[cat][0][move] = int(State.kMouseWin)"}, "25": {"lineno": 35, "parents": [24], "children": [26], "calls": ["append"], "function": "catMouseGame", "code": "q.append((cat, 0, move, int(State.kMouseWin)))"}, "26": {"lineno": 36, "parents": [25], "children": [27], "calls": ["int"], "function": "catMouseGame", "code": "states[cat][cat][move] = int(State.kCatWin)"}, "27": {"lineno": 37, "parents": [26], "children": [22], "calls": ["append"], "function": "catMouseGame", "code": "q.append((cat, cat, move, int(State.kCatWin)))"}, "28": {"lineno": 39, "parents": [34, 19], "children": [49, 29], "function": "catMouseGame", "code": "_while: q"}, "29": {"lineno": 40, "parents": [28], "children": [30], "calls": ["popleft"], "function": "catMouseGame", "code": "cat, mouse, move, state = q.popleft()"}, "30": {"lineno": 41, "parents": [29], "children": [32, 31], "function": "catMouseGame", "code": "_if: cat == 2 and mouse == 1 and (move == 0)"}, "31": {"lineno": 42, "parents": [30], "children": [5], "function": "catMouseGame", "code": "return state"}, "32": {"lineno": 43, "parents": [30], "children": [33], "function": "catMouseGame", "code": "prevMove = move ^ 1"}, "33": {"lineno": 44, "parents": [32], "children": [34], "function": "catMouseGame", "code": "__iv = iter(graph[cat if prevMove else mouse])"}, "34": {"lineno": 44, "parents": [48, 33, 38, 41, 44, 46], "children": [35, 28], "function": "catMouseGame", "code": "_for: __iv.__length__hint__() > 0"}, "35": {"lineno": 44, "parents": [34], "children": [36], "function": "catMouseGame", "code": "prev = next(__iv)"}, "36": {"lineno": 45, "parents": [35], "children": [37], "function": "catMouseGame", "code": "prevCat = prev if prevMove else cat"}, "37": {"lineno": 46, "parents": [36], "children": [38, 39], "function": "catMouseGame", "code": "_if: prevCat == 0"}, "38": {"lineno": 47, "parents": [37], "children": [34], "function": "catMouseGame", "code": "continue"}, "39": {"lineno": 48, "parents": [37], "children": [40], "function": "catMouseGame", "code": "prevMouse = mouse if prevMove else prev"}, "40": {"lineno": 49, "parents": [39], "children": [41, 42], "function": "catMouseGame", "code": "_if: states[prevCat][prevMouse][prevMove]"}, "41": {"lineno": 50, "parents": [40], "children": [34], "function": "catMouseGame", "code": "continue"}, "42": {"lineno": 52, "parents": [40], "children": [43, 45], "function": "catMouseGame", "code": "_if: prevMove == 0 and state == int(State.kMouseWin) or (prevMove == 1 and state == int(State.kCatWin))"}, "43": {"lineno": 53, "parents": [42], "children": [44], "function": "catMouseGame", "code": "states[prevCat][prevMouse][prevMove] = state"}, "44": {"lineno": 54, "parents": [43], "children": [34], "calls": ["append"], "function": "catMouseGame", "code": "q.append((prevCat, prevMouse, prevMove, state))"}, "45": {"lineno": 56, "parents": [42], "children": [46], "function": "catMouseGame", "code": "outDegree[prevCat][prevMouse][prevMove] -= 1"}, "46": {"lineno": 57, "parents": [45], "children": [34, 47], "function": "catMouseGame", "code": "_if: outDegree[prevCat][prevMouse][prevMove] == 0"}, "47": {"lineno": 58, "parents": [46], "children": [48], "function": "catMouseGame", "code": "states[prevCat][prevMouse][prevMove] = state"}, "48": {"lineno": 59, "parents": [47], "children": [34], "calls": ["append"], "function": "catMouseGame", "code": "q.append((prevCat, prevMouse, prevMove, state))"}, "49": {"lineno": 61, "parents": [28], "children": [5], "function": "catMouseGame", "code": "return states[2][1][0]"}, "50": {"lineno": 0, "parents": [3], "children": [], "function": "", "code": "stop"}}}
{"task_num": 923, "task_title": "3Sum With Multiplicity", "difficulty": 2, "func_name": "threeSumMulti", "description": "Given an integer array `arr`, and an integer `target`, return the number of\ntuples `i, j, k` such that `i < j < k` and `arr[i] + arr[j] + arr[k] ==\ntarget`.\n\nAs the answer can be very large, return it modulo `109 + 7`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def threeSumMulti(self, arr: List[int], target: int) -> int:\n    kMod = 1_000_000_007\n    ans = 0\n    count = collections.Counter(arr)\n\n    for i, x in count.items():\n      for j, y in count.items():\n        k = target - i - j\n        if k not in count:\n          continue\n        if i == j and j == k:\n          ans = (ans + x * (x - 1) * (x - 2) // 6) % kMod\n        elif i == j and j != k:\n          ans = (ans + x * (x - 1) // 2 * count[k]) % kMod\n        elif i < j and j < k:\n          ans = (ans + x * y * count[k]) % kMod\n\n    return ans % kMod\n", "blocks": [{"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 24, "end": 25}, {"type": "if", "start": 26, "end": 27}], "target_lines": [21, 23, 25, 27], "cfg": {"0": {"lineno": 0, "parents": [], "children": [22], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "threeSumMulti", "code": "enter: threeSumMulti(self, arr, target)"}, "2": {"lineno": 12, "parents": [21], "children": [], "function": "threeSumMulti", "code": "exit: threeSumMulti(self, arr, target)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "threeSumMulti", "code": "kMod = 1000000007"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "threeSumMulti", "code": "ans = 0"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["Counter"], "function": "threeSumMulti", "code": "count = collections.Counter(arr)"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "threeSumMulti", "code": "__iv = iter(count.items())"}, "7": {"lineno": 17, "parents": [10, 6], "children": [8, 21], "calls": ["items"], "function": "threeSumMulti", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "threeSumMulti", "code": "i, x = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "threeSumMulti", "code": "__iv = iter(count.items())"}, "10": {"lineno": 18, "parents": [16, 18, 19, 20, 9, 14], "children": [11, 7], "calls": ["items"], "function": "threeSumMulti", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 18, "parents": [10], "children": [12], "function": "threeSumMulti", "code": "j, y = next(__iv)"}, "12": {"lineno": 19, "parents": [11], "children": [13], "function": "threeSumMulti", "code": "k = target - i - j"}, "13": {"lineno": 20, "parents": [12], "children": [14, 15], "function": "threeSumMulti", "code": "_if: k not in count"}, "14": {"lineno": 21, "parents": [13], "children": [10], "function": "threeSumMulti", "code": "continue"}, "15": {"lineno": 22, "parents": [13], "children": [16, 17], "function": "threeSumMulti", "code": "_if: i == j and j == k"}, "16": {"lineno": 23, "parents": [15], "children": [10], "function": "threeSumMulti", "code": "ans = (ans + x * (x - 1) * (x - 2) // 6) % kMod"}, "17": {"lineno": 24, "parents": [15], "children": [18, 19], "function": "threeSumMulti", "code": "_if: i == j and j != k"}, "18": {"lineno": 25, "parents": [17], "children": [10], "function": "threeSumMulti", "code": "ans = (ans + x * (x - 1) // 2 * count[k]) % kMod"}, "19": {"lineno": 26, "parents": [17], "children": [10, 20], "function": "threeSumMulti", "code": "_if: i < j and j < k"}, "20": {"lineno": 27, "parents": [19], "children": [10], "function": "threeSumMulti", "code": "ans = (ans + x * y * count[k]) % kMod"}, "21": {"lineno": 29, "parents": [7], "children": [2], "function": "threeSumMulti", "code": "return ans % kMod"}, "22": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 927, "task_title": "Three Equal Parts", "difficulty": 3, "func_name": "threeEqualParts", "description": "You are given an array `arr` which consists of only zeros and ones, divide the\narray into three non-empty parts such that all of these parts represent the\nsame binary value.\n\nIf it is possible, return any `[i, j]` with `i + 1 < j`, such that:\n\n* `arr[0], arr[1], ..., arr[i]` is the first part,\n* `arr[i + 1], arr[i + 2], ..., arr[j - 1]` is the second part, and\n* `arr[j], arr[j + 1], ..., arr[arr.length - 1]` is the third part.\n* All three parts have equal binary values.\n\nIf it is not possible, return `[-1, -1]`.\n\nNote that the entire part is used when considering what binary value it\nrepresents. For example, `[1,1,0]` represents `6` in decimal, not `3`. Also,\nleading zeros are allowed, so `[0,1,1]` and `[1,1]` represent the same value.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def threeEqualParts(self, arr: List[int]) -> List[int]:\n    ones = sum(a == 1 for a in arr)\n\n    if ones == 0:\n      return [0, len(arr) - 1]\n    if ones % 3 != 0:\n      return [-1, -1]\n\n    k = ones // 3\n    i = 0\n\n    for i in range(len(arr)):\n      if arr[i] == 1:\n        first = i\n        break\n\n    gapOnes = k\n\n    for j in range(i + 1, len(arr)):\n      if arr[j] == 1:\n        gapOnes -= 1\n        if gapOnes == 0:\n          second = j\n          break\n\n    gapOnes = k\n\n    for i in range(j + 1, len(arr)):\n      if arr[i] == 1:\n        gapOnes -= 1\n        if gapOnes == 0:\n          third = i\n          break\n\n    while third < len(arr) and arr[first] == arr[second] == arr[third]:\n      first += 1\n      second += 1\n      third += 1\n\n    if third == len(arr):\n      return [first - 1, second]\n    return [-1, -1]\n", "blocks": [{"type": "if", "start": 15, "end": 16}, {"type": "if", "start": 17, "end": 18}, {"type": "if", "start": 51, "end": 52}, {"type": "if", "start": 24, "end": 26}, {"type": "if", "start": 31, "end": 35}, {"type": "if", "start": 40, "end": 44}, {"type": "if", "start": 33, "end": 35}, {"type": "if", "start": 42, "end": 44}], "target_lines": [16, 18, 25, 26, 32, 33, 34, 35, 41, 42, 43, 44, 52], "cfg": {"0": {"lineno": 0, "parents": [], "children": [41], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "threeEqualParts", "code": "enter: threeEqualParts(self, arr)"}, "2": {"lineno": 12, "parents": [40, 39, 5, 7], "children": [], "function": "threeEqualParts", "code": "exit: threeEqualParts(self, arr)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["sum"], "function": "threeEqualParts", "code": "ones = sum((a == 1 for a in arr))"}, "4": {"lineno": 15, "parents": [3], "children": [5, 6], "function": "threeEqualParts", "code": "_if: ones == 0"}, "5": {"lineno": 16, "parents": [4], "children": [2], "function": "threeEqualParts", "code": "return [0, len(arr) - 1]"}, "6": {"lineno": 17, "parents": [4], "children": [8, 7], "function": "threeEqualParts", "code": "_if: ones % 3 != 0"}, "7": {"lineno": 18, "parents": [6], "children": [2], "function": "threeEqualParts", "code": "return [-1, -1]"}, "8": {"lineno": 20, "parents": [6], "children": [9], "function": "threeEqualParts", "code": "k = ones // 3"}, "9": {"lineno": 21, "parents": [8], "children": [10], "function": "threeEqualParts", "code": "i = 0"}, "10": {"lineno": 23, "parents": [9], "children": [11], "function": "threeEqualParts", "code": "__iv = iter(range(len(arr)))"}, "11": {"lineno": 23, "parents": [10, 13], "children": [16, 12], "calls": ["len", "range"], "function": "threeEqualParts", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 23, "parents": [11], "children": [13], "function": "threeEqualParts", "code": "i = next(__iv)"}, "13": {"lineno": 24, "parents": [12], "children": [11, 14], "function": "threeEqualParts", "code": "_if: arr[i] == 1"}, "14": {"lineno": 25, "parents": [13], "children": [15], "function": "threeEqualParts", "code": "first = i"}, "15": {"lineno": 26, "parents": [14], "children": [16], "function": "threeEqualParts", "code": "break"}, "16": {"lineno": 28, "parents": [11, 15], "children": [17], "function": "threeEqualParts", "code": "gapOnes = k"}, "17": {"lineno": 30, "parents": [16], "children": [18], "function": "threeEqualParts", "code": "__iv = iter(range(i + 1, len(arr)))"}, "18": {"lineno": 30, "parents": [17, 20, 22], "children": [25, 19], "calls": ["len", "range"], "function": "threeEqualParts", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 30, "parents": [18], "children": [20], "function": "threeEqualParts", "code": "j = next(__iv)"}, "20": {"lineno": 31, "parents": [19], "children": [18, 21], "function": "threeEqualParts", "code": "_if: arr[j] == 1"}, "21": {"lineno": 32, "parents": [20], "children": [22], "function": "threeEqualParts", "code": "gapOnes -= 1"}, "22": {"lineno": 33, "parents": [21], "children": [18, 23], "function": "threeEqualParts", "code": "_if: gapOnes == 0"}, "23": {"lineno": 34, "parents": [22], "children": [24], "function": "threeEqualParts", "code": "second = j"}, "24": {"lineno": 35, "parents": [23], "children": [25], "function": "threeEqualParts", "code": "break"}, "25": {"lineno": 37, "parents": [24, 18], "children": [26], "function": "threeEqualParts", "code": "gapOnes = k"}, "26": {"lineno": 39, "parents": [25], "children": [27], "function": "threeEqualParts", "code": "__iv = iter(range(j + 1, len(arr)))"}, "27": {"lineno": 39, "parents": [26, 29, 31], "children": [34, 28], "calls": ["len", "range"], "function": "threeEqualParts", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 39, "parents": [27], "children": [29], "function": "threeEqualParts", "code": "i = next(__iv)"}, "29": {"lineno": 40, "parents": [28], "children": [27, 30], "function": "threeEqualParts", "code": "_if: arr[i] == 1"}, "30": {"lineno": 41, "parents": [29], "children": [31], "function": "threeEqualParts", "code": "gapOnes -= 1"}, "31": {"lineno": 42, "parents": [30], "children": [32, 27], "function": "threeEqualParts", "code": "_if: gapOnes == 0"}, "32": {"lineno": 43, "parents": [31], "children": [33], "function": "threeEqualParts", "code": "third = i"}, "33": {"lineno": 44, "parents": [32], "children": [34], "function": "threeEqualParts", "code": "break"}, "34": {"lineno": 46, "parents": [33, 27, 37], "children": [35, 38], "function": "threeEqualParts", "code": "_while: third < len(arr) and arr[first] == arr[second] == arr[third]"}, "35": {"lineno": 47, "parents": [34], "children": [36], "function": "threeEqualParts", "code": "first += 1"}, "36": {"lineno": 48, "parents": [35], "children": [37], "function": "threeEqualParts", "code": "second += 1"}, "37": {"lineno": 49, "parents": [36], "children": [34], "function": "threeEqualParts", "code": "third += 1"}, "38": {"lineno": 51, "parents": [34], "children": [40, 39], "calls": ["len"], "function": "threeEqualParts", "code": "_if: third == len(arr)"}, "39": {"lineno": 52, "parents": [38], "children": [2], "function": "threeEqualParts", "code": "return [first - 1, second]"}, "40": {"lineno": 53, "parents": [38], "children": [2], "function": "threeEqualParts", "code": "return [-1, -1]"}, "41": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 935, "task_title": "Knight Dialer", "difficulty": 2, "func_name": "knightDialer", "description": "The chess knight has a unique movement, it may move two squares vertically and\none square horizontally, or two squares horizontally and one square vertically\n(with both forming the shape of an L). The possible movements of chess knight\nare shown in this diagram:\n\nA chess knight can move as indicated in the chess diagram below:\n\nWe have a chess knight and a phone pad as shown below, the knight can only\nstand on a numeric cell (i.e. blue cell).\n\nGiven an integer `n`, return how many distinct phone numbers of length `n` we\ncan dial.\n\nYou are allowed to place the knight on any numeric cell initially and then you\nshould perform `n - 1` jumps to dial a number of length `n`. All jumps should\nbe valid knight jumps.\n\nAs the answer may be very large, return the answer modulo `109 + 7`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def knightDialer(self, n: int) -> int:\n    dirs = ((1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1), (-2, 1), (-1, 2))\n    kMod = 1_000_000_007\n\n    dp = [[1] * 3 for _ in range(4)]\n    dp[3][0], dp[3][2] = 0, 0\n\n    for _ in range(n - 1):\n      newDp = [[0] * 3 for _ in range(4)]\n      for i in range(4):\n        for j in range(3):\n          if (i, j) in ((3, 0), (3, 2)):\n            continue\n          for dx, dy in dirs:\n            x = i + dx\n            y = j + dy\n            if x < 0 or x >= 4 or y < 0 or y >= 3:\n              continue\n            if (x, y) in ((3, 0), (3, 2)):\n              continue\n            newDp[x][y] = (newDp[x][y] + dp[i][j]) % kMod\n      dp = newDp\n\n    return sum(map(sum, dp)) % kMod\n", "blocks": [{"type": "if", "start": 23, "end": 24}, {"type": "if", "start": 28, "end": 29}, {"type": "if", "start": 30, "end": 31}], "target_lines": [24, 29, 31], "cfg": {"0": {"lineno": 0, "parents": [], "children": [31], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "knightDialer", "code": "enter: knightDialer(self, n)"}, "2": {"lineno": 12, "parents": [30], "children": [], "function": "knightDialer", "code": "exit: knightDialer(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "knightDialer", "code": "dirs = ((1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1), (-2, 1), (-1, 2))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "knightDialer", "code": "kMod = 1000000007"}, "5": {"lineno": 16, "parents": [4], "children": [6], "function": "knightDialer", "code": "dp = [[1] * 3 for _ in range(4)]"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "knightDialer", "code": "dp[3][0], dp[3][2] = (0, 0)"}, "7": {"lineno": 19, "parents": [6], "children": [8], "function": "knightDialer", "code": "__iv = iter(range(n - 1))"}, "8": {"lineno": 19, "parents": [29, 7], "children": [9, 30], "calls": ["range", "map", "sum"], "function": "knightDialer", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 19, "parents": [8], "children": [10], "function": "knightDialer", "code": "_ = next(__iv)"}, "10": {"lineno": 20, "parents": [9], "children": [11], "function": "knightDialer", "code": "newDp = [[0] * 3 for _ in range(4)]"}, "11": {"lineno": 21, "parents": [10], "children": [12], "function": "knightDialer", "code": "__iv = iter(range(4))"}, "12": {"lineno": 21, "parents": [11, 15], "children": [29, 13], "calls": ["range"], "function": "knightDialer", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 21, "parents": [12], "children": [14], "function": "knightDialer", "code": "i = next(__iv)"}, "14": {"lineno": 22, "parents": [13], "children": [15], "function": "knightDialer", "code": "__iv = iter(range(3))"}, "15": {"lineno": 22, "parents": [18, 20, 14], "children": [16, 12], "calls": ["range"], "function": "knightDialer", "code": "_for: __iv.__length__hint__() > 0"}, "16": {"lineno": 22, "parents": [15], "children": [17], "function": "knightDialer", "code": "j = next(__iv)"}, "17": {"lineno": 23, "parents": [16], "children": [18, 19], "function": "knightDialer", "code": "_if: (i, j) in ((3, 0), (3, 2))"}, "18": {"lineno": 24, "parents": [17], "children": [15], "function": "knightDialer", "code": "continue"}, "19": {"lineno": 25, "parents": [17], "children": [20], "function": "knightDialer", "code": "__iv = iter(dirs)"}, "20": {"lineno": 25, "parents": [27, 25, 19, 28], "children": [21, 15], "function": "knightDialer", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 25, "parents": [20], "children": [22], "function": "knightDialer", "code": "dx, dy = next(__iv)"}, "22": {"lineno": 26, "parents": [21], "children": [23], "function": "knightDialer", "code": "x = i + dx"}, "23": {"lineno": 27, "parents": [22], "children": [24], "function": "knightDialer", "code": "y = j + dy"}, "24": {"lineno": 28, "parents": [23], "children": [25, 26], "function": "knightDialer", "code": "_if: x < 0 or x >= 4 or y < 0 or (y >= 3)"}, "25": {"lineno": 29, "parents": [24], "children": [20], "function": "knightDialer", "code": "continue"}, "26": {"lineno": 30, "parents": [24], "children": [27, 28], "function": "knightDialer", "code": "_if: (x, y) in ((3, 0), (3, 2))"}, "27": {"lineno": 31, "parents": [26], "children": [20], "function": "knightDialer", "code": "continue"}, "28": {"lineno": 32, "parents": [26], "children": [20], "function": "knightDialer", "code": "newDp[x][y] = (newDp[x][y] + dp[i][j]) % kMod"}, "29": {"lineno": 33, "parents": [12], "children": [8], "function": "knightDialer", "code": "dp = newDp"}, "30": {"lineno": 35, "parents": [8], "children": [2], "function": "knightDialer", "code": "return sum(map(sum, dp)) % kMod"}, "31": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 939, "task_title": "Minimum Area Rectangle", "difficulty": 2, "func_name": "minAreaRect", "description": "You are given an array of points in the X-Y plane `points` where `points[i] =\n[xi, yi]`.\n\nReturn the minimum area of a rectangle formed from these points, with sides\nparallel to the X and Y axes. If there is not any such rectangle, return `0`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minAreaRect(self, points: List[List[int]]) -> int:\n    ans = math.inf\n    xToYs = collections.defaultdict(set)\n\n    for x, y in points:\n      xToYs[x].add(y)\n\n    for i in range(len(points)):\n      for j in range(i):\n        x1, y1 = points[i]\n        x2, y2 = points[j]\n        if x1 == x2 or y1 == y2:\n          continue\n        if y2 in xToYs[x1] and y1 in xToYs[x2]:\n          ans = min(ans, abs(x1 - x2) * abs(y1 - y2))\n\n    return ans if ans < math.inf else 0\n", "blocks": [{"type": "if", "start": 23, "end": 24}, {"type": "if", "start": 25, "end": 26}], "target_lines": [24, 26], "cfg": {"0": {"lineno": 0, "parents": [], "children": [22], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minAreaRect", "code": "enter: minAreaRect(self, points)"}, "2": {"lineno": 12, "parents": [21], "children": [], "function": "minAreaRect", "code": "exit: minAreaRect(self, points)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "minAreaRect", "code": "ans = math.inf"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["defaultdict"], "function": "minAreaRect", "code": "xToYs = collections.defaultdict(set)"}, "5": {"lineno": 16, "parents": [4], "children": [6], "function": "minAreaRect", "code": "__iv = iter(points)"}, "6": {"lineno": 16, "parents": [8, 5], "children": [9, 7], "function": "minAreaRect", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "minAreaRect", "code": "x, y = next(__iv)"}, "8": {"lineno": 17, "parents": [7], "children": [6], "calls": ["add"], "function": "minAreaRect", "code": "xToYs[x].add(y)"}, "9": {"lineno": 19, "parents": [6], "children": [10], "function": "minAreaRect", "code": "__iv = iter(range(len(points)))"}, "10": {"lineno": 19, "parents": [9, 13], "children": [11, 21], "calls": ["len", "range"], "function": "minAreaRect", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 19, "parents": [10], "children": [12], "function": "minAreaRect", "code": "i = next(__iv)"}, "12": {"lineno": 20, "parents": [11], "children": [13], "function": "minAreaRect", "code": "__iv = iter(range(i))"}, "13": {"lineno": 20, "parents": [18, 19, 12, 20], "children": [10, 14], "calls": ["range"], "function": "minAreaRect", "code": "_for: __iv.__length__hint__() > 0"}, "14": {"lineno": 20, "parents": [13], "children": [15], "function": "minAreaRect", "code": "j = next(__iv)"}, "15": {"lineno": 21, "parents": [14], "children": [16], "function": "minAreaRect", "code": "x1, y1 = points[i]"}, "16": {"lineno": 22, "parents": [15], "children": [17], "function": "minAreaRect", "code": "x2, y2 = points[j]"}, "17": {"lineno": 23, "parents": [16], "children": [18, 19], "function": "minAreaRect", "code": "_if: x1 == x2 or y1 == y2"}, "18": {"lineno": 24, "parents": [17], "children": [13], "function": "minAreaRect", "code": "continue"}, "19": {"lineno": 25, "parents": [17], "children": [20, 13], "function": "minAreaRect", "code": "_if: y2 in xToYs[x1] and y1 in xToYs[x2]"}, "20": {"lineno": 26, "parents": [19], "children": [13], "calls": ["abs", "abs", "min"], "function": "minAreaRect", "code": "ans = min(ans, abs(x1 - x2) * abs(y1 - y2))"}, "21": {"lineno": 28, "parents": [10], "children": [2], "function": "minAreaRect", "code": "return ans if ans < math.inf else 0"}, "22": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 952, "task_title": "Largest Component Size by Common Factor", "difficulty": 3, "func_name": "largestComponentSize", "description": "You are given an integer array of unique positive integers `nums`. Consider\nthe following graph:\n\n* There are `nums.length` nodes, labeled `nums[0]` to `nums[nums.length - 1]`,\n* There is an undirected edge between `nums[i]` and `nums[j]` if `nums[i]` and `nums[j]` share a common factor greater than `1`.\n\nReturn the size of the largest connected component in the graph.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def largestComponentSize(self, nums: List[int]) -> int:\n    ans = 0\n    uf = UnionFind(max(nums) + 1)\n    count = collections.Counter()\n\n    for num in nums:\n      for x in range(2, int(math.sqrt(num) + 1)):\n        if num % x == 0:\n          uf.unionByRank(num, x)\n          uf.unionByRank(num, num // x)\n\n    for num in nums:\n      numRoot = uf.find(num)\n      count[numRoot] += 1\n      ans = max(ans, count[numRoot])\n\n    return ans\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 23, "end": 24}, {"type": "else", "start": 25, "end": 27}, {"type": "if", "start": 43, "end": 45}], "target_lines": [20, 22, 24, 26, 27, 31, 44, 45], "cfg": {"0": {"lineno": 0, "parents": [], "children": [43], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.rank = [0] * n"}, "5": {"lineno": 16, "parents": [34, 35], "children": [7], "function": "unionByRank", "code": "enter: unionByRank(self, u, v)"}, "6": {"lineno": 16, "parents": [16, 10, 12, 14], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "calls": ["find"], "function": "unionByRank", "code": "i = self.find(u)"}, "8": {"lineno": 18, "parents": [18, 7], "children": [9], "calls": ["find"], "function": "unionByRank", "code": "j = self.find(v)"}, "9": {"lineno": 19, "parents": [8, 18], "children": [10, 11], "function": "unionByRank", "code": "_if: i == j"}, "10": {"lineno": 20, "parents": [9], "children": [6], "function": "unionByRank", "code": "return"}, "11": {"lineno": 21, "parents": [9], "children": [12, 13], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "12": {"lineno": 22, "parents": [11], "children": [6], "function": "unionByRank", "code": "self.id[i] = j"}, "13": {"lineno": 23, "parents": [11], "children": [14, 15], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "14": {"lineno": 24, "parents": [13], "children": [6], "function": "unionByRank", "code": "self.id[j] = i"}, "15": {"lineno": 26, "parents": [13], "children": [16], "function": "unionByRank", "code": "self.id[i] = j"}, "16": {"lineno": 27, "parents": [15], "children": [6], "function": "unionByRank", "code": "self.rank[j] += 1"}, "17": {"lineno": 29, "parents": [8, 20, 39, 7], "children": [19], "function": "find", "code": "enter: find(self, u)"}, "18": {"lineno": 29, "parents": [21], "children": [], "function": "find", "code": "exit: find(self, u)"}, "19": {"lineno": 30, "parents": [17], "children": [20, 21], "function": "find", "code": "_if: self.id[u] != u"}, "20": {"lineno": 31, "parents": [19], "children": [21], "calls": ["find"], "function": "find", "code": "self.id[u] = self.find(self.id[u])"}, "21": {"lineno": 32, "parents": [18, 19, 20], "children": [18], "function": "find", "code": "return self.id[u]"}, "22": {"lineno": 36, "parents": [], "children": [24], "function": "largestComponentSize", "code": "enter: largestComponentSize(self, nums)"}, "23": {"lineno": 36, "parents": [42], "children": [], "function": "largestComponentSize", "code": "exit: largestComponentSize(self, nums)"}, "24": {"lineno": 37, "parents": [22], "children": [25], "function": "largestComponentSize", "code": "ans = 0"}, "25": {"lineno": 38, "parents": [24], "children": [26], "calls": ["max", "UnionFind"], "function": "largestComponentSize", "code": "uf = UnionFind(max(nums) + 1)"}, "26": {"lineno": 39, "parents": [25], "children": [27], "calls": ["Counter"], "function": "largestComponentSize", "code": "count = collections.Counter()"}, "27": {"lineno": 41, "parents": [26], "children": [28], "function": "largestComponentSize", "code": "__iv = iter(nums)"}, "28": {"lineno": 41, "parents": [27, 31], "children": [36, 29], "function": "largestComponentSize", "code": "_for: __iv.__length__hint__() > 0"}, "29": {"lineno": 41, "parents": [28], "children": [30], "function": "largestComponentSize", "code": "num = next(__iv)"}, "30": {"lineno": 42, "parents": [29], "children": [31], "function": "largestComponentSize", "code": "__iv = iter(range(2, int(math.sqrt(num) + 1)))"}, "31": {"lineno": 42, "parents": [33, 35, 30, 6], "children": [32, 28], "calls": ["sqrt", "int", "range"], "function": "largestComponentSize", "code": "_for: __iv.__length__hint__() > 0"}, "32": {"lineno": 42, "parents": [31], "children": [33], "function": "largestComponentSize", "code": "x = next(__iv)"}, "33": {"lineno": 43, "parents": [32], "children": [34, 31], "function": "largestComponentSize", "code": "_if: num % x == 0"}, "34": {"lineno": 44, "parents": [33], "children": [35], "calls": ["unionByRank"], "function": "largestComponentSize", "code": "uf.unionByRank(num, x)"}, "35": {"lineno": 45, "parents": [34, 6], "children": [31], "calls": ["unionByRank"], "function": "largestComponentSize", "code": "uf.unionByRank(num, num // x)"}, "36": {"lineno": 47, "parents": [28], "children": [37], "function": "largestComponentSize", "code": "__iv = iter(nums)"}, "37": {"lineno": 47, "parents": [41, 36], "children": [42, 38], "function": "largestComponentSize", "code": "_for: __iv.__length__hint__() > 0"}, "38": {"lineno": 47, "parents": [37], "children": [39], "function": "largestComponentSize", "code": "num = next(__iv)"}, "39": {"lineno": 48, "parents": [38], "children": [40], "calls": ["find"], "function": "largestComponentSize", "code": "numRoot = uf.find(num)"}, "40": {"lineno": 49, "parents": [18, 39], "children": [41], "function": "largestComponentSize", "code": "count[numRoot] += 1"}, "41": {"lineno": 50, "parents": [40], "children": [37], "calls": ["max"], "function": "largestComponentSize", "code": "ans = max(ans, count[numRoot])"}, "42": {"lineno": 52, "parents": [37], "children": [23], "function": "largestComponentSize", "code": "return ans"}, "43": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 963, "task_title": "Minimum Area Rectangle II", "difficulty": 2, "func_name": "minAreaFreeRect", "description": "You are given an array of points in the X-Y plane `points` where `points[i] =\n[xi, yi]`.\n\nReturn the minimum area of any rectangle formed from these points, with sides\nnot necessarily parallel to the X and Y axes. If there is not any such\nrectangle, return `0`.\n\nAnswers within `10-5` of the actual answer will be accepted.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\nfrom math import sqrt\n\nclass Solution:\n  def minAreaFreeRect(self, points: List[List[int]]) -> float:\n    ans = math.inf\n    centerToPoints = collections.defaultdict(list)\n\n    for ax, ay in points:\n      for bx, by in points:\n        center = ((ax + bx) / 2, (ay + by) / 2)\n        centerToPoints[center].append((ax, ay, bx, by))\n\n    def dist(px: int, py: int, qx: int, qy: int) -> float:\n      return (px - qx)**2 + (py - qy)**2\n\n    for points in centerToPoints.values():\n      for ax, ay, _, _ in points:\n        for cx, cy, dx, dy in points:\n          if (cx - ax) * (dx - ax) + (cy - ay) * (dy - ay) == 0:\n            squaredArea = dist(ax, ay, cx, cy) * dist(ax, ay, dx, dy)\n            if squaredArea > 0:\n              ans = min(ans, squaredArea)\n\n    return 0 if ans == math.inf else sqrt(ans)\n", "blocks": [{"type": "if", "start": 28, "end": 31}, {"type": "if", "start": 30, "end": 31}], "target_lines": [29, 30, 31], "cfg": {"0": {"lineno": 0, "parents": [], "children": [30], "function": "", "code": "start"}, "1": {"lineno": 13, "parents": [], "children": [3], "function": "minAreaFreeRect", "code": "enter: minAreaFreeRect(self, points)"}, "2": {"lineno": 13, "parents": [29], "children": [], "function": "minAreaFreeRect", "code": "exit: minAreaFreeRect(self, points)"}, "3": {"lineno": 14, "parents": [1], "children": [4], "function": "minAreaFreeRect", "code": "ans = math.inf"}, "4": {"lineno": 15, "parents": [3], "children": [5], "calls": ["defaultdict"], "function": "minAreaFreeRect", "code": "centerToPoints = collections.defaultdict(list)"}, "5": {"lineno": 17, "parents": [4], "children": [6], "function": "minAreaFreeRect", "code": "__iv = iter(points)"}, "6": {"lineno": 17, "parents": [9, 5], "children": [16, 7], "function": "minAreaFreeRect", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "minAreaFreeRect", "code": "ax, ay = next(__iv)"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "minAreaFreeRect", "code": "__iv = iter(points)"}, "9": {"lineno": 18, "parents": [8, 12], "children": [10, 6], "function": "minAreaFreeRect", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 18, "parents": [9], "children": [11], "function": "minAreaFreeRect", "code": "bx, by = next(__iv)"}, "11": {"lineno": 19, "parents": [10], "children": [12], "function": "minAreaFreeRect", "code": "center = ((ax + bx) / 2, (ay + by) / 2)"}, "12": {"lineno": 20, "parents": [11], "children": [9], "calls": ["append"], "function": "minAreaFreeRect", "code": "centerToPoints[center].append((ax, ay, bx, by))"}, "13": {"lineno": 22, "parents": [26], "children": [15], "function": "dist", "code": "enter: dist(px, py, qx, qy)"}, "14": {"lineno": 22, "parents": [15], "children": [], "function": "dist", "code": "exit: dist(px, py, qx, qy)"}, "15": {"lineno": 23, "parents": [13], "children": [14], "function": "dist", "code": "return (px - qx) ** 2 + (py - qy) ** 2"}, "16": {"lineno": 25, "parents": [6], "children": [17], "function": "minAreaFreeRect", "code": "__iv = iter(centerToPoints.values())"}, "17": {"lineno": 25, "parents": [16, 20], "children": [18, 29], "calls": ["values"], "function": "minAreaFreeRect", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 25, "parents": [17], "children": [19], "function": "minAreaFreeRect", "code": "points = next(__iv)"}, "19": {"lineno": 26, "parents": [18], "children": [20], "function": "minAreaFreeRect", "code": "__iv = iter(points)"}, "20": {"lineno": 26, "parents": [19, 23], "children": [17, 21], "function": "minAreaFreeRect", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 26, "parents": [20], "children": [22], "function": "minAreaFreeRect", "code": "ax, ay, _, _ = next(__iv)"}, "22": {"lineno": 27, "parents": [21], "children": [23], "function": "minAreaFreeRect", "code": "__iv = iter(points)"}, "23": {"lineno": 27, "parents": [25, 27, 28, 22], "children": [24, 20], "function": "minAreaFreeRect", "code": "_for: __iv.__length__hint__() > 0"}, "24": {"lineno": 27, "parents": [23], "children": [25], "function": "minAreaFreeRect", "code": "cx, cy, dx, dy = next(__iv)"}, "25": {"lineno": 28, "parents": [24], "children": [26, 23], "function": "minAreaFreeRect", "code": "_if: (cx - ax) * (dx - ax) + (cy - ay) * (dy - ay) == 0"}, "26": {"lineno": 29, "parents": [25], "children": [27], "calls": ["dist", "dist"], "function": "minAreaFreeRect", "code": "squaredArea = dist(ax, ay, cx, cy) * dist(ax, ay, dx, dy)"}, "27": {"lineno": 30, "parents": [26, 14], "children": [28, 23], "function": "minAreaFreeRect", "code": "_if: squaredArea > 0"}, "28": {"lineno": 31, "parents": [27], "children": [23], "calls": ["min"], "function": "minAreaFreeRect", "code": "ans = min(ans, squaredArea)"}, "29": {"lineno": 33, "parents": [17], "children": [2], "function": "minAreaFreeRect", "code": "return 0 if ans == math.inf else sqrt(ans)"}, "30": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 990, "task_title": "Satisfiability of Equality Equations", "difficulty": 2, "func_name": "equationsPossible", "description": "You are given an array of strings `equations` that represent relationships\nbetween variables where each string `equations[i]` is of length `4` and takes\none of two different forms: `\"xi==yi\"` or `\"xi!=yi\"`.Here, `xi` and `yi` are\nlowercase letters (not necessarily different) that represent one-letter\nvariable names.\n\nReturn `true` if it is possible to assign integers to variable names so as to\nsatisfy all the given equations, or `false` otherwise.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n\n  def union(self, u: int, v: int) -> None:\n    self.id[self.find(u)] = self.find(v)\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def equationsPossible(self, equations: List[str]) -> bool:\n    uf = UnionFind(26)\n\n    for x, op, _, y in equations:\n      if op == '=':\n        uf.union(ord(x) - ord('a'), ord(y) - ord('a'))\n\n    for x, op, _, y in equations:\n      if op == '!':\n        if uf.find(ord(x) - ord('a')) == uf.find(ord(y) - ord('a')):\n          return False\n    return True\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 33, "end": 35}, {"type": "if", "start": 34, "end": 35}], "target_lines": [20, 30, 34, 35], "cfg": {"0": {"lineno": 0, "parents": [], "children": [27], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [3], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [2], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 15, "parents": [19], "children": [6], "function": "union", "code": "enter: union(self, u, v)"}, "5": {"lineno": 15, "parents": [8, 6], "children": [], "function": "union", "code": "exit: union(self, u, v)"}, "6": {"lineno": 16, "parents": [4], "children": [5], "calls": ["find"], "function": "union", "code": "self.id[self.find(u)] = self.find(v)"}, "7": {"lineno": 18, "parents": [24, 10, 6], "children": [9], "function": "find", "code": "enter: find(self, u)"}, "8": {"lineno": 18, "parents": [11], "children": [], "function": "find", "code": "exit: find(self, u)"}, "9": {"lineno": 19, "parents": [7], "children": [10, 11], "function": "find", "code": "_if: self.id[u] != u"}, "10": {"lineno": 20, "parents": [9], "children": [11], "calls": ["find"], "function": "find", "code": "self.id[u] = self.find(self.id[u])"}, "11": {"lineno": 21, "parents": [8, 9, 10], "children": [8], "function": "find", "code": "return self.id[u]"}, "12": {"lineno": 25, "parents": [], "children": [14], "function": "equationsPossible", "code": "enter: equationsPossible(self, equations)"}, "13": {"lineno": 25, "parents": [25, 26], "children": [], "function": "equationsPossible", "code": "exit: equationsPossible(self, equations)"}, "14": {"lineno": 26, "parents": [12], "children": [15], "calls": ["UnionFind"], "function": "equationsPossible", "code": "uf = UnionFind(26)"}, "15": {"lineno": 28, "parents": [14], "children": [16], "function": "equationsPossible", "code": "__iv = iter(equations)"}, "16": {"lineno": 28, "parents": [18, 19, 5, 15], "children": [17, 20], "function": "equationsPossible", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 28, "parents": [16], "children": [18], "function": "equationsPossible", "code": "x, op, _, y = next(__iv)"}, "18": {"lineno": 29, "parents": [17], "children": [16, 19], "function": "equationsPossible", "code": "_if: op == '='"}, "19": {"lineno": 30, "parents": [18], "children": [16], "calls": ["ord", "ord", "ord", "ord", "union"], "function": "equationsPossible", "code": "uf.union(ord(x) - ord('a'), ord(y) - ord('a'))"}, "20": {"lineno": 32, "parents": [16], "children": [21], "function": "equationsPossible", "code": "__iv = iter(equations)"}, "21": {"lineno": 32, "parents": [24, 8, 20, 23], "children": [26, 22], "function": "equationsPossible", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 32, "parents": [21], "children": [23], "function": "equationsPossible", "code": "x, op, _, y = next(__iv)"}, "23": {"lineno": 33, "parents": [22], "children": [24, 21], "function": "equationsPossible", "code": "_if: op == '!'"}, "24": {"lineno": 34, "parents": [23], "children": [25, 21], "calls": ["ord", "ord", "find", "ord", "ord", "find"], "function": "equationsPossible", "code": "_if: uf.find(ord(x) - ord('a')) == uf.find(ord(y) - ord('a'))"}, "25": {"lineno": 35, "parents": [24, 8], "children": [13], "function": "equationsPossible", "code": "return False"}, "26": {"lineno": 36, "parents": [21], "children": [13], "function": "equationsPossible", "code": "return True"}, "27": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 999, "task_title": "Available Captures for Rook", "difficulty": 1, "func_name": "numRookCaptures", "description": "On an `8 x 8` chessboard, there is exactly one white rook `'R'` and some\nnumber of white bishops `'B'`, black pawns `'p'`, and empty squares `'.'`.\n\nWhen the rook moves, it chooses one of four cardinal directions (north, east,\nsouth, or west), then moves in that direction until it chooses to stop,\nreaches the edge of the board, captures a black pawn, or is blocked by a white\nbishop. A rook is considered attacking a pawn if the rook can capture the pawn\non the rook's turn. The number of available captures for the white rook is the\nnumber of pawns that the rook is attacking.\n\nReturn the number of available captures for the white rook.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def numRookCaptures(self, board: List[List[str]]) -> int:\n    ans = 0\n\n    for i in range(8):\n      for j in range(8):\n        if board[i][j] == 'R':\n          i0 = i\n          j0 = j\n\n    for d in [[1, 0], [0, 1], [-1, 0], [0, -1]]:\n      i = i0 + d[0]\n      j = j0 + d[1]\n      while 0 <= i < 8 and 0 <= j < 8:\n        if board[i][j] == 'p':\n          ans += 1\n        if board[i][j] != '.':\n          break\n        i += d[0]\n        j += d[1]\n\n    return ans\n", "blocks": [{"type": "if", "start": 17, "end": 19}, {"type": "if", "start": 25, "end": 26}, {"type": "if", "start": 27, "end": 28}], "target_lines": [18, 19, 26, 28], "cfg": {"0": {"lineno": 0, "parents": [], "children": [26], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "numRookCaptures", "code": "enter: numRookCaptures(self, board)"}, "2": {"lineno": 12, "parents": [25], "children": [], "function": "numRookCaptures", "code": "exit: numRookCaptures(self, board)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "numRookCaptures", "code": "ans = 0"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "numRookCaptures", "code": "__iv = iter(range(8))"}, "5": {"lineno": 15, "parents": [8, 4], "children": [13, 6], "calls": ["range"], "function": "numRookCaptures", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "numRookCaptures", "code": "i = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "numRookCaptures", "code": "__iv = iter(range(8))"}, "8": {"lineno": 16, "parents": [10, 12, 7], "children": [9, 5], "calls": ["range"], "function": "numRookCaptures", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 16, "parents": [8], "children": [10], "function": "numRookCaptures", "code": "j = next(__iv)"}, "10": {"lineno": 17, "parents": [9], "children": [8, 11], "function": "numRookCaptures", "code": "_if: board[i][j] == 'R'"}, "11": {"lineno": 18, "parents": [10], "children": [12], "function": "numRookCaptures", "code": "i0 = i"}, "12": {"lineno": 19, "parents": [11], "children": [8], "function": "numRookCaptures", "code": "j0 = j"}, "13": {"lineno": 21, "parents": [5], "children": [14], "function": "numRookCaptures", "code": "__iv = iter([[1, 0], [0, 1], [-1, 0], [0, -1]])"}, "14": {"lineno": 21, "parents": [18, 13, 22], "children": [25, 15], "function": "numRookCaptures", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 21, "parents": [14], "children": [16], "function": "numRookCaptures", "code": "d = next(__iv)"}, "16": {"lineno": 22, "parents": [15], "children": [17], "function": "numRookCaptures", "code": "i = i0 + d[0]"}, "17": {"lineno": 23, "parents": [16], "children": [18], "function": "numRookCaptures", "code": "j = j0 + d[1]"}, "18": {"lineno": 24, "parents": [24, 17], "children": [19, 14], "function": "numRookCaptures", "code": "_while: 0 <= i < 8 and 0 <= j < 8"}, "19": {"lineno": 25, "parents": [18], "children": [20, 21], "function": "numRookCaptures", "code": "_if: board[i][j] == 'p'"}, "20": {"lineno": 26, "parents": [19], "children": [21], "function": "numRookCaptures", "code": "ans += 1"}, "21": {"lineno": 27, "parents": [19, 20], "children": [22, 23], "function": "numRookCaptures", "code": "_if: board[i][j] != '.'"}, "22": {"lineno": 28, "parents": [21], "children": [14], "function": "numRookCaptures", "code": "break"}, "23": {"lineno": 29, "parents": [21], "children": [24], "function": "numRookCaptures", "code": "i += d[0]"}, "24": {"lineno": 30, "parents": [23], "children": [18], "function": "numRookCaptures", "code": "j += d[1]"}, "25": {"lineno": 32, "parents": [14], "children": [2], "function": "numRookCaptures", "code": "return ans"}, "26": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1001, "task_title": "Grid Illumination", "difficulty": 3, "func_name": "gridIllumination", "description": "There is a 2D `grid` of size `n x n` where each cell of this grid has a lamp\nthat is initially turned off.\n\nYou are given a 2D array of lamp positions `lamps`, where `lamps[i] = [rowi,\ncoli]` indicates that the lamp at `grid[rowi][coli]` is turned on. Even if the\nsame lamp is listed more than once, it is turned on.\n\nWhen a lamp is turned on, it illuminates its cell and all other cells in the\nsame row, column, or diagonal.\n\nYou are also given another 2D array `queries`, where `queries[j] = [rowj,\ncolj]`. For the `jth` query, determine whether `grid[rowj][colj]` is\nilluminated or not. After answering the `jth` query, turn off the lamp at\n`grid[rowj][colj]` and its 8 adjacent lamps if they exist. A lamp is adjacent\nif its cell shares either a side or corner with `grid[rowj][colj]`.\n\nReturn an array of integers `ans`, where `ans[j]` should be `1` if the cell in\nthe `jth` query was illuminated, or `0` if the lamp was not.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def gridIllumination(self, n: int, lamps: List[List[int]], queries: List[List[int]]) -> List[int]:\n    ans = []\n    rows = collections.Counter()\n    cols = collections.Counter()\n    diag1 = collections.Counter()\n    diag2 = collections.Counter()\n    lampsSet = set()\n\n    for i, j in lamps:\n      if (i, j) not in lampsSet:\n        lampsSet.add((i, j))\n        rows[i] += 1\n        cols[j] += 1\n        diag1[i + j] += 1\n        diag2[i - j] += 1\n\n    for i, j in queries:\n      if rows[i] or cols[j] or diag1[i + j] or diag2[i - j]:\n        ans.append(1)\n        for y in range(max(0, i - 1), min(n, i + 2)):\n          for x in range(max(0, j - 1), min(n, j + 2)):\n            if (y, x) in lampsSet:\n              lampsSet.remove((y, x))\n              rows[y] -= 1\n              cols[x] -= 1\n              diag1[y + x] -= 1\n              diag2[y - x] -= 1\n      else:\n        ans.append(0)\n\n    return ans\n", "blocks": [{"type": "if", "start": 21, "end": 26}, {"type": "if", "start": 29, "end": 38}, {"type": "else", "start": 39, "end": 40}, {"type": "if", "start": 33, "end": 38}], "target_lines": [22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40], "cfg": {"0": {"lineno": 0, "parents": [], "children": [37], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "gridIllumination", "code": "enter: gridIllumination(self, n, lamps, queries)"}, "2": {"lineno": 12, "parents": [36], "children": [], "function": "gridIllumination", "code": "exit: gridIllumination(self, n, lamps, queries)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "gridIllumination", "code": "ans = []"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["Counter"], "function": "gridIllumination", "code": "rows = collections.Counter()"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["Counter"], "function": "gridIllumination", "code": "cols = collections.Counter()"}, "6": {"lineno": 16, "parents": [5], "children": [7], "calls": ["Counter"], "function": "gridIllumination", "code": "diag1 = collections.Counter()"}, "7": {"lineno": 17, "parents": [6], "children": [8], "calls": ["Counter"], "function": "gridIllumination", "code": "diag2 = collections.Counter()"}, "8": {"lineno": 18, "parents": [7], "children": [9], "calls": ["set"], "function": "gridIllumination", "code": "lampsSet = set()"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "gridIllumination", "code": "__iv = iter(lamps)"}, "10": {"lineno": 20, "parents": [9, 12, 17], "children": [18, 11], "function": "gridIllumination", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "gridIllumination", "code": "i, j = next(__iv)"}, "12": {"lineno": 21, "parents": [11], "children": [10, 13], "function": "gridIllumination", "code": "_if: (i, j) not in lampsSet"}, "13": {"lineno": 22, "parents": [12], "children": [14], "calls": ["add"], "function": "gridIllumination", "code": "lampsSet.add((i, j))"}, "14": {"lineno": 23, "parents": [13], "children": [15], "function": "gridIllumination", "code": "rows[i] += 1"}, "15": {"lineno": 24, "parents": [14], "children": [16], "function": "gridIllumination", "code": "cols[j] += 1"}, "16": {"lineno": 25, "parents": [15], "children": [17], "function": "gridIllumination", "code": "diag1[i + j] += 1"}, "17": {"lineno": 26, "parents": [16], "children": [10], "function": "gridIllumination", "code": "diag2[i - j] += 1"}, "18": {"lineno": 28, "parents": [10], "children": [19], "function": "gridIllumination", "code": "__iv = iter(queries)"}, "19": {"lineno": 28, "parents": [24, 18, 35], "children": [20, 36], "function": "gridIllumination", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 28, "parents": [19], "children": [21], "function": "gridIllumination", "code": "i, j = next(__iv)"}, "21": {"lineno": 29, "parents": [20], "children": [35, 22], "function": "gridIllumination", "code": "_if: rows[i] or cols[j] or diag1[i + j] or diag2[i - j]"}, "22": {"lineno": 30, "parents": [21], "children": [23], "calls": ["append"], "function": "gridIllumination", "code": "ans.append(1)"}, "23": {"lineno": 31, "parents": [22], "children": [24], "function": "gridIllumination", "code": "__iv = iter(range(max(0, i - 1), min(n, i + 2)))"}, "24": {"lineno": 31, "parents": [27, 23], "children": [25, 19], "calls": ["max", "min", "range"], "function": "gridIllumination", "code": "_for: __iv.__length__hint__() > 0"}, "25": {"lineno": 31, "parents": [24], "children": [26], "function": "gridIllumination", "code": "y = next(__iv)"}, "26": {"lineno": 32, "parents": [25], "children": [27], "function": "gridIllumination", "code": "__iv = iter(range(max(0, j - 1), min(n, j + 2)))"}, "27": {"lineno": 32, "parents": [26, 34, 29], "children": [24, 28], "calls": ["max", "min", "range"], "function": "gridIllumination", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 32, "parents": [27], "children": [29], "function": "gridIllumination", "code": "x = next(__iv)"}, "29": {"lineno": 33, "parents": [28], "children": [27, 30], "function": "gridIllumination", "code": "_if: (y, x) in lampsSet"}, "30": {"lineno": 34, "parents": [29], "children": [31], "calls": ["remove"], "function": "gridIllumination", "code": "lampsSet.remove((y, x))"}, "31": {"lineno": 35, "parents": [30], "children": [32], "function": "gridIllumination", "code": "rows[y] -= 1"}, "32": {"lineno": 36, "parents": [31], "children": [33], "function": "gridIllumination", "code": "cols[x] -= 1"}, "33": {"lineno": 37, "parents": [32], "children": [34], "function": "gridIllumination", "code": "diag1[y + x] -= 1"}, "34": {"lineno": 38, "parents": [33], "children": [27], "function": "gridIllumination", "code": "diag2[y - x] -= 1"}, "35": {"lineno": 40, "parents": [21], "children": [19], "calls": ["append"], "function": "gridIllumination", "code": "ans.append(0)"}, "36": {"lineno": 42, "parents": [19], "children": [2], "function": "gridIllumination", "code": "return ans"}, "37": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1093, "task_title": "Statistics from a Large Sample", "difficulty": 2, "func_name": "sampleStats", "description": "You are given a large sample of integers in the range `[0, 255]`. Since the\nsample is so large, it is represented by an array `count` where `count[k]` is\nthe number of times that `k` appears in the sample.\n\nCalculate the following statistics:\n\n* `minimum`: The minimum element in the sample.\n* `maximum`: The maximum element in the sample.\n* `mean`: The average of the sample, calculated as the total sum of all elements divided by the total number of elements.\n* `median`: \n* If the sample has an odd number of elements, then the `median` is the middle element once the sample is sorted.\n* If the sample has an even number of elements, then the `median` is the average of the two middle elements once the sample is sorted.\n* `mode`: The number that appears the most in the sample. It is guaranteed to be unique.\n\nReturn the statistics of the sample as an array of floating-point numbers\n`[minimum, maximum, mean, median, mode]`. Answers within `10-5` of the actual\nanswer will be accepted.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def sampleStats(self, count: List[int]) -> List[float]:\n    minimum = next((i for i, num in enumerate(count) if num), None)\n    maximum = next((i for i, num in reversed(list(enumerate(count))) if num), None)\n    n = sum(count)\n    mean = sum(i * c / n for i, c in enumerate(count))\n    mode = count.index(max(count))\n\n    numCount = 0\n    leftMedian = 0\n    for i, c in enumerate(count):\n      numCount += c\n      if numCount >= n / 2:\n        leftMedian = i\n        break\n\n    numCount = 0\n    rightMedian = 0\n    for i, c in reversed(list(enumerate(count))):\n      numCount += c\n      if numCount >= n / 2:\n        rightMedian = i\n        break\n\n    return [minimum, maximum, mean, (leftMedian + rightMedian) / 2, mode]\n", "blocks": [{"type": "if", "start": 23, "end": 25}, {"type": "if", "start": 31, "end": 33}], "target_lines": [24, 25, 32, 33], "cfg": {"0": {"lineno": 0, "parents": [], "children": [27], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "sampleStats", "code": "enter: sampleStats(self, count)"}, "2": {"lineno": 12, "parents": [26], "children": [], "function": "sampleStats", "code": "exit: sampleStats(self, count)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["next"], "function": "sampleStats", "code": "minimum = next((i for i, num in enumerate(count) if num), None)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["next"], "function": "sampleStats", "code": "maximum = next((i for i, num in reversed(list(enumerate(count))) if num), None)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["sum"], "function": "sampleStats", "code": "n = sum(count)"}, "6": {"lineno": 16, "parents": [5], "children": [7], "calls": ["sum"], "function": "sampleStats", "code": "mean = sum((i * c / n for i, c in enumerate(count)))"}, "7": {"lineno": 17, "parents": [6], "children": [8], "calls": ["max", "index"], "function": "sampleStats", "code": "mode = count.index(max(count))"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "sampleStats", "code": "numCount = 0"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "sampleStats", "code": "leftMedian = 0"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "sampleStats", "code": "__iv = iter(enumerate(count))"}, "11": {"lineno": 21, "parents": [10, 14], "children": [17, 12], "calls": ["enumerate"], "function": "sampleStats", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "sampleStats", "code": "i, c = next(__iv)"}, "13": {"lineno": 22, "parents": [12], "children": [14], "function": "sampleStats", "code": "numCount += c"}, "14": {"lineno": 23, "parents": [13], "children": [11, 15], "function": "sampleStats", "code": "_if: numCount >= n / 2"}, "15": {"lineno": 24, "parents": [14], "children": [16], "function": "sampleStats", "code": "leftMedian = i"}, "16": {"lineno": 25, "parents": [15], "children": [17], "function": "sampleStats", "code": "break"}, "17": {"lineno": 27, "parents": [16, 11], "children": [18], "function": "sampleStats", "code": "numCount = 0"}, "18": {"lineno": 28, "parents": [17], "children": [19], "function": "sampleStats", "code": "rightMedian = 0"}, "19": {"lineno": 29, "parents": [18], "children": [20], "function": "sampleStats", "code": "__iv = iter(reversed(list(enumerate(count))))"}, "20": {"lineno": 29, "parents": [19, 23], "children": [26, 21], "calls": ["enumerate", "list", "reversed"], "function": "sampleStats", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 29, "parents": [20], "children": [22], "function": "sampleStats", "code": "i, c = next(__iv)"}, "22": {"lineno": 30, "parents": [21], "children": [23], "function": "sampleStats", "code": "numCount += c"}, "23": {"lineno": 31, "parents": [22], "children": [24, 20], "function": "sampleStats", "code": "_if: numCount >= n / 2"}, "24": {"lineno": 32, "parents": [23], "children": [25], "function": "sampleStats", "code": "rightMedian = i"}, "25": {"lineno": 33, "parents": [24], "children": [26], "function": "sampleStats", "code": "break"}, "26": {"lineno": 35, "parents": [25, 20], "children": [2], "function": "sampleStats", "code": "return [minimum, maximum, mean, (leftMedian + rightMedian) / 2, mode]"}, "27": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1129, "task_title": "Shortest Path with Alternating Colors", "difficulty": 2, "func_name": "shortestAlternatingPaths", "description": "You are given an integer `n`, the number of nodes in a directed graph where\nthe nodes are labeled from `0` to `n - 1`. Each edge is red or blue in this\ngraph, and there could be self-edges and parallel edges.\n\nYou are given two arrays `redEdges` and `blueEdges` where:\n\n* `redEdges[i] = [ai, bi]` indicates that there is a directed red edge from node `ai` to node `bi` in the graph, and\n* `blueEdges[j] = [uj, vj]` indicates that there is a directed blue edge from node `uj` to node `vj` in the graph.\n\nReturn an array `answer` of length `n`, where each `answer[x]` is the length\nof the shortest path from node `0` to node `x` such that the edge colors\nalternate along the path, or `-1` if such a path does not exist.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nfrom enum import Enum\n\n\nclass Color(Enum):\n  kInit = 0\n  kRed = 1\n  kBlue = 2\n\n\nclass Solution:\n  def shortestAlternatingPaths(self, n: int, redEdges: List[List[int]], blueEdges: List[List[int]]) -> List[int]:\n    ans = [-1] * n\n    graph = [[] for _ in range(n)]\n    q = collections.deque([(0, Color.kInit)])\n\n    for u, v in redEdges:\n      graph[u].append((v, Color.kRed))\n\n    for u, v in blueEdges:\n      graph[u].append((v, Color.kBlue))\n\n    step = 0\n    while q:\n      for _ in range(len(q)):\n        u, prevColor = q.popleft()\n        if ans[u] == -1:\n          ans[u] = step\n        for i, (v, edgeColor) in enumerate(graph[u]):\n          if v == -1 or edgeColor == prevColor:\n            continue\n          q.append((v, edgeColor))\n          graph[u][i] = (-1, edgeColor)\n      step += 1\n\n    return ans\n", "blocks": [{"type": "if", "start": 36, "end": 37}, {"type": "if", "start": 39, "end": 40}], "target_lines": [37, 40], "cfg": {"0": {"lineno": 0, "parents": [], "children": [1], "function": "", "code": "start"}, "1": {"lineno": 15, "parents": [0], "children": [2], "function": "", "code": "kInit = 0"}, "2": {"lineno": 16, "parents": [1], "children": [3], "function": "", "code": "kRed = 1"}, "3": {"lineno": 17, "parents": [2], "children": [34], "function": "", "code": "kBlue = 2"}, "4": {"lineno": 21, "parents": [], "children": [6], "function": "shortestAlternatingPaths", "code": "enter: shortestAlternatingPaths(self, n, redEdges, blueEdges)"}, "5": {"lineno": 21, "parents": [33], "children": [], "function": "shortestAlternatingPaths", "code": "exit: shortestAlternatingPaths(self, n, redEdges, blueEdges)"}, "6": {"lineno": 22, "parents": [4], "children": [7], "function": "shortestAlternatingPaths", "code": "ans = [-1] * n"}, "7": {"lineno": 23, "parents": [6], "children": [8], "function": "shortestAlternatingPaths", "code": "graph = [[] for _ in range(n)]"}, "8": {"lineno": 24, "parents": [7], "children": [9], "calls": ["deque"], "function": "shortestAlternatingPaths", "code": "q = collections.deque([(0, Color.kInit)])"}, "9": {"lineno": 26, "parents": [8], "children": [10], "function": "shortestAlternatingPaths", "code": "__iv = iter(redEdges)"}, "10": {"lineno": 26, "parents": [9, 12], "children": [11, 13], "function": "shortestAlternatingPaths", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 26, "parents": [10], "children": [12], "function": "shortestAlternatingPaths", "code": "u, v = next(__iv)"}, "12": {"lineno": 27, "parents": [11], "children": [10], "calls": ["append"], "function": "shortestAlternatingPaths", "code": "graph[u].append((v, Color.kRed))"}, "13": {"lineno": 29, "parents": [10], "children": [14], "function": "shortestAlternatingPaths", "code": "__iv = iter(blueEdges)"}, "14": {"lineno": 29, "parents": [16, 13], "children": [17, 15], "function": "shortestAlternatingPaths", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 29, "parents": [14], "children": [16], "function": "shortestAlternatingPaths", "code": "u, v = next(__iv)"}, "16": {"lineno": 30, "parents": [15], "children": [14], "calls": ["append"], "function": "shortestAlternatingPaths", "code": "graph[u].append((v, Color.kBlue))"}, "17": {"lineno": 32, "parents": [14], "children": [18], "function": "shortestAlternatingPaths", "code": "step = 0"}, "18": {"lineno": 33, "parents": [32, 17], "children": [33, 19], "function": "shortestAlternatingPaths", "code": "_while: q"}, "19": {"lineno": 34, "parents": [18], "children": [20], "function": "shortestAlternatingPaths", "code": "__iv = iter(range(len(q)))"}, "20": {"lineno": 34, "parents": [26, 19], "children": [32, 21], "calls": ["len", "range"], "function": "shortestAlternatingPaths", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 34, "parents": [20], "children": [22], "function": "shortestAlternatingPaths", "code": "_ = next(__iv)"}, "22": {"lineno": 35, "parents": [21], "children": [23], "calls": ["popleft"], "function": "shortestAlternatingPaths", "code": "u, prevColor = q.popleft()"}, "23": {"lineno": 36, "parents": [22], "children": [24, 25], "function": "shortestAlternatingPaths", "code": "_if: ans[u] == -1"}, "24": {"lineno": 37, "parents": [23], "children": [25], "function": "shortestAlternatingPaths", "code": "ans[u] = step"}, "25": {"lineno": 38, "parents": [24, 23], "children": [26], "function": "shortestAlternatingPaths", "code": "__iv = iter(enumerate(graph[u]))"}, "26": {"lineno": 38, "parents": [25, 29, 31], "children": [27, 20], "calls": ["enumerate"], "function": "shortestAlternatingPaths", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 38, "parents": [26], "children": [28], "function": "shortestAlternatingPaths", "code": "i, (v, edgeColor) = next(__iv)"}, "28": {"lineno": 39, "parents": [27], "children": [29, 30], "function": "shortestAlternatingPaths", "code": "_if: v == -1 or edgeColor == prevColor"}, "29": {"lineno": 40, "parents": [28], "children": [26], "function": "shortestAlternatingPaths", "code": "continue"}, "30": {"lineno": 41, "parents": [28], "children": [31], "calls": ["append"], "function": "shortestAlternatingPaths", "code": "q.append((v, edgeColor))"}, "31": {"lineno": 42, "parents": [30], "children": [26], "function": "shortestAlternatingPaths", "code": "graph[u][i] = (-1, edgeColor)"}, "32": {"lineno": 43, "parents": [20], "children": [18], "function": "shortestAlternatingPaths", "code": "step += 1"}, "33": {"lineno": 45, "parents": [18], "children": [5], "function": "shortestAlternatingPaths", "code": "return ans"}, "34": {"lineno": 0, "parents": [3], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1139, "task_title": "Largest 1-Bordered Square", "difficulty": 2, "func_name": "largest1BorderedSquare", "description": "Given a 2D `grid` of `0`s and `1`s, return the number of elements in the\nlargest square subgrid that has all `1`s on its border, or `0` if such a\nsubgrid doesn't exist in the `grid`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def largest1BorderedSquare(self, grid: List[List[int]]) -> int:\n    m = len(grid)\n    n = len(grid[0])\n\n    leftOnes = [[0] * n for _ in range(m)]\n    topOnes = [[0] * n for _ in range(m)]\n\n    for i in range(m):\n      for j in range(n):\n        if grid[i][j] == 1:\n          if j==0:\n            leftOnes[i][j]=1\n          else:\n            leftOnes[i][j]=1+leftOnes[i][j-1]\n          if i==0:\n            topOnes[i][j]=1\n          else:\n            topOnes[i][j]=1+topOnes[i-1][j]\n\n    for sz in range(min(m, n), 0, -1):\n      for i in range(m - sz + 1):\n        for j in range(n - sz + 1):\n          x = i + sz - 1\n          y = j + sz - 1\n          if min(leftOnes[i][y], leftOnes[x][y], topOnes[x][j], topOnes[x][y]) >= sz:\n            return sz * sz\n\n    return 0\n", "blocks": [{"type": "if", "start": 21, "end": 29}, {"type": "if", "start": 22, "end": 23}, {"type": "else", "start": 24, "end": 25}, {"type": "if", "start": 26, "end": 27}, {"type": "else", "start": 28, "end": 29}, {"type": "if", "start": 36, "end": 37}], "target_lines": [22, 23, 25, 26, 27, 29, 37], "cfg": {"0": {"lineno": 0, "parents": [], "children": [34], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "largest1BorderedSquare", "code": "enter: largest1BorderedSquare(self, grid)"}, "2": {"lineno": 12, "parents": [32, 33], "children": [], "function": "largest1BorderedSquare", "code": "exit: largest1BorderedSquare(self, grid)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "largest1BorderedSquare", "code": "m = len(grid)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "largest1BorderedSquare", "code": "n = len(grid[0])"}, "5": {"lineno": 16, "parents": [4], "children": [6], "function": "largest1BorderedSquare", "code": "leftOnes = [[0] * n for _ in range(m)]"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "largest1BorderedSquare", "code": "topOnes = [[0] * n for _ in range(m)]"}, "7": {"lineno": 19, "parents": [6], "children": [8], "function": "largest1BorderedSquare", "code": "__iv = iter(range(m))"}, "8": {"lineno": 19, "parents": [11, 7], "children": [9, 20], "calls": ["range"], "function": "largest1BorderedSquare", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 19, "parents": [8], "children": [10], "function": "largest1BorderedSquare", "code": "i = next(__iv)"}, "10": {"lineno": 20, "parents": [9], "children": [11], "function": "largest1BorderedSquare", "code": "__iv = iter(range(n))"}, "11": {"lineno": 20, "parents": [19, 10, 18, 13], "children": [8, 12], "calls": ["range"], "function": "largest1BorderedSquare", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 20, "parents": [11], "children": [13], "function": "largest1BorderedSquare", "code": "j = next(__iv)"}, "13": {"lineno": 21, "parents": [12], "children": [11, 14], "function": "largest1BorderedSquare", "code": "_if: grid[i][j] == 1"}, "14": {"lineno": 22, "parents": [13], "children": [16, 15], "function": "largest1BorderedSquare", "code": "_if: j == 0"}, "15": {"lineno": 23, "parents": [14], "children": [17], "function": "largest1BorderedSquare", "code": "leftOnes[i][j] = 1"}, "16": {"lineno": 25, "parents": [14], "children": [17], "function": "largest1BorderedSquare", "code": "leftOnes[i][j] = 1 + leftOnes[i][j - 1]"}, "17": {"lineno": 26, "parents": [16, 15], "children": [18, 19], "function": "largest1BorderedSquare", "code": "_if: i == 0"}, "18": {"lineno": 27, "parents": [17], "children": [11], "function": "largest1BorderedSquare", "code": "topOnes[i][j] = 1"}, "19": {"lineno": 29, "parents": [17], "children": [11], "function": "largest1BorderedSquare", "code": "topOnes[i][j] = 1 + topOnes[i - 1][j]"}, "20": {"lineno": 31, "parents": [8], "children": [21], "function": "largest1BorderedSquare", "code": "__iv = iter(range(min(m, n), 0, -1))"}, "21": {"lineno": 31, "parents": [24, 20], "children": [33, 22], "calls": ["min", "range"], "function": "largest1BorderedSquare", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 31, "parents": [21], "children": [23], "function": "largest1BorderedSquare", "code": "sz = next(__iv)"}, "23": {"lineno": 32, "parents": [22], "children": [24], "function": "largest1BorderedSquare", "code": "__iv = iter(range(m - sz + 1))"}, "24": {"lineno": 32, "parents": [27, 23], "children": [25, 21], "calls": ["range"], "function": "largest1BorderedSquare", "code": "_for: __iv.__length__hint__() > 0"}, "25": {"lineno": 32, "parents": [24], "children": [26], "function": "largest1BorderedSquare", "code": "i = next(__iv)"}, "26": {"lineno": 33, "parents": [25], "children": [27], "function": "largest1BorderedSquare", "code": "__iv = iter(range(n - sz + 1))"}, "27": {"lineno": 33, "parents": [26, 31], "children": [24, 28], "calls": ["range"], "function": "largest1BorderedSquare", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 33, "parents": [27], "children": [29], "function": "largest1BorderedSquare", "code": "j = next(__iv)"}, "29": {"lineno": 34, "parents": [28], "children": [30], "function": "largest1BorderedSquare", "code": "x = i + sz - 1"}, "30": {"lineno": 35, "parents": [29], "children": [31], "function": "largest1BorderedSquare", "code": "y = j + sz - 1"}, "31": {"lineno": 36, "parents": [30], "children": [32, 27], "calls": ["min"], "function": "largest1BorderedSquare", "code": "_if: min(leftOnes[i][y], leftOnes[x][y], topOnes[x][j], topOnes[x][y]) >= sz"}, "32": {"lineno": 37, "parents": [31], "children": [2], "function": "largest1BorderedSquare", "code": "return sz * sz"}, "33": {"lineno": 39, "parents": [21], "children": [2], "function": "largest1BorderedSquare", "code": "return 0"}, "34": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1162, "task_title": "As Far from Land as Possible", "difficulty": 2, "func_name": "maxDistance", "description": "Given an `n x n` `grid` containing only values `0` and `1`, where `0`\nrepresents water and `1` represents land, find a water cell such that its\ndistance to the nearest land cell is maximized, and return the distance. If no\nland or water exists in the grid, return `-1`.\n\nThe distance used in this problem is the Manhattan distance: the distance\nbetween two cells `(x0, y0)` and `(x1, y1)` is `|x0 - x1| + |y0 - y1|`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def maxDistance(self, grid: List[List[int]]) -> int:\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    m = len(grid)\n    n = len(grid[0])\n    q = collections.deque()\n    water = 0\n\n    for i in range(m):\n      for j in range(n):\n        if grid[i][j] == 0:\n          water += 1\n        else:\n          q.append((i, j))\n\n    if water == 0 or water == m * n:\n      return -1\n\n    ans = 0\n    d = 0\n\n    while q:\n      for _ in range(len(q)):\n        i, j = q.popleft()\n        ans = d\n        for dx, dy in dirs:\n          x = i + dx\n          y = j + dy\n          if x < 0 or x == m or y < 0 or y == n:\n            continue\n          if grid[x][y] > 0:\n            continue\n          q.append((x, y))\n          grid[x][y] = 2\n      d += 1\n\n    return ans\n", "blocks": [{"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 21, "end": 22}, {"type": "else", "start": 23, "end": 24}, {"type": "if", "start": 39, "end": 40}, {"type": "if", "start": 41, "end": 42}], "target_lines": [22, 24, 27, 40, 42], "cfg": {"0": {"lineno": 0, "parents": [], "children": [40], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "maxDistance", "code": "enter: maxDistance(self, grid)"}, "2": {"lineno": 12, "parents": [18, 39], "children": [], "function": "maxDistance", "code": "exit: maxDistance(self, grid)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "maxDistance", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "maxDistance", "code": "m = len(grid)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["len"], "function": "maxDistance", "code": "n = len(grid[0])"}, "6": {"lineno": 16, "parents": [5], "children": [7], "calls": ["deque"], "function": "maxDistance", "code": "q = collections.deque()"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "maxDistance", "code": "water = 0"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "maxDistance", "code": "__iv = iter(range(m))"}, "9": {"lineno": 19, "parents": [8, 12], "children": [17, 10], "calls": ["range"], "function": "maxDistance", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "maxDistance", "code": "i = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "maxDistance", "code": "__iv = iter(range(n))"}, "12": {"lineno": 20, "parents": [16, 11, 15], "children": [9, 13], "calls": ["range"], "function": "maxDistance", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 20, "parents": [12], "children": [14], "function": "maxDistance", "code": "j = next(__iv)"}, "14": {"lineno": 21, "parents": [13], "children": [16, 15], "function": "maxDistance", "code": "_if: grid[i][j] == 0"}, "15": {"lineno": 22, "parents": [14], "children": [12], "function": "maxDistance", "code": "water += 1"}, "16": {"lineno": 24, "parents": [14], "children": [12], "calls": ["append"], "function": "maxDistance", "code": "q.append((i, j))"}, "17": {"lineno": 26, "parents": [9], "children": [18, 19], "function": "maxDistance", "code": "_if: water == 0 or water == m * n"}, "18": {"lineno": 27, "parents": [17], "children": [2], "function": "maxDistance", "code": "return -1"}, "19": {"lineno": 29, "parents": [17], "children": [20], "function": "maxDistance", "code": "ans = 0"}, "20": {"lineno": 30, "parents": [19], "children": [21], "function": "maxDistance", "code": "d = 0"}, "21": {"lineno": 32, "parents": [20, 38], "children": [22, 39], "function": "maxDistance", "code": "_while: q"}, "22": {"lineno": 33, "parents": [21], "children": [23], "function": "maxDistance", "code": "__iv = iter(range(len(q)))"}, "23": {"lineno": 33, "parents": [28, 22], "children": [24, 38], "calls": ["len", "range"], "function": "maxDistance", "code": "_for: __iv.__length__hint__() > 0"}, "24": {"lineno": 33, "parents": [23], "children": [25], "function": "maxDistance", "code": "_ = next(__iv)"}, "25": {"lineno": 34, "parents": [24], "children": [26], "calls": ["popleft"], "function": "maxDistance", "code": "i, j = q.popleft()"}, "26": {"lineno": 35, "parents": [25], "children": [27], "function": "maxDistance", "code": "ans = d"}, "27": {"lineno": 36, "parents": [26], "children": [28], "function": "maxDistance", "code": "__iv = iter(dirs)"}, "28": {"lineno": 36, "parents": [33, 27, 37, 35], "children": [29, 23], "function": "maxDistance", "code": "_for: __iv.__length__hint__() > 0"}, "29": {"lineno": 36, "parents": [28], "children": [30], "function": "maxDistance", "code": "dx, dy = next(__iv)"}, "30": {"lineno": 37, "parents": [29], "children": [31], "function": "maxDistance", "code": "x = i + dx"}, "31": {"lineno": 38, "parents": [30], "children": [32], "function": "maxDistance", "code": "y = j + dy"}, "32": {"lineno": 39, "parents": [31], "children": [33, 34], "function": "maxDistance", "code": "_if: x < 0 or x == m or y < 0 or (y == n)"}, "33": {"lineno": 40, "parents": [32], "children": [28], "function": "maxDistance", "code": "continue"}, "34": {"lineno": 41, "parents": [32], "children": [35, 36], "function": "maxDistance", "code": "_if: grid[x][y] > 0"}, "35": {"lineno": 42, "parents": [34], "children": [28], "function": "maxDistance", "code": "continue"}, "36": {"lineno": 43, "parents": [34], "children": [37], "calls": ["append"], "function": "maxDistance", "code": "q.append((x, y))"}, "37": {"lineno": 44, "parents": [36], "children": [28], "function": "maxDistance", "code": "grid[x][y] = 2"}, "38": {"lineno": 45, "parents": [23], "children": [21], "function": "maxDistance", "code": "d += 1"}, "39": {"lineno": 47, "parents": [21], "children": [2], "function": "maxDistance", "code": "return ans"}, "40": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1202, "task_title": "Smallest String With Swaps", "difficulty": 2, "func_name": "smallestStringWithSwaps", "description": "You are given a string `s`, and an array of pairs of indices in the string\n`pairs` where `pairs[i] = [a, b]` indicates 2 indices(0-indexed) of the\nstring.\n\nYou can swap the characters at any pair of indices in the given `pairs` any\nnumber of times.\n\nReturn the lexicographically smallest string that `s` can be changed to after\nusing the swaps.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:\n    ans = ''\n    uf = UnionFind(len(s))\n    map = collections.defaultdict(list)\n\n    for a, b in pairs:\n      uf.unionByRank(a, b)\n\n    for i, c in enumerate(s):\n      map[uf.find(i)].append(c)\n\n    for key in map.keys():\n      map[key].sort(reverse=True)\n\n    for i in range(len(s)):\n      ans += map[uf.find(i)].pop()\n\n    return ans\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 23, "end": 24}, {"type": "else", "start": 25, "end": 27}], "target_lines": [20, 22, 24, 26, 27, 31], "cfg": {"0": {"lineno": 0, "parents": [], "children": [44], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.rank = [0] * n"}, "5": {"lineno": 16, "parents": [30], "children": [7], "function": "unionByRank", "code": "enter: unionByRank(self, u, v)"}, "6": {"lineno": 16, "parents": [16, 10, 12, 14], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "calls": ["find"], "function": "unionByRank", "code": "i = self.find(u)"}, "8": {"lineno": 18, "parents": [18, 7], "children": [9], "calls": ["find"], "function": "unionByRank", "code": "j = self.find(v)"}, "9": {"lineno": 19, "parents": [8, 18], "children": [10, 11], "function": "unionByRank", "code": "_if: i == j"}, "10": {"lineno": 20, "parents": [9], "children": [6], "function": "unionByRank", "code": "return"}, "11": {"lineno": 21, "parents": [9], "children": [12, 13], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "12": {"lineno": 22, "parents": [11], "children": [6], "function": "unionByRank", "code": "self.id[i] = j"}, "13": {"lineno": 23, "parents": [11], "children": [14, 15], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "14": {"lineno": 24, "parents": [13], "children": [6], "function": "unionByRank", "code": "self.id[j] = i"}, "15": {"lineno": 26, "parents": [13], "children": [16], "function": "unionByRank", "code": "self.id[i] = j"}, "16": {"lineno": 27, "parents": [15], "children": [6], "function": "unionByRank", "code": "self.rank[j] += 1"}, "17": {"lineno": 29, "parents": [8, 20, 7], "children": [19], "function": "find", "code": "enter: find(self, u)"}, "18": {"lineno": 29, "parents": [21], "children": [], "function": "find", "code": "exit: find(self, u)"}, "19": {"lineno": 30, "parents": [17], "children": [20, 21], "function": "find", "code": "_if: self.id[u] != u"}, "20": {"lineno": 31, "parents": [19], "children": [21], "calls": ["find"], "function": "find", "code": "self.id[u] = self.find(self.id[u])"}, "21": {"lineno": 32, "parents": [18, 19, 20], "children": [18], "function": "find", "code": "return self.id[u]"}, "22": {"lineno": 36, "parents": [], "children": [24], "function": "smallestStringWithSwaps", "code": "enter: smallestStringWithSwaps(self, s, pairs)"}, "23": {"lineno": 36, "parents": [43], "children": [], "function": "smallestStringWithSwaps", "code": "exit: smallestStringWithSwaps(self, s, pairs)"}, "24": {"lineno": 37, "parents": [22], "children": [25], "function": "smallestStringWithSwaps", "code": "ans = ''"}, "25": {"lineno": 38, "parents": [24], "children": [26], "calls": ["len", "UnionFind"], "function": "smallestStringWithSwaps", "code": "uf = UnionFind(len(s))"}, "26": {"lineno": 39, "parents": [25], "children": [27], "calls": ["defaultdict"], "function": "smallestStringWithSwaps", "code": "map = collections.defaultdict(list)"}, "27": {"lineno": 41, "parents": [26], "children": [28], "function": "smallestStringWithSwaps", "code": "__iv = iter(pairs)"}, "28": {"lineno": 41, "parents": [27, 30, 6], "children": [29, 31], "function": "smallestStringWithSwaps", "code": "_for: __iv.__length__hint__() > 0"}, "29": {"lineno": 41, "parents": [28], "children": [30], "function": "smallestStringWithSwaps", "code": "a, b = next(__iv)"}, "30": {"lineno": 42, "parents": [29], "children": [28], "calls": ["unionByRank"], "function": "smallestStringWithSwaps", "code": "uf.unionByRank(a, b)"}, "31": {"lineno": 44, "parents": [28], "children": [32], "function": "smallestStringWithSwaps", "code": "__iv = iter(enumerate(s))"}, "32": {"lineno": 44, "parents": [34, 31], "children": [33, 35], "calls": ["enumerate"], "function": "smallestStringWithSwaps", "code": "_for: __iv.__length__hint__() > 0"}, "33": {"lineno": 44, "parents": [32], "children": [34], "function": "smallestStringWithSwaps", "code": "i, c = next(__iv)"}, "34": {"lineno": 45, "parents": [33], "children": [32], "calls": ["append"], "function": "smallestStringWithSwaps", "code": "map[uf.find(i)].append(c)"}, "35": {"lineno": 47, "parents": [32], "children": [36], "function": "smallestStringWithSwaps", "code": "__iv = iter(map.keys())"}, "36": {"lineno": 47, "parents": [35, 38], "children": [37, 39], "calls": ["keys"], "function": "smallestStringWithSwaps", "code": "_for: __iv.__length__hint__() > 0"}, "37": {"lineno": 47, "parents": [36], "children": [38], "function": "smallestStringWithSwaps", "code": "key = next(__iv)"}, "38": {"lineno": 48, "parents": [37], "children": [36], "calls": ["sort"], "function": "smallestStringWithSwaps", "code": "map[key].sort(reverse=True)"}, "39": {"lineno": 50, "parents": [36], "children": [40], "function": "smallestStringWithSwaps", "code": "__iv = iter(range(len(s)))"}, "40": {"lineno": 50, "parents": [42, 39], "children": [41, 43], "calls": ["len", "range"], "function": "smallestStringWithSwaps", "code": "_for: __iv.__length__hint__() > 0"}, "41": {"lineno": 50, "parents": [40], "children": [42], "function": "smallestStringWithSwaps", "code": "i = next(__iv)"}, "42": {"lineno": 51, "parents": [41], "children": [40], "calls": ["pop"], "function": "smallestStringWithSwaps", "code": "ans += map[uf.find(i)].pop()"}, "43": {"lineno": 53, "parents": [40], "children": [23], "function": "smallestStringWithSwaps", "code": "return ans"}, "44": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1210, "task_title": "Minimum Moves to Reach Target with Rotations", "difficulty": 3, "func_name": "minimumMoves", "description": "In an `n*n` grid, there is a snake that spans 2 cells and starts moving from\nthe top left corner at `(0, 0)` and `(0, 1)`. The grid has empty cells\nrepresented by zeros and blocked cells represented by ones. The snake wants to\nreach the lower right corner at `(n-1, n-2)` and `(n-1, n-1)`.\n\nIn one move the snake can:\n\n* Move one cell to the right if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.\n* Move down one cell if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.\n* Rotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from `(r, c)` and `(r, c+1)` to `(r, c)` and `(r+1, c)`.  \n\n* Rotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from `(r, c)` and `(r+1, c)` to `(r, c)` and `(r, c+1)`.  \n\nReturn the minimum number of moves to reach the target.\n\nIf there is no way to reach the target, return `-1`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nfrom enum import IntEnum\n\n\nclass Pos(IntEnum):\n  kHorizontal = 0\n  kVertical = 1\n\n\nclass Solution:\n  def minimumMoves(self, grid: List[List[int]]) -> int:\n    n = len(grid)\n    ans = 0\n\n    q = collections.deque([(0, 0, Pos.kHorizontal)])\n    seen = {(0, 0, Pos.kHorizontal)}\n\n    def canMoveRight(x: int, y: int, pos: Pos) -> bool:\n      if pos == Pos.kHorizontal:\n        return y + 2 < n and not grid[x][y + 2]\n      return y + 1 < n and not grid[x][y + 1] and not grid[x + 1][y + 1]\n\n    def canMoveDown(x: int, y: int, pos: Pos) -> bool:\n      if pos == Pos.kVertical:\n        return x + 2 < n and not grid[x + 2][y]\n      return x + 1 < n and not grid[x + 1][y] and not grid[x + 1][y + 1]\n\n    def canRotateClockwise(x: int, y: int, pos: Pos) -> bool:\n      return pos == Pos.kHorizontal and x + 1 < n and not grid[x + 1][y + 1] and not grid[x + 1][y]\n  \n  \n    def canRotateCounterclockwise(x: int, y: int, pos: Pos) -> bool:\n      return pos == Pos.kVertical and y + 1 < n and not grid[x + 1][y + 1] and not grid[x][y + 1]\n\n    \n    while q:\n      for _ in range(len(q)):\n        x, y, pos = q.popleft()\n        if x == n - 1 and y == n - 2 and pos == Pos.kHorizontal:\n          return ans\n        if canMoveRight(x, y, pos) and (x, y + 1, pos) not in seen:\n          q.append((x, y + 1, pos))\n          seen.add((x, y + 1, pos))\n        if canMoveDown(x, y, pos) and (x + 1, y, pos) not in seen:\n          q.append((x + 1, y, pos))\n          seen.add((x + 1, y, pos))\n        newPos = Pos.kVertical if pos == Pos.kHorizontal else Pos.kHorizontal\n        if (canRotateClockwise(x, y, pos) or canRotateCounterclockwise(x, y, pos)) and (x, y, newPos) not in seen:\n          q.append((x, y, newPos))\n          seen.add((x, y, newPos))\n      ans += 1\n\n    return -1\n", "blocks": [{"type": "if", "start": 28, "end": 29}, {"type": "if", "start": 33, "end": 34}, {"type": "if", "start": 48, "end": 49}, {"type": "if", "start": 50, "end": 52}, {"type": "if", "start": 53, "end": 55}, {"type": "if", "start": 57, "end": 59}], "target_lines": [29, 34, 49, 51, 52, 54, 55, 58, 59], "cfg": {"0": {"lineno": 0, "parents": [], "children": [1], "function": "", "code": "start"}, "1": {"lineno": 15, "parents": [0], "children": [2], "function": "", "code": "kHorizontal = 0"}, "2": {"lineno": 16, "parents": [1], "children": [44], "function": "", "code": "kVertical = 1"}, "3": {"lineno": 20, "parents": [], "children": [5], "function": "minimumMoves", "code": "enter: minimumMoves(self, grid)"}, "4": {"lineno": 20, "parents": [43, 31], "children": [], "function": "minimumMoves", "code": "exit: minimumMoves(self, grid)"}, "5": {"lineno": 21, "parents": [3], "children": [6], "calls": ["len"], "function": "minimumMoves", "code": "n = len(grid)"}, "6": {"lineno": 22, "parents": [5], "children": [7], "function": "minimumMoves", "code": "ans = 0"}, "7": {"lineno": 24, "parents": [6], "children": [8], "calls": ["deque"], "function": "minimumMoves", "code": "q = collections.deque([(0, 0, Pos.kHorizontal)])"}, "8": {"lineno": 25, "parents": [7], "children": [25], "function": "minimumMoves", "code": "seen = {(0, 0, Pos.kHorizontal)}"}, "9": {"lineno": 27, "parents": [], "children": [11], "function": "canMoveRight", "code": "enter: canMoveRight(x, y, pos)"}, "10": {"lineno": 27, "parents": [12, 13], "children": [], "function": "canMoveRight", "code": "exit: canMoveRight(x, y, pos)"}, "11": {"lineno": 28, "parents": [9], "children": [12, 13], "function": "canMoveRight", "code": "_if: pos == Pos.kHorizontal"}, "12": {"lineno": 29, "parents": [11], "children": [10], "function": "canMoveRight", "code": "return y + 2 < n and (not grid[x][y + 2])"}, "13": {"lineno": 30, "parents": [11], "children": [10], "function": "canMoveRight", "code": "return y + 1 < n and (not grid[x][y + 1]) and (not grid[x + 1][y + 1])"}, "14": {"lineno": 32, "parents": [], "children": [16], "function": "canMoveDown", "code": "enter: canMoveDown(x, y, pos)"}, "15": {"lineno": 32, "parents": [17, 18], "children": [], "function": "canMoveDown", "code": "exit: canMoveDown(x, y, pos)"}, "16": {"lineno": 33, "parents": [14], "children": [17, 18], "function": "canMoveDown", "code": "_if: pos == Pos.kVertical"}, "17": {"lineno": 34, "parents": [16], "children": [15], "function": "canMoveDown", "code": "return x + 2 < n and (not grid[x + 2][y])"}, "18": {"lineno": 35, "parents": [16], "children": [15], "function": "canMoveDown", "code": "return x + 1 < n and (not grid[x + 1][y]) and (not grid[x + 1][y + 1])"}, "19": {"lineno": 37, "parents": [], "children": [21], "function": "canRotateClockwise", "code": "enter: canRotateClockwise(x, y, pos)"}, "20": {"lineno": 37, "parents": [21], "children": [], "function": "canRotateClockwise", "code": "exit: canRotateClockwise(x, y, pos)"}, "21": {"lineno": 38, "parents": [19], "children": [20], "function": "canRotateClockwise", "code": "return pos == Pos.kHorizontal and x + 1 < n and (not grid[x + 1][y + 1]) and (not grid[x + 1][y])"}, "22": {"lineno": 41, "parents": [], "children": [24], "function": "canRotateCounterclockwise", "code": "enter: canRotateCounterclockwise(x, y, pos)"}, "23": {"lineno": 41, "parents": [24], "children": [], "function": "canRotateCounterclockwise", "code": "exit: canRotateCounterclockwise(x, y, pos)"}, "24": {"lineno": 42, "parents": [22], "children": [23], "function": "canRotateCounterclockwise", "code": "return pos == Pos.kVertical and y + 1 < n and (not grid[x + 1][y + 1]) and (not grid[x][y + 1])"}, "25": {"lineno": 45, "parents": [8, 42], "children": [26, 43], "function": "minimumMoves", "code": "_while: q"}, "26": {"lineno": 46, "parents": [25], "children": [27], "function": "minimumMoves", "code": "__iv = iter(range(len(q)))"}, "27": {"lineno": 46, "parents": [41, 26, 39], "children": [42, 28], "calls": ["len", "range"], "function": "minimumMoves", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 46, "parents": [27], "children": [29], "function": "minimumMoves", "code": "_ = next(__iv)"}, "29": {"lineno": 47, "parents": [28], "children": [30], "calls": ["popleft"], "function": "minimumMoves", "code": "x, y, pos = q.popleft()"}, "30": {"lineno": 48, "parents": [29], "children": [32, 31], "function": "minimumMoves", "code": "_if: x == n - 1 and y == n - 2 and (pos == Pos.kHorizontal)"}, "31": {"lineno": 49, "parents": [30], "children": [4], "function": "minimumMoves", "code": "return ans"}, "32": {"lineno": 50, "parents": [30], "children": [33, 35], "function": "minimumMoves", "code": "_if: canMoveRight(x, y, pos) and (x, y + 1, pos) not in seen"}, "33": {"lineno": 51, "parents": [32], "children": [34], "calls": ["append"], "function": "minimumMoves", "code": "q.append((x, y + 1, pos))"}, "34": {"lineno": 52, "parents": [33], "children": [35], "calls": ["add"], "function": "minimumMoves", "code": "seen.add((x, y + 1, pos))"}, "35": {"lineno": 53, "parents": [32, 34], "children": [36, 38], "function": "minimumMoves", "code": "_if: canMoveDown(x, y, pos) and (x + 1, y, pos) not in seen"}, "36": {"lineno": 54, "parents": [35], "children": [37], "calls": ["append"], "function": "minimumMoves", "code": "q.append((x + 1, y, pos))"}, "37": {"lineno": 55, "parents": [36], "children": [38], "calls": ["add"], "function": "minimumMoves", "code": "seen.add((x + 1, y, pos))"}, "38": {"lineno": 56, "parents": [35, 37], "children": [39], "function": "minimumMoves", "code": "newPos = Pos.kVertical if pos == Pos.kHorizontal else Pos.kHorizontal"}, "39": {"lineno": 57, "parents": [38], "children": [40, 27], "function": "minimumMoves", "code": "_if: (canRotateClockwise(x, y, pos) or canRotateCounterclockwise(x, y, pos)) and (x, y, newPos) not in seen"}, "40": {"lineno": 58, "parents": [39], "children": [41], "calls": ["append"], "function": "minimumMoves", "code": "q.append((x, y, newPos))"}, "41": {"lineno": 59, "parents": [40], "children": [27], "calls": ["add"], "function": "minimumMoves", "code": "seen.add((x, y, newPos))"}, "42": {"lineno": 60, "parents": [27], "children": [25], "function": "minimumMoves", "code": "ans += 1"}, "43": {"lineno": 62, "parents": [25], "children": [4], "function": "minimumMoves", "code": "return -1"}, "44": {"lineno": 0, "parents": [2], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1253, "task_title": "Reconstruct a 2-Row Binary Matrix", "difficulty": 2, "func_name": "reconstructMatrix", "description": "Given the following details of a matrix with `n` columns and `2` rows :\n\n* The matrix is a binary matrix, which means each element in the matrix can be `0` or `1`.\n* The sum of elements of the 0-th(upper) row is given as `upper`.\n* The sum of elements of the 1-st(lower) row is given as `lower`.\n* The sum of elements in the i-th column(0-indexed) is `colsum[i]`, where `colsum` is given as an integer array with length `n`.\n\nYour task is to reconstruct the matrix with `upper`, `lower` and `colsum`.\n\nReturn it as a 2-D integer array.\n\nIf there are more than one valid solution, any of them will be accepted.\n\nIf no valid solution exists, return an empty 2-D array.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def reconstructMatrix(self, upper: int, lower: int, colsum: List[int]) -> List[List[int]]:\n    if upper + lower != sum(colsum):\n      return []\n    if min(upper, lower) < colsum.count(2):\n      return []\n\n    ans = [[0] * len(colsum) for _ in range(2)]\n\n    for j, c in enumerate(colsum):\n      if c == 2:\n        ans[0][j] = 1\n        ans[1][j] = 1\n        upper -= 1\n        lower -= 1\n\n    for j, c in enumerate(colsum):\n      if c == 1 and upper > 0:\n        ans[0][j] = 1\n        c -= 1\n        upper -= 1\n      if c == 1 and lower > 0:\n        ans[1][j] = 1\n        lower -= 1\n\n    return ans\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "if", "start": 15, "end": 16}, {"type": "if", "start": 21, "end": 25}, {"type": "if", "start": 28, "end": 31}, {"type": "if", "start": 32, "end": 34}], "target_lines": [14, 16, 22, 23, 24, 25, 29, 30, 31, 33, 34], "cfg": {"0": {"lineno": 0, "parents": [], "children": [27], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "reconstructMatrix", "code": "enter: reconstructMatrix(self, upper, lower, colsum)"}, "2": {"lineno": 12, "parents": [26, 4, 6], "children": [], "function": "reconstructMatrix", "code": "exit: reconstructMatrix(self, upper, lower, colsum)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "calls": ["sum"], "function": "reconstructMatrix", "code": "_if: upper + lower != sum(colsum)"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "reconstructMatrix", "code": "return []"}, "5": {"lineno": 15, "parents": [3], "children": [6, 7], "calls": ["min", "count"], "function": "reconstructMatrix", "code": "_if: min(upper, lower) < colsum.count(2)"}, "6": {"lineno": 16, "parents": [5], "children": [2], "function": "reconstructMatrix", "code": "return []"}, "7": {"lineno": 18, "parents": [5], "children": [8], "function": "reconstructMatrix", "code": "ans = [[0] * len(colsum) for _ in range(2)]"}, "8": {"lineno": 20, "parents": [7], "children": [9], "function": "reconstructMatrix", "code": "__iv = iter(enumerate(colsum))"}, "9": {"lineno": 20, "parents": [8, 11, 15], "children": [16, 10], "calls": ["enumerate"], "function": "reconstructMatrix", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 20, "parents": [9], "children": [11], "function": "reconstructMatrix", "code": "j, c = next(__iv)"}, "11": {"lineno": 21, "parents": [10], "children": [9, 12], "function": "reconstructMatrix", "code": "_if: c == 2"}, "12": {"lineno": 22, "parents": [11], "children": [13], "function": "reconstructMatrix", "code": "ans[0][j] = 1"}, "13": {"lineno": 23, "parents": [12], "children": [14], "function": "reconstructMatrix", "code": "ans[1][j] = 1"}, "14": {"lineno": 24, "parents": [13], "children": [15], "function": "reconstructMatrix", "code": "upper -= 1"}, "15": {"lineno": 25, "parents": [14], "children": [9], "function": "reconstructMatrix", "code": "lower -= 1"}, "16": {"lineno": 27, "parents": [9], "children": [17], "function": "reconstructMatrix", "code": "__iv = iter(enumerate(colsum))"}, "17": {"lineno": 27, "parents": [16, 25, 23], "children": [18, 26], "calls": ["enumerate"], "function": "reconstructMatrix", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "reconstructMatrix", "code": "j, c = next(__iv)"}, "19": {"lineno": 28, "parents": [18], "children": [20, 23], "function": "reconstructMatrix", "code": "_if: c == 1 and upper > 0"}, "20": {"lineno": 29, "parents": [19], "children": [21], "function": "reconstructMatrix", "code": "ans[0][j] = 1"}, "21": {"lineno": 30, "parents": [20], "children": [22], "function": "reconstructMatrix", "code": "c -= 1"}, "22": {"lineno": 31, "parents": [21], "children": [23], "function": "reconstructMatrix", "code": "upper -= 1"}, "23": {"lineno": 32, "parents": [19, 22], "children": [24, 17], "function": "reconstructMatrix", "code": "_if: c == 1 and lower > 0"}, "24": {"lineno": 33, "parents": [23], "children": [25], "function": "reconstructMatrix", "code": "ans[1][j] = 1"}, "25": {"lineno": 34, "parents": [24], "children": [17], "function": "reconstructMatrix", "code": "lower -= 1"}, "26": {"lineno": 36, "parents": [17], "children": [2], "function": "reconstructMatrix", "code": "return ans"}, "27": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1254, "task_title": "Number of Closed Islands", "difficulty": 2, "func_name": "closedIsland", "description": "Given a 2D `grid` consists of `0s` (land) and `1s` (water). An island is a\nmaximal 4-directionally connected group of `0s` and a closed island is an\nisland totally (all left, top, right, bottom) surrounded by `1s.`\n\nReturn the number of closed islands.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def closedIsland(self, grid: List[List[int]]) -> int:\n    m = len(grid)\n    n = len(grid[0])\n\n    def dfs(i: int, j: int) -> None:\n      if i < 0 or i == m or j < 0 or j == n:\n        return\n      if grid[i][j] == 1:\n        return\n\n      grid[i][j] = 1\n      dfs(i + 1, j)\n      dfs(i - 1, j)\n      dfs(i, j + 1)\n      dfs(i, j - 1)\n\n    for i in range(m):\n      for j in range(n):\n        if i * j == 0 or i == m - 1 or j == n - 1:\n          if grid[i][j] == 0:\n            dfs(i, j)\n\n    ans = 0\n\n    for i in range(m):\n      for j in range(n):\n        if grid[i][j] == 0:\n          dfs(i, j)\n          ans += 1\n\n    return ans\n", "blocks": [{"type": "if", "start": 17, "end": 18}, {"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 30, "end": 32}, {"type": "if", "start": 38, "end": 40}, {"type": "if", "start": 31, "end": 32}], "target_lines": [18, 20, 31, 32, 39, 40], "cfg": {"0": {"lineno": 0, "parents": [], "children": [36], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "closedIsland", "code": "enter: closedIsland(self, grid)"}, "2": {"lineno": 12, "parents": [35], "children": [], "function": "closedIsland", "code": "exit: closedIsland(self, grid)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "closedIsland", "code": "m = len(grid)"}, "4": {"lineno": 14, "parents": [3], "children": [16], "calls": ["len"], "function": "closedIsland", "code": "n = len(grid[0])"}, "5": {"lineno": 16, "parents": [33, 24, 12, 13, 14, 15], "children": [7], "function": "dfs", "code": "enter: dfs(i, j)"}, "6": {"lineno": 16, "parents": [8, 10, 6, 15], "children": [], "function": "dfs", "code": "exit: dfs(i, j)"}, "7": {"lineno": 17, "parents": [5], "children": [8, 9], "function": "dfs", "code": "_if: i < 0 or i == m or j < 0 or (j == n)"}, "8": {"lineno": 18, "parents": [7], "children": [6], "function": "dfs", "code": "return"}, "9": {"lineno": 19, "parents": [7], "children": [10, 11], "function": "dfs", "code": "_if: grid[i][j] == 1"}, "10": {"lineno": 20, "parents": [9], "children": [6], "function": "dfs", "code": "return"}, "11": {"lineno": 22, "parents": [9], "children": [12], "function": "dfs", "code": "grid[i][j] = 1"}, "12": {"lineno": 23, "parents": [11], "children": [13], "calls": ["dfs"], "function": "dfs", "code": "dfs(i + 1, j)"}, "13": {"lineno": 24, "parents": [12, 6], "children": [14], "calls": ["dfs"], "function": "dfs", "code": "dfs(i - 1, j)"}, "14": {"lineno": 25, "parents": [13, 6], "children": [15], "calls": ["dfs"], "function": "dfs", "code": "dfs(i, j + 1)"}, "15": {"lineno": 26, "parents": [14, 6], "children": [6], "calls": ["dfs"], "function": "dfs", "code": "dfs(i, j - 1)"}, "16": {"lineno": 28, "parents": [4], "children": [17], "function": "closedIsland", "code": "__iv = iter(range(m))"}, "17": {"lineno": 28, "parents": [16, 20], "children": [25, 18], "calls": ["range"], "function": "closedIsland", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 28, "parents": [17], "children": [19], "function": "closedIsland", "code": "i = next(__iv)"}, "19": {"lineno": 29, "parents": [18], "children": [20], "function": "closedIsland", "code": "__iv = iter(range(n))"}, "20": {"lineno": 29, "parents": [19, 23, 6, 22, 24], "children": [17, 21], "calls": ["range"], "function": "closedIsland", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 29, "parents": [20], "children": [22], "function": "closedIsland", "code": "j = next(__iv)"}, "22": {"lineno": 30, "parents": [21], "children": [20, 23], "function": "closedIsland", "code": "_if: i * j == 0 or i == m - 1 or j == n - 1"}, "23": {"lineno": 31, "parents": [22], "children": [24, 20], "function": "closedIsland", "code": "_if: grid[i][j] == 0"}, "24": {"lineno": 32, "parents": [23], "children": [20], "calls": ["dfs"], "function": "closedIsland", "code": "dfs(i, j)"}, "25": {"lineno": 34, "parents": [17], "children": [26], "function": "closedIsland", "code": "ans = 0"}, "26": {"lineno": 36, "parents": [25], "children": [27], "function": "closedIsland", "code": "__iv = iter(range(m))"}, "27": {"lineno": 36, "parents": [26, 30], "children": [35, 28], "calls": ["range"], "function": "closedIsland", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 36, "parents": [27], "children": [29], "function": "closedIsland", "code": "i = next(__iv)"}, "29": {"lineno": 37, "parents": [28], "children": [30], "function": "closedIsland", "code": "__iv = iter(range(n))"}, "30": {"lineno": 37, "parents": [32, 34, 29], "children": [27, 31], "calls": ["range"], "function": "closedIsland", "code": "_for: __iv.__length__hint__() > 0"}, "31": {"lineno": 37, "parents": [30], "children": [32], "function": "closedIsland", "code": "j = next(__iv)"}, "32": {"lineno": 38, "parents": [31], "children": [33, 30], "function": "closedIsland", "code": "_if: grid[i][j] == 0"}, "33": {"lineno": 39, "parents": [32], "children": [34], "calls": ["dfs"], "function": "closedIsland", "code": "dfs(i, j)"}, "34": {"lineno": 40, "parents": [33, 6], "children": [30], "function": "closedIsland", "code": "ans += 1"}, "35": {"lineno": 42, "parents": [27], "children": [2], "function": "closedIsland", "code": "return ans"}, "36": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1263, "task_title": "Minimum Moves to Move a Box to Their Target Location", "difficulty": 3, "func_name": "minPushBox", "description": "A storekeeper is a game in which the player pushes boxes around in a warehouse\ntrying to get them to target locations.\n\nThe game is represented by an `m x n` grid of characters `grid` where each\nelement is a wall, floor, or box.\n\nYour task is to move the box `'B'` to the target position `'T'` under the\nfollowing rules:\n\n* The character `'S'` represents the player. The player can move up, down, left, right in `grid` if it is a floor (empty cell).\n* The character `'.'` represents the floor which means a free cell to walk.\n* The character `'#'` represents the wall which means an obstacle (impossible to walk there).\n* There is only one box `'B'` and one target cell `'T'` in the `grid`.\n* The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a push.\n* The player cannot walk through the box.\n\nReturn the minimum number of pushes to move the box to the target. If there is\nno way to reach the target, return `-1`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\nfrom collections import deque\n\nclass Solution:\n  def minPushBox(self, grid: List[List[str]]) -> int:\n    for i in range(len(grid)):\n      for j in range(len(grid[0])):\n        if grid[i][j] == \"T\":\n          target = (i,j)\n        if grid[i][j] == \"B\":\n          box = (i,j)\n        if grid[i][j] == \"S\":\n          person = (i,j)\n\n    def valid(x,y):\n      return 0<=x<len(grid) and 0<=y<len(grid[0]) and grid[x][y]!='#'\n\n    def check(curr,dest,box):\n      que = deque([curr])\n      v = set()\n      while que:\n        pos = que.popleft()\n        if pos == dest: \n          return True\n        new_pos = [(pos[0]+1,pos[1]),(pos[0]-1,pos[1]),(pos[0],pos[1]+1),(pos[0],pos[1]-1)]\n        for x,y in new_pos:\n          if valid(x,y) and (x,y) not in v and (x,y)!=box:\n            v.add((x,y))\n            que.append((x,y))\n      return False\n\n    q = deque([(0,box,person)])\n    vis = {box+person}\n    while q :\n      dist, box, person = q.popleft()\n      if box == target:\n        return dist\n\n      b_coord = [(box[0]+1,box[1]),(box[0]-1,box[1]),(box[0],box[1]+1),(box[0],box[1]-1)]\n      p_coord = [(box[0]-1,box[1]),(box[0]+1,box[1]),(box[0],box[1]-1),(box[0],box[1]+1)]\n\n      for new_box,new_person in zip(b_coord,p_coord): \n        if valid(*new_box) and new_box+box not in vis:\n          if valid(*new_person) and check(person,new_person,box):\n            vis.add(new_box+box)\n            q.append((dist+1,new_box,box))\n\n    return -1\n", "blocks": [{"type": "if", "start": 44, "end": 45}, {"type": "if", "start": 16, "end": 17}, {"type": "if", "start": 18, "end": 19}, {"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 51, "end": 54}, {"type": "if", "start": 35, "end": 37}, {"type": "if", "start": 52, "end": 54}], "target_lines": [17, 19, 21, 32, 36, 37, 45, 52, 53, 54], "cfg": {"0": {"lineno": 0, "parents": [], "children": [50], "function": "", "code": "start"}, "1": {"lineno": 13, "parents": [], "children": [3], "function": "minPushBox", "code": "enter: minPushBox(self, grid)"}, "2": {"lineno": 13, "parents": [49, 39], "children": [], "function": "minPushBox", "code": "exit: minPushBox(self, grid)"}, "3": {"lineno": 14, "parents": [1], "children": [4], "function": "minPushBox", "code": "__iv = iter(range(len(grid)))"}, "4": {"lineno": 14, "parents": [3, 7], "children": [34, 5], "calls": ["len", "range"], "function": "minPushBox", "code": "_for: __iv.__length__hint__() > 0"}, "5": {"lineno": 14, "parents": [4], "children": [6], "function": "minPushBox", "code": "i = next(__iv)"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "minPushBox", "code": "__iv = iter(range(len(grid[0])))"}, "7": {"lineno": 15, "parents": [13, 6, 14], "children": [8, 4], "calls": ["len", "range"], "function": "minPushBox", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 15, "parents": [7], "children": [9], "function": "minPushBox", "code": "j = next(__iv)"}, "9": {"lineno": 16, "parents": [8], "children": [10, 11], "function": "minPushBox", "code": "_if: grid[i][j] == 'T'"}, "10": {"lineno": 17, "parents": [9], "children": [11], "function": "minPushBox", "code": "target = (i, j)"}, "11": {"lineno": 18, "parents": [9, 10], "children": [12, 13], "function": "minPushBox", "code": "_if: grid[i][j] == 'B'"}, "12": {"lineno": 19, "parents": [11], "children": [13], "function": "minPushBox", "code": "box = (i, j)"}, "13": {"lineno": 20, "parents": [11, 12], "children": [14, 7], "function": "minPushBox", "code": "_if: grid[i][j] == 'S'"}, "14": {"lineno": 21, "parents": [13], "children": [7], "function": "minPushBox", "code": "person = (i, j)"}, "15": {"lineno": 23, "parents": [], "children": [17], "function": "valid", "code": "enter: valid(x, y)"}, "16": {"lineno": 23, "parents": [17], "children": [], "function": "valid", "code": "exit: valid(x, y)"}, "17": {"lineno": 24, "parents": [15], "children": [16], "function": "valid", "code": "return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and (grid[x][y] != '#')"}, "18": {"lineno": 26, "parents": [], "children": [20], "function": "check", "code": "enter: check(curr, dest, box)"}, "19": {"lineno": 26, "parents": [25, 33], "children": [], "function": "check", "code": "exit: check(curr, dest, box)"}, "20": {"lineno": 27, "parents": [18], "children": [21], "calls": ["deque"], "function": "check", "code": "que = deque([curr])"}, "21": {"lineno": 28, "parents": [20], "children": [22], "calls": ["set"], "function": "check", "code": "v = set()"}, "22": {"lineno": 29, "parents": [28, 21], "children": [33, 23], "function": "check", "code": "_while: que"}, "23": {"lineno": 30, "parents": [22], "children": [24], "calls": ["popleft"], "function": "check", "code": "pos = que.popleft()"}, "24": {"lineno": 31, "parents": [23], "children": [25, 26], "function": "check", "code": "_if: pos == dest"}, "25": {"lineno": 32, "parents": [24], "children": [19], "function": "check", "code": "return True"}, "26": {"lineno": 33, "parents": [24], "children": [27], "function": "check", "code": "new_pos = [(pos[0] + 1, pos[1]), (pos[0] - 1, pos[1]), (pos[0], pos[1] + 1), (pos[0], pos[1] - 1)]"}, "27": {"lineno": 34, "parents": [26], "children": [28], "function": "check", "code": "__iv = iter(new_pos)"}, "28": {"lineno": 34, "parents": [32, 27, 30], "children": [29, 22], "function": "check", "code": "_for: __iv.__length__hint__() > 0"}, "29": {"lineno": 34, "parents": [28], "children": [30], "function": "check", "code": "x, y = next(__iv)"}, "30": {"lineno": 35, "parents": [29], "children": [28, 31], "function": "check", "code": "_if: valid(x, y) and (x, y) not in v and ((x, y) != box)"}, "31": {"lineno": 36, "parents": [30], "children": [32], "calls": ["add"], "function": "check", "code": "v.add((x, y))"}, "32": {"lineno": 37, "parents": [31], "children": [28], "calls": ["append"], "function": "check", "code": "que.append((x, y))"}, "33": {"lineno": 38, "parents": [22], "children": [19], "function": "check", "code": "return False"}, "34": {"lineno": 40, "parents": [4], "children": [35], "calls": ["deque"], "function": "minPushBox", "code": "q = deque([(0, box, person)])"}, "35": {"lineno": 41, "parents": [34], "children": [36], "function": "minPushBox", "code": "vis = {box + person}"}, "36": {"lineno": 42, "parents": [43, 35], "children": [49, 37], "function": "minPushBox", "code": "_while: q"}, "37": {"lineno": 43, "parents": [36], "children": [38], "calls": ["popleft"], "function": "minPushBox", "code": "dist, box, person = q.popleft()"}, "38": {"lineno": 44, "parents": [37], "children": [40, 39], "function": "minPushBox", "code": "_if: box == target"}, "39": {"lineno": 45, "parents": [38], "children": [2], "function": "minPushBox", "code": "return dist"}, "40": {"lineno": 47, "parents": [38], "children": [41], "function": "minPushBox", "code": "b_coord = [(box[0] + 1, box[1]), (box[0] - 1, box[1]), (box[0], box[1] + 1), (box[0], box[1] - 1)]"}, "41": {"lineno": 48, "parents": [40], "children": [42], "function": "minPushBox", "code": "p_coord = [(box[0] - 1, box[1]), (box[0] + 1, box[1]), (box[0], box[1] - 1), (box[0], box[1] + 1)]"}, "42": {"lineno": 50, "parents": [41], "children": [43], "function": "minPushBox", "code": "__iv = iter(zip(b_coord, p_coord))"}, "43": {"lineno": 50, "parents": [48, 42, 45, 46], "children": [44, 36], "calls": ["zip"], "function": "minPushBox", "code": "_for: __iv.__length__hint__() > 0"}, "44": {"lineno": 50, "parents": [43], "children": [45], "function": "minPushBox", "code": "new_box, new_person = next(__iv)"}, "45": {"lineno": 51, "parents": [44], "children": [43, 46], "function": "minPushBox", "code": "_if: valid(*new_box) and new_box + box not in vis"}, "46": {"lineno": 52, "parents": [45], "children": [43, 47], "function": "minPushBox", "code": "_if: valid(*new_person) and check(person, new_person, box)"}, "47": {"lineno": 53, "parents": [46], "children": [48], "calls": ["add"], "function": "minPushBox", "code": "vis.add(new_box + box)"}, "48": {"lineno": 54, "parents": [47], "children": [43], "calls": ["append"], "function": "minPushBox", "code": "q.append((dist + 1, new_box, box))"}, "49": {"lineno": 56, "parents": [36], "children": [2], "function": "minPushBox", "code": "return -1"}, "50": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1267, "task_title": "Count Servers that Communicate", "difficulty": 2, "func_name": "countServers", "description": "You are given a map of a server center, represented as a `m * n` integer\nmatrix `grid`, where 1 means that on that cell there is a server and 0 means\nthat it is no server. Two servers are said to communicate if they are on the\nsame row or on the same column.  \n\nReturn the number of servers that communicate with any other server.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def countServers(self, grid: List[List[int]]) -> int:\n    m = len(grid)\n    n = len(grid[0])\n    ans = 0\n    rows = [0] * m\n    cols = [0] * n\n\n    for i in range(m):\n      for j in range(n):\n        if grid[i][j] == 1:\n          rows[i] += 1\n          cols[j] += 1\n\n    for i in range(m):\n      for j in range(n):\n        if grid[i][j] == 1 and (rows[i] > 1 or cols[j] > 1):\n          ans += 1\n\n    return ans\n", "blocks": [{"type": "if", "start": 21, "end": 23}, {"type": "if", "start": 27, "end": 28}], "target_lines": [22, 23, 28], "cfg": {"0": {"lineno": 0, "parents": [], "children": [26], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "countServers", "code": "enter: countServers(self, grid)"}, "2": {"lineno": 12, "parents": [25], "children": [], "function": "countServers", "code": "exit: countServers(self, grid)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "countServers", "code": "m = len(grid)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "countServers", "code": "n = len(grid[0])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "countServers", "code": "ans = 0"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "countServers", "code": "rows = [0] * m"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "countServers", "code": "cols = [0] * n"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "countServers", "code": "__iv = iter(range(m))"}, "9": {"lineno": 19, "parents": [8, 12], "children": [17, 10], "calls": ["range"], "function": "countServers", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "countServers", "code": "i = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "countServers", "code": "__iv = iter(range(n))"}, "12": {"lineno": 20, "parents": [16, 11, 14], "children": [9, 13], "calls": ["range"], "function": "countServers", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 20, "parents": [12], "children": [14], "function": "countServers", "code": "j = next(__iv)"}, "14": {"lineno": 21, "parents": [13], "children": [12, 15], "function": "countServers", "code": "_if: grid[i][j] == 1"}, "15": {"lineno": 22, "parents": [14], "children": [16], "function": "countServers", "code": "rows[i] += 1"}, "16": {"lineno": 23, "parents": [15], "children": [12], "function": "countServers", "code": "cols[j] += 1"}, "17": {"lineno": 25, "parents": [9], "children": [18], "function": "countServers", "code": "__iv = iter(range(m))"}, "18": {"lineno": 25, "parents": [17, 21], "children": [25, 19], "calls": ["range"], "function": "countServers", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 25, "parents": [18], "children": [20], "function": "countServers", "code": "i = next(__iv)"}, "20": {"lineno": 26, "parents": [19], "children": [21], "function": "countServers", "code": "__iv = iter(range(n))"}, "21": {"lineno": 26, "parents": [24, 20, 23], "children": [18, 22], "calls": ["range"], "function": "countServers", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 26, "parents": [21], "children": [23], "function": "countServers", "code": "j = next(__iv)"}, "23": {"lineno": 27, "parents": [22], "children": [24, 21], "function": "countServers", "code": "_if: grid[i][j] == 1 and (rows[i] > 1 or cols[j] > 1)"}, "24": {"lineno": 28, "parents": [23], "children": [21], "function": "countServers", "code": "ans += 1"}, "25": {"lineno": 30, "parents": [18], "children": [2], "function": "countServers", "code": "return ans"}, "26": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1284, "task_title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix", "difficulty": 3, "func_name": "minFlips", "description": "Given a `m x n` binary matrix `mat`. In one step, you can choose one cell and\nflip it and all the four neighbors of it if they exist (Flip is changing `1`\nto `0` and `0` to `1`). A pair of cells are called neighbors if they share one\nedge.\n\nReturn the minimum number of steps required to convert `mat` to a zero matrix\nor `-1` if you cannot.\n\nA binary matrix is a matrix with all cells equal to `0` or `1` only.\n\nA zero matrix is a matrix with all cells equal to `0`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minFlips(self, mat: List[List[int]]) -> int:\n    m = len(mat)\n    n = len(mat[0])\n    hash = self._getHash(mat, m, n)\n    if hash == 0:\n      return 0\n\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    step = 0\n    q = collections.deque([hash])\n    seen = {hash}\n\n    while q:\n      step += 1\n      for _ in range(len(q)):\n        curr = q.popleft()\n        for i in range(m):\n          for j in range(n):\n            next = curr ^ 1 << (i * n + j)\n            for dx, dy in dirs:\n              x = i + dx\n              y = j + dy\n              if x < 0 or x == m or y < 0 or y == n:\n                continue\n              next ^= 1 << (x * n + y)\n            if next == 0:\n              return step\n            if next in seen:\n              continue\n            q.append(next)\n            seen.add(next)\n\n    return -1\n\n  def _getHash(self, mat: List[List[int]], m: int, n: int) -> int:\n    hash = 0\n    for i in range(m):\n      for j in range(n):\n        if mat[i][j]:\n          hash |= 1 << (i * n + j)\n    return hash\n", "blocks": [{"type": "if", "start": 16, "end": 17}, {"type": "if", "start": 50, "end": 51}, {"type": "if", "start": 37, "end": 38}, {"type": "if", "start": 39, "end": 40}, {"type": "if", "start": 34, "end": 35}], "target_lines": [17, 35, 38, 40, 51], "cfg": {"0": {"lineno": 0, "parents": [], "children": [52], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minFlips", "code": "enter: minFlips(self, mat)"}, "2": {"lineno": 12, "parents": [34, 39, 7], "children": [], "function": "minFlips", "code": "exit: minFlips(self, mat)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "minFlips", "code": "m = len(mat)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "minFlips", "code": "n = len(mat[0])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["_getHash"], "function": "minFlips", "code": "hash = self._getHash(mat, m, n)"}, "6": {"lineno": 16, "parents": [41, 5], "children": [8, 7], "function": "minFlips", "code": "_if: hash == 0"}, "7": {"lineno": 17, "parents": [6], "children": [2], "function": "minFlips", "code": "return 0"}, "8": {"lineno": 19, "parents": [6], "children": [9], "function": "minFlips", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "minFlips", "code": "step = 0"}, "10": {"lineno": 21, "parents": [9], "children": [11], "calls": ["deque"], "function": "minFlips", "code": "q = collections.deque([hash])"}, "11": {"lineno": 22, "parents": [10], "children": [12], "function": "minFlips", "code": "seen = {hash}"}, "12": {"lineno": 24, "parents": [11, 15], "children": [13, 39], "function": "minFlips", "code": "_while: q"}, "13": {"lineno": 25, "parents": [12], "children": [14], "function": "minFlips", "code": "step += 1"}, "14": {"lineno": 26, "parents": [13], "children": [15], "function": "minFlips", "code": "__iv = iter(range(len(q)))"}, "15": {"lineno": 26, "parents": [19, 14], "children": [16, 12], "calls": ["len", "range"], "function": "minFlips", "code": "_for: __iv.__length__hint__() > 0"}, "16": {"lineno": 26, "parents": [15], "children": [17], "function": "minFlips", "code": "_ = next(__iv)"}, "17": {"lineno": 27, "parents": [16], "children": [18], "calls": ["popleft"], "function": "minFlips", "code": "curr = q.popleft()"}, "18": {"lineno": 28, "parents": [17], "children": [19], "function": "minFlips", "code": "__iv = iter(range(m))"}, "19": {"lineno": 28, "parents": [18, 22], "children": [20, 15], "calls": ["range"], "function": "minFlips", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 28, "parents": [19], "children": [21], "function": "minFlips", "code": "i = next(__iv)"}, "21": {"lineno": 29, "parents": [20], "children": [22], "function": "minFlips", "code": "__iv = iter(range(n))"}, "22": {"lineno": 29, "parents": [21, 38], "children": [19, 23], "calls": ["range"], "function": "minFlips", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 29, "parents": [22], "children": [24], "function": "minFlips", "code": "j = next(__iv)"}, "24": {"lineno": 30, "parents": [23], "children": [25], "function": "minFlips", "code": "next = curr ^ 1 << i * n + j"}, "25": {"lineno": 31, "parents": [24], "children": [26], "function": "minFlips", "code": "__iv = iter(dirs)"}, "26": {"lineno": 31, "parents": [32, 25, 36, 31], "children": [33, 27], "function": "minFlips", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 31, "parents": [26], "children": [28], "function": "minFlips", "code": "dx, dy = next(__iv)"}, "28": {"lineno": 32, "parents": [27], "children": [29], "function": "minFlips", "code": "x = i + dx"}, "29": {"lineno": 33, "parents": [28], "children": [30], "function": "minFlips", "code": "y = j + dy"}, "30": {"lineno": 34, "parents": [29], "children": [32, 31], "function": "minFlips", "code": "_if: x < 0 or x == m or y < 0 or (y == n)"}, "31": {"lineno": 35, "parents": [30], "children": [26], "function": "minFlips", "code": "continue"}, "32": {"lineno": 36, "parents": [30], "children": [26], "function": "minFlips", "code": "next ^= 1 << x * n + y"}, "33": {"lineno": 37, "parents": [26], "children": [34, 35], "function": "minFlips", "code": "_if: next == 0"}, "34": {"lineno": 38, "parents": [33], "children": [2], "function": "minFlips", "code": "return step"}, "35": {"lineno": 39, "parents": [33], "children": [36, 37], "function": "minFlips", "code": "_if: next in seen"}, "36": {"lineno": 40, "parents": [35], "children": [26], "function": "minFlips", "code": "continue"}, "37": {"lineno": 41, "parents": [35], "children": [38], "calls": ["append"], "function": "minFlips", "code": "q.append(next)"}, "38": {"lineno": 42, "parents": [37], "children": [22], "calls": ["add"], "function": "minFlips", "code": "seen.add(next)"}, "39": {"lineno": 44, "parents": [12], "children": [2], "function": "minFlips", "code": "return -1"}, "40": {"lineno": 46, "parents": [5], "children": [42], "function": "_getHash", "code": "enter: _getHash(self, mat, m, n)"}, "41": {"lineno": 46, "parents": [51], "children": [], "function": "_getHash", "code": "exit: _getHash(self, mat, m, n)"}, "42": {"lineno": 47, "parents": [40], "children": [43], "function": "_getHash", "code": "hash = 0"}, "43": {"lineno": 48, "parents": [42], "children": [44], "function": "_getHash", "code": "__iv = iter(range(m))"}, "44": {"lineno": 48, "parents": [43, 47], "children": [51, 45], "calls": ["range"], "function": "_getHash", "code": "_for: __iv.__length__hint__() > 0"}, "45": {"lineno": 48, "parents": [44], "children": [46], "function": "_getHash", "code": "i = next(__iv)"}, "46": {"lineno": 49, "parents": [45], "children": [47], "function": "_getHash", "code": "__iv = iter(range(n))"}, "47": {"lineno": 49, "parents": [49, 50, 46], "children": [48, 44], "calls": ["range"], "function": "_getHash", "code": "_for: __iv.__length__hint__() > 0"}, "48": {"lineno": 49, "parents": [47], "children": [49], "function": "_getHash", "code": "j = next(__iv)"}, "49": {"lineno": 50, "parents": [48], "children": [50, 47], "function": "_getHash", "code": "_if: mat[i][j]"}, "50": {"lineno": 51, "parents": [49], "children": [47], "function": "_getHash", "code": "hash |= 1 << i * n + j"}, "51": {"lineno": 52, "parents": [44], "children": [41], "function": "_getHash", "code": "return hash"}, "52": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1293, "task_title": "Shortest Path in a Grid with Obstacles Elimination", "difficulty": 3, "func_name": "shortestPath", "description": "You are given an `m x n` integer matrix `grid` where each cell is either `0`\n(empty) or `1` (obstacle). You can move up, down, left, or right from and to\nan empty cell in one step.\n\nReturn the minimum number of steps to walk from the upper left corner `(0, 0)`\nto the lower right corner `(m - 1, n - 1)` given that you can eliminate at\nmost `k` obstacles. If it is not possible to find such walk return `-1`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def shortestPath(self, grid: List[List[int]], k: int) -> int:\n    m = len(grid)\n    n = len(grid[0])\n    if m == 1 and n == 1:\n      return 0\n\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    steps = 0\n    q = collections.deque([(0, 0, k)])\n    seen = {(0, 0, k)}\n\n    while q:\n      steps += 1\n      for _ in range(len(q)):\n        i, j, eliminate = q.popleft()\n        for l in range(4):\n          x = i + dirs[l][0]\n          y = j + dirs[l][1]\n          if x < 0 or x == m or y < 0 or y == n:\n            continue\n          if x == m - 1 and y == n - 1:\n            return steps\n          if grid[x][y] == 1 and eliminate == 0:\n            continue\n          newEliminate = eliminate - grid[x][y]\n          if (x, y, newEliminate) in seen:\n            continue\n          q.append((x, y, newEliminate))\n          seen.add((x, y, newEliminate))\n\n    return -1\n", "blocks": [{"type": "if", "start": 15, "end": 16}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 34, "end": 35}, {"type": "if", "start": 37, "end": 38}], "target_lines": [16, 31, 33, 35, 38], "cfg": {"0": {"lineno": 0, "parents": [], "children": [34], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "shortestPath", "code": "enter: shortestPath(self, grid, k)"}, "2": {"lineno": 12, "parents": [25, 6, 33], "children": [], "function": "shortestPath", "code": "exit: shortestPath(self, grid, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "shortestPath", "code": "m = len(grid)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "shortestPath", "code": "n = len(grid[0])"}, "5": {"lineno": 15, "parents": [4], "children": [6, 7], "function": "shortestPath", "code": "_if: m == 1 and n == 1"}, "6": {"lineno": 16, "parents": [5], "children": [2], "function": "shortestPath", "code": "return 0"}, "7": {"lineno": 18, "parents": [5], "children": [8], "function": "shortestPath", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "shortestPath", "code": "steps = 0"}, "9": {"lineno": 20, "parents": [8], "children": [10], "calls": ["deque"], "function": "shortestPath", "code": "q = collections.deque([(0, 0, k)])"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "shortestPath", "code": "seen = {(0, 0, k)}"}, "11": {"lineno": 23, "parents": [10, 14], "children": [33, 12], "function": "shortestPath", "code": "_while: q"}, "12": {"lineno": 24, "parents": [11], "children": [13], "function": "shortestPath", "code": "steps += 1"}, "13": {"lineno": 25, "parents": [12], "children": [14], "function": "shortestPath", "code": "__iv = iter(range(len(q)))"}, "14": {"lineno": 25, "parents": [18, 13], "children": [11, 15], "calls": ["len", "range"], "function": "shortestPath", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 25, "parents": [14], "children": [16], "function": "shortestPath", "code": "_ = next(__iv)"}, "16": {"lineno": 26, "parents": [15], "children": [17], "calls": ["popleft"], "function": "shortestPath", "code": "i, j, eliminate = q.popleft()"}, "17": {"lineno": 27, "parents": [16], "children": [18], "function": "shortestPath", "code": "__iv = iter(range(4))"}, "18": {"lineno": 27, "parents": [32, 17, 23, 27, 30], "children": [19, 14], "calls": ["range"], "function": "shortestPath", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 27, "parents": [18], "children": [20], "function": "shortestPath", "code": "l = next(__iv)"}, "20": {"lineno": 28, "parents": [19], "children": [21], "function": "shortestPath", "code": "x = i + dirs[l][0]"}, "21": {"lineno": 29, "parents": [20], "children": [22], "function": "shortestPath", "code": "y = j + dirs[l][1]"}, "22": {"lineno": 30, "parents": [21], "children": [24, 23], "function": "shortestPath", "code": "_if: x < 0 or x == m or y < 0 or (y == n)"}, "23": {"lineno": 31, "parents": [22], "children": [18], "function": "shortestPath", "code": "continue"}, "24": {"lineno": 32, "parents": [22], "children": [25, 26], "function": "shortestPath", "code": "_if: x == m - 1 and y == n - 1"}, "25": {"lineno": 33, "parents": [24], "children": [2], "function": "shortestPath", "code": "return steps"}, "26": {"lineno": 34, "parents": [24], "children": [27, 28], "function": "shortestPath", "code": "_if: grid[x][y] == 1 and eliminate == 0"}, "27": {"lineno": 35, "parents": [26], "children": [18], "function": "shortestPath", "code": "continue"}, "28": {"lineno": 36, "parents": [26], "children": [29], "function": "shortestPath", "code": "newEliminate = eliminate - grid[x][y]"}, "29": {"lineno": 37, "parents": [28], "children": [30, 31], "function": "shortestPath", "code": "_if: (x, y, newEliminate) in seen"}, "30": {"lineno": 38, "parents": [29], "children": [18], "function": "shortestPath", "code": "continue"}, "31": {"lineno": 39, "parents": [29], "children": [32], "calls": ["append"], "function": "shortestPath", "code": "q.append((x, y, newEliminate))"}, "32": {"lineno": 40, "parents": [31], "children": [18], "calls": ["add"], "function": "shortestPath", "code": "seen.add((x, y, newEliminate))"}, "33": {"lineno": 42, "parents": [11], "children": [2], "function": "shortestPath", "code": "return -1"}, "34": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1301, "task_title": "Number of Paths with Max Score", "difficulty": 3, "func_name": "pathsWithMaxScore", "description": "You are given a square `board` of characters. You can move on the board\nstarting at the bottom right square marked with the character `'S'`.\n\nYou need to reach the top left square marked with the character `'E'`. The\nrest of the squares are labeled either with a numeric character `1, 2, ..., 9`\nor with an obstacle `'X'`. In one move you can go up, left or up-left\n(diagonally) only if there is no obstacle there.\n\nReturn a list of two integers: the first integer is the maximum sum of numeric\ncharacters you can collect, and the second is the number of such paths that\nyou can take to get that maximum sum, taken modulo `10^9 + 7`.\n\nIn case there is no path, return `[0, 0]`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def pathsWithMaxScore(self, board: List[str]) -> List[int]:\n    kMod = 1_000_000_007\n    n = len(board)\n    dirs = ((0, 1), (1, 0), (1, 1))\n    dp = [[-1] * (n + 1) for _ in range(n + 1)]\n    count = [[0] * (n + 1) for _ in range(n + 1)]\n\n    dp[0][0] = 0\n    dp[n - 1][n - 1] = 0\n    count[n - 1][n - 1] = 1\n\n    for i in reversed(range(n)):\n      for j in reversed(range(n)):\n        if board[i][j] == 'S' or board[i][j] == 'X':\n          continue\n        for dx, dy in dirs:\n          x = i + dx\n          y = j + dy\n          if dp[i][j] < dp[x][y]:\n            dp[i][j] = dp[x][y]\n            count[i][j] = count[x][y]\n          elif dp[i][j] == dp[x][y]:\n            count[i][j] += count[x][y]\n            count[i][j] %= kMod\n\n        if dp[i][j] != -1 and board[i][j] != 'E':\n          dp[i][j] += int(board[i][j])\n          dp[i][j] %= kMod\n\n    return [dp[0][0], count[0][0]]\n", "blocks": [{"type": "if", "start": 25, "end": 26}, {"type": "if", "start": 37, "end": 39}, {"type": "if", "start": 30, "end": 32}, {"type": "if", "start": 33, "end": 35}], "target_lines": [26, 31, 32, 34, 35, 38, 39], "cfg": {"0": {"lineno": 0, "parents": [], "children": [34], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "pathsWithMaxScore", "code": "enter: pathsWithMaxScore(self, board)"}, "2": {"lineno": 12, "parents": [33], "children": [], "function": "pathsWithMaxScore", "code": "exit: pathsWithMaxScore(self, board)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "pathsWithMaxScore", "code": "kMod = 1000000007"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "pathsWithMaxScore", "code": "n = len(board)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "pathsWithMaxScore", "code": "dirs = ((0, 1), (1, 0), (1, 1))"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "pathsWithMaxScore", "code": "dp = [[-1] * (n + 1) for _ in range(n + 1)]"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "pathsWithMaxScore", "code": "count = [[0] * (n + 1) for _ in range(n + 1)]"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "pathsWithMaxScore", "code": "dp[0][0] = 0"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "pathsWithMaxScore", "code": "dp[n - 1][n - 1] = 0"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "pathsWithMaxScore", "code": "count[n - 1][n - 1] = 1"}, "11": {"lineno": 23, "parents": [10], "children": [12], "function": "pathsWithMaxScore", "code": "__iv = iter(reversed(range(n)))"}, "12": {"lineno": 23, "parents": [11, 15], "children": [33, 13], "calls": ["range", "reversed"], "function": "pathsWithMaxScore", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 23, "parents": [12], "children": [14], "function": "pathsWithMaxScore", "code": "i = next(__iv)"}, "14": {"lineno": 24, "parents": [13], "children": [15], "function": "pathsWithMaxScore", "code": "__iv = iter(reversed(range(n)))"}, "15": {"lineno": 24, "parents": [32, 18, 14, 30], "children": [16, 12], "calls": ["range", "reversed"], "function": "pathsWithMaxScore", "code": "_for: __iv.__length__hint__() > 0"}, "16": {"lineno": 24, "parents": [15], "children": [17], "function": "pathsWithMaxScore", "code": "j = next(__iv)"}, "17": {"lineno": 25, "parents": [16], "children": [18, 19], "function": "pathsWithMaxScore", "code": "_if: board[i][j] == 'S' or board[i][j] == 'X'"}, "18": {"lineno": 26, "parents": [17], "children": [15], "function": "pathsWithMaxScore", "code": "continue"}, "19": {"lineno": 27, "parents": [17], "children": [20], "function": "pathsWithMaxScore", "code": "__iv = iter(dirs)"}, "20": {"lineno": 27, "parents": [27, 26, 19, 29], "children": [21, 30], "function": "pathsWithMaxScore", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 27, "parents": [20], "children": [22], "function": "pathsWithMaxScore", "code": "dx, dy = next(__iv)"}, "22": {"lineno": 28, "parents": [21], "children": [23], "function": "pathsWithMaxScore", "code": "x = i + dx"}, "23": {"lineno": 29, "parents": [22], "children": [24], "function": "pathsWithMaxScore", "code": "y = j + dy"}, "24": {"lineno": 30, "parents": [23], "children": [25, 27], "function": "pathsWithMaxScore", "code": "_if: dp[i][j] < dp[x][y]"}, "25": {"lineno": 31, "parents": [24], "children": [26], "function": "pathsWithMaxScore", "code": "dp[i][j] = dp[x][y]"}, "26": {"lineno": 32, "parents": [25], "children": [20], "function": "pathsWithMaxScore", "code": "count[i][j] = count[x][y]"}, "27": {"lineno": 33, "parents": [24], "children": [28, 20], "function": "pathsWithMaxScore", "code": "_if: dp[i][j] == dp[x][y]"}, "28": {"lineno": 34, "parents": [27], "children": [29], "function": "pathsWithMaxScore", "code": "count[i][j] += count[x][y]"}, "29": {"lineno": 35, "parents": [28], "children": [20], "function": "pathsWithMaxScore", "code": "count[i][j] %= kMod"}, "30": {"lineno": 37, "parents": [20], "children": [15, 31], "function": "pathsWithMaxScore", "code": "_if: dp[i][j] != -1 and board[i][j] != 'E'"}, "31": {"lineno": 38, "parents": [30], "children": [32], "calls": ["int"], "function": "pathsWithMaxScore", "code": "dp[i][j] += int(board[i][j])"}, "32": {"lineno": 39, "parents": [31], "children": [15], "function": "pathsWithMaxScore", "code": "dp[i][j] %= kMod"}, "33": {"lineno": 41, "parents": [12], "children": [2], "function": "pathsWithMaxScore", "code": "return [dp[0][0], count[0][0]]"}, "34": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1334, "task_title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance", "difficulty": 2, "func_name": "findTheCity", "description": "There are `n` cities numbered from `0` to `n-1`. Given the array `edges` where\n`edges[i] = [fromi, toi, weighti]` represents a bidirectional and weighted\nedge between cities `fromi` and `toi`, and given the integer\n`distanceThreshold`.\n\nReturn the city with the smallest number of cities that are reachable through\nsome path and whose distance is at most `distanceThreshold`, If there are\nmultiple such cities, return the city with the greatest number.\n\nNotice that the distance of a path connecting cities i and j is equal to the\nsum of the edges' weights along that path.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:\n    ans = -1\n    minCitiesCount = n\n    dist = self._floydWarshall(n, edges, distanceThreshold)\n\n    for i in range(n):\n      citiesCount = sum(dist[i][j] <= distanceThreshold for j in range(n))\n      if citiesCount <= minCitiesCount:\n        ans = i\n        minCitiesCount = citiesCount\n\n    return ans\n\n  def _floydWarshall(self, n: int, edges: List[List[int]], distanceThreshold: int) -> List[List[int]]:\n    dist = [[distanceThreshold + 1] * n for _ in range(n)]\n\n    for i in range(n):\n      dist[i][i] = 0\n\n    for u, v, w in edges:\n      dist[u][v] = w\n      dist[v][u] = w\n\n    for k in range(n):\n      for i in range(n):\n        for j in range(n):\n          dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    return dist\n", "blocks": [{"type": "if", "start": 19, "end": 21}], "target_lines": [20, 21], "cfg": {"0": {"lineno": 0, "parents": [], "children": [37], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "findTheCity", "code": "enter: findTheCity(self, n, edges, distanceThreshold)"}, "2": {"lineno": 12, "parents": [13], "children": [], "function": "findTheCity", "code": "exit: findTheCity(self, n, edges, distanceThreshold)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "findTheCity", "code": "ans = -1"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "findTheCity", "code": "minCitiesCount = n"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["_floydWarshall"], "function": "findTheCity", "code": "dist = self._floydWarshall(n, edges, distanceThreshold)"}, "6": {"lineno": 17, "parents": [5, 15], "children": [7], "function": "findTheCity", "code": "__iv = iter(range(n))"}, "7": {"lineno": 17, "parents": [10, 12, 6], "children": [8, 13], "calls": ["range"], "function": "findTheCity", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "findTheCity", "code": "i = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10], "calls": ["sum"], "function": "findTheCity", "code": "citiesCount = sum((dist[i][j] <= distanceThreshold for j in range(n)))"}, "10": {"lineno": 19, "parents": [9], "children": [11, 7], "function": "findTheCity", "code": "_if: citiesCount <= minCitiesCount"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "findTheCity", "code": "ans = i"}, "12": {"lineno": 21, "parents": [11], "children": [7], "function": "findTheCity", "code": "minCitiesCount = citiesCount"}, "13": {"lineno": 23, "parents": [7], "children": [2], "function": "findTheCity", "code": "return ans"}, "14": {"lineno": 25, "parents": [5], "children": [16], "function": "_floydWarshall", "code": "enter: _floydWarshall(self, n, edges, distanceThreshold)"}, "15": {"lineno": 25, "parents": [36], "children": [], "function": "_floydWarshall", "code": "exit: _floydWarshall(self, n, edges, distanceThreshold)"}, "16": {"lineno": 26, "parents": [14], "children": [17], "function": "_floydWarshall", "code": "dist = [[distanceThreshold + 1] * n for _ in range(n)]"}, "17": {"lineno": 28, "parents": [16], "children": [18], "function": "_floydWarshall", "code": "__iv = iter(range(n))"}, "18": {"lineno": 28, "parents": [17, 20], "children": [19, 21], "calls": ["range"], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 28, "parents": [18], "children": [20], "function": "_floydWarshall", "code": "i = next(__iv)"}, "20": {"lineno": 29, "parents": [19], "children": [18], "function": "_floydWarshall", "code": "dist[i][i] = 0"}, "21": {"lineno": 31, "parents": [18], "children": [22], "function": "_floydWarshall", "code": "__iv = iter(edges)"}, "22": {"lineno": 31, "parents": [25, 21], "children": [26, 23], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 31, "parents": [22], "children": [24], "function": "_floydWarshall", "code": "u, v, w = next(__iv)"}, "24": {"lineno": 32, "parents": [23], "children": [25], "function": "_floydWarshall", "code": "dist[u][v] = w"}, "25": {"lineno": 33, "parents": [24], "children": [22], "function": "_floydWarshall", "code": "dist[v][u] = w"}, "26": {"lineno": 35, "parents": [22], "children": [27], "function": "_floydWarshall", "code": "__iv = iter(range(n))"}, "27": {"lineno": 35, "parents": [26, 30], "children": [28, 36], "calls": ["range"], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 35, "parents": [27], "children": [29], "function": "_floydWarshall", "code": "k = next(__iv)"}, "29": {"lineno": 36, "parents": [28], "children": [30], "function": "_floydWarshall", "code": "__iv = iter(range(n))"}, "30": {"lineno": 36, "parents": [33, 29], "children": [27, 31], "calls": ["range"], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "31": {"lineno": 36, "parents": [30], "children": [32], "function": "_floydWarshall", "code": "i = next(__iv)"}, "32": {"lineno": 37, "parents": [31], "children": [33], "function": "_floydWarshall", "code": "__iv = iter(range(n))"}, "33": {"lineno": 37, "parents": [32, 35], "children": [34, 30], "calls": ["range"], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "34": {"lineno": 37, "parents": [33], "children": [35], "function": "_floydWarshall", "code": "j = next(__iv)"}, "35": {"lineno": 38, "parents": [34], "children": [33], "calls": ["min"], "function": "_floydWarshall", "code": "dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])"}, "36": {"lineno": 40, "parents": [27], "children": [15], "function": "_floydWarshall", "code": "return dist"}, "37": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1340, "task_title": "Jump Game V", "difficulty": 3, "func_name": "maxJumps", "description": "Given an array of integers `arr` and an integer `d`. In one step you can jump\nfrom index `i` to index:\n\n* `i + x` where: `i + x < arr.length` and ` 0 < x <= d`.\n* `i - x` where: `i - x >= 0` and ` 0 < x <= d`.\n\nIn addition, you can only jump from index `i` to index `j` if `arr[i] >\narr[j]` and `arr[i] > arr[k]` for all indices `k` between `i` and `j` (More\nformally `min(i, j) < k < max(i, j)`).\n\nYou can choose any index of the array and start jumping. Return the maximum\nnumber of indices you can visit.\n\nNotice that you can not jump outside of the array at any time.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def maxJumps(self, arr: List[int], d: int) -> int:\n    n = len(arr)\n    dp = [1] * n\n    stack = []\n\n    for i in range(n + 1):\n      while stack and (i == n or arr[stack[-1]] < arr[i]):\n        indices = [stack.pop()]\n        while stack and arr[stack[-1]] == arr[indices[0]]:\n          indices.append(stack.pop())\n        for j in indices:\n          if i < n and i - j <= d:\n            dp[i] = max(dp[i], dp[j] + 1)\n          if stack and j - stack[-1] <= d:\n            dp[stack[-1]] = max(dp[stack[-1]], dp[j] + 1)\n      stack.append(i)\n\n    return max(dp)\n", "blocks": [{"type": "if", "start": 23, "end": 24}, {"type": "if", "start": 25, "end": 26}], "target_lines": [24, 26], "cfg": {"0": {"lineno": 0, "parents": [], "children": [22], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "maxJumps", "code": "enter: maxJumps(self, arr, d)"}, "2": {"lineno": 12, "parents": [21], "children": [], "function": "maxJumps", "code": "exit: maxJumps(self, arr, d)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "maxJumps", "code": "n = len(arr)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "maxJumps", "code": "dp = [1] * n"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "maxJumps", "code": "stack = []"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "maxJumps", "code": "__iv = iter(range(n + 1))"}, "7": {"lineno": 17, "parents": [20, 6], "children": [8, 21], "calls": ["range", "max"], "function": "maxJumps", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "maxJumps", "code": "i = next(__iv)"}, "9": {"lineno": 18, "parents": [8, 14], "children": [10, 20], "function": "maxJumps", "code": "_while: stack and (i == n or arr[stack[-1]] < arr[i])"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "maxJumps", "code": "indices = [stack.pop()]"}, "11": {"lineno": 20, "parents": [10, 12], "children": [12, 13], "function": "maxJumps", "code": "_while: stack and arr[stack[-1]] == arr[indices[0]]"}, "12": {"lineno": 21, "parents": [11], "children": [11], "calls": ["pop", "append"], "function": "maxJumps", "code": "indices.append(stack.pop())"}, "13": {"lineno": 22, "parents": [11], "children": [14], "function": "maxJumps", "code": "__iv = iter(indices)"}, "14": {"lineno": 22, "parents": [18, 19, 13], "children": [9, 15], "function": "maxJumps", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 22, "parents": [14], "children": [16], "function": "maxJumps", "code": "j = next(__iv)"}, "16": {"lineno": 23, "parents": [15], "children": [17, 18], "function": "maxJumps", "code": "_if: i < n and i - j <= d"}, "17": {"lineno": 24, "parents": [16], "children": [18], "calls": ["max"], "function": "maxJumps", "code": "dp[i] = max(dp[i], dp[j] + 1)"}, "18": {"lineno": 25, "parents": [16, 17], "children": [19, 14], "function": "maxJumps", "code": "_if: stack and j - stack[-1] <= d"}, "19": {"lineno": 26, "parents": [18], "children": [14], "calls": ["max"], "function": "maxJumps", "code": "dp[stack[-1]] = max(dp[stack[-1]], dp[j] + 1)"}, "20": {"lineno": 27, "parents": [9], "children": [7], "calls": ["append"], "function": "maxJumps", "code": "stack.append(i)"}, "21": {"lineno": 29, "parents": [7], "children": [2], "function": "maxJumps", "code": "return max(dp)"}, "22": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1345, "task_title": "Jump Game IV", "difficulty": 3, "func_name": "minJumps", "description": "Given an array of integers `arr`, you are initially positioned at the first\nindex of the array.\n\nIn one step you can jump from index `i` to index:\n\n* `i + 1` where: `i + 1 < arr.length`.\n* `i - 1` where: `i - 1 >= 0`.\n* `j` where: `arr[i] == arr[j]` and `i != j`.\n\nReturn the minimum number of steps to reach the last index of the array.\n\nNotice that you can not jump outside of the array at any time.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minJumps(self, arr: List[int]) -> int:\n    n = len(arr)\n    graph = collections.defaultdict(list)\n    step = 0\n    q = collections.deque([0])\n    seen = {0}\n\n    for i, a in enumerate(arr):\n      graph[a].append(i)\n\n    while q:\n      for _ in range(len(q)):\n        i = q.popleft()\n        if i == n - 1:\n          return step\n        seen.add(i)\n        u = arr[i]\n        if i + 1 < n:\n          graph[u].append(i + 1)\n        if i - 1 >= 0:\n          graph[u].append(i - 1)\n        for v in graph[u]:\n          if v in seen:\n            continue\n          q.append(v)\n        graph[u].clear()\n      step += 1\n", "blocks": [{"type": "if", "start": 25, "end": 26}, {"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 34, "end": 35}], "target_lines": [26, 30, 32, 35], "cfg": {"0": {"lineno": 0, "parents": [], "children": [33], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minJumps", "code": "enter: minJumps(self, arr)"}, "2": {"lineno": 12, "parents": [18, 12], "children": [], "function": "minJumps", "code": "exit: minJumps(self, arr)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "minJumps", "code": "n = len(arr)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["defaultdict"], "function": "minJumps", "code": "graph = collections.defaultdict(list)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "minJumps", "code": "step = 0"}, "6": {"lineno": 16, "parents": [5], "children": [7], "calls": ["deque"], "function": "minJumps", "code": "q = collections.deque([0])"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "minJumps", "code": "seen = {0}"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "minJumps", "code": "__iv = iter(enumerate(arr))"}, "9": {"lineno": 19, "parents": [8, 11], "children": [10, 12], "calls": ["enumerate"], "function": "minJumps", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "minJumps", "code": "i, a = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [9], "calls": ["append"], "function": "minJumps", "code": "graph[a].append(i)"}, "12": {"lineno": 22, "parents": [32, 9], "children": [2, 13], "function": "minJumps", "code": "_while: q"}, "13": {"lineno": 23, "parents": [12], "children": [14], "function": "minJumps", "code": "__iv = iter(range(len(q)))"}, "14": {"lineno": 23, "parents": [13, 31], "children": [32, 15], "calls": ["len", "range"], "function": "minJumps", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 23, "parents": [14], "children": [16], "function": "minJumps", "code": "_ = next(__iv)"}, "16": {"lineno": 24, "parents": [15], "children": [17], "calls": ["popleft"], "function": "minJumps", "code": "i = q.popleft()"}, "17": {"lineno": 25, "parents": [16], "children": [18, 19], "function": "minJumps", "code": "_if: i == n - 1"}, "18": {"lineno": 26, "parents": [17], "children": [2], "function": "minJumps", "code": "return step"}, "19": {"lineno": 27, "parents": [17], "children": [20], "calls": ["add"], "function": "minJumps", "code": "seen.add(i)"}, "20": {"lineno": 28, "parents": [19], "children": [21], "function": "minJumps", "code": "u = arr[i]"}, "21": {"lineno": 29, "parents": [20], "children": [22, 23], "function": "minJumps", "code": "_if: i + 1 < n"}, "22": {"lineno": 30, "parents": [21], "children": [23], "calls": ["append"], "function": "minJumps", "code": "graph[u].append(i + 1)"}, "23": {"lineno": 31, "parents": [21, 22], "children": [24, 25], "function": "minJumps", "code": "_if: i - 1 >= 0"}, "24": {"lineno": 32, "parents": [23], "children": [25], "calls": ["append"], "function": "minJumps", "code": "graph[u].append(i - 1)"}, "25": {"lineno": 33, "parents": [24, 23], "children": [26], "function": "minJumps", "code": "__iv = iter(graph[u])"}, "26": {"lineno": 33, "parents": [25, 29, 30], "children": [27, 31], "function": "minJumps", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 33, "parents": [26], "children": [28], "function": "minJumps", "code": "v = next(__iv)"}, "28": {"lineno": 34, "parents": [27], "children": [29, 30], "function": "minJumps", "code": "_if: v in seen"}, "29": {"lineno": 35, "parents": [28], "children": [26], "function": "minJumps", "code": "continue"}, "30": {"lineno": 36, "parents": [28], "children": [26], "calls": ["append"], "function": "minJumps", "code": "q.append(v)"}, "31": {"lineno": 37, "parents": [26], "children": [14], "calls": ["clear"], "function": "minJumps", "code": "graph[u].clear()"}, "32": {"lineno": 38, "parents": [14], "children": [12], "function": "minJumps", "code": "step += 1"}, "33": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1377, "task_title": "Frog Position After T Seconds", "difficulty": 3, "func_name": "frogPosition", "description": "Given an undirected tree consisting of `n` vertices numbered from `1` to `n`.\nA frog starts jumping from vertex 1. In one second, the frog jumps from its\ncurrent vertex to another unvisited vertex if they are directly connected. The\nfrog can not jump back to a visited vertex. In case the frog can jump to\nseveral vertices, it jumps randomly to one of them with the same probability.\nOtherwise, when the frog can not jump to any unvisited vertex, it jumps\nforever on the same vertex.\n\nThe edges of the undirected tree are given in the array `edges`, where\n`edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai`\nand `bi`.\n\nReturn the probability that after `t` seconds the frog is on the vertex\n`target`. Answers within `10-5` of the actual answer will be accepted.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def frogPosition(self, n: int, edges: List[List[int]], t: int, target: int) -> float:\n    tree = [[] for _ in range(n + 1)]\n    q = collections.deque([1])\n    seen = [False] * (n + 1)\n    prob = [0] * (n + 1)\n\n    prob[1] = 1\n    seen[1] = True\n\n    for u, v in edges:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    for _ in range(t):\n      for _ in range(len(q)):\n        a = q.popleft()\n        nChildren = sum(not seen[b] for b in tree[a])\n        for b in tree[a]:\n          if seen[b]:\n            continue\n          seen[b] = True\n          prob[b] = prob[a] / nChildren\n          q.append(b)\n        if nChildren > 0:\n          prob[a] = 0\n\n    return prob[target]\n", "blocks": [{"type": "if", "start": 35, "end": 36}, {"type": "if", "start": 30, "end": 31}], "target_lines": [31, 36], "cfg": {"0": {"lineno": 0, "parents": [], "children": [33], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "frogPosition", "code": "enter: frogPosition(self, n, edges, t, target)"}, "2": {"lineno": 12, "parents": [32], "children": [], "function": "frogPosition", "code": "exit: frogPosition(self, n, edges, t, target)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "frogPosition", "code": "tree = [[] for _ in range(n + 1)]"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["deque"], "function": "frogPosition", "code": "q = collections.deque([1])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "frogPosition", "code": "seen = [False] * (n + 1)"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "frogPosition", "code": "prob = [0] * (n + 1)"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "frogPosition", "code": "prob[1] = 1"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "frogPosition", "code": "seen[1] = True"}, "9": {"lineno": 21, "parents": [8], "children": [10], "function": "frogPosition", "code": "__iv = iter(edges)"}, "10": {"lineno": 21, "parents": [9, 13], "children": [11, 14], "function": "frogPosition", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 21, "parents": [10], "children": [12], "function": "frogPosition", "code": "u, v = next(__iv)"}, "12": {"lineno": 22, "parents": [11], "children": [13], "calls": ["append"], "function": "frogPosition", "code": "tree[u].append(v)"}, "13": {"lineno": 23, "parents": [12], "children": [10], "calls": ["append"], "function": "frogPosition", "code": "tree[v].append(u)"}, "14": {"lineno": 25, "parents": [10], "children": [15], "function": "frogPosition", "code": "__iv = iter(range(t))"}, "15": {"lineno": 25, "parents": [18, 14], "children": [16, 32], "calls": ["range"], "function": "frogPosition", "code": "_for: __iv.__length__hint__() > 0"}, "16": {"lineno": 25, "parents": [15], "children": [17], "function": "frogPosition", "code": "_ = next(__iv)"}, "17": {"lineno": 26, "parents": [16], "children": [18], "function": "frogPosition", "code": "__iv = iter(range(len(q)))"}, "18": {"lineno": 26, "parents": [17, 30, 31], "children": [19, 15], "calls": ["len", "range"], "function": "frogPosition", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 26, "parents": [18], "children": [20], "function": "frogPosition", "code": "_ = next(__iv)"}, "20": {"lineno": 27, "parents": [19], "children": [21], "calls": ["popleft"], "function": "frogPosition", "code": "a = q.popleft()"}, "21": {"lineno": 28, "parents": [20], "children": [22], "calls": ["sum"], "function": "frogPosition", "code": "nChildren = sum((not seen[b] for b in tree[a]))"}, "22": {"lineno": 29, "parents": [21], "children": [23], "function": "frogPosition", "code": "__iv = iter(tree[a])"}, "23": {"lineno": 29, "parents": [26, 29, 22], "children": [24, 30], "function": "frogPosition", "code": "_for: __iv.__length__hint__() > 0"}, "24": {"lineno": 29, "parents": [23], "children": [25], "function": "frogPosition", "code": "b = next(__iv)"}, "25": {"lineno": 30, "parents": [24], "children": [26, 27], "function": "frogPosition", "code": "_if: seen[b]"}, "26": {"lineno": 31, "parents": [25], "children": [23], "function": "frogPosition", "code": "continue"}, "27": {"lineno": 32, "parents": [25], "children": [28], "function": "frogPosition", "code": "seen[b] = True"}, "28": {"lineno": 33, "parents": [27], "children": [29], "function": "frogPosition", "code": "prob[b] = prob[a] / nChildren"}, "29": {"lineno": 34, "parents": [28], "children": [23], "calls": ["append"], "function": "frogPosition", "code": "q.append(b)"}, "30": {"lineno": 35, "parents": [23], "children": [18, 31], "function": "frogPosition", "code": "_if: nChildren > 0"}, "31": {"lineno": 36, "parents": [30], "children": [18], "function": "frogPosition", "code": "prob[a] = 0"}, "32": {"lineno": 38, "parents": [15], "children": [2], "function": "frogPosition", "code": "return prob[target]"}, "33": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1417, "task_title": "Reformat The String", "difficulty": 1, "func_name": "reformat", "description": "You are given an alphanumeric string `s`. (Alphanumeric string is a string\nconsisting of lowercase English letters and digits).\n\nYou have to find a permutation of the string where no letter is followed by\nanother letter and no digit is followed by another digit. That is, no two\nadjacent characters have the same type.\n\nReturn the reformatted string or return an empty string if it is impossible to\nreformat the string.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def reformat(self, s: str) -> str:\n    A=[]\n    for c in s:\n      if c.isalpha():\n        A.append(c)\n    B=[]\n    for c in s:\n      if c.isdigit():\n        B.append(c)\n\n    if len(A) < len(B):\n      A, B = B, A\n    if len(A) - len(B) > 1:\n      return ''\n\n    ans = []\n\n    for i in range(len(B)):\n      ans.append(A[i])\n      ans.append(B[i])\n\n    if len(A) == len(B) + 1:\n      ans.append(A[-1])\n    return ''.join(ans)\n", "blocks": [{"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 24, "end": 25}, {"type": "if", "start": 33, "end": 34}, {"type": "if", "start": 15, "end": 16}, {"type": "if", "start": 19, "end": 20}], "target_lines": [16, 20, 23, 25, 34], "cfg": {"0": {"lineno": 0, "parents": [], "children": [28], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "reformat", "code": "enter: reformat(self, s)"}, "2": {"lineno": 12, "parents": [18, 27], "children": [], "function": "reformat", "code": "exit: reformat(self, s)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "reformat", "code": "A = []"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "reformat", "code": "__iv = iter(s)"}, "5": {"lineno": 14, "parents": [8, 4, 7], "children": [9, 6], "function": "reformat", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 14, "parents": [5], "children": [7], "function": "reformat", "code": "c = next(__iv)"}, "7": {"lineno": 15, "parents": [6], "children": [8, 5], "calls": ["isalpha"], "function": "reformat", "code": "_if: c.isalpha()"}, "8": {"lineno": 16, "parents": [7], "children": [5], "calls": ["append"], "function": "reformat", "code": "A.append(c)"}, "9": {"lineno": 17, "parents": [5], "children": [10], "function": "reformat", "code": "B = []"}, "10": {"lineno": 18, "parents": [9], "children": [11], "function": "reformat", "code": "__iv = iter(s)"}, "11": {"lineno": 18, "parents": [10, 13, 14], "children": [12, 15], "function": "reformat", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 18, "parents": [11], "children": [13], "function": "reformat", "code": "c = next(__iv)"}, "13": {"lineno": 19, "parents": [12], "children": [11, 14], "calls": ["isdigit"], "function": "reformat", "code": "_if: c.isdigit()"}, "14": {"lineno": 20, "parents": [13], "children": [11], "calls": ["append"], "function": "reformat", "code": "B.append(c)"}, "15": {"lineno": 22, "parents": [11], "children": [16, 17], "calls": ["len", "len"], "function": "reformat", "code": "_if: len(A) < len(B)"}, "16": {"lineno": 23, "parents": [15], "children": [17], "function": "reformat", "code": "A, B = (B, A)"}, "17": {"lineno": 24, "parents": [16, 15], "children": [18, 19], "calls": ["len", "len"], "function": "reformat", "code": "_if: len(A) - len(B) > 1"}, "18": {"lineno": 25, "parents": [17], "children": [2], "function": "reformat", "code": "return ''"}, "19": {"lineno": 27, "parents": [17], "children": [20], "function": "reformat", "code": "ans = []"}, "20": {"lineno": 29, "parents": [19], "children": [21], "function": "reformat", "code": "__iv = iter(range(len(B)))"}, "21": {"lineno": 29, "parents": [24, 20], "children": [25, 22], "calls": ["len", "range"], "function": "reformat", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 29, "parents": [21], "children": [23], "function": "reformat", "code": "i = next(__iv)"}, "23": {"lineno": 30, "parents": [22], "children": [24], "calls": ["append"], "function": "reformat", "code": "ans.append(A[i])"}, "24": {"lineno": 31, "parents": [23], "children": [21], "calls": ["append"], "function": "reformat", "code": "ans.append(B[i])"}, "25": {"lineno": 33, "parents": [21], "children": [26, 27], "calls": ["len", "len"], "function": "reformat", "code": "_if: len(A) == len(B) + 1"}, "26": {"lineno": 34, "parents": [25], "children": [27], "calls": ["append", "join"], "function": "reformat", "code": "ans.append(A[-1])"}, "27": {"lineno": 35, "parents": [25, 26], "children": [2], "function": "reformat", "code": "return ''.join(ans)"}, "28": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1462, "task_title": "Course Schedule IV", "difficulty": 2, "func_name": "checkIfPrerequisite", "description": "There are a total of `numCourses` courses you have to take, labeled from `0`\nto `numCourses - 1`. You are given an array `prerequisites` where\n`prerequisites[i] = [ai, bi]` indicates that you must take course `ai` first\nif you want to take course `bi`.\n\n* For example, the pair `[0, 1]` indicates that you have to take course `0` before you can take course `1`.\n\nPrerequisites can also be indirect. If course `a` is a prerequisite of course\n`b`, and course `b` is a prerequisite of course `c`, then course `a` is a\nprerequisite of course `c`.\n\nYou are also given an array `queries` where `queries[j] = [uj, vj]`. For the\n`jth` query, you should answer whether course `uj` is a prerequisite of course\n`vj` or not.\n\nReturn a boolean array `answer`, where `answer[j]` is the answer to the `jth`\nquery.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def checkIfPrerequisite(self, numCourses: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:\n    graph = [[] for _ in range(numCourses)]\n    isPrerequisite = [[False] * numCourses for _ in range(numCourses)]\n\n    for u, v in prerequisites:\n      graph[u].append(v)\n\n    for i in range(numCourses):\n      self._dfs(graph, i, isPrerequisite[i])\n\n    return [isPrerequisite[u][v] for u, v in queries]\n\n  def _dfs(self, graph: List[List[int]], u: int, used: List[bool]) -> None:\n    for v in graph[u]:\n      if used[v]:\n        continue\n      used[v] = True\n      self._dfs(graph, v, used)\n", "blocks": [{"type": "if", "start": 26, "end": 27}], "target_lines": [27], "cfg": {"0": {"lineno": 0, "parents": [], "children": [23], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "checkIfPrerequisite", "code": "enter: checkIfPrerequisite(self, numCourses, prerequisites, queries)"}, "2": {"lineno": 12, "parents": [13], "children": [], "function": "checkIfPrerequisite", "code": "exit: checkIfPrerequisite(self, numCourses, prerequisites, queries)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "checkIfPrerequisite", "code": "graph = [[] for _ in range(numCourses)]"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "checkIfPrerequisite", "code": "isPrerequisite = [[False] * numCourses for _ in range(numCourses)]"}, "5": {"lineno": 16, "parents": [4], "children": [6], "function": "checkIfPrerequisite", "code": "__iv = iter(prerequisites)"}, "6": {"lineno": 16, "parents": [8, 5], "children": [9, 7], "function": "checkIfPrerequisite", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "checkIfPrerequisite", "code": "u, v = next(__iv)"}, "8": {"lineno": 17, "parents": [7], "children": [6], "calls": ["append"], "function": "checkIfPrerequisite", "code": "graph[u].append(v)"}, "9": {"lineno": 19, "parents": [6], "children": [10], "function": "checkIfPrerequisite", "code": "__iv = iter(range(numCourses))"}, "10": {"lineno": 19, "parents": [9, 12, 15], "children": [11, 13], "calls": ["range"], "function": "checkIfPrerequisite", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 19, "parents": [10], "children": [12], "function": "checkIfPrerequisite", "code": "i = next(__iv)"}, "12": {"lineno": 20, "parents": [11], "children": [10], "calls": ["_dfs"], "function": "checkIfPrerequisite", "code": "self._dfs(graph, i, isPrerequisite[i])"}, "13": {"lineno": 22, "parents": [10], "children": [2], "function": "checkIfPrerequisite", "code": "return [isPrerequisite[u][v] for u, v in queries]"}, "14": {"lineno": 24, "parents": [12, 22], "children": [16], "function": "_dfs", "code": "enter: _dfs(self, graph, u, used)"}, "15": {"lineno": 24, "parents": [17], "children": [], "function": "_dfs", "code": "exit: _dfs(self, graph, u, used)"}, "16": {"lineno": 25, "parents": [14], "children": [17], "function": "_dfs", "code": "__iv = iter(graph[u])"}, "17": {"lineno": 25, "parents": [16, 20, 22, 15], "children": [18, 15], "function": "_dfs", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 25, "parents": [17], "children": [19], "function": "_dfs", "code": "v = next(__iv)"}, "19": {"lineno": 26, "parents": [18], "children": [20, 21], "function": "_dfs", "code": "_if: used[v]"}, "20": {"lineno": 27, "parents": [19], "children": [17], "function": "_dfs", "code": "continue"}, "21": {"lineno": 28, "parents": [19], "children": [22], "function": "_dfs", "code": "used[v] = True"}, "22": {"lineno": 29, "parents": [21], "children": [17], "calls": ["_dfs"], "function": "_dfs", "code": "self._dfs(graph, v, used)"}, "23": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1489, "task_title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree", "difficulty": 3, "func_name": "findCriticalAndPseudoCriticalEdges", "description": "Given a weighted undirected connected graph with `n` vertices numbered from\n`0` to `n - 1`, and an array `edges` where `edges[i] = [ai, bi, weighti]`\nrepresents a bidirectional and weighted edge between nodes `ai` and `bi`. A\nminimum spanning tree (MST) is a subset of the graph's edges that connects all\nvertices without cycles and with the minimum possible total edge weight.\n\nFind all the critical and pseudo-critical edges in the given graph's minimum\nspanning tree (MST). An MST edge whose deletion from the graph would cause the\nMST weight to increase is called a critical edge. On the other hand, a pseudo-\ncritical edge is that which can appear in some MSTs but not all.\n\nNote that you can return the indices of the edges in any order.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator, Union\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def findCriticalAndPseudoCriticalEdges(self, n: int, edges: List[List[int]]) -> List[List[int]]:\n    criticalEdges = []\n    pseudoCriticalEdges = []\n\n    for i in range(len(edges)):\n      edges[i].append(i)\n\n    edges.sort(key=lambda x: x[2])\n\n    def getMSTWeight(firstEdge: List[int], deletedEdgeIndex: int) -> Union[int, float]:\n      mstWeight = 0\n      uf = UnionFind(n)\n\n      if firstEdge:\n        uf.unionByRank(firstEdge[0], firstEdge[1])\n        mstWeight += firstEdge[2]\n\n      for u, v, weight, index in edges:\n        if index == deletedEdgeIndex:\n          continue\n        if uf.find(u) == uf.find(v):\n          continue\n        uf.unionByRank(u, v)\n        mstWeight += weight\n\n      root = uf.find(0)\n      if any(uf.find(i) != root for i in range(n)):\n        return math.inf\n\n      return mstWeight\n\n    mstWeight = getMSTWeight([], -1)\n\n    for edge in edges:\n      index = edge[3]\n      if getMSTWeight([], index) > mstWeight:\n        criticalEdges.append(index)\n      elif getMSTWeight(edge, -1) == mstWeight:\n        pseudoCriticalEdges.append(index)\n\n    return [criticalEdges, pseudoCriticalEdges]\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 23, "end": 24}, {"type": "else", "start": 25, "end": 27}, {"type": "if", "start": 49, "end": 51}, {"type": "if", "start": 62, "end": 63}, {"type": "if", "start": 71, "end": 72}, {"type": "if", "start": 54, "end": 55}, {"type": "if", "start": 56, "end": 57}, {"type": "if", "start": 73, "end": 74}], "target_lines": [20, 22, 24, 26, 27, 31, 50, 51, 55, 57, 63, 72, 74], "cfg": {"0": {"lineno": 0, "parents": [], "children": [61], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.rank = [0] * n"}, "5": {"lineno": 16, "parents": [36, 45], "children": [7], "function": "unionByRank", "code": "enter: unionByRank(self, u, v)"}, "6": {"lineno": 16, "parents": [16, 10, 12, 14], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "calls": ["find"], "function": "unionByRank", "code": "i = self.find(u)"}, "8": {"lineno": 18, "parents": [18, 7], "children": [9], "calls": ["find"], "function": "unionByRank", "code": "j = self.find(v)"}, "9": {"lineno": 19, "parents": [8, 18], "children": [10, 11], "function": "unionByRank", "code": "_if: i == j"}, "10": {"lineno": 20, "parents": [9], "children": [6], "function": "unionByRank", "code": "return"}, "11": {"lineno": 21, "parents": [9], "children": [12, 13], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "12": {"lineno": 22, "parents": [11], "children": [6], "function": "unionByRank", "code": "self.id[i] = j"}, "13": {"lineno": 23, "parents": [11], "children": [14, 15], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "14": {"lineno": 24, "parents": [13], "children": [6], "function": "unionByRank", "code": "self.id[j] = i"}, "15": {"lineno": 26, "parents": [13], "children": [16], "function": "unionByRank", "code": "self.id[i] = j"}, "16": {"lineno": 27, "parents": [15], "children": [6], "function": "unionByRank", "code": "self.rank[j] += 1"}, "17": {"lineno": 29, "parents": [20, 7, 8, 43, 47], "children": [19], "function": "find", "code": "enter: find(self, u)"}, "18": {"lineno": 29, "parents": [21], "children": [], "function": "find", "code": "exit: find(self, u)"}, "19": {"lineno": 30, "parents": [17], "children": [20, 21], "function": "find", "code": "_if: self.id[u] != u"}, "20": {"lineno": 31, "parents": [19], "children": [21], "calls": ["find"], "function": "find", "code": "self.id[u] = self.find(self.id[u])"}, "21": {"lineno": 32, "parents": [18, 19, 20], "children": [18], "function": "find", "code": "return self.id[u]"}, "22": {"lineno": 36, "parents": [], "children": [24], "function": "findCriticalAndPseudoCriticalEdges", "code": "enter: findCriticalAndPseudoCriticalEdges(self, n, edges)"}, "23": {"lineno": 36, "parents": [60], "children": [], "function": "findCriticalAndPseudoCriticalEdges", "code": "exit: findCriticalAndPseudoCriticalEdges(self, n, edges)"}, "24": {"lineno": 37, "parents": [22], "children": [25], "function": "findCriticalAndPseudoCriticalEdges", "code": "criticalEdges = []"}, "25": {"lineno": 38, "parents": [24], "children": [26], "function": "findCriticalAndPseudoCriticalEdges", "code": "pseudoCriticalEdges = []"}, "26": {"lineno": 40, "parents": [25], "children": [27], "function": "findCriticalAndPseudoCriticalEdges", "code": "__iv = iter(range(len(edges)))"}, "27": {"lineno": 40, "parents": [26, 29], "children": [28, 30], "calls": ["len", "range"], "function": "findCriticalAndPseudoCriticalEdges", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 40, "parents": [27], "children": [29], "function": "findCriticalAndPseudoCriticalEdges", "code": "i = next(__iv)"}, "29": {"lineno": 41, "parents": [28], "children": [27], "calls": ["append"], "function": "findCriticalAndPseudoCriticalEdges", "code": "edges[i].append(i)"}, "30": {"lineno": 43, "parents": [27], "children": [51], "calls": ["sort"], "function": "findCriticalAndPseudoCriticalEdges", "code": "edges.sort(key=lambda x: x[2])"}, "31": {"lineno": 45, "parents": [56, 58, 51], "children": [33], "function": "getMSTWeight", "code": "enter: getMSTWeight(firstEdge, deletedEdgeIndex)"}, "32": {"lineno": 45, "parents": [49, 50], "children": [], "function": "getMSTWeight", "code": "exit: getMSTWeight(firstEdge, deletedEdgeIndex)"}, "33": {"lineno": 46, "parents": [31], "children": [34], "function": "getMSTWeight", "code": "mstWeight = 0"}, "34": {"lineno": 47, "parents": [33], "children": [35], "calls": ["UnionFind"], "function": "getMSTWeight", "code": "uf = UnionFind(n)"}, "35": {"lineno": 49, "parents": [34], "children": [36, 38], "function": "getMSTWeight", "code": "_if: firstEdge"}, "36": {"lineno": 50, "parents": [35], "children": [37], "calls": ["unionByRank"], "function": "getMSTWeight", "code": "uf.unionByRank(firstEdge[0], firstEdge[1])"}, "37": {"lineno": 51, "parents": [36, 6], "children": [38], "function": "getMSTWeight", "code": "mstWeight += firstEdge[2]"}, "38": {"lineno": 53, "parents": [35, 37], "children": [39], "function": "getMSTWeight", "code": "__iv = iter(edges)"}, "39": {"lineno": 53, "parents": [46, 42, 44, 38], "children": [40, 47], "function": "getMSTWeight", "code": "_for: __iv.__length__hint__() > 0"}, "40": {"lineno": 53, "parents": [39], "children": [41], "function": "getMSTWeight", "code": "u, v, weight, index = next(__iv)"}, "41": {"lineno": 54, "parents": [40], "children": [42, 43], "function": "getMSTWeight", "code": "_if: index == deletedEdgeIndex"}, "42": {"lineno": 55, "parents": [41], "children": [39], "function": "getMSTWeight", "code": "continue"}, "43": {"lineno": 56, "parents": [41], "children": [44, 45], "calls": ["find", "find"], "function": "getMSTWeight", "code": "_if: uf.find(u) == uf.find(v)"}, "44": {"lineno": 57, "parents": [18, 43], "children": [39], "function": "getMSTWeight", "code": "continue"}, "45": {"lineno": 58, "parents": [18, 43], "children": [46], "calls": ["unionByRank"], "function": "getMSTWeight", "code": "uf.unionByRank(u, v)"}, "46": {"lineno": 59, "parents": [45, 6], "children": [39], "function": "getMSTWeight", "code": "mstWeight += weight"}, "47": {"lineno": 61, "parents": [39], "children": [48], "calls": ["find"], "function": "getMSTWeight", "code": "root = uf.find(0)"}, "48": {"lineno": 62, "parents": [18, 47], "children": [49, 50], "calls": ["any"], "function": "getMSTWeight", "code": "_if: any((uf.find(i) != root for i in range(n)))"}, "49": {"lineno": 63, "parents": [48], "children": [32], "function": "getMSTWeight", "code": "return math.inf"}, "50": {"lineno": 65, "parents": [48], "children": [32], "function": "getMSTWeight", "code": "return mstWeight"}, "51": {"lineno": 67, "parents": [30], "children": [52], "calls": ["getMSTWeight"], "function": "findCriticalAndPseudoCriticalEdges", "code": "mstWeight = getMSTWeight([], -1)"}, "52": {"lineno": 69, "parents": [32, 51], "children": [53], "function": "findCriticalAndPseudoCriticalEdges", "code": "__iv = iter(edges)"}, "53": {"lineno": 69, "parents": [32, 52, 57, 58, 59], "children": [60, 54], "function": "findCriticalAndPseudoCriticalEdges", "code": "_for: __iv.__length__hint__() > 0"}, "54": {"lineno": 69, "parents": [53], "children": [55], "function": "findCriticalAndPseudoCriticalEdges", "code": "edge = next(__iv)"}, "55": {"lineno": 70, "parents": [54], "children": [56], "function": "findCriticalAndPseudoCriticalEdges", "code": "index = edge[3]"}, "56": {"lineno": 71, "parents": [55], "children": [57, 58], "calls": ["getMSTWeight"], "function": "findCriticalAndPseudoCriticalEdges", "code": "_if: getMSTWeight([], index) > mstWeight"}, "57": {"lineno": 72, "parents": [56, 32], "children": [53], "calls": ["append"], "function": "findCriticalAndPseudoCriticalEdges", "code": "criticalEdges.append(index)"}, "58": {"lineno": 73, "parents": [56, 32], "children": [59, 53], "calls": ["getMSTWeight"], "function": "findCriticalAndPseudoCriticalEdges", "code": "_if: getMSTWeight(edge, -1) == mstWeight"}, "59": {"lineno": 74, "parents": [32, 58], "children": [53], "calls": ["append"], "function": "findCriticalAndPseudoCriticalEdges", "code": "pseudoCriticalEdges.append(index)"}, "60": {"lineno": 76, "parents": [53], "children": [23], "function": "findCriticalAndPseudoCriticalEdges", "code": "return [criticalEdges, pseudoCriticalEdges]"}, "61": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1573, "task_title": "Number of Ways to Split a String", "difficulty": 2, "func_name": "numWays", "description": "Given a binary string `s`, you can split `s` into 3 non-empty strings `s1`,\n`s2`, and `s3` where `s1 + s2 + s3 = s`.\n\nReturn the number of ways `s` can be split such that the number of ones is the\nsame in `s1`, `s2`, and `s3`. Since the answer may be too large, return it\nmodulo `109 + 7`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def numWays(self, s: str) -> int:\n    kMod = 1_000_000_007\n    ones = s.count('1')\n    if ones % 3 != 0:\n      return 0\n    if ones == 0:\n      n = len(s)\n      return (n - 1) * (n - 2) // 2 % kMod\n\n    s1End = -1\n    s2Start = -1\n    s2End = -1\n    s3Start = -1\n    onesSoFar = 0\n\n    for i, c in enumerate(s):\n      if c == '1':\n        onesSoFar += 1\n      if s1End == -1 and onesSoFar == ones // 3:\n        s1End = i\n      elif s2Start == -1 and onesSoFar == ones // 3 + 1:\n        s2Start = i\n      if s2End == -1 and onesSoFar == ones // 3 * 2:\n        s2End = i\n      elif s3Start == -1 and onesSoFar == ones // 3 * 2 + 1:\n        s3Start = i\n\n    return (s2Start - s1End) * (s3Start - s2End) % kMod\n", "blocks": [{"type": "if", "start": 15, "end": 16}, {"type": "if", "start": 17, "end": 19}, {"type": "if", "start": 28, "end": 29}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 34, "end": 35}, {"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 36, "end": 37}], "target_lines": [16, 18, 19, 29, 31, 33, 35, 37], "cfg": {"0": {"lineno": 0, "parents": [], "children": [29], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "numWays", "code": "enter: numWays(self, s)"}, "2": {"lineno": 12, "parents": [9, 28, 6], "children": [], "function": "numWays", "code": "exit: numWays(self, s)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "numWays", "code": "kMod = 1000000007"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["count"], "function": "numWays", "code": "ones = s.count('1')"}, "5": {"lineno": 15, "parents": [4], "children": [6, 7], "function": "numWays", "code": "_if: ones % 3 != 0"}, "6": {"lineno": 16, "parents": [5], "children": [2], "function": "numWays", "code": "return 0"}, "7": {"lineno": 17, "parents": [5], "children": [8, 10], "function": "numWays", "code": "_if: ones == 0"}, "8": {"lineno": 18, "parents": [7], "children": [9], "calls": ["len"], "function": "numWays", "code": "n = len(s)"}, "9": {"lineno": 19, "parents": [8], "children": [2], "function": "numWays", "code": "return (n - 1) * (n - 2) // 2 % kMod"}, "10": {"lineno": 21, "parents": [7], "children": [11], "function": "numWays", "code": "s1End = -1"}, "11": {"lineno": 22, "parents": [10], "children": [12], "function": "numWays", "code": "s2Start = -1"}, "12": {"lineno": 23, "parents": [11], "children": [13], "function": "numWays", "code": "s2End = -1"}, "13": {"lineno": 24, "parents": [12], "children": [14], "function": "numWays", "code": "s3Start = -1"}, "14": {"lineno": 25, "parents": [13], "children": [15], "function": "numWays", "code": "onesSoFar = 0"}, "15": {"lineno": 27, "parents": [14], "children": [16], "function": "numWays", "code": "__iv = iter(enumerate(s))"}, "16": {"lineno": 27, "parents": [25, 26, 27, 15], "children": [17, 28], "calls": ["enumerate"], "function": "numWays", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 27, "parents": [16], "children": [18], "function": "numWays", "code": "i, c = next(__iv)"}, "18": {"lineno": 28, "parents": [17], "children": [19, 20], "function": "numWays", "code": "_if: c == '1'"}, "19": {"lineno": 29, "parents": [18], "children": [20], "function": "numWays", "code": "onesSoFar += 1"}, "20": {"lineno": 30, "parents": [18, 19], "children": [21, 22], "function": "numWays", "code": "_if: s1End == -1 and onesSoFar == ones // 3"}, "21": {"lineno": 31, "parents": [20], "children": [24], "function": "numWays", "code": "s1End = i"}, "22": {"lineno": 32, "parents": [20], "children": [24, 23], "function": "numWays", "code": "_if: s2Start == -1 and onesSoFar == ones // 3 + 1"}, "23": {"lineno": 33, "parents": [22], "children": [24], "function": "numWays", "code": "s2Start = i"}, "24": {"lineno": 34, "parents": [21, 22, 23], "children": [25, 26], "function": "numWays", "code": "_if: s2End == -1 and onesSoFar == ones // 3 * 2"}, "25": {"lineno": 35, "parents": [24], "children": [16], "function": "numWays", "code": "s2End = i"}, "26": {"lineno": 36, "parents": [24], "children": [16, 27], "function": "numWays", "code": "_if: s3Start == -1 and onesSoFar == ones // 3 * 2 + 1"}, "27": {"lineno": 37, "parents": [26], "children": [16], "function": "numWays", "code": "s3Start = i"}, "28": {"lineno": 39, "parents": [16], "children": [2], "function": "numWays", "code": "return (s2Start - s1End) * (s3Start - s2End) % kMod"}, "29": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1574, "task_title": "Shortest Subarray to be Removed to Make Array Sorted", "difficulty": 2, "func_name": "findLengthOfShortestSubarray", "description": "Given an integer array `arr`, remove a subarray (can be empty) from `arr` such\nthat the remaining elements in `arr` are non-decreasing.\n\nReturn the length of the shortest subarray to remove.\n\nA subarray is a contiguous subsequence of the array.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def findLengthOfShortestSubarray(self, arr: List[int]) -> int:\n    n = len(arr)\n    l = 0\n    r = n - 1\n\n    while l < n - 1 and arr[l + 1] >= arr[l]:\n      l += 1\n    while r > 0 and arr[r - 1] <= arr[r]:\n      r -= 1\n    ans = min(n - 1 - l, r)\n\n    i = l\n    j = n - 1\n    while i >= 0 and j >= r and j > i:\n      if arr[i] <= arr[j]:\n        j -= 1\n      else:\n        i -= 1\n      ans = min(ans, j - i)\n\n    return ans\n", "blocks": [{"type": "if", "start": 26, "end": 27}, {"type": "else", "start": 28, "end": 29}], "target_lines": [27, 29], "cfg": {"0": {"lineno": 0, "parents": [], "children": [19], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "findLengthOfShortestSubarray", "code": "enter: findLengthOfShortestSubarray(self, arr)"}, "2": {"lineno": 12, "parents": [18], "children": [], "function": "findLengthOfShortestSubarray", "code": "exit: findLengthOfShortestSubarray(self, arr)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "findLengthOfShortestSubarray", "code": "n = len(arr)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "findLengthOfShortestSubarray", "code": "l = 0"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "findLengthOfShortestSubarray", "code": "r = n - 1"}, "6": {"lineno": 17, "parents": [5, 7], "children": [8, 7], "function": "findLengthOfShortestSubarray", "code": "_while: l < n - 1 and arr[l + 1] >= arr[l]"}, "7": {"lineno": 18, "parents": [6], "children": [6], "function": "findLengthOfShortestSubarray", "code": "l += 1"}, "8": {"lineno": 19, "parents": [9, 6], "children": [9, 10], "function": "findLengthOfShortestSubarray", "code": "_while: r > 0 and arr[r - 1] <= arr[r]"}, "9": {"lineno": 20, "parents": [8], "children": [8], "function": "findLengthOfShortestSubarray", "code": "r -= 1"}, "10": {"lineno": 21, "parents": [8], "children": [11], "calls": ["min"], "function": "findLengthOfShortestSubarray", "code": "ans = min(n - 1 - l, r)"}, "11": {"lineno": 23, "parents": [10], "children": [12], "function": "findLengthOfShortestSubarray", "code": "i = l"}, "12": {"lineno": 24, "parents": [11], "children": [13], "function": "findLengthOfShortestSubarray", "code": "j = n - 1"}, "13": {"lineno": 25, "parents": [17, 12], "children": [18, 14], "function": "findLengthOfShortestSubarray", "code": "_while: i >= 0 and j >= r and (j > i)"}, "14": {"lineno": 26, "parents": [13], "children": [16, 15], "function": "findLengthOfShortestSubarray", "code": "_if: arr[i] <= arr[j]"}, "15": {"lineno": 27, "parents": [14], "children": [17], "function": "findLengthOfShortestSubarray", "code": "j -= 1"}, "16": {"lineno": 29, "parents": [14], "children": [17], "function": "findLengthOfShortestSubarray", "code": "i -= 1"}, "17": {"lineno": 30, "parents": [16, 15], "children": [13], "calls": ["min"], "function": "findLengthOfShortestSubarray", "code": "ans = min(ans, j - i)"}, "18": {"lineno": 32, "parents": [13], "children": [2], "function": "findLengthOfShortestSubarray", "code": "return ans"}, "19": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1579, "task_title": "Remove Max Number of Edges to Keep Graph Fully Traversable", "difficulty": 3, "func_name": "maxNumEdgesToRemove", "description": "Alice and Bob have an undirected graph of `n` nodes and three types of edges:\n\n* Type 1: Can be traversed by Alice only.\n* Type 2: Can be traversed by Bob only.\n* Type 3: Can be traversed by both Alice and Bob.\n\nGiven an array `edges` where `edges[i] = [typei, ui, vi]` represents a\nbidirectional edge of type `typei` between nodes `ui` and `vi`, find the\nmaximum number of edges you can remove so that after removing the edges, the\ngraph can still be fully traversed by both Alice and Bob. The graph is fully\ntraversed by Alice and Bob if starting from any node, they can reach all other\nnodes.\n\nReturn the maximum number of edges you can remove, or return `-1` if Alice and\nBob cannot fully traverse the graph.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.count = n\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> bool:\n    i = self._find(u)\n    j = self._find(v)\n    if i == j:\n      return False\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n    self.count -= 1\n    return True\n\n  def _find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self._find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def maxNumEdgesToRemove(self, n: int, edges: List[List[int]]) -> int:\n    alice = UnionFind(n)\n    bob = UnionFind(n)\n    requiredEdges = 0\n\n    for type, u, v in sorted(edges, reverse=True):\n      u -= 1\n      v -= 1\n      if type == 3:\n        if alice.unionByRank(u, v) | bob.unionByRank(u, v):\n          requiredEdges += 1\n      elif type == 2:\n        if bob.unionByRank(u, v):\n          requiredEdges += 1\n      else:\n        if alice.unionByRank(u, v):\n          requiredEdges += 1\n\n    if alice.count == 1 and bob.count == 1:\n        return len(edges) - requiredEdges\n    else:\n        return -1\n", "blocks": [{"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 33, "end": 34}, {"type": "if", "start": 57, "end": 58}, {"type": "else", "start": 59, "end": 60}, {"type": "if", "start": 24, "end": 25}, {"type": "else", "start": 26, "end": 28}, {"type": "if", "start": 47, "end": 49}, {"type": "if", "start": 48, "end": 49}, {"type": "if", "start": 50, "end": 53}, {"type": "if", "start": 51, "end": 52}, {"type": "if", "start": 54, "end": 55}], "target_lines": [21, 23, 25, 27, 28, 34, 48, 49, 51, 52, 53, 55, 58, 60], "cfg": {"0": {"lineno": 0, "parents": [], "children": [46], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [5], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "__init__", "code": "self.count = n"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "5": {"lineno": 15, "parents": [4], "children": [2], "function": "__init__", "code": "self.rank = [0] * n"}, "6": {"lineno": 17, "parents": [41, 36, 39], "children": [8], "function": "unionByRank", "code": "enter: unionByRank(self, u, v)"}, "7": {"lineno": 17, "parents": [19, 11], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v)"}, "8": {"lineno": 18, "parents": [6], "children": [9], "calls": ["_find"], "function": "unionByRank", "code": "i = self._find(u)"}, "9": {"lineno": 19, "parents": [8, 21], "children": [10], "calls": ["_find"], "function": "unionByRank", "code": "j = self._find(v)"}, "10": {"lineno": 20, "parents": [9, 21], "children": [11, 12], "function": "unionByRank", "code": "_if: i == j"}, "11": {"lineno": 21, "parents": [10], "children": [7], "function": "unionByRank", "code": "return False"}, "12": {"lineno": 22, "parents": [10], "children": [13, 14], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "13": {"lineno": 23, "parents": [12], "children": [18], "function": "unionByRank", "code": "self.id[i] = j"}, "14": {"lineno": 24, "parents": [12], "children": [16, 15], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "15": {"lineno": 25, "parents": [14], "children": [18], "function": "unionByRank", "code": "self.id[j] = i"}, "16": {"lineno": 27, "parents": [14], "children": [17], "function": "unionByRank", "code": "self.id[i] = j"}, "17": {"lineno": 28, "parents": [16], "children": [18], "function": "unionByRank", "code": "self.rank[j] += 1"}, "18": {"lineno": 29, "parents": [17, 13, 15], "children": [19], "function": "unionByRank", "code": "self.count -= 1"}, "19": {"lineno": 30, "parents": [18], "children": [7], "function": "unionByRank", "code": "return True"}, "20": {"lineno": 32, "parents": [8, 9, 23], "children": [22], "function": "_find", "code": "enter: _find(self, u)"}, "21": {"lineno": 32, "parents": [24], "children": [], "function": "_find", "code": "exit: _find(self, u)"}, "22": {"lineno": 33, "parents": [20], "children": [24, 23], "function": "_find", "code": "_if: self.id[u] != u"}, "23": {"lineno": 34, "parents": [22], "children": [24], "calls": ["_find"], "function": "_find", "code": "self.id[u] = self._find(self.id[u])"}, "24": {"lineno": 35, "parents": [21, 22, 23], "children": [21], "function": "_find", "code": "return self.id[u]"}, "25": {"lineno": 39, "parents": [], "children": [27], "function": "maxNumEdgesToRemove", "code": "enter: maxNumEdgesToRemove(self, n, edges)"}, "26": {"lineno": 39, "parents": [44, 45], "children": [], "function": "maxNumEdgesToRemove", "code": "exit: maxNumEdgesToRemove(self, n, edges)"}, "27": {"lineno": 40, "parents": [25], "children": [28], "calls": ["UnionFind"], "function": "maxNumEdgesToRemove", "code": "alice = UnionFind(n)"}, "28": {"lineno": 41, "parents": [27], "children": [29], "calls": ["UnionFind"], "function": "maxNumEdgesToRemove", "code": "bob = UnionFind(n)"}, "29": {"lineno": 42, "parents": [28], "children": [30], "function": "maxNumEdgesToRemove", "code": "requiredEdges = 0"}, "30": {"lineno": 44, "parents": [29], "children": [31], "function": "maxNumEdgesToRemove", "code": "__iv = iter(sorted(edges, reverse=True))"}, "31": {"lineno": 44, "parents": [36, 37, 39, 40, 41, 42, 7, 30], "children": [32, 43], "calls": ["sorted"], "function": "maxNumEdgesToRemove", "code": "_for: __iv.__length__hint__() > 0"}, "32": {"lineno": 44, "parents": [31], "children": [33], "function": "maxNumEdgesToRemove", "code": "type, u, v = next(__iv)"}, "33": {"lineno": 45, "parents": [32], "children": [34], "function": "maxNumEdgesToRemove", "code": "u -= 1"}, "34": {"lineno": 46, "parents": [33], "children": [35], "function": "maxNumEdgesToRemove", "code": "v -= 1"}, "35": {"lineno": 47, "parents": [34], "children": [36, 38], "function": "maxNumEdgesToRemove", "code": "_if: type == 3"}, "36": {"lineno": 48, "parents": [35], "children": [37, 31], "calls": ["unionByRank", "unionByRank"], "function": "maxNumEdgesToRemove", "code": "_if: alice.unionByRank(u, v) | bob.unionByRank(u, v)"}, "37": {"lineno": 49, "parents": [36, 7], "children": [31], "function": "maxNumEdgesToRemove", "code": "requiredEdges += 1"}, "38": {"lineno": 50, "parents": [35], "children": [41, 39], "function": "maxNumEdgesToRemove", "code": "_if: type == 2"}, "39": {"lineno": 51, "parents": [38], "children": [40, 31], "calls": ["unionByRank"], "function": "maxNumEdgesToRemove", "code": "_if: bob.unionByRank(u, v)"}, "40": {"lineno": 52, "parents": [7, 39], "children": [31], "function": "maxNumEdgesToRemove", "code": "requiredEdges += 1"}, "41": {"lineno": 54, "parents": [38], "children": [42, 31], "calls": ["unionByRank"], "function": "maxNumEdgesToRemove", "code": "_if: alice.unionByRank(u, v)"}, "42": {"lineno": 55, "parents": [41, 7], "children": [31], "function": "maxNumEdgesToRemove", "code": "requiredEdges += 1"}, "43": {"lineno": 57, "parents": [31], "children": [44, 45], "calls": ["len"], "function": "maxNumEdgesToRemove", "code": "_if: alice.count == 1 and bob.count == 1"}, "44": {"lineno": 58, "parents": [43], "children": [26], "function": "maxNumEdgesToRemove", "code": "return len(edges) - requiredEdges"}, "45": {"lineno": 60, "parents": [43], "children": [26], "function": "maxNumEdgesToRemove", "code": "return -1"}, "46": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1582, "task_title": "Special Positions in a Binary Matrix", "difficulty": 1, "func_name": "numSpecial", "description": "Given an `m x n` binary matrix `mat`, return the number of special positions\nin `mat`.\n\nA position `(i, j)` is called special if `mat[i][j] == 1` and all other\nelements in row `i` and column `j` are `0` (rows and columns are 0-indexed).\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def numSpecial(self, mat: List[List[int]]) -> int:\n    m = len(mat)\n    n = len(mat[0])\n    ans = 0\n    rowOnes = [0] * m\n    colOnes = [0] * n\n\n    for i in range(m):\n      for j in range(n):\n        if mat[i][j] == 1:\n          rowOnes[i] += 1\n          colOnes[j] += 1\n\n    for i in range(m):\n      for j in range(n):\n        if mat[i][j] == 1 and rowOnes[i] == 1 and colOnes[j] == 1:\n          ans += 1\n\n    return ans\n", "blocks": [{"type": "if", "start": 21, "end": 23}, {"type": "if", "start": 27, "end": 28}], "target_lines": [22, 23, 28], "cfg": {"0": {"lineno": 0, "parents": [], "children": [26], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "numSpecial", "code": "enter: numSpecial(self, mat)"}, "2": {"lineno": 12, "parents": [25], "children": [], "function": "numSpecial", "code": "exit: numSpecial(self, mat)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "numSpecial", "code": "m = len(mat)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "numSpecial", "code": "n = len(mat[0])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "numSpecial", "code": "ans = 0"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "numSpecial", "code": "rowOnes = [0] * m"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "numSpecial", "code": "colOnes = [0] * n"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "numSpecial", "code": "__iv = iter(range(m))"}, "9": {"lineno": 19, "parents": [8, 12], "children": [17, 10], "calls": ["range"], "function": "numSpecial", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "numSpecial", "code": "i = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "numSpecial", "code": "__iv = iter(range(n))"}, "12": {"lineno": 20, "parents": [16, 11, 14], "children": [9, 13], "calls": ["range"], "function": "numSpecial", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 20, "parents": [12], "children": [14], "function": "numSpecial", "code": "j = next(__iv)"}, "14": {"lineno": 21, "parents": [13], "children": [12, 15], "function": "numSpecial", "code": "_if: mat[i][j] == 1"}, "15": {"lineno": 22, "parents": [14], "children": [16], "function": "numSpecial", "code": "rowOnes[i] += 1"}, "16": {"lineno": 23, "parents": [15], "children": [12], "function": "numSpecial", "code": "colOnes[j] += 1"}, "17": {"lineno": 25, "parents": [9], "children": [18], "function": "numSpecial", "code": "__iv = iter(range(m))"}, "18": {"lineno": 25, "parents": [17, 21], "children": [25, 19], "calls": ["range"], "function": "numSpecial", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 25, "parents": [18], "children": [20], "function": "numSpecial", "code": "i = next(__iv)"}, "20": {"lineno": 26, "parents": [19], "children": [21], "function": "numSpecial", "code": "__iv = iter(range(n))"}, "21": {"lineno": 26, "parents": [24, 20, 23], "children": [18, 22], "calls": ["range"], "function": "numSpecial", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 26, "parents": [21], "children": [23], "function": "numSpecial", "code": "j = next(__iv)"}, "23": {"lineno": 27, "parents": [22], "children": [24, 21], "function": "numSpecial", "code": "_if: mat[i][j] == 1 and rowOnes[i] == 1 and (colOnes[j] == 1)"}, "24": {"lineno": 28, "parents": [23], "children": [21], "function": "numSpecial", "code": "ans += 1"}, "25": {"lineno": 30, "parents": [18], "children": [2], "function": "numSpecial", "code": "return ans"}, "26": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1583, "task_title": "Count Unhappy Friends", "difficulty": 2, "func_name": "unhappyFriends", "description": "You are given a list of `preferences` for `n` friends, where `n` is always\neven.\n\nFor each person `i`, `preferences[i]` contains a list of friends sorted in the\norder of preference. In other words, a friend earlier in the list is more\npreferred than a friend later in the list. Friends in each list are denoted by\nintegers from `0` to `n-1`.\n\nAll the friends are divided into pairs. The pairings are given in a list\n`pairs`, where `pairs[i] = [xi, yi]` denotes `xi` is paired with `yi` and `yi`\nis paired with `xi`.\n\nHowever, this pairing may cause some of the friends to be unhappy. A friend\n`x` is unhappy if `x` is paired with `y` and there exists a friend `u` who is\npaired with `v` but:\n\n* `x` prefers `u` over `y`, and\n* `u` prefers `x` over `v`.\n\nReturn the number of unhappy friends.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def unhappyFriends(self, n: int, preferences: List[List[int]], pairs: List[List[int]]) -> int:\n    ans = 0\n    matches = [0] * n\n    prefer = [{} for _ in range(n)]\n\n    for x, y in pairs:\n      matches[x] = y\n      matches[y] = x\n\n    for i in range(n):\n      for j in range(n - 1):\n        prefer[i][preferences[i][j]] = j\n\n    for x in range(n):\n      for u in prefer[x].keys():\n        y = matches[x]\n        v = matches[u]\n        if prefer[x][u] < prefer[x][y] and prefer[u][x] < prefer[u][v]:\n          ans += 1\n          break\n\n    return ans\n", "blocks": [{"type": "if", "start": 29, "end": 31}], "target_lines": [30, 31], "cfg": {"0": {"lineno": 0, "parents": [], "children": [30], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "unhappyFriends", "code": "enter: unhappyFriends(self, n, preferences, pairs)"}, "2": {"lineno": 12, "parents": [29], "children": [], "function": "unhappyFriends", "code": "exit: unhappyFriends(self, n, preferences, pairs)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "unhappyFriends", "code": "ans = 0"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "unhappyFriends", "code": "matches = [0] * n"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "unhappyFriends", "code": "prefer = [{} for _ in range(n)]"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "unhappyFriends", "code": "__iv = iter(pairs)"}, "7": {"lineno": 17, "parents": [10, 6], "children": [8, 11], "function": "unhappyFriends", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "unhappyFriends", "code": "x, y = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "unhappyFriends", "code": "matches[x] = y"}, "10": {"lineno": 19, "parents": [9], "children": [7], "function": "unhappyFriends", "code": "matches[y] = x"}, "11": {"lineno": 21, "parents": [7], "children": [12], "function": "unhappyFriends", "code": "__iv = iter(range(n))"}, "12": {"lineno": 21, "parents": [11, 15], "children": [18, 13], "calls": ["range"], "function": "unhappyFriends", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 21, "parents": [12], "children": [14], "function": "unhappyFriends", "code": "i = next(__iv)"}, "14": {"lineno": 22, "parents": [13], "children": [15], "function": "unhappyFriends", "code": "__iv = iter(range(n - 1))"}, "15": {"lineno": 22, "parents": [17, 14], "children": [16, 12], "calls": ["range"], "function": "unhappyFriends", "code": "_for: __iv.__length__hint__() > 0"}, "16": {"lineno": 22, "parents": [15], "children": [17], "function": "unhappyFriends", "code": "j = next(__iv)"}, "17": {"lineno": 23, "parents": [16], "children": [15], "function": "unhappyFriends", "code": "prefer[i][preferences[i][j]] = j"}, "18": {"lineno": 25, "parents": [12], "children": [19], "function": "unhappyFriends", "code": "__iv = iter(range(n))"}, "19": {"lineno": 25, "parents": [18, 28, 22], "children": [20, 29], "calls": ["range"], "function": "unhappyFriends", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 25, "parents": [19], "children": [21], "function": "unhappyFriends", "code": "x = next(__iv)"}, "21": {"lineno": 26, "parents": [20], "children": [22], "function": "unhappyFriends", "code": "__iv = iter(prefer[x].keys())"}, "22": {"lineno": 26, "parents": [26, 21], "children": [19, 23], "calls": ["keys"], "function": "unhappyFriends", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 26, "parents": [22], "children": [24], "function": "unhappyFriends", "code": "u = next(__iv)"}, "24": {"lineno": 27, "parents": [23], "children": [25], "function": "unhappyFriends", "code": "y = matches[x]"}, "25": {"lineno": 28, "parents": [24], "children": [26], "function": "unhappyFriends", "code": "v = matches[u]"}, "26": {"lineno": 29, "parents": [25], "children": [27, 22], "function": "unhappyFriends", "code": "_if: prefer[x][u] < prefer[x][y] and prefer[u][x] < prefer[u][v]"}, "27": {"lineno": 30, "parents": [26], "children": [28], "function": "unhappyFriends", "code": "ans += 1"}, "28": {"lineno": 31, "parents": [27], "children": [19], "function": "unhappyFriends", "code": "break"}, "29": {"lineno": 33, "parents": [19], "children": [2], "function": "unhappyFriends", "code": "return ans"}, "30": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1591, "task_title": "Strange Printer II", "difficulty": 3, "func_name": "isPrintable", "description": "There is a strange printer with the following two special requirements:\n\n* On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.\n* Once the printer has used a color for the above operation, the same color cannot be used again.\n\nYou are given a `m x n` matrix `targetGrid`, where `targetGrid[row][col]` is\nthe color in the position `(row, col)` of the grid.\n\nReturn `true` if it is possible to print the matrix `targetGrid`, otherwise,\nreturn `false`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nfrom enum import Enum\n\n\nclass State(Enum):\n  kInit = 0\n  kVisiting = 1\n  kVisited = 2\n\n\nclass Solution:\n  def isPrintable(self, targetGrid: List[List[int]]) -> bool:\n    kMaxColor = 60\n    m = len(targetGrid)\n    n = len(targetGrid[0])\n\n    graph = [set() for _ in range(kMaxColor + 1)]\n\n    for color in range(1, kMaxColor + 1):\n      minI = m\n      minJ = n\n      maxI = -1\n      maxJ = -1\n      for i in range(m):\n        for j in range(n):\n          if targetGrid[i][j] == color:\n            minI = min(minI, i)\n            minJ = min(minJ, j)\n            maxI = max(maxI, i)\n            maxJ = max(maxJ, j)\n\n      for i in range(minI, maxI + 1):\n        for j in range(minJ, maxJ + 1):\n          if targetGrid[i][j] != color:\n            graph[color].add(targetGrid[i][j])\n\n    states = [State.kInit] * (kMaxColor + 1)\n\n    def hasCycle(u: int) -> bool:\n      if states[u] == State.kVisiting:\n        return True\n      if states[u] == State.kVisited:\n        return False\n\n      states[u] = State.kVisiting\n      if any(hasCycle(v) for v in graph[u]):\n        return True\n      states[u] = State.kVisited\n\n      return False\n\n    for i in range(1, kMaxColor + 1):\n      if hasCycle(i):\n        return False\n    return True\n", "blocks": [{"type": "if", "start": 49, "end": 50}, {"type": "if", "start": 51, "end": 52}, {"type": "if", "start": 55, "end": 56}, {"type": "if", "start": 62, "end": 63}, {"type": "if", "start": 35, "end": 39}, {"type": "if", "start": 43, "end": 44}], "target_lines": [36, 37, 38, 39, 44, 50, 52, 56, 63], "cfg": {"0": {"lineno": 0, "parents": [], "children": [1], "function": "", "code": "start"}, "1": {"lineno": 15, "parents": [0], "children": [2], "function": "", "code": "kInit = 0"}, "2": {"lineno": 16, "parents": [1], "children": [3], "function": "", "code": "kVisiting = 1"}, "3": {"lineno": 17, "parents": [2], "children": [54], "function": "", "code": "kVisited = 2"}, "4": {"lineno": 21, "parents": [], "children": [6], "function": "isPrintable", "code": "enter: isPrintable(self, targetGrid)"}, "5": {"lineno": 21, "parents": [52, 53], "children": [], "function": "isPrintable", "code": "exit: isPrintable(self, targetGrid)"}, "6": {"lineno": 22, "parents": [4], "children": [7], "function": "isPrintable", "code": "kMaxColor = 60"}, "7": {"lineno": 23, "parents": [6], "children": [8], "calls": ["len"], "function": "isPrintable", "code": "m = len(targetGrid)"}, "8": {"lineno": 24, "parents": [7], "children": [9], "calls": ["len"], "function": "isPrintable", "code": "n = len(targetGrid[0])"}, "9": {"lineno": 26, "parents": [8], "children": [10], "function": "isPrintable", "code": "graph = [set() for _ in range(kMaxColor + 1)]"}, "10": {"lineno": 28, "parents": [9], "children": [11], "function": "isPrintable", "code": "__iv = iter(range(1, kMaxColor + 1))"}, "11": {"lineno": 28, "parents": [10, 29], "children": [12, 36], "calls": ["range"], "function": "isPrintable", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 28, "parents": [11], "children": [13], "function": "isPrintable", "code": "color = next(__iv)"}, "13": {"lineno": 29, "parents": [12], "children": [14], "function": "isPrintable", "code": "minI = m"}, "14": {"lineno": 30, "parents": [13], "children": [15], "function": "isPrintable", "code": "minJ = n"}, "15": {"lineno": 31, "parents": [14], "children": [16], "function": "isPrintable", "code": "maxI = -1"}, "16": {"lineno": 32, "parents": [15], "children": [17], "function": "isPrintable", "code": "maxJ = -1"}, "17": {"lineno": 33, "parents": [16], "children": [18], "function": "isPrintable", "code": "__iv = iter(range(m))"}, "18": {"lineno": 33, "parents": [17, 21], "children": [19, 28], "calls": ["range"], "function": "isPrintable", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 33, "parents": [18], "children": [20], "function": "isPrintable", "code": "i = next(__iv)"}, "20": {"lineno": 34, "parents": [19], "children": [21], "function": "isPrintable", "code": "__iv = iter(range(n))"}, "21": {"lineno": 34, "parents": [27, 20, 23], "children": [18, 22], "calls": ["range"], "function": "isPrintable", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 34, "parents": [21], "children": [23], "function": "isPrintable", "code": "j = next(__iv)"}, "23": {"lineno": 35, "parents": [22], "children": [24, 21], "function": "isPrintable", "code": "_if: targetGrid[i][j] == color"}, "24": {"lineno": 36, "parents": [23], "children": [25], "calls": ["min"], "function": "isPrintable", "code": "minI = min(minI, i)"}, "25": {"lineno": 37, "parents": [24], "children": [26], "calls": ["min"], "function": "isPrintable", "code": "minJ = min(minJ, j)"}, "26": {"lineno": 38, "parents": [25], "children": [27], "calls": ["max"], "function": "isPrintable", "code": "maxI = max(maxI, i)"}, "27": {"lineno": 39, "parents": [26], "children": [21], "calls": ["max"], "function": "isPrintable", "code": "maxJ = max(maxJ, j)"}, "28": {"lineno": 41, "parents": [18], "children": [29], "function": "isPrintable", "code": "__iv = iter(range(minI, maxI + 1))"}, "29": {"lineno": 41, "parents": [32, 28], "children": [11, 30], "calls": ["range"], "function": "isPrintable", "code": "_for: __iv.__length__hint__() > 0"}, "30": {"lineno": 41, "parents": [29], "children": [31], "function": "isPrintable", "code": "i = next(__iv)"}, "31": {"lineno": 42, "parents": [30], "children": [32], "function": "isPrintable", "code": "__iv = iter(range(minJ, maxJ + 1))"}, "32": {"lineno": 42, "parents": [34, 35, 31], "children": [33, 29], "calls": ["range"], "function": "isPrintable", "code": "_for: __iv.__length__hint__() > 0"}, "33": {"lineno": 42, "parents": [32], "children": [34], "function": "isPrintable", "code": "j = next(__iv)"}, "34": {"lineno": 43, "parents": [33], "children": [32, 35], "function": "isPrintable", "code": "_if: targetGrid[i][j] != color"}, "35": {"lineno": 44, "parents": [34], "children": [32], "calls": ["add"], "function": "isPrintable", "code": "graph[color].add(targetGrid[i][j])"}, "36": {"lineno": 46, "parents": [11], "children": [48], "function": "isPrintable", "code": "states = [State.kInit] * (kMaxColor + 1)"}, "37": {"lineno": 48, "parents": [51], "children": [39], "function": "hasCycle", "code": "enter: hasCycle(u)"}, "38": {"lineno": 48, "parents": [40, 42, 45, 47], "children": [], "function": "hasCycle", "code": "exit: hasCycle(u)"}, "39": {"lineno": 49, "parents": [37], "children": [40, 41], "function": "hasCycle", "code": "_if: states[u] == State.kVisiting"}, "40": {"lineno": 50, "parents": [39], "children": [38], "function": "hasCycle", "code": "return True"}, "41": {"lineno": 51, "parents": [39], "children": [42, 43], "function": "hasCycle", "code": "_if: states[u] == State.kVisited"}, "42": {"lineno": 52, "parents": [41], "children": [38], "function": "hasCycle", "code": "return False"}, "43": {"lineno": 54, "parents": [41], "children": [44], "function": "hasCycle", "code": "states[u] = State.kVisiting"}, "44": {"lineno": 55, "parents": [43], "children": [45, 46], "calls": ["any"], "function": "hasCycle", "code": "_if: any((hasCycle(v) for v in graph[u]))"}, "45": {"lineno": 56, "parents": [44], "children": [38], "function": "hasCycle", "code": "return True"}, "46": {"lineno": 57, "parents": [44], "children": [47], "function": "hasCycle", "code": "states[u] = State.kVisited"}, "47": {"lineno": 59, "parents": [46], "children": [38], "function": "hasCycle", "code": "return False"}, "48": {"lineno": 61, "parents": [36], "children": [49], "function": "isPrintable", "code": "__iv = iter(range(1, kMaxColor + 1))"}, "49": {"lineno": 61, "parents": [48, 51, 38], "children": [50, 53], "calls": ["range"], "function": "isPrintable", "code": "_for: __iv.__length__hint__() > 0"}, "50": {"lineno": 61, "parents": [49], "children": [51], "function": "isPrintable", "code": "i = next(__iv)"}, "51": {"lineno": 62, "parents": [50], "children": [49, 52], "calls": ["hasCycle"], "function": "isPrintable", "code": "_if: hasCycle(i)"}, "52": {"lineno": 63, "parents": [51, 38], "children": [5], "function": "isPrintable", "code": "return False"}, "53": {"lineno": 64, "parents": [49], "children": [5], "function": "isPrintable", "code": "return True"}, "54": {"lineno": 0, "parents": [3], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1604, "task_title": "Alert Using Same Key-Card Three or More Times in a One Hour Period", "difficulty": 2, "func_name": "alertNames", "description": "LeetCode company workers use key-cards to unlock office doors. Each time a\nworker uses their key-card, the security system saves the worker's name and\nthe time when it was used. The system emits an alert if any worker uses the\nkey-card three or more times in a one-hour period.\n\nYou are given a list of strings `keyName` and `keyTime` where `[keyName[i],\nkeyTime[i]]` corresponds to a person's name and the time when their key-card\nwas used in a single day.\n\nAccess times are given in the 24-hour time format \"HH:MM\", such as `\"23:51\"`\nand `\"09:49\"`.\n\nReturn a list of unique worker names who received an alert for frequent\nkeycard use. Sort the names in ascending order alphabetically.\n\nNotice that `\"10:00\"` \\- `\"11:00\"` is considered to be within a one-hour\nperiod, while `\"22:51\"` \\- `\"23:52\"` is not considered to be within a one-hour\nperiod.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def alertNames(self, keyName: List[str], keyTime: List[str]) -> List[str]:\n    nameToMinutes = collections.defaultdict(list)\n\n    for name, time in zip(keyName, keyTime):\n      minutes = self._getMinutes(time)\n      nameToMinutes[name].append(minutes)\n\n    res=[]\n    for name, minutes in nameToMinutes.items():\n      if self._hasAlert(minutes):\n        res.append(name)\n    return sorted(res)\n\n  def _hasAlert(self, minutes: List[int]) -> bool:\n    if len(minutes) > 70:\n      return True\n    minutes.sort()\n    for i in range(2, len(minutes)):\n      if minutes[i - 2] + 60 >= minutes[i]:\n        return True\n    return False\n\n  def _getMinutes(self, time: str) -> int:\n    h, m = map(int, time.split(':'))\n    return 60 * h + m\n", "blocks": [{"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 30, "end": 31}], "target_lines": [22, 27, 31], "cfg": {"0": {"lineno": 0, "parents": [], "children": [31], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "alertNames", "code": "enter: alertNames(self, keyName, keyTime)"}, "2": {"lineno": 12, "parents": [15], "children": [], "function": "alertNames", "code": "exit: alertNames(self, keyName, keyTime)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["defaultdict"], "function": "alertNames", "code": "nameToMinutes = collections.defaultdict(list)"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "alertNames", "code": "__iv = iter(zip(keyName, keyTime))"}, "5": {"lineno": 15, "parents": [8, 4], "children": [9, 6], "calls": ["zip"], "function": "alertNames", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "alertNames", "code": "name, time = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8], "calls": ["_getMinutes"], "function": "alertNames", "code": "minutes = self._getMinutes(time)"}, "8": {"lineno": 17, "parents": [28, 7], "children": [5], "calls": ["append"], "function": "alertNames", "code": "nameToMinutes[name].append(minutes)"}, "9": {"lineno": 19, "parents": [5], "children": [10], "function": "alertNames", "code": "res = []"}, "10": {"lineno": 20, "parents": [9], "children": [11], "function": "alertNames", "code": "__iv = iter(nameToMinutes.items())"}, "11": {"lineno": 20, "parents": [17, 10, 13, 14], "children": [12, 15], "calls": ["items", "sorted"], "function": "alertNames", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 20, "parents": [11], "children": [13], "function": "alertNames", "code": "name, minutes = next(__iv)"}, "13": {"lineno": 21, "parents": [12], "children": [11, 14], "calls": ["_hasAlert"], "function": "alertNames", "code": "_if: self._hasAlert(minutes)"}, "14": {"lineno": 22, "parents": [17, 13], "children": [11], "calls": ["append"], "function": "alertNames", "code": "res.append(name)"}, "15": {"lineno": 23, "parents": [11], "children": [2], "function": "alertNames", "code": "return sorted(res)"}, "16": {"lineno": 25, "parents": [13], "children": [18], "function": "_hasAlert", "code": "enter: _hasAlert(self, minutes)"}, "17": {"lineno": 25, "parents": [25, 26, 19], "children": [], "function": "_hasAlert", "code": "exit: _hasAlert(self, minutes)"}, "18": {"lineno": 26, "parents": [16], "children": [19, 20], "calls": ["len"], "function": "_hasAlert", "code": "_if: len(minutes) > 70"}, "19": {"lineno": 27, "parents": [18], "children": [17], "function": "_hasAlert", "code": "return True"}, "20": {"lineno": 28, "parents": [18], "children": [21], "calls": ["sort"], "function": "_hasAlert", "code": "minutes.sort()"}, "21": {"lineno": 29, "parents": [20], "children": [22], "function": "_hasAlert", "code": "__iv = iter(range(2, len(minutes)))"}, "22": {"lineno": 29, "parents": [24, 21], "children": [26, 23], "calls": ["len", "range"], "function": "_hasAlert", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 29, "parents": [22], "children": [24], "function": "_hasAlert", "code": "i = next(__iv)"}, "24": {"lineno": 30, "parents": [23], "children": [25, 22], "function": "_hasAlert", "code": "_if: minutes[i - 2] + 60 >= minutes[i]"}, "25": {"lineno": 31, "parents": [24], "children": [17], "function": "_hasAlert", "code": "return True"}, "26": {"lineno": 32, "parents": [22], "children": [17], "function": "_hasAlert", "code": "return False"}, "27": {"lineno": 34, "parents": [7], "children": [29], "function": "_getMinutes", "code": "enter: _getMinutes(self, time)"}, "28": {"lineno": 34, "parents": [30], "children": [], "function": "_getMinutes", "code": "exit: _getMinutes(self, time)"}, "29": {"lineno": 35, "parents": [27], "children": [30], "calls": ["split", "map"], "function": "_getMinutes", "code": "h, m = map(int, time.split(':'))"}, "30": {"lineno": 36, "parents": [29], "children": [28], "function": "_getMinutes", "code": "return 60 * h + m"}, "31": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1615, "task_title": "Maximal Network Rank", "difficulty": 2, "func_name": "maximalNetworkRank", "description": "There is an infrastructure of `n` cities with some number of `roads`\nconnecting these cities. Each `roads[i] = [ai, bi]` indicates that there is a\nbidirectional road between cities `ai` and `bi`.\n\nThe network rank of two different cities is defined as the total number of\ndirectly connected roads to either city. If a road is directly connected to\nboth cities, it is only counted once.\n\nThe maximal network rank of the infrastructure is the maximum network rank of\nall pairs of different cities.\n\nGiven the integer `n` and the array `roads`, return the maximal network rank\nof the entire infrastructure.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def maximalNetworkRank(self, n: int, roads: List[List[int]]) -> int:\n    degrees = [0] * n\n\n    for u, v in roads:\n      degrees[u] += 1\n      degrees[v] += 1\n\n    maxDegree1 = 0\n    maxDegree2 = 0\n    for degree in degrees:\n      if degree > maxDegree1:\n        maxDegree2 = maxDegree1\n        maxDegree1 = degree\n      elif degree > maxDegree2:\n        maxDegree2 = degree\n\n    countMaxDegree1 = 0\n    countMaxDegree2 = 0\n    for degree in degrees:\n      if degree == maxDegree1:\n        countMaxDegree1 += 1\n      elif degree == maxDegree2:\n        countMaxDegree2 += 1\n\n    if countMaxDegree1 == 1:\n      edgeCount = self._getEdgeCount(roads, degrees, maxDegree1, maxDegree2) + self._getEdgeCount(roads, degrees, maxDegree2, maxDegree1)\n      return maxDegree1 + maxDegree2 - (countMaxDegree2 == edgeCount)\n    else:\n      edgeCount = self._getEdgeCount(roads, degrees, maxDegree1, maxDegree1)\n      maxPossibleEdgeCount = countMaxDegree1 * (countMaxDegree1 - 1) // 2\n      return 2 * maxDegree1 - (maxPossibleEdgeCount == edgeCount)\n\n  def _getEdgeCount(self, roads: List[List[int]], degrees: List[int], degreeU: int, degreeV: int) -> int:\n    edgeCount = 0\n    for u, v in roads:\n      if degrees[u] == degreeU and degrees[v] == degreeV:\n        edgeCount += 1\n    return edgeCount\n", "blocks": [{"type": "if", "start": 36, "end": 38}, {"type": "else", "start": 39, "end": 42}, {"type": "if", "start": 22, "end": 24}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 47, "end": 48}, {"type": "if", "start": 25, "end": 26}, {"type": "if", "start": 33, "end": 34}], "target_lines": [23, 24, 26, 32, 34, 37, 38, 40, 41, 42, 48], "cfg": {"0": {"lineno": 0, "parents": [], "children": [43], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "maximalNetworkRank", "code": "enter: maximalNetworkRank(self, n, roads)"}, "2": {"lineno": 12, "parents": [33, 30], "children": [], "function": "maximalNetworkRank", "code": "exit: maximalNetworkRank(self, n, roads)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "maximalNetworkRank", "code": "degrees = [0] * n"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "maximalNetworkRank", "code": "__iv = iter(roads)"}, "5": {"lineno": 15, "parents": [8, 4], "children": [9, 6], "function": "maximalNetworkRank", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "maximalNetworkRank", "code": "u, v = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "maximalNetworkRank", "code": "degrees[u] += 1"}, "8": {"lineno": 17, "parents": [7], "children": [5], "function": "maximalNetworkRank", "code": "degrees[v] += 1"}, "9": {"lineno": 19, "parents": [5], "children": [10], "function": "maximalNetworkRank", "code": "maxDegree1 = 0"}, "10": {"lineno": 20, "parents": [9], "children": [11], "function": "maximalNetworkRank", "code": "maxDegree2 = 0"}, "11": {"lineno": 21, "parents": [10], "children": [12], "function": "maximalNetworkRank", "code": "__iv = iter(degrees)"}, "12": {"lineno": 21, "parents": [16, 17, 18, 11], "children": [19, 13], "function": "maximalNetworkRank", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 21, "parents": [12], "children": [14], "function": "maximalNetworkRank", "code": "degree = next(__iv)"}, "14": {"lineno": 22, "parents": [13], "children": [17, 15], "function": "maximalNetworkRank", "code": "_if: degree > maxDegree1"}, "15": {"lineno": 23, "parents": [14], "children": [16], "function": "maximalNetworkRank", "code": "maxDegree2 = maxDegree1"}, "16": {"lineno": 24, "parents": [15], "children": [12], "function": "maximalNetworkRank", "code": "maxDegree1 = degree"}, "17": {"lineno": 25, "parents": [14], "children": [18, 12], "function": "maximalNetworkRank", "code": "_if: degree > maxDegree2"}, "18": {"lineno": 26, "parents": [17], "children": [12], "function": "maximalNetworkRank", "code": "maxDegree2 = degree"}, "19": {"lineno": 28, "parents": [12], "children": [20], "function": "maximalNetworkRank", "code": "countMaxDegree1 = 0"}, "20": {"lineno": 29, "parents": [19], "children": [21], "function": "maximalNetworkRank", "code": "countMaxDegree2 = 0"}, "21": {"lineno": 30, "parents": [20], "children": [22], "function": "maximalNetworkRank", "code": "__iv = iter(degrees)"}, "22": {"lineno": 30, "parents": [25, 26, 27, 21], "children": [28, 23], "function": "maximalNetworkRank", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 30, "parents": [22], "children": [24], "function": "maximalNetworkRank", "code": "degree = next(__iv)"}, "24": {"lineno": 31, "parents": [23], "children": [25, 26], "function": "maximalNetworkRank", "code": "_if: degree == maxDegree1"}, "25": {"lineno": 32, "parents": [24], "children": [22], "function": "maximalNetworkRank", "code": "countMaxDegree1 += 1"}, "26": {"lineno": 33, "parents": [24], "children": [27, 22], "function": "maximalNetworkRank", "code": "_if: degree == maxDegree2"}, "27": {"lineno": 34, "parents": [26], "children": [22], "function": "maximalNetworkRank", "code": "countMaxDegree2 += 1"}, "28": {"lineno": 36, "parents": [22], "children": [29, 31], "function": "maximalNetworkRank", "code": "_if: countMaxDegree1 == 1"}, "29": {"lineno": 37, "parents": [28], "children": [30], "calls": ["_getEdgeCount", "_getEdgeCount"], "function": "maximalNetworkRank", "code": "edgeCount = self._getEdgeCount(roads, degrees, maxDegree1, maxDegree2) + self._getEdgeCount(roads, degrees, maxDegree2, maxDegree1)"}, "30": {"lineno": 38, "parents": [35, 29], "children": [2], "function": "maximalNetworkRank", "code": "return maxDegree1 + maxDegree2 - (countMaxDegree2 == edgeCount)"}, "31": {"lineno": 40, "parents": [28], "children": [32], "calls": ["_getEdgeCount"], "function": "maximalNetworkRank", "code": "edgeCount = self._getEdgeCount(roads, degrees, maxDegree1, maxDegree1)"}, "32": {"lineno": 41, "parents": [35, 31], "children": [33], "function": "maximalNetworkRank", "code": "maxPossibleEdgeCount = countMaxDegree1 * (countMaxDegree1 - 1) // 2"}, "33": {"lineno": 42, "parents": [32], "children": [2], "function": "maximalNetworkRank", "code": "return 2 * maxDegree1 - (maxPossibleEdgeCount == edgeCount)"}, "34": {"lineno": 44, "parents": [29, 31], "children": [36], "function": "_getEdgeCount", "code": "enter: _getEdgeCount(self, roads, degrees, degreeU, degreeV)"}, "35": {"lineno": 44, "parents": [42], "children": [], "function": "_getEdgeCount", "code": "exit: _getEdgeCount(self, roads, degrees, degreeU, degreeV)"}, "36": {"lineno": 45, "parents": [34], "children": [37], "function": "_getEdgeCount", "code": "edgeCount = 0"}, "37": {"lineno": 46, "parents": [36], "children": [38], "function": "_getEdgeCount", "code": "__iv = iter(roads)"}, "38": {"lineno": 46, "parents": [40, 41, 37], "children": [42, 39], "function": "_getEdgeCount", "code": "_for: __iv.__length__hint__() > 0"}, "39": {"lineno": 46, "parents": [38], "children": [40], "function": "_getEdgeCount", "code": "u, v = next(__iv)"}, "40": {"lineno": 47, "parents": [39], "children": [41, 38], "function": "_getEdgeCount", "code": "_if: degrees[u] == degreeU and degrees[v] == degreeV"}, "41": {"lineno": 48, "parents": [40], "children": [38], "function": "_getEdgeCount", "code": "edgeCount += 1"}, "42": {"lineno": 49, "parents": [38], "children": [35], "function": "_getEdgeCount", "code": "return edgeCount"}, "43": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1616, "task_title": "Split Two Strings to Make Palindrome", "difficulty": 2, "func_name": "checkPalindromeFormation", "description": "You are given two strings `a` and `b` of the same length. Choose an index and\nsplit both strings at the same index, splitting `a` into two strings:\n`aprefix` and `asuffix` where `a = aprefix + asuffix`, and splitting `b` into\ntwo strings: `bprefix` and `bsuffix` where `b = bprefix + bsuffix`. Check if\n`aprefix + bsuffix` or `bprefix + asuffix` forms a palindrome.\n\nWhen you split a string `s` into `sprefix` and `ssuffix`, either `ssuffix` or\n`sprefix` is allowed to be empty. For example, if `s = \"abc\"`, then `\"\" +\n\"abc\"`, `\"a\" + \"bc\"`, `\"ab\" + \"c\"` , and `\"abc\" + \"\"` are valid splits.\n\nReturn `true` if it is possible to form a palindrome string, otherwise return\n`false`.\n\nNotice that `x + y` denotes the concatenation of strings `x` and `y`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def checkPalindromeFormation(self, a: str, b: str) -> bool:\n    return self._check(a, b) or self._check(b, a)\n\n  def _check(self, a: str, b: str) -> bool:\n    i, j = 0, len(a) - 1\n    while i < j:\n      if a[i] != b[j]:\n        return self._isPalindrome(a, i, j) or self._isPalindrome(b, i, j)\n      i += 1\n      j -= 1\n    return True\n\n  def _isPalindrome(self, s: str, i: int, j: int) -> bool:\n    while i < j:\n      if s[i] != s[j]:\n        return False\n      i += 1\n      j -= 1\n    return True\n", "blocks": [{"type": "if", "start": 18, "end": 19}, {"type": "if", "start": 26, "end": 27}], "target_lines": [19, 27], "cfg": {"0": {"lineno": 0, "parents": [], "children": [21], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "checkPalindromeFormation", "code": "enter: checkPalindromeFormation(self, a, b)"}, "2": {"lineno": 12, "parents": [3], "children": [], "function": "checkPalindromeFormation", "code": "exit: checkPalindromeFormation(self, a, b)"}, "3": {"lineno": 13, "parents": [1], "children": [2], "function": "checkPalindromeFormation", "code": "return self._check(a, b) or self._check(b, a)"}, "4": {"lineno": 15, "parents": [], "children": [6], "function": "_check", "code": "enter: _check(self, a, b)"}, "5": {"lineno": 15, "parents": [9, 12], "children": [], "function": "_check", "code": "exit: _check(self, a, b)"}, "6": {"lineno": 16, "parents": [4], "children": [7], "function": "_check", "code": "i, j = (0, len(a) - 1)"}, "7": {"lineno": 17, "parents": [11, 6], "children": [8, 12], "function": "_check", "code": "_while: i < j"}, "8": {"lineno": 18, "parents": [7], "children": [9, 10], "function": "_check", "code": "_if: a[i] != b[j]"}, "9": {"lineno": 19, "parents": [8], "children": [5], "function": "_check", "code": "return self._isPalindrome(a, i, j) or self._isPalindrome(b, i, j)"}, "10": {"lineno": 20, "parents": [8], "children": [11], "function": "_check", "code": "i += 1"}, "11": {"lineno": 21, "parents": [10], "children": [7], "function": "_check", "code": "j -= 1"}, "12": {"lineno": 22, "parents": [7], "children": [5], "function": "_check", "code": "return True"}, "13": {"lineno": 24, "parents": [], "children": [15], "function": "_isPalindrome", "code": "enter: _isPalindrome(self, s, i, j)"}, "14": {"lineno": 24, "parents": [17, 20], "children": [], "function": "_isPalindrome", "code": "exit: _isPalindrome(self, s, i, j)"}, "15": {"lineno": 25, "parents": [19, 13], "children": [16, 20], "function": "_isPalindrome", "code": "_while: i < j"}, "16": {"lineno": 26, "parents": [15], "children": [17, 18], "function": "_isPalindrome", "code": "_if: s[i] != s[j]"}, "17": {"lineno": 27, "parents": [16], "children": [14], "function": "_isPalindrome", "code": "return False"}, "18": {"lineno": 28, "parents": [16], "children": [19], "function": "_isPalindrome", "code": "i += 1"}, "19": {"lineno": 29, "parents": [18], "children": [15], "function": "_isPalindrome", "code": "j -= 1"}, "20": {"lineno": 30, "parents": [15], "children": [14], "function": "_isPalindrome", "code": "return True"}, "21": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1617, "task_title": "Count Subtrees With Max Distance Between Cities", "difficulty": 3, "func_name": "countSubgraphsForEachDiameter", "description": "There are `n` cities numbered from `1` to `n`. You are given an array `edges`\nof size `n-1`, where `edges[i] = [ui, vi]` represents a bidirectional edge\nbetween cities `ui` and `vi`. There exists a unique path between each pair of\ncities. In other words, the cities form a tree.\n\nA subtree is a subset of cities where every city is reachable from every other\ncity in the subset, where the path between each pair passes through only the\ncities from the subset. Two subtrees are different if there is a city in one\nsubtree that is not present in the other.\n\nFor each `d` from `1` to `n-1`, find the number of subtrees in which the\nmaximum distance between any two cities in the subtree is equal to `d`.\n\nReturn an array of size `n-1` where the `dth` element (1-indexed) is the\nnumber of subtrees in which the maximum distance between any two cities is\nequal to `d`.\n\nNotice that the distance between the two cities is the number of edges in the\npath between them.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def countSubgraphsForEachDiameter(self, n: int, edges: List[List[int]]) -> List[int]:\n    maxMask = 1 << n\n    dist = self._floydWarshall(n, edges)\n    ans = [0] * (n - 1)\n\n    for mask in range(maxMask):\n      maxDist = self._getMaxDist(mask, dist, n)\n      if maxDist > 0:\n        ans[maxDist - 1] += 1\n\n    return ans\n\n  def _floydWarshall(self, n: int, edges: List[List[int]]) -> List[List[int]]:\n    dist = [[n] * n for _ in range(n)]\n\n    for i in range(n):\n      dist[i][i] = 0\n\n    for u, v in edges:\n      dist[u - 1][v - 1] = 1\n      dist[v - 1][u - 1] = 1\n\n    for k in range(n):\n      for i in range(n):\n        for j in range(n):\n          dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    return dist\n\n  def _getMaxDist(self, mask: int, dist: List[List[int]], n: int) -> int:\n    maxDist = 0\n    edgeCount = 0\n    cityCount = 0\n    for u in range(n):\n      if (mask >> u) & 1 == 0:\n        continue\n      cityCount += 1\n      for v in range(u + 1, n):\n        if (mask >> v) & 1 == 0:\n          continue\n        if dist[u][v] == 1:\n          edgeCount += 1\n        maxDist = max(maxDist, dist[u][v])\n\n    if edgeCount == cityCount - 1:\n      return maxDist\n    else:\n      return 0\n", "blocks": [{"type": "if", "start": 56, "end": 57}, {"type": "else", "start": 58, "end": 59}, {"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 46, "end": 47}, {"type": "if", "start": 50, "end": 51}, {"type": "if", "start": 52, "end": 53}], "target_lines": [20, 47, 51, 53, 57, 59], "cfg": {"0": {"lineno": 0, "parents": [], "children": [58], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "countSubgraphsForEachDiameter", "code": "enter: countSubgraphsForEachDiameter(self, n, edges)"}, "2": {"lineno": 12, "parents": [12], "children": [], "function": "countSubgraphsForEachDiameter", "code": "exit: countSubgraphsForEachDiameter(self, n, edges)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "countSubgraphsForEachDiameter", "code": "maxMask = 1 << n"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["_floydWarshall"], "function": "countSubgraphsForEachDiameter", "code": "dist = self._floydWarshall(n, edges)"}, "5": {"lineno": 15, "parents": [4, 14], "children": [6], "function": "countSubgraphsForEachDiameter", "code": "ans = [0] * (n - 1)"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "countSubgraphsForEachDiameter", "code": "__iv = iter(range(maxMask))"}, "7": {"lineno": 17, "parents": [10, 11, 6], "children": [8, 12], "calls": ["range"], "function": "countSubgraphsForEachDiameter", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "countSubgraphsForEachDiameter", "code": "mask = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10], "calls": ["_getMaxDist"], "function": "countSubgraphsForEachDiameter", "code": "maxDist = self._getMaxDist(mask, dist, n)"}, "10": {"lineno": 19, "parents": [9, 37], "children": [11, 7], "function": "countSubgraphsForEachDiameter", "code": "_if: maxDist > 0"}, "11": {"lineno": 20, "parents": [10], "children": [7], "function": "countSubgraphsForEachDiameter", "code": "ans[maxDist - 1] += 1"}, "12": {"lineno": 22, "parents": [7], "children": [2], "function": "countSubgraphsForEachDiameter", "code": "return ans"}, "13": {"lineno": 24, "parents": [4], "children": [15], "function": "_floydWarshall", "code": "enter: _floydWarshall(self, n, edges)"}, "14": {"lineno": 24, "parents": [35], "children": [], "function": "_floydWarshall", "code": "exit: _floydWarshall(self, n, edges)"}, "15": {"lineno": 25, "parents": [13], "children": [16], "function": "_floydWarshall", "code": "dist = [[n] * n for _ in range(n)]"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "_floydWarshall", "code": "__iv = iter(range(n))"}, "17": {"lineno": 27, "parents": [16, 19], "children": [18, 20], "calls": ["range"], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "_floydWarshall", "code": "i = next(__iv)"}, "19": {"lineno": 28, "parents": [18], "children": [17], "function": "_floydWarshall", "code": "dist[i][i] = 0"}, "20": {"lineno": 30, "parents": [17], "children": [21], "function": "_floydWarshall", "code": "__iv = iter(edges)"}, "21": {"lineno": 30, "parents": [24, 20], "children": [25, 22], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 30, "parents": [21], "children": [23], "function": "_floydWarshall", "code": "u, v = next(__iv)"}, "23": {"lineno": 31, "parents": [22], "children": [24], "function": "_floydWarshall", "code": "dist[u - 1][v - 1] = 1"}, "24": {"lineno": 32, "parents": [23], "children": [21], "function": "_floydWarshall", "code": "dist[v - 1][u - 1] = 1"}, "25": {"lineno": 34, "parents": [21], "children": [26], "function": "_floydWarshall", "code": "__iv = iter(range(n))"}, "26": {"lineno": 34, "parents": [25, 29], "children": [35, 27], "calls": ["range"], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 34, "parents": [26], "children": [28], "function": "_floydWarshall", "code": "k = next(__iv)"}, "28": {"lineno": 35, "parents": [27], "children": [29], "function": "_floydWarshall", "code": "__iv = iter(range(n))"}, "29": {"lineno": 35, "parents": [32, 28], "children": [26, 30], "calls": ["range"], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "30": {"lineno": 35, "parents": [29], "children": [31], "function": "_floydWarshall", "code": "i = next(__iv)"}, "31": {"lineno": 36, "parents": [30], "children": [32], "function": "_floydWarshall", "code": "__iv = iter(range(n))"}, "32": {"lineno": 36, "parents": [34, 31], "children": [33, 29], "calls": ["range"], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "33": {"lineno": 36, "parents": [32], "children": [34], "function": "_floydWarshall", "code": "j = next(__iv)"}, "34": {"lineno": 37, "parents": [33], "children": [32], "calls": ["min"], "function": "_floydWarshall", "code": "dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])"}, "35": {"lineno": 39, "parents": [26], "children": [14], "function": "_floydWarshall", "code": "return dist"}, "36": {"lineno": 41, "parents": [9], "children": [38], "function": "_getMaxDist", "code": "enter: _getMaxDist(self, mask, dist, n)"}, "37": {"lineno": 41, "parents": [56, 57], "children": [], "function": "_getMaxDist", "code": "exit: _getMaxDist(self, mask, dist, n)"}, "38": {"lineno": 42, "parents": [36], "children": [39], "function": "_getMaxDist", "code": "maxDist = 0"}, "39": {"lineno": 43, "parents": [38], "children": [40], "function": "_getMaxDist", "code": "edgeCount = 0"}, "40": {"lineno": 44, "parents": [39], "children": [41], "function": "_getMaxDist", "code": "cityCount = 0"}, "41": {"lineno": 45, "parents": [40], "children": [42], "function": "_getMaxDist", "code": "__iv = iter(range(n))"}, "42": {"lineno": 45, "parents": [48, 41, 45], "children": [43, 55], "calls": ["range"], "function": "_getMaxDist", "code": "_for: __iv.__length__hint__() > 0"}, "43": {"lineno": 45, "parents": [42], "children": [44], "function": "_getMaxDist", "code": "u = next(__iv)"}, "44": {"lineno": 46, "parents": [43], "children": [45, 46], "function": "_getMaxDist", "code": "_if: mask >> u & 1 == 0"}, "45": {"lineno": 47, "parents": [44], "children": [42], "function": "_getMaxDist", "code": "continue"}, "46": {"lineno": 48, "parents": [44], "children": [47], "function": "_getMaxDist", "code": "cityCount += 1"}, "47": {"lineno": 49, "parents": [46], "children": [48], "function": "_getMaxDist", "code": "__iv = iter(range(u + 1, n))"}, "48": {"lineno": 49, "parents": [51, 54, 47], "children": [49, 42], "calls": ["range"], "function": "_getMaxDist", "code": "_for: __iv.__length__hint__() > 0"}, "49": {"lineno": 49, "parents": [48], "children": [50], "function": "_getMaxDist", "code": "v = next(__iv)"}, "50": {"lineno": 50, "parents": [49], "children": [51, 52], "function": "_getMaxDist", "code": "_if: mask >> v & 1 == 0"}, "51": {"lineno": 51, "parents": [50], "children": [48], "function": "_getMaxDist", "code": "continue"}, "52": {"lineno": 52, "parents": [50], "children": [53, 54], "function": "_getMaxDist", "code": "_if: dist[u][v] == 1"}, "53": {"lineno": 53, "parents": [52], "children": [54], "function": "_getMaxDist", "code": "edgeCount += 1"}, "54": {"lineno": 54, "parents": [52, 53], "children": [48], "calls": ["max"], "function": "_getMaxDist", "code": "maxDist = max(maxDist, dist[u][v])"}, "55": {"lineno": 56, "parents": [42], "children": [56, 57], "function": "_getMaxDist", "code": "_if: edgeCount == cityCount - 1"}, "56": {"lineno": 57, "parents": [55], "children": [37], "function": "_getMaxDist", "code": "return maxDist"}, "57": {"lineno": 59, "parents": [55], "children": [37], "function": "_getMaxDist", "code": "return 0"}, "58": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1627, "task_title": "Graph Connectivity With Threshold", "difficulty": 3, "func_name": "areConnected", "description": "We have `n` cities labeled from `1` to `n`. Two different cities with labels\n`x` and `y` are directly connected by a bidirectional road if and only if `x`\nand `y` share a common divisor strictly greater than some `threshold`. More\nformally, cities with labels `x` and `y` have a road between them if there\nexists an integer `z` such that all of the following are true:\n\n* `x % z == 0`,\n* `y % z == 0`, and\n* `z > threshold`.\n\nGiven the two integers, `n` and `threshold`, and an array of `queries`, you\nmust determine for each `queries[i] = [ai, bi]` if cities `ai` and `bi` are\nconnected directly or indirectly. (i.e. there is some path between them).\n\nReturn an array `answer`, where `answer.length == queries.length` and\n`answer[i]` is `true` if for the `ith` query, there is a path between `ai` and\n`bi`, or `answer[i]` is `false` if there is no path.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> bool:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return False\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n    return True\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def areConnected(self, n: int, threshold: int, queries: List[List[int]]) -> List[bool]:\n    uf = UnionFind(n + 1)\n\n    for z in range(threshold + 1, n + 1):\n      for x in range(z * 2, n + 1, z):\n        uf.unionByRank(z, x)\n\n    return [uf.find(a) == uf.find(b) for a, b in queries]\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 23, "end": 24}, {"type": "else", "start": 25, "end": 27}], "target_lines": [20, 22, 24, 26, 27, 32], "cfg": {"0": {"lineno": 0, "parents": [], "children": [34], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.rank = [0] * n"}, "5": {"lineno": 16, "parents": [32], "children": [7], "function": "unionByRank", "code": "enter: unionByRank(self, u, v)"}, "6": {"lineno": 16, "parents": [17, 10], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "calls": ["find"], "function": "unionByRank", "code": "i = self.find(u)"}, "8": {"lineno": 18, "parents": [19, 7], "children": [9], "calls": ["find"], "function": "unionByRank", "code": "j = self.find(v)"}, "9": {"lineno": 19, "parents": [8, 19], "children": [10, 11], "function": "unionByRank", "code": "_if: i == j"}, "10": {"lineno": 20, "parents": [9], "children": [6], "function": "unionByRank", "code": "return False"}, "11": {"lineno": 21, "parents": [9], "children": [12, 13], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "12": {"lineno": 22, "parents": [11], "children": [17], "function": "unionByRank", "code": "self.id[i] = j"}, "13": {"lineno": 23, "parents": [11], "children": [14, 15], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "14": {"lineno": 24, "parents": [13], "children": [17], "function": "unionByRank", "code": "self.id[j] = i"}, "15": {"lineno": 26, "parents": [13], "children": [16], "function": "unionByRank", "code": "self.id[i] = j"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "unionByRank", "code": "self.rank[j] += 1"}, "17": {"lineno": 28, "parents": [16, 12, 14], "children": [6], "function": "unionByRank", "code": "return True"}, "18": {"lineno": 30, "parents": [8, 21, 7], "children": [20], "function": "find", "code": "enter: find(self, u)"}, "19": {"lineno": 30, "parents": [22], "children": [], "function": "find", "code": "exit: find(self, u)"}, "20": {"lineno": 31, "parents": [18], "children": [21, 22], "function": "find", "code": "_if: self.id[u] != u"}, "21": {"lineno": 32, "parents": [20], "children": [22], "calls": ["find"], "function": "find", "code": "self.id[u] = self.find(self.id[u])"}, "22": {"lineno": 33, "parents": [19, 20, 21], "children": [19], "function": "find", "code": "return self.id[u]"}, "23": {"lineno": 37, "parents": [], "children": [25], "function": "areConnected", "code": "enter: areConnected(self, n, threshold, queries)"}, "24": {"lineno": 37, "parents": [33], "children": [], "function": "areConnected", "code": "exit: areConnected(self, n, threshold, queries)"}, "25": {"lineno": 38, "parents": [23], "children": [26], "calls": ["UnionFind"], "function": "areConnected", "code": "uf = UnionFind(n + 1)"}, "26": {"lineno": 40, "parents": [25], "children": [27], "function": "areConnected", "code": "__iv = iter(range(threshold + 1, n + 1))"}, "27": {"lineno": 40, "parents": [26, 30], "children": [33, 28], "calls": ["range"], "function": "areConnected", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 40, "parents": [27], "children": [29], "function": "areConnected", "code": "z = next(__iv)"}, "29": {"lineno": 41, "parents": [28], "children": [30], "function": "areConnected", "code": "__iv = iter(range(z * 2, n + 1, z))"}, "30": {"lineno": 41, "parents": [32, 29, 6], "children": [27, 31], "calls": ["range"], "function": "areConnected", "code": "_for: __iv.__length__hint__() > 0"}, "31": {"lineno": 41, "parents": [30], "children": [32], "function": "areConnected", "code": "x = next(__iv)"}, "32": {"lineno": 42, "parents": [31], "children": [30], "calls": ["unionByRank"], "function": "areConnected", "code": "uf.unionByRank(z, x)"}, "33": {"lineno": 44, "parents": [27], "children": [24], "function": "areConnected", "code": "return [uf.find(a) == uf.find(b) for a, b in queries]"}, "34": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1631, "task_title": "Path With Minimum Effort", "difficulty": 2, "func_name": "minimumEffortPath", "description": "You are a hiker preparing for an upcoming hike. You are given `heights`, a 2D\narray of size `rows x columns`, where `heights[row][col]` represents the\nheight of cell `(row, col)`. You are situated in the top-left cell, `(0, 0)`,\nand you hope to travel to the bottom-right cell, `(rows-1, columns-1)` (i.e.,\n0-indexed). You can move up, down, left, or right, and you wish to find a\nroute that requires the minimum effort.\n\nA route's effort is the maximum absolute difference in heights between two\nconsecutive cells of the route.\n\nReturn the minimum effort required to travel from the top-left cell to the\nbottom-right cell.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumEffortPath(self, heights: List[List[int]]) -> int:\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    m = len(heights)\n    n = len(heights[0])\n    diff = [[math.inf] * n for _ in range(m)]\n    seen = set()\n\n    minHeap = [(0, 0, 0)]\n    diff[0][0] = 0\n\n    while minHeap:\n      d, i, j = heapq.heappop(minHeap)\n      if i == m - 1 and j == n - 1:\n        return d\n      seen.add((i, j))\n      for dx, dy in dirs:\n        x = i + dx\n        y = j + dy\n        if x < 0 or x == m or y < 0 or y == n:\n          continue\n        if (x, y) in seen:\n          continue\n        newDiff = abs(heights[i][j] - heights[x][y])\n        maxDiff = max(diff[i][j], newDiff)\n        if diff[x][y] > maxDiff:\n          diff[x][y] = maxDiff\n          heapq.heappush(minHeap, (diff[x][y], x, y))\n", "blocks": [{"type": "if", "start": 24, "end": 25}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 36, "end": 38}], "target_lines": [25, 31, 33, 37, 38], "cfg": {"0": {"lineno": 0, "parents": [], "children": [29], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumEffortPath", "code": "enter: minimumEffortPath(self, heights)"}, "2": {"lineno": 12, "parents": [10, 13], "children": [], "function": "minimumEffortPath", "code": "exit: minimumEffortPath(self, heights)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "minimumEffortPath", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "minimumEffortPath", "code": "m = len(heights)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["len"], "function": "minimumEffortPath", "code": "n = len(heights[0])"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "minimumEffortPath", "code": "diff = [[math.inf] * n for _ in range(m)]"}, "7": {"lineno": 17, "parents": [6], "children": [8], "calls": ["set"], "function": "minimumEffortPath", "code": "seen = set()"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "minimumEffortPath", "code": "minHeap = [(0, 0, 0)]"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "minimumEffortPath", "code": "diff[0][0] = 0"}, "10": {"lineno": 22, "parents": [16, 9], "children": [2, 11], "function": "minimumEffortPath", "code": "_while: minHeap"}, "11": {"lineno": 23, "parents": [10], "children": [12], "calls": ["heappop"], "function": "minimumEffortPath", "code": "d, i, j = heapq.heappop(minHeap)"}, "12": {"lineno": 24, "parents": [11], "children": [13, 14], "function": "minimumEffortPath", "code": "_if: i == m - 1 and j == n - 1"}, "13": {"lineno": 25, "parents": [12], "children": [2], "function": "minimumEffortPath", "code": "return d"}, "14": {"lineno": 26, "parents": [12], "children": [15], "calls": ["add"], "function": "minimumEffortPath", "code": "seen.add((i, j))"}, "15": {"lineno": 27, "parents": [14], "children": [16], "function": "minimumEffortPath", "code": "__iv = iter(dirs)"}, "16": {"lineno": 27, "parents": [21, 23, 26, 28, 15], "children": [17, 10], "function": "minimumEffortPath", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 27, "parents": [16], "children": [18], "function": "minimumEffortPath", "code": "dx, dy = next(__iv)"}, "18": {"lineno": 28, "parents": [17], "children": [19], "function": "minimumEffortPath", "code": "x = i + dx"}, "19": {"lineno": 29, "parents": [18], "children": [20], "function": "minimumEffortPath", "code": "y = j + dy"}, "20": {"lineno": 30, "parents": [19], "children": [21, 22], "function": "minimumEffortPath", "code": "_if: x < 0 or x == m or y < 0 or (y == n)"}, "21": {"lineno": 31, "parents": [20], "children": [16], "function": "minimumEffortPath", "code": "continue"}, "22": {"lineno": 32, "parents": [20], "children": [24, 23], "function": "minimumEffortPath", "code": "_if: (x, y) in seen"}, "23": {"lineno": 33, "parents": [22], "children": [16], "function": "minimumEffortPath", "code": "continue"}, "24": {"lineno": 34, "parents": [22], "children": [25], "calls": ["abs"], "function": "minimumEffortPath", "code": "newDiff = abs(heights[i][j] - heights[x][y])"}, "25": {"lineno": 35, "parents": [24], "children": [26], "calls": ["max"], "function": "minimumEffortPath", "code": "maxDiff = max(diff[i][j], newDiff)"}, "26": {"lineno": 36, "parents": [25], "children": [16, 27], "function": "minimumEffortPath", "code": "_if: diff[x][y] > maxDiff"}, "27": {"lineno": 37, "parents": [26], "children": [28], "function": "minimumEffortPath", "code": "diff[x][y] = maxDiff"}, "28": {"lineno": 38, "parents": [27], "children": [16], "calls": ["heappush"], "function": "minimumEffortPath", "code": "heapq.heappush(minHeap, (diff[x][y], x, y))"}, "29": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1632, "task_title": "Rank Transform of a Matrix", "difficulty": 3, "func_name": "matrixRankTransform", "description": "Given an `m x n` `matrix`, return a new matrix `answer` where\n`answer[row][col]` is the rank of `matrix[row][col]`.\n\nThe rank is an integer that represents how large an element is compared to\nother elements. It is calculated using the following rules:\n\n* The rank is an integer starting from `1`.\n* If two elements `p` and `q` are in the same row or column, then: \n* If `p < q` then `rank(p) < rank(q)`\n* If `p == q` then `rank(p) == rank(q)`\n* If `p > q` then `rank(p) > rank(q)`\n* The rank should be as small as possible.\n\nThe test cases are generated so that `answer` is unique under the given rules.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self):\n    self.id = {}\n\n  def union(self, u: int, v: int) -> None:\n    self.id.setdefault(u, u)\n    self.id.setdefault(v, v)\n    i = self._find(u)\n    j = self._find(v)\n    if i != j:\n      self.id[i] = j\n\n  def getGroupIdToValues(self) -> Dict[int, List[int]]:\n    groupIdToValues = collections.defaultdict(list)\n    for u in self.id.keys():\n      groupIdToValues[self._find(u)].append(u)\n    return groupIdToValues\n\n  def _find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self._find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def matrixRankTransform(self, matrix: List[List[int]]) -> List[List[int]]:\n    m = len(matrix)\n    n = len(matrix[0])\n    ans = [[0] * n for _ in range(m)]\n    valToGrids = collections.defaultdict(list)\n    maxRankSoFar = [0] * (m + n)\n\n    for i, row in enumerate(matrix):\n      for j, val in enumerate(row):\n        valToGrids[val].append((i, j))\n\n    for _, grids in sorted(valToGrids.items()):\n      uf = UnionFind()\n      for i, j in grids:\n        uf.union(i, j + m)\n      for values in uf.getGroupIdToValues().values():\n        maxRank = max(maxRankSoFar[i] for i in values)\n        for i in values:\n          maxRankSoFar[i] = maxRank + 1\n      for i, j in grids:\n        ans[i][j] = maxRankSoFar[i]\n\n    return ans\n", "blocks": [{"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 30, "end": 31}], "target_lines": [21, 31], "cfg": {"0": {"lineno": 0, "parents": [], "children": [60], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self)"}, "2": {"lineno": 12, "parents": [3], "children": [], "function": "__init__", "code": "exit: __init__(self)"}, "3": {"lineno": 13, "parents": [1], "children": [2], "function": "__init__", "code": "self.id = {}"}, "4": {"lineno": 15, "parents": [46], "children": [6], "function": "union", "code": "enter: union(self, u, v)"}, "5": {"lineno": 15, "parents": [10, 11], "children": [], "function": "union", "code": "exit: union(self, u, v)"}, "6": {"lineno": 16, "parents": [4], "children": [7], "calls": ["setdefault"], "function": "union", "code": "self.id.setdefault(u, u)"}, "7": {"lineno": 17, "parents": [6], "children": [8], "calls": ["setdefault"], "function": "union", "code": "self.id.setdefault(v, v)"}, "8": {"lineno": 18, "parents": [7], "children": [9], "calls": ["_find"], "function": "union", "code": "i = self._find(u)"}, "9": {"lineno": 19, "parents": [8, 21], "children": [10], "calls": ["_find"], "function": "union", "code": "j = self._find(v)"}, "10": {"lineno": 20, "parents": [9, 21], "children": [11, 5], "function": "union", "code": "_if: i != j"}, "11": {"lineno": 21, "parents": [10], "children": [5], "function": "union", "code": "self.id[i] = j"}, "12": {"lineno": 23, "parents": [], "children": [14], "function": "getGroupIdToValues", "code": "enter: getGroupIdToValues(self)"}, "13": {"lineno": 23, "parents": [19], "children": [], "function": "getGroupIdToValues", "code": "exit: getGroupIdToValues(self)"}, "14": {"lineno": 24, "parents": [12], "children": [15], "calls": ["defaultdict"], "function": "getGroupIdToValues", "code": "groupIdToValues = collections.defaultdict(list)"}, "15": {"lineno": 25, "parents": [14], "children": [16], "function": "getGroupIdToValues", "code": "__iv = iter(self.id.keys())"}, "16": {"lineno": 25, "parents": [18, 15], "children": [17, 19], "calls": ["keys"], "function": "getGroupIdToValues", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 25, "parents": [16], "children": [18], "function": "getGroupIdToValues", "code": "u = next(__iv)"}, "18": {"lineno": 26, "parents": [17], "children": [16], "calls": ["append"], "function": "getGroupIdToValues", "code": "groupIdToValues[self._find(u)].append(u)"}, "19": {"lineno": 27, "parents": [16], "children": [13], "function": "getGroupIdToValues", "code": "return groupIdToValues"}, "20": {"lineno": 29, "parents": [8, 9, 23], "children": [22], "function": "_find", "code": "enter: _find(self, u)"}, "21": {"lineno": 29, "parents": [24], "children": [], "function": "_find", "code": "exit: _find(self, u)"}, "22": {"lineno": 30, "parents": [20], "children": [24, 23], "function": "_find", "code": "_if: self.id[u] != u"}, "23": {"lineno": 31, "parents": [22], "children": [24], "calls": ["_find"], "function": "_find", "code": "self.id[u] = self._find(self.id[u])"}, "24": {"lineno": 32, "parents": [21, 22, 23], "children": [21], "function": "_find", "code": "return self.id[u]"}, "25": {"lineno": 36, "parents": [], "children": [27], "function": "matrixRankTransform", "code": "enter: matrixRankTransform(self, matrix)"}, "26": {"lineno": 36, "parents": [59], "children": [], "function": "matrixRankTransform", "code": "exit: matrixRankTransform(self, matrix)"}, "27": {"lineno": 37, "parents": [25], "children": [28], "calls": ["len"], "function": "matrixRankTransform", "code": "m = len(matrix)"}, "28": {"lineno": 38, "parents": [27], "children": [29], "calls": ["len"], "function": "matrixRankTransform", "code": "n = len(matrix[0])"}, "29": {"lineno": 39, "parents": [28], "children": [30], "function": "matrixRankTransform", "code": "ans = [[0] * n for _ in range(m)]"}, "30": {"lineno": 40, "parents": [29], "children": [31], "calls": ["defaultdict"], "function": "matrixRankTransform", "code": "valToGrids = collections.defaultdict(list)"}, "31": {"lineno": 41, "parents": [30], "children": [32], "function": "matrixRankTransform", "code": "maxRankSoFar = [0] * (m + n)"}, "32": {"lineno": 43, "parents": [31], "children": [33], "function": "matrixRankTransform", "code": "__iv = iter(enumerate(matrix))"}, "33": {"lineno": 43, "parents": [32, 36], "children": [34, 39], "calls": ["enumerate"], "function": "matrixRankTransform", "code": "_for: __iv.__length__hint__() > 0"}, "34": {"lineno": 43, "parents": [33], "children": [35], "function": "matrixRankTransform", "code": "i, row = next(__iv)"}, "35": {"lineno": 44, "parents": [34], "children": [36], "function": "matrixRankTransform", "code": "__iv = iter(enumerate(row))"}, "36": {"lineno": 44, "parents": [35, 38], "children": [33, 37], "calls": ["enumerate"], "function": "matrixRankTransform", "code": "_for: __iv.__length__hint__() > 0"}, "37": {"lineno": 44, "parents": [36], "children": [38], "function": "matrixRankTransform", "code": "j, val = next(__iv)"}, "38": {"lineno": 45, "parents": [37], "children": [36], "calls": ["append"], "function": "matrixRankTransform", "code": "valToGrids[val].append((i, j))"}, "39": {"lineno": 47, "parents": [33], "children": [40], "function": "matrixRankTransform", "code": "__iv = iter(sorted(valToGrids.items()))"}, "40": {"lineno": 47, "parents": [56, 39], "children": [41, 59], "calls": ["items", "sorted"], "function": "matrixRankTransform", "code": "_for: __iv.__length__hint__() > 0"}, "41": {"lineno": 47, "parents": [40], "children": [42], "function": "matrixRankTransform", "code": "_, grids = next(__iv)"}, "42": {"lineno": 48, "parents": [41], "children": [43], "calls": ["UnionFind"], "function": "matrixRankTransform", "code": "uf = UnionFind()"}, "43": {"lineno": 49, "parents": [42], "children": [44], "function": "matrixRankTransform", "code": "__iv = iter(grids)"}, "44": {"lineno": 49, "parents": [43, 5, 46], "children": [45, 47], "function": "matrixRankTransform", "code": "_for: __iv.__length__hint__() > 0"}, "45": {"lineno": 49, "parents": [44], "children": [46], "function": "matrixRankTransform", "code": "i, j = next(__iv)"}, "46": {"lineno": 50, "parents": [45], "children": [44], "calls": ["union"], "function": "matrixRankTransform", "code": "uf.union(i, j + m)"}, "47": {"lineno": 51, "parents": [44], "children": [48], "function": "matrixRankTransform", "code": "__iv = iter(uf.getGroupIdToValues().values())"}, "48": {"lineno": 51, "parents": [52, 47], "children": [49, 55], "calls": ["values"], "function": "matrixRankTransform", "code": "_for: __iv.__length__hint__() > 0"}, "49": {"lineno": 51, "parents": [48], "children": [50], "function": "matrixRankTransform", "code": "values = next(__iv)"}, "50": {"lineno": 52, "parents": [49], "children": [51], "calls": ["max"], "function": "matrixRankTransform", "code": "maxRank = max((maxRankSoFar[i] for i in values))"}, "51": {"lineno": 53, "parents": [50], "children": [52], "function": "matrixRankTransform", "code": "__iv = iter(values)"}, "52": {"lineno": 53, "parents": [51, 54], "children": [48, 53], "function": "matrixRankTransform", "code": "_for: __iv.__length__hint__() > 0"}, "53": {"lineno": 53, "parents": [52], "children": [54], "function": "matrixRankTransform", "code": "i = next(__iv)"}, "54": {"lineno": 54, "parents": [53], "children": [52], "function": "matrixRankTransform", "code": "maxRankSoFar[i] = maxRank + 1"}, "55": {"lineno": 55, "parents": [48], "children": [56], "function": "matrixRankTransform", "code": "__iv = iter(grids)"}, "56": {"lineno": 55, "parents": [58, 55], "children": [40, 57], "function": "matrixRankTransform", "code": "_for: __iv.__length__hint__() > 0"}, "57": {"lineno": 55, "parents": [56], "children": [58], "function": "matrixRankTransform", "code": "i, j = next(__iv)"}, "58": {"lineno": 56, "parents": [57], "children": [56], "function": "matrixRankTransform", "code": "ans[i][j] = maxRankSoFar[i]"}, "59": {"lineno": 58, "parents": [40], "children": [26], "function": "matrixRankTransform", "code": "return ans"}, "60": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1654, "task_title": "Minimum Jumps to Reach Home", "difficulty": 2, "func_name": "minimumJumps", "description": "A certain bug's home is on the x-axis at position `x`. Help them get there\nfrom position `0`.\n\nThe bug jumps according to the following rules:\n\n* It can jump exactly `a` positions forward (to the right).\n* It can jump exactly `b` positions backward (to the left).\n* It cannot jump backward twice in a row.\n* It cannot jump to any `forbidden` positions.\n\nThe bug may jump forward beyond its home, but it cannot jump to positions\nnumbered with negative integers.\n\nGiven an array of integers `forbidden`, where `forbidden[i]` means that the\nbug cannot jump to the position `forbidden[i]`, and integers `a`, `b`, and\n`x`, return the minimum number of jumps needed for the bug to reach its home.\nIf there is no possible sequence of jumps that lands the bug on position `x`,\nreturn `-1.`\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nfrom enum import Enum\n\n\nclass Direction(Enum):\n  kForward = 0\n  kBackward = 1\n\n\nclass Solution:\n  def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -> int:\n    furthest = max(x + a + b, max(pos + a + b for pos in forbidden))\n    seenForward = {pos for pos in forbidden}\n    seenBackward = {pos for pos in forbidden}\n\n    q = collections.deque([(Direction.kForward, 0)])\n\n    ans = 0\n    while q:\n      for _ in range(len(q)):\n        dir, pos = q.popleft()\n        if pos == x:\n          return ans\n        forward = pos + a\n        backward = pos - b\n        if forward <= furthest and forward not in seenForward:\n          seenForward.add(forward)\n          q.append((Direction.kForward, forward))\n        if dir == Direction.kForward and backward >= 0 and backward not in seenBackward:\n          seenBackward.add(backward)\n          q.append((Direction.kBackward, backward))\n      ans += 1\n\n    return -1\n", "blocks": [{"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 35, "end": 37}, {"type": "if", "start": 38, "end": 40}], "target_lines": [32, 36, 37, 39, 40], "cfg": {"0": {"lineno": 0, "parents": [], "children": [1], "function": "", "code": "start"}, "1": {"lineno": 15, "parents": [0], "children": [2], "function": "", "code": "kForward = 0"}, "2": {"lineno": 16, "parents": [1], "children": [27], "function": "", "code": "kBackward = 1"}, "3": {"lineno": 20, "parents": [], "children": [5], "function": "minimumJumps", "code": "enter: minimumJumps(self, forbidden, a, b, x)"}, "4": {"lineno": 20, "parents": [16, 26], "children": [], "function": "minimumJumps", "code": "exit: minimumJumps(self, forbidden, a, b, x)"}, "5": {"lineno": 21, "parents": [3], "children": [6], "calls": ["max", "max"], "function": "minimumJumps", "code": "furthest = max(x + a + b, max((pos + a + b for pos in forbidden)))"}, "6": {"lineno": 22, "parents": [5], "children": [7], "function": "minimumJumps", "code": "seenForward = {pos for pos in forbidden}"}, "7": {"lineno": 23, "parents": [6], "children": [8], "function": "minimumJumps", "code": "seenBackward = {pos for pos in forbidden}"}, "8": {"lineno": 25, "parents": [7], "children": [9], "calls": ["deque"], "function": "minimumJumps", "code": "q = collections.deque([(Direction.kForward, 0)])"}, "9": {"lineno": 27, "parents": [8], "children": [10], "function": "minimumJumps", "code": "ans = 0"}, "10": {"lineno": 28, "parents": [9, 25], "children": [26, 11], "function": "minimumJumps", "code": "_while: q"}, "11": {"lineno": 29, "parents": [10], "children": [12], "function": "minimumJumps", "code": "__iv = iter(range(len(q)))"}, "12": {"lineno": 29, "parents": [24, 11, 22], "children": [25, 13], "calls": ["len", "range"], "function": "minimumJumps", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 29, "parents": [12], "children": [14], "function": "minimumJumps", "code": "_ = next(__iv)"}, "14": {"lineno": 30, "parents": [13], "children": [15], "calls": ["popleft"], "function": "minimumJumps", "code": "dir, pos = q.popleft()"}, "15": {"lineno": 31, "parents": [14], "children": [16, 17], "function": "minimumJumps", "code": "_if: pos == x"}, "16": {"lineno": 32, "parents": [15], "children": [4], "function": "minimumJumps", "code": "return ans"}, "17": {"lineno": 33, "parents": [15], "children": [18], "function": "minimumJumps", "code": "forward = pos + a"}, "18": {"lineno": 34, "parents": [17], "children": [19], "function": "minimumJumps", "code": "backward = pos - b"}, "19": {"lineno": 35, "parents": [18], "children": [20, 22], "function": "minimumJumps", "code": "_if: forward <= furthest and forward not in seenForward"}, "20": {"lineno": 36, "parents": [19], "children": [21], "calls": ["add"], "function": "minimumJumps", "code": "seenForward.add(forward)"}, "21": {"lineno": 37, "parents": [20], "children": [22], "calls": ["append"], "function": "minimumJumps", "code": "q.append((Direction.kForward, forward))"}, "22": {"lineno": 38, "parents": [19, 21], "children": [12, 23], "function": "minimumJumps", "code": "_if: dir == Direction.kForward and backward >= 0 and (backward not in seenBackward)"}, "23": {"lineno": 39, "parents": [22], "children": [24], "calls": ["add"], "function": "minimumJumps", "code": "seenBackward.add(backward)"}, "24": {"lineno": 40, "parents": [23], "children": [12], "calls": ["append"], "function": "minimumJumps", "code": "q.append((Direction.kBackward, backward))"}, "25": {"lineno": 41, "parents": [12], "children": [10], "function": "minimumJumps", "code": "ans += 1"}, "26": {"lineno": 43, "parents": [10], "children": [4], "function": "minimumJumps", "code": "return -1"}, "27": {"lineno": 0, "parents": [2], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1655, "task_title": "Distribute Repeating Integers", "difficulty": 3, "func_name": "canDistribute", "description": "You are given an array of `n` integers, `nums`, where there are at most `50`\nunique values in the array. You are also given an array of `m` customer order\nquantities, `quantity`, where `quantity[i]` is the amount of integers the\n`ith` customer ordered. Determine if it is possible to distribute `nums` such\nthat:\n\n* The `ith` customer gets exactly `quantity[i]` integers,\n* The integers the `ith` customer gets are all equal, and\n* Every customer is satisfied.\n\nReturn `true` if it is possible to distribute `nums` according to the above\nconditions.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def canDistribute(self, nums: List[int], quantity: List[int]) -> bool:\n    freqs = list(collections.Counter(nums).values())\n    validDistribution = self._getValidDistribution(freqs, quantity)\n    n = len(freqs)\n    m = len(quantity)\n    maxMask = 1 << m\n    dp = [[False] * maxMask for _ in range(n + 1)]\n    dp[n][maxMask - 1] = True\n\n    for i in range(n - 1, -1, -1):\n      for mask in range(maxMask):\n        dp[i][mask] = dp[i + 1][mask]\n        availableMask = ~mask & (maxMask - 1)\n        submask = availableMask\n        while submask > 0:\n          if validDistribution[i][submask]:\n            dp[i][mask] = dp[i][mask] or dp[i + 1][mask | submask]\n          submask = (submask - 1) & availableMask\n\n    return dp[0][0]\n\n  def _getValidDistribution(self, freqs: List[int], quantity: List[int]) -> List[List[bool]]:\n    maxMask = 1 << len(quantity)\n    validDistribution = [[False] * maxMask for _ in range(len(freqs))]\n    for i, freq in enumerate(freqs):\n      for mask in range(maxMask):\n        if freq >= self._getQuantitySum(quantity, mask):\n          validDistribution[i][mask] = True\n    return validDistribution\n\n  def _getQuantitySum(self, quantity: List[int], mask: int) -> int:\n    res=[]\n    for i, q in enumerate(quantity):\n      if mask >> i & 1:\n        res.append(q)\n    return sum(res)\n", "blocks": [{"type": "if", "start": 45, "end": 46}, {"type": "if", "start": 38, "end": 39}, {"type": "if", "start": 27, "end": 28}], "target_lines": [28, 39, 46], "cfg": {"0": {"lineno": 0, "parents": [], "children": [46], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "canDistribute", "code": "enter: canDistribute(self, nums, quantity)"}, "2": {"lineno": 12, "parents": [23], "children": [], "function": "canDistribute", "code": "exit: canDistribute(self, nums, quantity)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["values", "list"], "function": "canDistribute", "code": "freqs = list(collections.Counter(nums).values())"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["_getValidDistribution"], "function": "canDistribute", "code": "validDistribution = self._getValidDistribution(freqs, quantity)"}, "5": {"lineno": 15, "parents": [25, 4], "children": [6], "calls": ["len"], "function": "canDistribute", "code": "n = len(freqs)"}, "6": {"lineno": 16, "parents": [5], "children": [7], "calls": ["len"], "function": "canDistribute", "code": "m = len(quantity)"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "canDistribute", "code": "maxMask = 1 << m"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "canDistribute", "code": "dp = [[False] * maxMask for _ in range(n + 1)]"}, "9": {"lineno": 19, "parents": [8], "children": [10], "function": "canDistribute", "code": "dp[n][maxMask - 1] = True"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "canDistribute", "code": "__iv = iter(range(n - 1, -1, -1))"}, "11": {"lineno": 21, "parents": [10, 14], "children": [12, 23], "calls": ["range"], "function": "canDistribute", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "canDistribute", "code": "i = next(__iv)"}, "13": {"lineno": 22, "parents": [12], "children": [14], "function": "canDistribute", "code": "__iv = iter(range(maxMask))"}, "14": {"lineno": 22, "parents": [19, 13], "children": [11, 15], "calls": ["range"], "function": "canDistribute", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 22, "parents": [14], "children": [16], "function": "canDistribute", "code": "mask = next(__iv)"}, "16": {"lineno": 23, "parents": [15], "children": [17], "function": "canDistribute", "code": "dp[i][mask] = dp[i + 1][mask]"}, "17": {"lineno": 24, "parents": [16], "children": [18], "function": "canDistribute", "code": "availableMask = ~mask & maxMask - 1"}, "18": {"lineno": 25, "parents": [17], "children": [19], "function": "canDistribute", "code": "submask = availableMask"}, "19": {"lineno": 26, "parents": [18, 22], "children": [20, 14], "function": "canDistribute", "code": "_while: submask > 0"}, "20": {"lineno": 27, "parents": [19], "children": [21, 22], "function": "canDistribute", "code": "_if: validDistribution[i][submask]"}, "21": {"lineno": 28, "parents": [20], "children": [22], "function": "canDistribute", "code": "dp[i][mask] = dp[i][mask] or dp[i + 1][mask | submask]"}, "22": {"lineno": 29, "parents": [20, 21], "children": [19], "function": "canDistribute", "code": "submask = submask - 1 & availableMask"}, "23": {"lineno": 31, "parents": [11], "children": [2], "function": "canDistribute", "code": "return dp[0][0]"}, "24": {"lineno": 33, "parents": [4], "children": [26], "function": "_getValidDistribution", "code": "enter: _getValidDistribution(self, freqs, quantity)"}, "25": {"lineno": 33, "parents": [36], "children": [], "function": "_getValidDistribution", "code": "exit: _getValidDistribution(self, freqs, quantity)"}, "26": {"lineno": 34, "parents": [24], "children": [27], "calls": ["len"], "function": "_getValidDistribution", "code": "maxMask = 1 << len(quantity)"}, "27": {"lineno": 35, "parents": [26], "children": [28], "function": "_getValidDistribution", "code": "validDistribution = [[False] * maxMask for _ in range(len(freqs))]"}, "28": {"lineno": 36, "parents": [27], "children": [29], "function": "_getValidDistribution", "code": "__iv = iter(enumerate(freqs))"}, "29": {"lineno": 36, "parents": [32, 28], "children": [36, 30], "calls": ["enumerate"], "function": "_getValidDistribution", "code": "_for: __iv.__length__hint__() > 0"}, "30": {"lineno": 36, "parents": [29], "children": [31], "function": "_getValidDistribution", "code": "i, freq = next(__iv)"}, "31": {"lineno": 37, "parents": [30], "children": [32], "function": "_getValidDistribution", "code": "__iv = iter(range(maxMask))"}, "32": {"lineno": 37, "parents": [34, 35, 38, 31], "children": [33, 29], "calls": ["range"], "function": "_getValidDistribution", "code": "_for: __iv.__length__hint__() > 0"}, "33": {"lineno": 37, "parents": [32], "children": [34], "function": "_getValidDistribution", "code": "mask = next(__iv)"}, "34": {"lineno": 38, "parents": [33], "children": [32, 35], "calls": ["_getQuantitySum"], "function": "_getValidDistribution", "code": "_if: freq >= self._getQuantitySum(quantity, mask)"}, "35": {"lineno": 39, "parents": [34, 38], "children": [32], "function": "_getValidDistribution", "code": "validDistribution[i][mask] = True"}, "36": {"lineno": 40, "parents": [29], "children": [25], "function": "_getValidDistribution", "code": "return validDistribution"}, "37": {"lineno": 42, "parents": [34], "children": [39], "function": "_getQuantitySum", "code": "enter: _getQuantitySum(self, quantity, mask)"}, "38": {"lineno": 42, "parents": [45], "children": [], "function": "_getQuantitySum", "code": "exit: _getQuantitySum(self, quantity, mask)"}, "39": {"lineno": 43, "parents": [37], "children": [40], "function": "_getQuantitySum", "code": "res = []"}, "40": {"lineno": 44, "parents": [39], "children": [41], "function": "_getQuantitySum", "code": "__iv = iter(enumerate(quantity))"}, "41": {"lineno": 44, "parents": [40, 43, 44], "children": [42, 45], "calls": ["enumerate", "sum"], "function": "_getQuantitySum", "code": "_for: __iv.__length__hint__() > 0"}, "42": {"lineno": 44, "parents": [41], "children": [43], "function": "_getQuantitySum", "code": "i, q = next(__iv)"}, "43": {"lineno": 45, "parents": [42], "children": [41, 44], "function": "_getQuantitySum", "code": "_if: mask >> i & 1"}, "44": {"lineno": 46, "parents": [43], "children": [41], "calls": ["append"], "function": "_getQuantitySum", "code": "res.append(q)"}, "45": {"lineno": 47, "parents": [41], "children": [38], "function": "_getQuantitySum", "code": "return sum(res)"}, "46": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1681, "task_title": "Minimum Incompatibility", "difficulty": 3, "func_name": "minimumIncompatibility", "description": "You are given an integer array `nums`\u200b\u200b\u200b and an integer `k`. You are asked to\ndistribute this array into `k` subsets of equal size such that there are no\ntwo equal elements in the same subset.\n\nA subset's incompatibility is the difference between the maximum and minimum\nelements in that array.\n\nReturn the minimum possible sum of incompatibilities of the `k` subsets after\ndistributing the array optimally, or return `-1` if it is not possible.\n\nA subset is a group integers that appear in the array with no particular\norder.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def __init__(self):\n    self.kMaxNum = 16\n\n  def minimumIncompatibility(self, nums: List[int], k: int) -> int:\n    kMaxCompatibility = (16 - 1) * (16 // 2)\n    n = len(nums)\n    subsetSize = n // k\n    maxMask = 1 << n\n    incompatibilities = self._getIncompatibilities(nums, subsetSize)\n\n    dp = [kMaxCompatibility] * maxMask\n    dp[0] = 0\n\n    for mask in range(1, maxMask):\n      if mask.bit_count() % subsetSize != 0:\n        continue\n      submask = mask\n      while submask > 0:\n        if incompatibilities[submask] != -1:\n          dp[mask] = min(dp[mask], dp[mask - submask] + incompatibilities[submask])\n        submask = (submask - 1) & mask\n\n    if dp[-1] != kMaxCompatibility:\n      return dp[-1]\n    else:\n      return -1\n\n  def _getIncompatibilities(self, nums: List[int], subsetSize: int) -> List[int]:\n    maxMask = 1 << len(nums)\n    incompatibilities = [-1] * maxMask\n    for mask in range(maxMask):\n      if mask.bit_count() == subsetSize and self._isUnique(nums, mask, subsetSize):\n        incompatibilities[mask] = self._getIncompatibility(nums, mask)\n    return incompatibilities\n\n  def _isUnique(self, nums: List[int], mask: int, subsetSize: int) -> bool:\n    used = 0\n    for i, num in enumerate(nums):\n      if mask >> i & 1:\n        used |= 1 << num\n    return used.bit_count() == subsetSize\n\n  def _getIncompatibility(self, nums: List[int], mask: int) -> int:\n    mini = self.kMaxNum\n    maxi = 0\n    for i, num in enumerate(nums):\n      if mask >> i & 1:\n        maxi = max(maxi, num)\n        mini = min(mini, num)\n    return maxi - mini\n", "blocks": [{"type": "if", "start": 34, "end": 35}, {"type": "else", "start": 36, "end": 37}, {"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 43, "end": 44}, {"type": "if", "start": 50, "end": 51}, {"type": "if", "start": 58, "end": 60}, {"type": "if", "start": 30, "end": 31}], "target_lines": [27, 31, 35, 37, 44, 51, 59, 60], "cfg": {"0": {"lineno": 0, "parents": [], "children": [56], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self)"}, "2": {"lineno": 12, "parents": [3], "children": [], "function": "__init__", "code": "exit: __init__(self)"}, "3": {"lineno": 13, "parents": [1], "children": [2], "function": "__init__", "code": "self.kMaxNum = 16"}, "4": {"lineno": 15, "parents": [], "children": [6], "function": "minimumIncompatibility", "code": "enter: minimumIncompatibility(self, nums, k)"}, "5": {"lineno": 15, "parents": [24, 25], "children": [], "function": "minimumIncompatibility", "code": "exit: minimumIncompatibility(self, nums, k)"}, "6": {"lineno": 16, "parents": [4], "children": [7], "function": "minimumIncompatibility", "code": "kMaxCompatibility = (16 - 1) * (16 // 2)"}, "7": {"lineno": 17, "parents": [6], "children": [8], "calls": ["len"], "function": "minimumIncompatibility", "code": "n = len(nums)"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "minimumIncompatibility", "code": "subsetSize = n // k"}, "9": {"lineno": 19, "parents": [8], "children": [10], "function": "minimumIncompatibility", "code": "maxMask = 1 << n"}, "10": {"lineno": 20, "parents": [9], "children": [11], "calls": ["_getIncompatibilities"], "function": "minimumIncompatibility", "code": "incompatibilities = self._getIncompatibilities(nums, subsetSize)"}, "11": {"lineno": 22, "parents": [10, 27], "children": [12], "function": "minimumIncompatibility", "code": "dp = [kMaxCompatibility] * maxMask"}, "12": {"lineno": 23, "parents": [11], "children": [13], "function": "minimumIncompatibility", "code": "dp[0] = 0"}, "13": {"lineno": 25, "parents": [12], "children": [14], "function": "minimumIncompatibility", "code": "__iv = iter(range(1, maxMask))"}, "14": {"lineno": 25, "parents": [17, 19, 13], "children": [23, 15], "calls": ["range"], "function": "minimumIncompatibility", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 25, "parents": [14], "children": [16], "function": "minimumIncompatibility", "code": "mask = next(__iv)"}, "16": {"lineno": 26, "parents": [15], "children": [17, 18], "calls": ["bit_count"], "function": "minimumIncompatibility", "code": "_if: mask.bit_count() % subsetSize != 0"}, "17": {"lineno": 27, "parents": [16], "children": [14], "function": "minimumIncompatibility", "code": "continue"}, "18": {"lineno": 28, "parents": [16], "children": [19], "function": "minimumIncompatibility", "code": "submask = mask"}, "19": {"lineno": 29, "parents": [18, 22], "children": [20, 14], "function": "minimumIncompatibility", "code": "_while: submask > 0"}, "20": {"lineno": 30, "parents": [19], "children": [21, 22], "function": "minimumIncompatibility", "code": "_if: incompatibilities[submask] != -1"}, "21": {"lineno": 31, "parents": [20], "children": [22], "calls": ["min"], "function": "minimumIncompatibility", "code": "dp[mask] = min(dp[mask], dp[mask - submask] + incompatibilities[submask])"}, "22": {"lineno": 32, "parents": [20, 21], "children": [19], "function": "minimumIncompatibility", "code": "submask = submask - 1 & mask"}, "23": {"lineno": 34, "parents": [14], "children": [24, 25], "function": "minimumIncompatibility", "code": "_if: dp[-1] != kMaxCompatibility"}, "24": {"lineno": 35, "parents": [23], "children": [5], "function": "minimumIncompatibility", "code": "return dp[-1]"}, "25": {"lineno": 37, "parents": [23], "children": [5], "function": "minimumIncompatibility", "code": "return -1"}, "26": {"lineno": 39, "parents": [10], "children": [28], "function": "_getIncompatibilities", "code": "enter: _getIncompatibilities(self, nums, subsetSize)"}, "27": {"lineno": 39, "parents": [35], "children": [], "function": "_getIncompatibilities", "code": "exit: _getIncompatibilities(self, nums, subsetSize)"}, "28": {"lineno": 40, "parents": [26], "children": [29], "calls": ["len"], "function": "_getIncompatibilities", "code": "maxMask = 1 << len(nums)"}, "29": {"lineno": 41, "parents": [28], "children": [30], "function": "_getIncompatibilities", "code": "incompatibilities = [-1] * maxMask"}, "30": {"lineno": 42, "parents": [29], "children": [31], "function": "_getIncompatibilities", "code": "__iv = iter(range(maxMask))"}, "31": {"lineno": 42, "parents": [46, 33, 34, 30], "children": [32, 35], "calls": ["range"], "function": "_getIncompatibilities", "code": "_for: __iv.__length__hint__() > 0"}, "32": {"lineno": 42, "parents": [31], "children": [33], "function": "_getIncompatibilities", "code": "mask = next(__iv)"}, "33": {"lineno": 43, "parents": [32], "children": [34, 31], "function": "_getIncompatibilities", "code": "_if: mask.bit_count() == subsetSize and self._isUnique(nums, mask, subsetSize)"}, "34": {"lineno": 44, "parents": [33], "children": [31], "calls": ["_getIncompatibility"], "function": "_getIncompatibilities", "code": "incompatibilities[mask] = self._getIncompatibility(nums, mask)"}, "35": {"lineno": 45, "parents": [31], "children": [27], "function": "_getIncompatibilities", "code": "return incompatibilities"}, "36": {"lineno": 47, "parents": [], "children": [38], "function": "_isUnique", "code": "enter: _isUnique(self, nums, mask, subsetSize)"}, "37": {"lineno": 47, "parents": [44], "children": [], "function": "_isUnique", "code": "exit: _isUnique(self, nums, mask, subsetSize)"}, "38": {"lineno": 48, "parents": [36], "children": [39], "function": "_isUnique", "code": "used = 0"}, "39": {"lineno": 49, "parents": [38], "children": [40], "function": "_isUnique", "code": "__iv = iter(enumerate(nums))"}, "40": {"lineno": 49, "parents": [42, 43, 39], "children": [41, 44], "calls": ["enumerate", "bit_count"], "function": "_isUnique", "code": "_for: __iv.__length__hint__() > 0"}, "41": {"lineno": 49, "parents": [40], "children": [42], "function": "_isUnique", "code": "i, num = next(__iv)"}, "42": {"lineno": 50, "parents": [41], "children": [40, 43], "function": "_isUnique", "code": "_if: mask >> i & 1"}, "43": {"lineno": 51, "parents": [42], "children": [40], "function": "_isUnique", "code": "used |= 1 << num"}, "44": {"lineno": 52, "parents": [40], "children": [37], "function": "_isUnique", "code": "return used.bit_count() == subsetSize"}, "45": {"lineno": 54, "parents": [34], "children": [47], "function": "_getIncompatibility", "code": "enter: _getIncompatibility(self, nums, mask)"}, "46": {"lineno": 54, "parents": [55], "children": [], "function": "_getIncompatibility", "code": "exit: _getIncompatibility(self, nums, mask)"}, "47": {"lineno": 55, "parents": [45], "children": [48], "function": "_getIncompatibility", "code": "mini = self.kMaxNum"}, "48": {"lineno": 56, "parents": [47], "children": [49], "function": "_getIncompatibility", "code": "maxi = 0"}, "49": {"lineno": 57, "parents": [48], "children": [50], "function": "_getIncompatibility", "code": "__iv = iter(enumerate(nums))"}, "50": {"lineno": 57, "parents": [49, 52, 54], "children": [51, 55], "calls": ["enumerate"], "function": "_getIncompatibility", "code": "_for: __iv.__length__hint__() > 0"}, "51": {"lineno": 57, "parents": [50], "children": [52], "function": "_getIncompatibility", "code": "i, num = next(__iv)"}, "52": {"lineno": 58, "parents": [51], "children": [50, 53], "function": "_getIncompatibility", "code": "_if: mask >> i & 1"}, "53": {"lineno": 59, "parents": [52], "children": [54], "calls": ["max"], "function": "_getIncompatibility", "code": "maxi = max(maxi, num)"}, "54": {"lineno": 60, "parents": [53], "children": [50], "calls": ["min"], "function": "_getIncompatibility", "code": "mini = min(mini, num)"}, "55": {"lineno": 61, "parents": [50], "children": [46], "function": "_getIncompatibility", "code": "return maxi - mini"}, "56": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1687, "task_title": "Delivering Boxes from Storage to Ports", "difficulty": 3, "func_name": "boxDelivering", "description": "You have the task of delivering some boxes from storage to their ports using\nonly one ship. However, this ship has a limit on the number of boxes and the\ntotal weight that it can carry.\n\nYou are given an array `boxes`, where `boxes[i] = [ports\u200b\u200bi\u200b, weighti]`, and\nthree integers `portsCount`, `maxBoxes`, and `maxWeight`.\n\n* `ports\u200b\u200bi` is the port where you need to deliver the `ith` box and `weightsi` is the weight of the `ith` box.\n* `portsCount` is the number of ports.\n* `maxBoxes` and `maxWeight` are the respective box and weight limits of the ship.\n\nThe boxes need to be delivered in the order they are given. The ship will\nfollow these steps:\n\n* The ship will take some number of boxes from the `boxes` queue, not violating the `maxBoxes` and `maxWeight` constraints.\n* For each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no trip is needed, and the box can immediately be delivered.\n* The ship then makes a return trip to storage to take more boxes from the queue.\n\nThe ship must end at storage after all the boxes have been delivered.\n\nReturn the minimum number of trips the ship needs to make to deliver all boxes\nto their respective ports.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def boxDelivering(self, boxes: List[List[int]], portsCount: int, maxBoxes: int, maxWeight: int) -> int:\n    n = len(boxes)\n    dp = [0] * (n + 1)\n    trips = 2\n    weight = 0\n\n    l = 0\n    for r in range(n):\n      weight += boxes[r][1]\n\n      if r > 0 and boxes[r][0] != boxes[r - 1][0]:\n        trips += 1\n\n      while r - l + 1 > maxBoxes or weight > maxWeight or (l < r and dp[l + 1] == dp[l]):\n        weight -= boxes[l][1]\n        if boxes[l][0] != boxes[l + 1][0]:\n          trips -= 1\n        l += 1\n\n      dp[r + 1] = dp[l] + trips\n\n    return dp[n]\n", "blocks": [{"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 27, "end": 28}], "target_lines": [23, 28], "cfg": {"0": {"lineno": 0, "parents": [], "children": [21], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "boxDelivering", "code": "enter: boxDelivering(self, boxes, portsCount, maxBoxes, maxWeight)"}, "2": {"lineno": 12, "parents": [20], "children": [], "function": "boxDelivering", "code": "exit: boxDelivering(self, boxes, portsCount, maxBoxes, maxWeight)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "boxDelivering", "code": "n = len(boxes)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "boxDelivering", "code": "dp = [0] * (n + 1)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "boxDelivering", "code": "trips = 2"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "boxDelivering", "code": "weight = 0"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "boxDelivering", "code": "l = 0"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "boxDelivering", "code": "__iv = iter(range(n))"}, "9": {"lineno": 19, "parents": [8, 19], "children": [10, 20], "calls": ["range"], "function": "boxDelivering", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "boxDelivering", "code": "r = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "boxDelivering", "code": "weight += boxes[r][1]"}, "12": {"lineno": 22, "parents": [11], "children": [13, 14], "function": "boxDelivering", "code": "_if: r > 0 and boxes[r][0] != boxes[r - 1][0]"}, "13": {"lineno": 23, "parents": [12], "children": [14], "function": "boxDelivering", "code": "trips += 1"}, "14": {"lineno": 25, "parents": [18, 12, 13], "children": [19, 15], "function": "boxDelivering", "code": "_while: r - l + 1 > maxBoxes or weight > maxWeight or (l < r and dp[l + 1] == dp[l])"}, "15": {"lineno": 26, "parents": [14], "children": [16], "function": "boxDelivering", "code": "weight -= boxes[l][1]"}, "16": {"lineno": 27, "parents": [15], "children": [17, 18], "function": "boxDelivering", "code": "_if: boxes[l][0] != boxes[l + 1][0]"}, "17": {"lineno": 28, "parents": [16], "children": [18], "function": "boxDelivering", "code": "trips -= 1"}, "18": {"lineno": 29, "parents": [16, 17], "children": [14], "function": "boxDelivering", "code": "l += 1"}, "19": {"lineno": 31, "parents": [14], "children": [9], "function": "boxDelivering", "code": "dp[r + 1] = dp[l] + trips"}, "20": {"lineno": 33, "parents": [9], "children": [2], "function": "boxDelivering", "code": "return dp[n]"}, "21": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1705, "task_title": "Maximum Number of Eaten Apples", "difficulty": 2, "func_name": "eatenApples", "description": "There is a special kind of apple tree that grows apples every day for `n`\ndays. On the `ith` day, the tree grows `apples[i]` apples that will rot after\n`days[i]` days, that is on day `i + days[i]` the apples will be rotten and\ncannot be eaten. On some days, the apple tree does not grow any apples, which\nare denoted by `apples[i] == 0` and `days[i] == 0`.\n\nYou decided to eat at most one apple a day (to keep the doctors away). Note\nthat you can keep eating after the first `n` days.\n\nGiven two integer arrays `days` and `apples` of length `n`, return the maximum\nnumber of apples you can eat.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def eatenApples(self, apples: List[int], days: List[int]) -> int:\n    n = len(apples)\n    ans = 0\n    minHeap = []\n\n    i = 0\n    while i < n or minHeap:\n      while minHeap and minHeap[0][0] <= i:\n        heapq.heappop(minHeap)\n      if i < n and apples[i] > 0:\n        heapq.heappush(minHeap, (i + days[i], apples[i]))\n      if minHeap:\n        rottenDay, numApples = heapq.heappop(minHeap)\n        if numApples > 1:\n          heapq.heappush(minHeap, (rottenDay, numApples - 1))\n        ans += 1\n      i += 1\n\n    return ans\n", "blocks": [{"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 23, "end": 27}, {"type": "if", "start": 25, "end": 26}], "target_lines": [22, 24, 25, 26, 27], "cfg": {"0": {"lineno": 0, "parents": [], "children": [19], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "eatenApples", "code": "enter: eatenApples(self, apples, days)"}, "2": {"lineno": 12, "parents": [18], "children": [], "function": "eatenApples", "code": "exit: eatenApples(self, apples, days)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "eatenApples", "code": "n = len(apples)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "eatenApples", "code": "ans = 0"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "eatenApples", "code": "minHeap = []"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "eatenApples", "code": "i = 0"}, "7": {"lineno": 18, "parents": [17, 6], "children": [8, 18], "function": "eatenApples", "code": "_while: i < n or minHeap"}, "8": {"lineno": 19, "parents": [9, 7], "children": [9, 10], "function": "eatenApples", "code": "_while: minHeap and minHeap[0][0] <= i"}, "9": {"lineno": 20, "parents": [8], "children": [8, 18], "calls": ["heappop"], "function": "eatenApples", "code": "heapq.heappop(minHeap)"}, "10": {"lineno": 21, "parents": [8], "children": [11, 12], "function": "eatenApples", "code": "_if: i < n and apples[i] > 0"}, "11": {"lineno": 22, "parents": [10], "children": [12], "calls": ["heappush"], "function": "eatenApples", "code": "heapq.heappush(minHeap, (i + days[i], apples[i]))"}, "12": {"lineno": 23, "parents": [10, 11], "children": [17, 13], "function": "eatenApples", "code": "_if: minHeap"}, "13": {"lineno": 24, "parents": [12], "children": [14], "calls": ["heappop"], "function": "eatenApples", "code": "rottenDay, numApples = heapq.heappop(minHeap)"}, "14": {"lineno": 25, "parents": [13], "children": [16, 15], "function": "eatenApples", "code": "_if: numApples > 1"}, "15": {"lineno": 26, "parents": [14], "children": [16], "calls": ["heappush"], "function": "eatenApples", "code": "heapq.heappush(minHeap, (rottenDay, numApples - 1))"}, "16": {"lineno": 27, "parents": [14, 15], "children": [17], "function": "eatenApples", "code": "ans += 1"}, "17": {"lineno": 28, "parents": [16, 12], "children": [7], "function": "eatenApples", "code": "i += 1"}, "18": {"lineno": 30, "parents": [9, 7], "children": [2], "function": "eatenApples", "code": "return ans"}, "19": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1706, "task_title": "Where Will the Ball Fall", "difficulty": 2, "func_name": "findBall", "description": "You have a 2-D `grid` of size `m x n` representing a box, and you have `n`\nballs. The box is open on the top and bottom sides.\n\nEach cell in the box has a diagonal board spanning two corners of the cell\nthat can redirect a ball to the right or to the left.\n\n* A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as `1`.\n* A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as `-1`.\n\nWe drop one ball at the top of each column of the box. Each ball can get stuck\nin the box or fall out of the bottom. A ball gets stuck if it hits a \"V\"\nshaped pattern between two boards or if a board redirects the ball into either\nwall of the box.\n\nReturn an array `answer` of size `n` where `answer[i]` is the column that the\nball falls out of at the bottom after dropping the ball from the `ith` column\nat the top, or `-1` if the ball gets stuck in the box.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def findBall(self, grid: List[List[int]]) -> List[int]:\n    m = len(grid)\n    n = len(grid[0])\n    dp = [i for i in range(n)]\n    ans = [-1] * n\n\n    for i in range(m):\n      newDp = [-1] * n\n      for j in range(n):\n        if j + grid[i][j] < 0 or j + grid[i][j] == n:\n          continue\n        if grid[i][j] == 1 and grid[i][j + 1] == -1 or grid[i][j] == -1 and grid[i][j - 1] == 1:\n          continue\n        newDp[j + grid[i][j]] = dp[j]\n      dp = newDp\n\n    for i, ball in enumerate(dp):\n      if ball != -1:\n        ans[ball] = i\n\n    return ans\n", "blocks": [{"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 23, "end": 24}], "target_lines": [22, 24, 30], "cfg": {"0": {"lineno": 0, "parents": [], "children": [26], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "findBall", "code": "enter: findBall(self, grid)"}, "2": {"lineno": 12, "parents": [25], "children": [], "function": "findBall", "code": "exit: findBall(self, grid)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "findBall", "code": "m = len(grid)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "findBall", "code": "n = len(grid[0])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "findBall", "code": "dp = [i for i in range(n)]"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "findBall", "code": "ans = [-1] * n"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "findBall", "code": "__iv = iter(range(m))"}, "8": {"lineno": 18, "parents": [19, 7], "children": [9, 20], "calls": ["range"], "function": "findBall", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "findBall", "code": "i = next(__iv)"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "findBall", "code": "newDp = [-1] * n"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "findBall", "code": "__iv = iter(range(n))"}, "12": {"lineno": 20, "parents": [17, 18, 11, 15], "children": [19, 13], "calls": ["range"], "function": "findBall", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 20, "parents": [12], "children": [14], "function": "findBall", "code": "j = next(__iv)"}, "14": {"lineno": 21, "parents": [13], "children": [16, 15], "function": "findBall", "code": "_if: j + grid[i][j] < 0 or j + grid[i][j] == n"}, "15": {"lineno": 22, "parents": [14], "children": [12], "function": "findBall", "code": "continue"}, "16": {"lineno": 23, "parents": [14], "children": [17, 18], "function": "findBall", "code": "_if: grid[i][j] == 1 and grid[i][j + 1] == -1 or (grid[i][j] == -1 and grid[i][j - 1] == 1)"}, "17": {"lineno": 24, "parents": [16], "children": [12], "function": "findBall", "code": "continue"}, "18": {"lineno": 25, "parents": [16], "children": [12], "function": "findBall", "code": "newDp[j + grid[i][j]] = dp[j]"}, "19": {"lineno": 26, "parents": [12], "children": [8], "function": "findBall", "code": "dp = newDp"}, "20": {"lineno": 28, "parents": [8], "children": [21], "function": "findBall", "code": "__iv = iter(enumerate(dp))"}, "21": {"lineno": 28, "parents": [24, 20, 23], "children": [25, 22], "calls": ["enumerate"], "function": "findBall", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 28, "parents": [21], "children": [23], "function": "findBall", "code": "i, ball = next(__iv)"}, "23": {"lineno": 29, "parents": [22], "children": [24, 21], "function": "findBall", "code": "_if: ball != -1"}, "24": {"lineno": 30, "parents": [23], "children": [21], "function": "findBall", "code": "ans[ball] = i"}, "25": {"lineno": 32, "parents": [21], "children": [2], "function": "findBall", "code": "return ans"}, "26": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1707, "task_title": "Maximum XOR With an Element From Array", "difficulty": 3, "func_name": "maximizeXor", "description": "You are given an array `nums` consisting of non-negative integers. You are\nalso given a `queries` array, where `queries[i] = [xi, mi]`.\n\nThe answer to the `ith` query is the maximum bitwise `XOR` value of `xi` and\nany element of `nums` that does not exceed `mi`. In other words, the answer is\n`max(nums[j] XOR xi)` for all `j` such that `nums[j] <= mi`. If all elements\nin `nums` are larger than `mi`, then the answer is `-1`.\n\nReturn an integer array `answer` where `answer.length == queries.length` and\n`answer[i]` is the answer to the `ith` query.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator, Optional\n\nclass TrieNode:\n  def __init__(self):\n    self.children: List[Optional[TrieNode]] = [None] * 2\n\n\nclass BitTrie:\n  def __init__(self, maxBit: int):\n    self.maxBit = maxBit\n    self.root = TrieNode()\n\n  def insert(self, num: int) -> None:\n    node = self.root\n    for i in range(self.maxBit, -1, -1):\n      bit = num >> i & 1\n      if not node.children[bit]:\n        node.children[bit] = TrieNode()\n      node = node.children[bit]\n\n  def getMaxXor(self, num: int) -> int:\n    maxXor = 0\n    node = self.root\n    for i in range(self.maxBit, -1, -1):\n      bit = num >> i & 1\n      toggleBit = bit ^ 1\n      if node.children[toggleBit]:\n        maxXor = maxXor | 1 << i\n        node = node.children[toggleBit]\n      elif node.children[bit]:\n        node = node.children[bit]\n      else:\n        return 0\n    return maxXor\n\n\nclass IndexedQuery:\n  def __init__(self, queryIndex: int, x: int, m: int):\n    self.queryIndex = queryIndex\n    self.x = x\n    self.m = m\n\n  def __iter__(self):\n    yield self.queryIndex\n    yield self.x\n    yield self.m\n\n\nclass Solution:\n  def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n    ans = [-1] * len(queries)\n    maxBit = int(math.log2(max(max(nums), max(x for x, _ in queries))))\n    bitTrie = BitTrie(maxBit)\n\n    nums.sort()\n\n    i = 0\n    for queryIndex, x, m in sorted([IndexedQuery(i, x, m) for i, (x, m) in enumerate(queries)], key=lambda iq: iq.m):\n      while i < len(nums) and nums[i] <= m:\n        bitTrie.insert(nums[i])\n        i += 1\n      if i > 0 and nums[i - 1] <= m:\n        ans[queryIndex] = bitTrie.getMaxXor(x)\n\n    return ans\n", "blocks": [{"type": "if", "start": 25, "end": 26}, {"type": "if", "start": 35, "end": 37}, {"type": "if", "start": 70, "end": 71}, {"type": "if", "start": 38, "end": 39}, {"type": "else", "start": 40, "end": 41}], "target_lines": [26, 36, 37, 39, 41, 71], "cfg": {"0": {"lineno": 0, "parents": [], "children": [60], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self)"}, "2": {"lineno": 12, "parents": [3], "children": [], "function": "__init__", "code": "exit: __init__(self)"}, "3": {"lineno": 13, "parents": [1], "children": [2], "function": "__init__", "code": "self.children: List[Optional[TrieNode]] = [None] * 2"}, "4": {"lineno": 17, "parents": [], "children": [6], "function": "__init__", "code": "enter: __init__(self, maxBit)"}, "5": {"lineno": 17, "parents": [7], "children": [], "function": "__init__", "code": "exit: __init__(self, maxBit)"}, "6": {"lineno": 18, "parents": [4], "children": [7], "function": "__init__", "code": "self.maxBit = maxBit"}, "7": {"lineno": 19, "parents": [6], "children": [5], "calls": ["TrieNode"], "function": "__init__", "code": "self.root = TrieNode()"}, "8": {"lineno": 21, "parents": [55], "children": [10], "function": "insert", "code": "enter: insert(self, num)"}, "9": {"lineno": 21, "parents": [12], "children": [], "function": "insert", "code": "exit: insert(self, num)"}, "10": {"lineno": 22, "parents": [8], "children": [11], "function": "insert", "code": "node = self.root"}, "11": {"lineno": 23, "parents": [10], "children": [12], "function": "insert", "code": "__iv = iter(range(self.maxBit, -1, -1))"}, "12": {"lineno": 23, "parents": [17, 11], "children": [9, 13], "calls": ["range"], "function": "insert", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 23, "parents": [12], "children": [14], "function": "insert", "code": "i = next(__iv)"}, "14": {"lineno": 24, "parents": [13], "children": [15], "function": "insert", "code": "bit = num >> i & 1"}, "15": {"lineno": 25, "parents": [14], "children": [16, 17], "function": "insert", "code": "_if: not node.children[bit]"}, "16": {"lineno": 26, "parents": [15], "children": [17], "calls": ["TrieNode"], "function": "insert", "code": "node.children[bit] = TrieNode()"}, "17": {"lineno": 27, "parents": [16, 15], "children": [12], "function": "insert", "code": "node = node.children[bit]"}, "18": {"lineno": 29, "parents": [58], "children": [20], "function": "getMaxXor", "code": "enter: getMaxXor(self, num)"}, "19": {"lineno": 29, "parents": [32, 33], "children": [], "function": "getMaxXor", "code": "exit: getMaxXor(self, num)"}, "20": {"lineno": 30, "parents": [18], "children": [21], "function": "getMaxXor", "code": "maxXor = 0"}, "21": {"lineno": 31, "parents": [20], "children": [22], "function": "getMaxXor", "code": "node = self.root"}, "22": {"lineno": 32, "parents": [21], "children": [23], "function": "getMaxXor", "code": "__iv = iter(range(self.maxBit, -1, -1))"}, "23": {"lineno": 32, "parents": [29, 22, 31], "children": [24, 33], "calls": ["range"], "function": "getMaxXor", "code": "_for: __iv.__length__hint__() > 0"}, "24": {"lineno": 32, "parents": [23], "children": [25], "function": "getMaxXor", "code": "i = next(__iv)"}, "25": {"lineno": 33, "parents": [24], "children": [26], "function": "getMaxXor", "code": "bit = num >> i & 1"}, "26": {"lineno": 34, "parents": [25], "children": [27], "function": "getMaxXor", "code": "toggleBit = bit ^ 1"}, "27": {"lineno": 35, "parents": [26], "children": [28, 30], "function": "getMaxXor", "code": "_if: node.children[toggleBit]"}, "28": {"lineno": 36, "parents": [27], "children": [29], "function": "getMaxXor", "code": "maxXor = maxXor | 1 << i"}, "29": {"lineno": 37, "parents": [28], "children": [23], "function": "getMaxXor", "code": "node = node.children[toggleBit]"}, "30": {"lineno": 38, "parents": [27], "children": [32, 31], "function": "getMaxXor", "code": "_if: node.children[bit]"}, "31": {"lineno": 39, "parents": [30], "children": [23], "function": "getMaxXor", "code": "node = node.children[bit]"}, "32": {"lineno": 41, "parents": [30], "children": [19], "function": "getMaxXor", "code": "return 0"}, "33": {"lineno": 42, "parents": [23], "children": [19], "function": "getMaxXor", "code": "return maxXor"}, "34": {"lineno": 46, "parents": [], "children": [36], "function": "__init__", "code": "enter: __init__(self, queryIndex, x, m)"}, "35": {"lineno": 46, "parents": [38], "children": [], "function": "__init__", "code": "exit: __init__(self, queryIndex, x, m)"}, "36": {"lineno": 47, "parents": [34], "children": [37], "function": "__init__", "code": "self.queryIndex = queryIndex"}, "37": {"lineno": 48, "parents": [36], "children": [38], "function": "__init__", "code": "self.x = x"}, "38": {"lineno": 49, "parents": [37], "children": [35], "function": "__init__", "code": "self.m = m"}, "39": {"lineno": 51, "parents": [], "children": [41], "function": "__iter__", "code": "enter: __iter__(self)"}, "40": {"lineno": 51, "parents": [43], "children": [], "function": "__iter__", "code": "exit: __iter__(self)"}, "41": {"lineno": 52, "parents": [39], "children": [42], "function": "__iter__", "code": "yield self.queryIndex"}, "42": {"lineno": 53, "parents": [41], "children": [43], "function": "__iter__", "code": "yield self.x"}, "43": {"lineno": 54, "parents": [42], "children": [40], "function": "__iter__", "code": "yield self.m"}, "44": {"lineno": 58, "parents": [], "children": [46], "function": "maximizeXor", "code": "enter: maximizeXor(self, nums, queries)"}, "45": {"lineno": 58, "parents": [59], "children": [], "function": "maximizeXor", "code": "exit: maximizeXor(self, nums, queries)"}, "46": {"lineno": 59, "parents": [44], "children": [47], "calls": ["len"], "function": "maximizeXor", "code": "ans = [-1] * len(queries)"}, "47": {"lineno": 60, "parents": [46], "children": [48], "calls": ["max", "max", "max", "log2", "int"], "function": "maximizeXor", "code": "maxBit = int(math.log2(max(max(nums), max((x for x, _ in queries)))))"}, "48": {"lineno": 61, "parents": [47], "children": [49], "calls": ["BitTrie"], "function": "maximizeXor", "code": "bitTrie = BitTrie(maxBit)"}, "49": {"lineno": 63, "parents": [48], "children": [50], "calls": ["sort"], "function": "maximizeXor", "code": "nums.sort()"}, "50": {"lineno": 65, "parents": [49], "children": [51], "function": "maximizeXor", "code": "i = 0"}, "51": {"lineno": 66, "parents": [50], "children": [52], "function": "maximizeXor", "code": "__iv = iter(sorted([IndexedQuery(i, x, m) for i, (x, m) in enumerate(queries)], key=lambda iq: iq.m))"}, "52": {"lineno": 66, "parents": [19, 57, 58, 51], "children": [59, 53], "calls": ["sorted"], "function": "maximizeXor", "code": "_for: __iv.__length__hint__() > 0"}, "53": {"lineno": 66, "parents": [52], "children": [54], "function": "maximizeXor", "code": "queryIndex, x, m = next(__iv)"}, "54": {"lineno": 67, "parents": [56, 53], "children": [57, 55], "function": "maximizeXor", "code": "_while: i < len(nums) and nums[i] <= m"}, "55": {"lineno": 68, "parents": [54], "children": [56], "calls": ["insert"], "function": "maximizeXor", "code": "bitTrie.insert(nums[i])"}, "56": {"lineno": 69, "parents": [9, 55], "children": [54], "function": "maximizeXor", "code": "i += 1"}, "57": {"lineno": 70, "parents": [54], "children": [58, 52], "function": "maximizeXor", "code": "_if: i > 0 and nums[i - 1] <= m"}, "58": {"lineno": 71, "parents": [57], "children": [52], "calls": ["getMaxXor"], "function": "maximizeXor", "code": "ans[queryIndex] = bitTrie.getMaxXor(x)"}, "59": {"lineno": 73, "parents": [52], "children": [45], "function": "maximizeXor", "code": "return ans"}, "60": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1717, "task_title": "Maximum Score From Removing Substrings", "difficulty": 2, "func_name": "maximumGain", "description": "You are given a string `s` and two integers `x` and `y`. You can perform two\ntypes of operations any number of times.\n\n* Remove substring `\"ab\"` and gain `x` points. \n* For example, when removing `\"ab\"` from `\"cabxbae\"` it becomes `\"cxbae\"`.\n* Remove substring `\"ba\"` and gain `y` points. \n* For example, when removing `\"ba\"` from `\"cabxbae\"` it becomes `\"cabxe\"`.\n\nReturn the maximum points you can gain after applying the above operations on\n`s`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def maximumGain(self, s: str, x: int, y: int) -> int:\n    if x > y:\n      return self._gain(s, 'ab', x, 'ba', y)\n    else:\n      return self._gain(s, 'ba', y, 'ab', x)\n\n  def _gain(self, s: str, sub1: str, point1: int, sub2: str, point2: int) -> int:\n    points = 0\n    stack1 = []\n    stack2 = []\n\n    for c in s:\n      if stack1 and stack1[-1] == sub1[0] and c == sub1[1]:\n        stack1.pop()\n        points += point1\n      else:\n        stack1.append(c)\n\n    for c in stack1:\n      if stack2 and stack2[-1] == sub2[0] and c == sub2[1]:\n        stack2.pop()\n        points += point2\n      else:\n        stack2.append(c)\n\n    return points\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "else", "start": 15, "end": 16}, {"type": "if", "start": 24, "end": 26}, {"type": "else", "start": 27, "end": 28}, {"type": "if", "start": 31, "end": 33}, {"type": "else", "start": 34, "end": 35}], "target_lines": [14, 16, 25, 26, 28, 32, 33, 35], "cfg": {"0": {"lineno": 0, "parents": [], "children": [26], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "maximumGain", "code": "enter: maximumGain(self, s, x, y)"}, "2": {"lineno": 12, "parents": [4, 5], "children": [], "function": "maximumGain", "code": "exit: maximumGain(self, s, x, y)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "calls": ["_gain", "_gain"], "function": "maximumGain", "code": "_if: x > y"}, "4": {"lineno": 14, "parents": [3, 7], "children": [2], "function": "maximumGain", "code": "return self._gain(s, 'ab', x, 'ba', y)"}, "5": {"lineno": 16, "parents": [3, 7], "children": [2], "function": "maximumGain", "code": "return self._gain(s, 'ba', y, 'ab', x)"}, "6": {"lineno": 18, "parents": [3], "children": [8], "function": "_gain", "code": "enter: _gain(self, s, sub1, point1, sub2, point2)"}, "7": {"lineno": 18, "parents": [25], "children": [], "function": "_gain", "code": "exit: _gain(self, s, sub1, point1, sub2, point2)"}, "8": {"lineno": 19, "parents": [6], "children": [9], "function": "_gain", "code": "points = 0"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "_gain", "code": "stack1 = []"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "_gain", "code": "stack2 = []"}, "11": {"lineno": 23, "parents": [10], "children": [12], "function": "_gain", "code": "__iv = iter(s)"}, "12": {"lineno": 23, "parents": [16, 17, 11], "children": [18, 13], "function": "_gain", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 23, "parents": [12], "children": [14], "function": "_gain", "code": "c = next(__iv)"}, "14": {"lineno": 24, "parents": [13], "children": [17, 15], "function": "_gain", "code": "_if: stack1 and stack1[-1] == sub1[0] and (c == sub1[1])"}, "15": {"lineno": 25, "parents": [14], "children": [16], "calls": ["pop"], "function": "_gain", "code": "stack1.pop()"}, "16": {"lineno": 26, "parents": [15], "children": [12], "function": "_gain", "code": "points += point1"}, "17": {"lineno": 28, "parents": [14], "children": [12], "calls": ["append"], "function": "_gain", "code": "stack1.append(c)"}, "18": {"lineno": 30, "parents": [12], "children": [19], "function": "_gain", "code": "__iv = iter(stack1)"}, "19": {"lineno": 30, "parents": [24, 18, 23], "children": [25, 20], "function": "_gain", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 30, "parents": [19], "children": [21], "function": "_gain", "code": "c = next(__iv)"}, "21": {"lineno": 31, "parents": [20], "children": [24, 22], "function": "_gain", "code": "_if: stack2 and stack2[-1] == sub2[0] and (c == sub2[1])"}, "22": {"lineno": 32, "parents": [21], "children": [23], "calls": ["pop"], "function": "_gain", "code": "stack2.pop()"}, "23": {"lineno": 33, "parents": [22], "children": [19], "function": "_gain", "code": "points += point2"}, "24": {"lineno": 35, "parents": [21], "children": [19], "calls": ["append"], "function": "_gain", "code": "stack2.append(c)"}, "25": {"lineno": 37, "parents": [19], "children": [7], "function": "_gain", "code": "return points"}, "26": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1719, "task_title": "Number Of Ways To Reconstruct A Tree", "difficulty": 3, "func_name": "checkWays", "description": "You are given an array `pairs`, where `pairs[i] = [xi, yi]`, and:\n\n* There are no duplicates.\n* `xi < yi`\n\nLet `ways` be the number of rooted trees that satisfy the following\nconditions:\n\n* The tree consists of nodes whose values appeared in `pairs`.\n* A pair `[xi, yi]` exists in `pairs` if and only if `xi` is an ancestor of `yi` or `yi` is an ancestor of `xi`.\n* Note: the tree does not have to be a binary tree.\n\nTwo ways are considered to be different if there is at least one node that has\ndifferent parents in both ways.\n\nReturn:\n\n* `0` if `ways == 0`\n* `1` if `ways == 1`\n* `2` if `ways > 1`\n\nA rooted tree is a tree that has a single root node, and all edges are\noriented to be outgoing from the root.\n\nAn ancestor of a node is any node on the path from the root to that node\n(excluding the node itself). The root has no ancestors.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def checkWays(self, pairs: List[List[int]]) -> int:\n    kMax = 501\n    graph = collections.defaultdict(list)\n    degrees = [0] * kMax\n    connected = [[False] * kMax for _ in range(kMax)]\n\n    for u, v in pairs:\n      graph[u].append(v)\n      graph[v].append(u)\n      degrees[u] += 1\n      degrees[v] += 1\n      connected[u][v] = True\n      connected[v][u] = True\n\n    for _, children in graph.items():\n      children.sort(key=lambda a: degrees[a], reverse=True)\n\n    root = next((i for i, d in enumerate(degrees) if d == len(graph) - 1), -1)\n    if root == -1:\n      return 0\n\n    hasMoreThanOneWay = False\n\n    def dfs(u: int, ancestors: List[int], seen: List[bool]) -> bool:\n      nonlocal hasMoreThanOneWay\n      seen[u] = True\n      for ancestor in ancestors:\n        if not connected[u][ancestor]:\n          return False\n      ancestors.append(u)\n      for v in graph[u]:\n        if seen[v]:\n          continue\n        if degrees[v] == degrees[u]:\n          hasMoreThanOneWay = True\n        if not dfs(v, ancestors, seen):\n          return False\n      ancestors.pop()\n      return True\n\n    if not dfs(root, [], [False] * kMax):\n      return 0\n    if hasMoreThanOneWay:\n      return 2\n    else:\n      return 1\n", "blocks": [{"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 52, "end": 53}, {"type": "if", "start": 54, "end": 55}, {"type": "else", "start": 56, "end": 57}, {"type": "if", "start": 39, "end": 40}, {"type": "if", "start": 43, "end": 44}, {"type": "if", "start": 45, "end": 46}, {"type": "if", "start": 47, "end": 48}], "target_lines": [31, 40, 44, 46, 48, 53, 55, 57], "cfg": {"0": {"lineno": 0, "parents": [], "children": [49], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "checkWays", "code": "enter: checkWays(self, pairs)"}, "2": {"lineno": 12, "parents": [48, 45, 22, 47], "children": [], "function": "checkWays", "code": "exit: checkWays(self, pairs)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "checkWays", "code": "kMax = 501"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["defaultdict"], "function": "checkWays", "code": "graph = collections.defaultdict(list)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "checkWays", "code": "degrees = [0] * kMax"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "checkWays", "code": "connected = [[False] * kMax for _ in range(kMax)]"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "checkWays", "code": "__iv = iter(pairs)"}, "8": {"lineno": 18, "parents": [15, 7], "children": [16, 9], "function": "checkWays", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "checkWays", "code": "u, v = next(__iv)"}, "10": {"lineno": 19, "parents": [9], "children": [11], "calls": ["append"], "function": "checkWays", "code": "graph[u].append(v)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "calls": ["append"], "function": "checkWays", "code": "graph[v].append(u)"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "checkWays", "code": "degrees[u] += 1"}, "13": {"lineno": 22, "parents": [12], "children": [14], "function": "checkWays", "code": "degrees[v] += 1"}, "14": {"lineno": 23, "parents": [13], "children": [15], "function": "checkWays", "code": "connected[u][v] = True"}, "15": {"lineno": 24, "parents": [14], "children": [8], "function": "checkWays", "code": "connected[v][u] = True"}, "16": {"lineno": 26, "parents": [8], "children": [17], "function": "checkWays", "code": "__iv = iter(graph.items())"}, "17": {"lineno": 26, "parents": [16, 19], "children": [18, 20], "calls": ["items"], "function": "checkWays", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 26, "parents": [17], "children": [19], "function": "checkWays", "code": "_, children = next(__iv)"}, "19": {"lineno": 27, "parents": [18], "children": [17], "calls": ["sort"], "function": "checkWays", "code": "children.sort(key=lambda a: degrees[a], reverse=True)"}, "20": {"lineno": 29, "parents": [17], "children": [21], "calls": ["next"], "function": "checkWays", "code": "root = next((i for i, d in enumerate(degrees) if d == len(graph) - 1), -1)"}, "21": {"lineno": 30, "parents": [20], "children": [22, 23], "function": "checkWays", "code": "_if: root == -1"}, "22": {"lineno": 31, "parents": [21], "children": [2], "function": "checkWays", "code": "return 0"}, "23": {"lineno": 33, "parents": [21], "children": [44], "function": "checkWays", "code": "hasMoreThanOneWay = False"}, "24": {"lineno": 35, "parents": [40, 44], "children": [26], "function": "dfs", "code": "enter: dfs(u, ancestors, seen)"}, "25": {"lineno": 35, "parents": [41, 43, 31], "children": [], "function": "dfs", "code": "exit: dfs(u, ancestors, seen)"}, "26": {"lineno": 37, "parents": [24], "children": [27], "function": "dfs", "code": "seen[u] = True"}, "27": {"lineno": 38, "parents": [26], "children": [28], "function": "dfs", "code": "__iv = iter(ancestors)"}, "28": {"lineno": 38, "parents": [27, 30], "children": [32, 29], "function": "dfs", "code": "_for: __iv.__length__hint__() > 0"}, "29": {"lineno": 38, "parents": [28], "children": [30], "function": "dfs", "code": "ancestor = next(__iv)"}, "30": {"lineno": 39, "parents": [29], "children": [28, 31], "function": "dfs", "code": "_if: not connected[u][ancestor]"}, "31": {"lineno": 40, "parents": [30], "children": [25], "function": "dfs", "code": "return False"}, "32": {"lineno": 41, "parents": [28], "children": [33], "calls": ["append"], "function": "dfs", "code": "ancestors.append(u)"}, "33": {"lineno": 42, "parents": [32], "children": [34], "function": "dfs", "code": "__iv = iter(graph[u])"}, "34": {"lineno": 42, "parents": [40, 33, 37, 25], "children": [42, 35], "function": "dfs", "code": "_for: __iv.__length__hint__() > 0"}, "35": {"lineno": 42, "parents": [34], "children": [36], "function": "dfs", "code": "v = next(__iv)"}, "36": {"lineno": 43, "parents": [35], "children": [37, 38], "function": "dfs", "code": "_if: seen[v]"}, "37": {"lineno": 44, "parents": [36], "children": [34], "function": "dfs", "code": "continue"}, "38": {"lineno": 45, "parents": [36], "children": [40, 39], "function": "dfs", "code": "_if: degrees[v] == degrees[u]"}, "39": {"lineno": 46, "parents": [38], "children": [40], "function": "dfs", "code": "hasMoreThanOneWay = True"}, "40": {"lineno": 47, "parents": [38, 39], "children": [41, 34], "calls": ["dfs"], "function": "dfs", "code": "_if: not dfs(v, ancestors, seen)"}, "41": {"lineno": 48, "parents": [40, 25], "children": [25], "function": "dfs", "code": "return False"}, "42": {"lineno": 49, "parents": [34], "children": [43], "calls": ["pop"], "function": "dfs", "code": "ancestors.pop()"}, "43": {"lineno": 50, "parents": [42], "children": [25], "function": "dfs", "code": "return True"}, "44": {"lineno": 52, "parents": [23], "children": [45, 46], "calls": ["dfs"], "function": "checkWays", "code": "_if: not dfs(root, [], [False] * kMax)"}, "45": {"lineno": 53, "parents": [25, 44], "children": [2], "function": "checkWays", "code": "return 0"}, "46": {"lineno": 54, "parents": [25, 44], "children": [48, 47], "function": "checkWays", "code": "_if: hasMoreThanOneWay"}, "47": {"lineno": 55, "parents": [46], "children": [2], "function": "checkWays", "code": "return 2"}, "48": {"lineno": 57, "parents": [46], "children": [2], "function": "checkWays", "code": "return 1"}, "49": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1722, "task_title": "Minimize Hamming Distance After Swap Operations", "difficulty": 2, "func_name": "minimumHammingDistance", "description": "You are given two integer arrays, `source` and `target`, both of length `n`.\nYou are also given an array `allowedSwaps` where each `allowedSwaps[i] = [ai,\nbi]` indicates that you are allowed to swap the elements at index `ai` and\nindex `bi` (0-indexed) of array `source`. Note that you can swap elements at a\nspecific pair of indices multiple times and in any order.\n\nThe Hamming distance of two arrays of the same length, `source` and `target`,\nis the number of positions where the elements are different. Formally, it is\nthe number of indices `i` for `0 <= i <= n-1` where `source[i] != target[i]`\n(0-indexed).\n\nReturn the minimum Hamming distance of `source` and `target` after performing\nany amount of swap operations on array `source`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def minimumHammingDistance(self, source: List[int], target: List[int], allowedSwaps: List[List[int]]) -> int:\n    n = len(source)\n    ans = 0\n    uf = UnionFind(n)\n    groupIdToCount = [collections.Counter() for _ in range(n)]\n\n    for a, b in allowedSwaps:\n      uf.unionByRank(a, b)\n\n    for i in range(n):\n      groupIdToCount[uf.find(i)][source[i]] += 1\n\n    for i in range(n):\n      groupId = uf.find(i)\n      count = groupIdToCount[groupId]\n      if target[i] not in count:\n        ans += 1\n      else:\n        count[target[i]] -= 1\n        if count[target[i]] == 0:\n          del count[target[i]]\n\n    return ans\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 23, "end": 24}, {"type": "else", "start": 25, "end": 27}, {"type": "if", "start": 51, "end": 52}, {"type": "else", "start": 53, "end": 56}, {"type": "if", "start": 55, "end": 56}], "target_lines": [20, 22, 24, 26, 27, 31, 52, 54, 55, 56], "cfg": {"0": {"lineno": 0, "parents": [], "children": [46], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.rank = [0] * n"}, "5": {"lineno": 16, "parents": [31], "children": [7], "function": "unionByRank", "code": "enter: unionByRank(self, u, v)"}, "6": {"lineno": 16, "parents": [16, 10, 12, 14], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "calls": ["find"], "function": "unionByRank", "code": "i = self.find(u)"}, "8": {"lineno": 18, "parents": [18, 7], "children": [9], "calls": ["find"], "function": "unionByRank", "code": "j = self.find(v)"}, "9": {"lineno": 19, "parents": [8, 18], "children": [10, 11], "function": "unionByRank", "code": "_if: i == j"}, "10": {"lineno": 20, "parents": [9], "children": [6], "function": "unionByRank", "code": "return"}, "11": {"lineno": 21, "parents": [9], "children": [12, 13], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "12": {"lineno": 22, "parents": [11], "children": [6], "function": "unionByRank", "code": "self.id[i] = j"}, "13": {"lineno": 23, "parents": [11], "children": [14, 15], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "14": {"lineno": 24, "parents": [13], "children": [6], "function": "unionByRank", "code": "self.id[j] = i"}, "15": {"lineno": 26, "parents": [13], "children": [16], "function": "unionByRank", "code": "self.id[i] = j"}, "16": {"lineno": 27, "parents": [15], "children": [6], "function": "unionByRank", "code": "self.rank[j] += 1"}, "17": {"lineno": 29, "parents": [8, 20, 39, 7], "children": [19], "function": "find", "code": "enter: find(self, u)"}, "18": {"lineno": 29, "parents": [21], "children": [], "function": "find", "code": "exit: find(self, u)"}, "19": {"lineno": 30, "parents": [17], "children": [20, 21], "function": "find", "code": "_if: self.id[u] != u"}, "20": {"lineno": 31, "parents": [19], "children": [21], "calls": ["find"], "function": "find", "code": "self.id[u] = self.find(self.id[u])"}, "21": {"lineno": 32, "parents": [18, 19, 20], "children": [18], "function": "find", "code": "return self.id[u]"}, "22": {"lineno": 36, "parents": [], "children": [24], "function": "minimumHammingDistance", "code": "enter: minimumHammingDistance(self, source, target, allowedSwaps)"}, "23": {"lineno": 36, "parents": [45], "children": [], "function": "minimumHammingDistance", "code": "exit: minimumHammingDistance(self, source, target, allowedSwaps)"}, "24": {"lineno": 37, "parents": [22], "children": [25], "calls": ["len"], "function": "minimumHammingDistance", "code": "n = len(source)"}, "25": {"lineno": 38, "parents": [24], "children": [26], "function": "minimumHammingDistance", "code": "ans = 0"}, "26": {"lineno": 39, "parents": [25], "children": [27], "calls": ["UnionFind"], "function": "minimumHammingDistance", "code": "uf = UnionFind(n)"}, "27": {"lineno": 40, "parents": [26], "children": [28], "function": "minimumHammingDistance", "code": "groupIdToCount = [collections.Counter() for _ in range(n)]"}, "28": {"lineno": 42, "parents": [27], "children": [29], "function": "minimumHammingDistance", "code": "__iv = iter(allowedSwaps)"}, "29": {"lineno": 42, "parents": [28, 6, 31], "children": [32, 30], "function": "minimumHammingDistance", "code": "_for: __iv.__length__hint__() > 0"}, "30": {"lineno": 42, "parents": [29], "children": [31], "function": "minimumHammingDistance", "code": "a, b = next(__iv)"}, "31": {"lineno": 43, "parents": [30], "children": [29], "calls": ["unionByRank"], "function": "minimumHammingDistance", "code": "uf.unionByRank(a, b)"}, "32": {"lineno": 45, "parents": [29], "children": [33], "function": "minimumHammingDistance", "code": "__iv = iter(range(n))"}, "33": {"lineno": 45, "parents": [32, 35], "children": [34, 36], "calls": ["range"], "function": "minimumHammingDistance", "code": "_for: __iv.__length__hint__() > 0"}, "34": {"lineno": 45, "parents": [33], "children": [35], "function": "minimumHammingDistance", "code": "i = next(__iv)"}, "35": {"lineno": 46, "parents": [34], "children": [33], "function": "minimumHammingDistance", "code": "groupIdToCount[uf.find(i)][source[i]] += 1"}, "36": {"lineno": 48, "parents": [33], "children": [37], "function": "minimumHammingDistance", "code": "__iv = iter(range(n))"}, "37": {"lineno": 48, "parents": [42, 36, 44], "children": [45, 38], "calls": ["range"], "function": "minimumHammingDistance", "code": "_for: __iv.__length__hint__() > 0"}, "38": {"lineno": 48, "parents": [37], "children": [39], "function": "minimumHammingDistance", "code": "i = next(__iv)"}, "39": {"lineno": 49, "parents": [38], "children": [40], "calls": ["find"], "function": "minimumHammingDistance", "code": "groupId = uf.find(i)"}, "40": {"lineno": 50, "parents": [18, 39], "children": [41], "function": "minimumHammingDistance", "code": "count = groupIdToCount[groupId]"}, "41": {"lineno": 51, "parents": [40], "children": [42, 43], "function": "minimumHammingDistance", "code": "_if: target[i] not in count"}, "42": {"lineno": 52, "parents": [41], "children": [37], "function": "minimumHammingDistance", "code": "ans += 1"}, "43": {"lineno": 54, "parents": [41], "children": [44], "function": "minimumHammingDistance", "code": "count[target[i]] -= 1"}, "44": {"lineno": 55, "parents": [43], "children": [37], "function": "minimumHammingDistance", "code": "_if: count[target[i]] == 0"}, "45": {"lineno": 58, "parents": [37], "children": [23], "function": "minimumHammingDistance", "code": "return ans"}, "46": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1735, "task_title": "Count Ways to Make Array With Product", "difficulty": 3, "func_name": "waysToFillArray", "description": "You are given a 2D integer array, `queries`. For each `queries[i]`, where\n`queries[i] = [ni, ki]`, find the number of different ways you can place\npositive integers into an array of size `ni` such that the product of the\nintegers is `ki`. As the number of ways may be too large, the answer to the\n`ith` query is the number of ways modulo `109 + 7`.\n\nReturn an integer array `answer` where `answer.length == queries.length`, and\n`answer[i]` is the answer to the `ith` query.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def waysToFillArray(self, queries: List[List[int]]) -> List[int]:\n    kMod = 1_000_000_007\n    kMax = 10_000\n    minPrimeFactors = self._sieveEratosthenes(kMax + 1)\n\n    @functools.lru_cache(None)\n    def fact(i: int) -> int:\n      return 1 if i <= 1 else i * fact(i - 1) % kMod\n\n    @functools.lru_cache(None)\n    def inv(i: int) -> int:\n      return pow(i, kMod - 2, kMod)\n\n    @functools.lru_cache(None)\n    def nCk(n: int, k: int) -> int:\n      return fact(n) * inv(fact(k)) * inv(fact(n - k)) % kMod\n\n    ans = []\n\n    for n, k in queries:\n      res = 1\n      for freq in self._getPrimeFactorsCount(k, minPrimeFactors).values():\n        res = res * nCk(n - 1 + freq, freq) % kMod\n      ans.append(res)\n\n    return ans\n\n  def _sieveEratosthenes(self, n: int) -> List[int]:\n    minPrimeFactors = [i for i in range(n + 1)]\n    for i in range(2, int(n**0.5) + 1):\n      if minPrimeFactors[i] == i:\n        for j in range(i * i, n, i):\n          minPrimeFactors[j] = min(minPrimeFactors[j], i)\n    return minPrimeFactors\n\n  def _getPrimeFactorsCount(self, num: int, minPrimeFactors: List[int]) -> Dict[int, int]:\n    count = collections.Counter()\n    while num > 1:\n      divisor = minPrimeFactors[num]\n      while num % divisor == 0:\n        num //= divisor\n        count[divisor] += 1\n    return count\n", "blocks": [{"type": "if", "start": 42, "end": 44}], "target_lines": [43, 44], "cfg": {"0": {"lineno": 0, "parents": [], "children": [47], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "waysToFillArray", "code": "enter: waysToFillArray(self, queries)"}, "2": {"lineno": 12, "parents": [25], "children": [], "function": "waysToFillArray", "code": "exit: waysToFillArray(self, queries)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "waysToFillArray", "code": "kMod = 1000000007"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "waysToFillArray", "code": "kMax = 10000"}, "5": {"lineno": 15, "parents": [4], "children": [15], "calls": ["_sieveEratosthenes"], "function": "waysToFillArray", "code": "minPrimeFactors = self._sieveEratosthenes(kMax + 1)"}, "6": {"lineno": 18, "parents": [12], "children": [8], "function": "fact", "code": "enter: fact(i)"}, "7": {"lineno": 18, "parents": [8], "children": [], "function": "fact", "code": "exit: fact(i)"}, "8": {"lineno": 19, "parents": [6], "children": [7], "function": "fact", "code": "return 1 if i <= 1 else i * fact(i - 1) % kMod"}, "9": {"lineno": 22, "parents": [12], "children": [11], "calls": ["pow"], "function": "inv", "code": "enter: inv(i)"}, "10": {"lineno": 22, "parents": [11], "children": [], "function": "inv", "code": "exit: inv(i)"}, "11": {"lineno": 23, "parents": [9], "children": [10], "function": "inv", "code": "return pow(i, kMod - 2, kMod)"}, "12": {"lineno": 26, "parents": [23], "children": [14], "calls": ["fact", "fact", "inv", "fact", "inv"], "function": "nCk", "code": "enter: nCk(n, k)"}, "13": {"lineno": 26, "parents": [14], "children": [], "function": "nCk", "code": "exit: nCk(n, k)"}, "14": {"lineno": 27, "parents": [10, 12, 7], "children": [13], "function": "nCk", "code": "return fact(n) * inv(fact(k)) * inv(fact(n - k)) % kMod"}, "15": {"lineno": 29, "parents": [27, 5], "children": [16], "function": "waysToFillArray", "code": "ans = []"}, "16": {"lineno": 31, "parents": [15], "children": [17], "function": "waysToFillArray", "code": "__iv = iter(queries)"}, "17": {"lineno": 31, "parents": [16, 24], "children": [25, 18], "function": "waysToFillArray", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 31, "parents": [17], "children": [19], "function": "waysToFillArray", "code": "n, k = next(__iv)"}, "19": {"lineno": 32, "parents": [18], "children": [20], "function": "waysToFillArray", "code": "res = 1"}, "20": {"lineno": 33, "parents": [19], "children": [21], "function": "waysToFillArray", "code": "__iv = iter(self._getPrimeFactorsCount(k, minPrimeFactors).values())"}, "21": {"lineno": 33, "parents": [20, 13, 23], "children": [24, 22], "calls": ["values"], "function": "waysToFillArray", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 33, "parents": [21], "children": [23], "function": "waysToFillArray", "code": "freq = next(__iv)"}, "23": {"lineno": 34, "parents": [22], "children": [21], "calls": ["nCk"], "function": "waysToFillArray", "code": "res = res * nCk(n - 1 + freq, freq) % kMod"}, "24": {"lineno": 35, "parents": [21], "children": [17], "calls": ["append"], "function": "waysToFillArray", "code": "ans.append(res)"}, "25": {"lineno": 37, "parents": [17], "children": [2], "function": "waysToFillArray", "code": "return ans"}, "26": {"lineno": 39, "parents": [5], "children": [28], "function": "_sieveEratosthenes", "code": "enter: _sieveEratosthenes(self, n)"}, "27": {"lineno": 39, "parents": [37], "children": [], "function": "_sieveEratosthenes", "code": "exit: _sieveEratosthenes(self, n)"}, "28": {"lineno": 40, "parents": [26], "children": [29], "function": "_sieveEratosthenes", "code": "minPrimeFactors = [i for i in range(n + 1)]"}, "29": {"lineno": 41, "parents": [28], "children": [30], "function": "_sieveEratosthenes", "code": "__iv = iter(range(2, int(n ** 0.5) + 1))"}, "30": {"lineno": 41, "parents": [32, 34, 29], "children": [37, 31], "calls": ["int", "range"], "function": "_sieveEratosthenes", "code": "_for: __iv.__length__hint__() > 0"}, "31": {"lineno": 41, "parents": [30], "children": [32], "function": "_sieveEratosthenes", "code": "i = next(__iv)"}, "32": {"lineno": 42, "parents": [31], "children": [33, 30], "function": "_sieveEratosthenes", "code": "_if: minPrimeFactors[i] == i"}, "33": {"lineno": 43, "parents": [32], "children": [34], "function": "_sieveEratosthenes", "code": "__iv = iter(range(i * i, n, i))"}, "34": {"lineno": 43, "parents": [33, 36], "children": [35, 30], "calls": ["range"], "function": "_sieveEratosthenes", "code": "_for: __iv.__length__hint__() > 0"}, "35": {"lineno": 43, "parents": [34], "children": [36], "function": "_sieveEratosthenes", "code": "j = next(__iv)"}, "36": {"lineno": 44, "parents": [35], "children": [34], "calls": ["min"], "function": "_sieveEratosthenes", "code": "minPrimeFactors[j] = min(minPrimeFactors[j], i)"}, "37": {"lineno": 45, "parents": [30], "children": [27], "function": "_sieveEratosthenes", "code": "return minPrimeFactors"}, "38": {"lineno": 47, "parents": [], "children": [40], "function": "_getPrimeFactorsCount", "code": "enter: _getPrimeFactorsCount(self, num, minPrimeFactors)"}, "39": {"lineno": 47, "parents": [46], "children": [], "function": "_getPrimeFactorsCount", "code": "exit: _getPrimeFactorsCount(self, num, minPrimeFactors)"}, "40": {"lineno": 48, "parents": [38], "children": [41], "calls": ["Counter"], "function": "_getPrimeFactorsCount", "code": "count = collections.Counter()"}, "41": {"lineno": 49, "parents": [40, 43], "children": [42, 46], "function": "_getPrimeFactorsCount", "code": "_while: num > 1"}, "42": {"lineno": 50, "parents": [41], "children": [43], "function": "_getPrimeFactorsCount", "code": "divisor = minPrimeFactors[num]"}, "43": {"lineno": 51, "parents": [42, 45], "children": [41, 44], "function": "_getPrimeFactorsCount", "code": "_while: num % divisor == 0"}, "44": {"lineno": 52, "parents": [43], "children": [45], "function": "_getPrimeFactorsCount", "code": "num //= divisor"}, "45": {"lineno": 53, "parents": [44], "children": [43], "function": "_getPrimeFactorsCount", "code": "count[divisor] += 1"}, "46": {"lineno": 54, "parents": [41], "children": [39], "function": "_getPrimeFactorsCount", "code": "return count"}, "47": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1765, "task_title": "Map of Highest Peak", "difficulty": 2, "func_name": "highestPeak", "description": "You are given an integer matrix `isWater` of size `m x n` that represents a\nmap of land and water cells.\n\n* If `isWater[i][j] == 0`, cell `(i, j)` is a land cell.\n* If `isWater[i][j] == 1`, cell `(i, j)` is a water cell.\n\nYou must assign each cell a height in a way that follows these rules:\n\n* The height of each cell must be non-negative.\n* If the cell is a water cell, its height must be `0`.\n* Any two adjacent cells must have an absolute height difference of at most `1`. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\n\nFind an assignment of heights such that the maximum height in the matrix is\nmaximized.\n\nReturn an integer matrix `height` of size `m x n` where `height[i][j]` is cell\n`(i, j)`'s height. If there are multiple solutions, return any of them.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def highestPeak(self, isWater: List[List[int]]) -> List[List[int]]:\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    m = len(isWater)\n    n = len(isWater[0])\n    ans = [[-1] * n for _ in range(m)]\n    q = collections.deque()\n\n    for i in range(m):\n      for j in range(n):\n        if isWater[i][j] == 1:\n          q.append((i, j))\n          ans[i][j] = 0\n\n    while q:\n      i, j = q.popleft()\n      for dx, dy in dirs:\n        x = i + dx\n        y = j + dy\n        if x < 0 or x == m or y < 0 or y == n:\n          continue\n        if ans[x][y] != -1:\n          continue\n        ans[x][y] = ans[i][j] + 1\n        q.append((x, y))\n\n    return ans\n", "blocks": [{"type": "if", "start": 21, "end": 23}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 32, "end": 33}], "target_lines": [22, 23, 31, 33], "cfg": {"0": {"lineno": 0, "parents": [], "children": [31], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "highestPeak", "code": "enter: highestPeak(self, isWater)"}, "2": {"lineno": 12, "parents": [30], "children": [], "function": "highestPeak", "code": "exit: highestPeak(self, isWater)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "highestPeak", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "highestPeak", "code": "m = len(isWater)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["len"], "function": "highestPeak", "code": "n = len(isWater[0])"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "highestPeak", "code": "ans = [[-1] * n for _ in range(m)]"}, "7": {"lineno": 17, "parents": [6], "children": [8], "calls": ["deque"], "function": "highestPeak", "code": "q = collections.deque()"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "highestPeak", "code": "__iv = iter(range(m))"}, "9": {"lineno": 19, "parents": [8, 12], "children": [17, 10], "calls": ["range"], "function": "highestPeak", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "highestPeak", "code": "i = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "highestPeak", "code": "__iv = iter(range(n))"}, "12": {"lineno": 20, "parents": [16, 11, 14], "children": [9, 13], "calls": ["range"], "function": "highestPeak", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 20, "parents": [12], "children": [14], "function": "highestPeak", "code": "j = next(__iv)"}, "14": {"lineno": 21, "parents": [13], "children": [12, 15], "function": "highestPeak", "code": "_if: isWater[i][j] == 1"}, "15": {"lineno": 22, "parents": [14], "children": [16], "calls": ["append"], "function": "highestPeak", "code": "q.append((i, j))"}, "16": {"lineno": 23, "parents": [15], "children": [12], "function": "highestPeak", "code": "ans[i][j] = 0"}, "17": {"lineno": 25, "parents": [9, 20], "children": [18, 30], "function": "highestPeak", "code": "_while: q"}, "18": {"lineno": 26, "parents": [17], "children": [19], "calls": ["popleft"], "function": "highestPeak", "code": "i, j = q.popleft()"}, "19": {"lineno": 27, "parents": [18], "children": [20], "function": "highestPeak", "code": "__iv = iter(dirs)"}, "20": {"lineno": 27, "parents": [27, 25, 19, 29], "children": [17, 21], "function": "highestPeak", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 27, "parents": [20], "children": [22], "function": "highestPeak", "code": "dx, dy = next(__iv)"}, "22": {"lineno": 28, "parents": [21], "children": [23], "function": "highestPeak", "code": "x = i + dx"}, "23": {"lineno": 29, "parents": [22], "children": [24], "function": "highestPeak", "code": "y = j + dy"}, "24": {"lineno": 30, "parents": [23], "children": [25, 26], "function": "highestPeak", "code": "_if: x < 0 or x == m or y < 0 or (y == n)"}, "25": {"lineno": 31, "parents": [24], "children": [20], "function": "highestPeak", "code": "continue"}, "26": {"lineno": 32, "parents": [24], "children": [27, 28], "function": "highestPeak", "code": "_if: ans[x][y] != -1"}, "27": {"lineno": 33, "parents": [26], "children": [20], "function": "highestPeak", "code": "continue"}, "28": {"lineno": 34, "parents": [26], "children": [29], "function": "highestPeak", "code": "ans[x][y] = ans[i][j] + 1"}, "29": {"lineno": 35, "parents": [28], "children": [20], "calls": ["append"], "function": "highestPeak", "code": "q.append((x, y))"}, "30": {"lineno": 37, "parents": [17], "children": [2], "function": "highestPeak", "code": "return ans"}, "31": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1782, "task_title": "Count Pairs Of Nodes", "difficulty": 3, "func_name": "countPairs", "description": "You are given an undirected graph defined by an integer `n`, the number of\nnodes, and a 2D integer array `edges`, the edges in the graph, where `edges[i]\n= [ui, vi]` indicates that there is an undirected edge between `ui` and `vi`.\nYou are also given an integer array `queries`.\n\nLet `incident(a, b)` be defined as the number of edges that are connected to\neither node `a` or `b`.\n\nThe answer to the `jth` query is the number of pairs of nodes `(a, b)` that\nsatisfy both of the following conditions:\n\n* `a < b`\n* `incident(a, b) > queries[j]`\n\nReturn an array `answers` such that `answers.length == queries.length` and\n`answers[j]` is the answer of the `jth` query.\n\nNote that there can be multiple edges between the same two nodes.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def countPairs(self, n: int, edges: List[List[int]], queries: List[int]) -> List[int]:\n    ans = [0] * len(queries)\n\n    count = [0] * (n + 1)\n\n    shared = [collections.Counter() for _ in range(n + 1)]\n\n    for u, v in edges:\n      count[u] += 1\n      count[v] += 1\n      shared[min(u, v)][max(u, v)] += 1\n\n    sortedCount = sorted(count)\n\n    for k, query in enumerate(queries):\n      i = 1\n      j = n\n      while i < j:\n        if sortedCount[i] + sortedCount[j] > query:\n          ans[k] += j - i\n          j -= 1\n        else:\n          i += 1\n      for i in range(1, n + 1):\n        for j, sh in shared[i].items():\n          if count[i] + count[j] > query and count[i] + count[j] - sh <= query:\n            ans[k] -= 1\n\n    return ans\n", "blocks": [{"type": "if", "start": 30, "end": 32}, {"type": "else", "start": 33, "end": 34}, {"type": "if", "start": 37, "end": 38}], "target_lines": [31, 32, 34, 38], "cfg": {"0": {"lineno": 0, "parents": [], "children": [32], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "countPairs", "code": "enter: countPairs(self, n, edges, queries)"}, "2": {"lineno": 12, "parents": [31], "children": [], "function": "countPairs", "code": "exit: countPairs(self, n, edges, queries)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "countPairs", "code": "ans = [0] * len(queries)"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "countPairs", "code": "count = [0] * (n + 1)"}, "5": {"lineno": 17, "parents": [4], "children": [6], "function": "countPairs", "code": "shared = [collections.Counter() for _ in range(n + 1)]"}, "6": {"lineno": 19, "parents": [5], "children": [7], "function": "countPairs", "code": "__iv = iter(edges)"}, "7": {"lineno": 19, "parents": [11, 6], "children": [8, 12], "function": "countPairs", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "countPairs", "code": "u, v = next(__iv)"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "countPairs", "code": "count[u] += 1"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "countPairs", "code": "count[v] += 1"}, "11": {"lineno": 22, "parents": [10], "children": [7], "function": "countPairs", "code": "shared[min(u, v)][max(u, v)] += 1"}, "12": {"lineno": 24, "parents": [7], "children": [13], "calls": ["sorted"], "function": "countPairs", "code": "sortedCount = sorted(count)"}, "13": {"lineno": 26, "parents": [12], "children": [14], "function": "countPairs", "code": "__iv = iter(enumerate(queries))"}, "14": {"lineno": 26, "parents": [24, 13], "children": [31, 15], "calls": ["enumerate"], "function": "countPairs", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 26, "parents": [14], "children": [16], "function": "countPairs", "code": "k, query = next(__iv)"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "countPairs", "code": "i = 1"}, "17": {"lineno": 28, "parents": [16], "children": [18], "function": "countPairs", "code": "j = n"}, "18": {"lineno": 29, "parents": [17, 21, 22], "children": [19, 23], "function": "countPairs", "code": "_while: i < j"}, "19": {"lineno": 30, "parents": [18], "children": [20, 22], "function": "countPairs", "code": "_if: sortedCount[i] + sortedCount[j] > query"}, "20": {"lineno": 31, "parents": [19], "children": [21], "function": "countPairs", "code": "ans[k] += j - i"}, "21": {"lineno": 32, "parents": [20], "children": [18], "function": "countPairs", "code": "j -= 1"}, "22": {"lineno": 34, "parents": [19], "children": [18], "function": "countPairs", "code": "i += 1"}, "23": {"lineno": 35, "parents": [18], "children": [24], "function": "countPairs", "code": "__iv = iter(range(1, n + 1))"}, "24": {"lineno": 35, "parents": [27, 23], "children": [25, 14], "calls": ["range"], "function": "countPairs", "code": "_for: __iv.__length__hint__() > 0"}, "25": {"lineno": 35, "parents": [24], "children": [26], "function": "countPairs", "code": "i = next(__iv)"}, "26": {"lineno": 36, "parents": [25], "children": [27], "function": "countPairs", "code": "__iv = iter(shared[i].items())"}, "27": {"lineno": 36, "parents": [26, 29, 30], "children": [24, 28], "calls": ["items"], "function": "countPairs", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 36, "parents": [27], "children": [29], "function": "countPairs", "code": "j, sh = next(__iv)"}, "29": {"lineno": 37, "parents": [28], "children": [27, 30], "function": "countPairs", "code": "_if: count[i] + count[j] > query and count[i] + count[j] - sh <= query"}, "30": {"lineno": 38, "parents": [29], "children": [27], "function": "countPairs", "code": "ans[k] -= 1"}, "31": {"lineno": 40, "parents": [14], "children": [2], "function": "countPairs", "code": "return ans"}, "32": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1786, "task_title": "Number of Restricted Paths From First to Last Node", "difficulty": 2, "func_name": "countRestrictedPaths", "description": "There is an undirected weighted connected graph. You are given a positive\ninteger `n` which denotes that the graph has `n` nodes labeled from `1` to\n`n`, and an array `edges` where each `edges[i] = [ui, vi, weighti]` denotes\nthat there is an edge between nodes `ui` and `vi` with weight equal to\n`weighti`.\n\nA path from node `start` to node `end` is a sequence of nodes `[z0, z1, z2,\n..., zk]` such that `z0 = start` and `zk = end` and there is an edge between\n`zi` and `zi+1` where `0 <= i <= k-1`.\n\nThe distance of a path is the sum of the weights on the edges of the path. Let\n`distanceToLastNode(x)` denote the shortest distance of a path between node\n`n` and node `x`. A restricted path is a path that also satisfies that\n`distanceToLastNode(zi) > distanceToLastNode(zi+1)` where `0 <= i <= k-1`.\n\nReturn the number of restricted paths from node `1` to node `n`. Since that\nnumber may be too large, return it modulo `109 + 7`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def countRestrictedPaths(self, n: int, edges: List[List[int]]) -> int:\n    graph = [[] for _ in range(n)]\n\n    for u, v, w in edges:\n      graph[u - 1].append((v - 1, w))\n      graph[v - 1].append((u - 1, w))\n\n    return self._dijkstra(graph, 0, n - 1)\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int, dst: int) -> int:\n    kMod = 10**9 + 7\n    ways = [0] * len(graph)\n    dist = [math.inf] * len(graph)\n\n    ways[dst] = 1\n    dist[dst] = 0\n    minHeap = [(dist[dst], dst)]\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      if d > dist[u]:\n        continue\n      for v, w in graph[u]:\n        if d + w < dist[v]:\n          dist[v] = d + w\n          heapq.heappush(minHeap, (dist[v], v))\n        if dist[v] < dist[u]:\n          ways[u] += ways[v]\n          ways[u] %= kMod\n\n    return ways[src]\n", "blocks": [{"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 35, "end": 37}, {"type": "if", "start": 38, "end": 40}], "target_lines": [33, 36, 37, 39, 40], "cfg": {"0": {"lineno": 0, "parents": [], "children": [32], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "countRestrictedPaths", "code": "enter: countRestrictedPaths(self, n, edges)"}, "2": {"lineno": 12, "parents": [9], "children": [], "function": "countRestrictedPaths", "code": "exit: countRestrictedPaths(self, n, edges)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "countRestrictedPaths", "code": "graph = [[] for _ in range(n)]"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "countRestrictedPaths", "code": "__iv = iter(edges)"}, "5": {"lineno": 15, "parents": [8, 4], "children": [9, 6], "calls": ["_dijkstra"], "function": "countRestrictedPaths", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [11, 5], "children": [7], "function": "countRestrictedPaths", "code": "u, v, w = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8], "calls": ["append"], "function": "countRestrictedPaths", "code": "graph[u - 1].append((v - 1, w))"}, "8": {"lineno": 17, "parents": [7], "children": [5], "calls": ["append"], "function": "countRestrictedPaths", "code": "graph[v - 1].append((u - 1, w))"}, "9": {"lineno": 19, "parents": [11, 5], "children": [2], "function": "countRestrictedPaths", "code": "return self._dijkstra(graph, 0, n - 1)"}, "10": {"lineno": 21, "parents": [5], "children": [12], "function": "_dijkstra", "code": "enter: _dijkstra(self, graph, src, dst)"}, "11": {"lineno": 21, "parents": [31], "children": [], "function": "_dijkstra", "code": "exit: _dijkstra(self, graph, src, dst)"}, "12": {"lineno": 22, "parents": [10], "children": [13], "function": "_dijkstra", "code": "kMod = 10 ** 9 + 7"}, "13": {"lineno": 23, "parents": [12], "children": [14], "calls": ["len"], "function": "_dijkstra", "code": "ways = [0] * len(graph)"}, "14": {"lineno": 24, "parents": [13], "children": [15], "calls": ["len"], "function": "_dijkstra", "code": "dist = [math.inf] * len(graph)"}, "15": {"lineno": 26, "parents": [14], "children": [16], "function": "_dijkstra", "code": "ways[dst] = 1"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "_dijkstra", "code": "dist[dst] = 0"}, "17": {"lineno": 28, "parents": [16], "children": [18], "function": "_dijkstra", "code": "minHeap = [(dist[dst], dst)]"}, "18": {"lineno": 30, "parents": [17, 21, 23], "children": [19, 31], "function": "_dijkstra", "code": "_while: minHeap"}, "19": {"lineno": 31, "parents": [18], "children": [20], "calls": ["heappop"], "function": "_dijkstra", "code": "d, u = heapq.heappop(minHeap)"}, "20": {"lineno": 32, "parents": [19], "children": [21, 22], "function": "_dijkstra", "code": "_if: d > dist[u]"}, "21": {"lineno": 33, "parents": [20], "children": [18], "function": "_dijkstra", "code": "continue"}, "22": {"lineno": 34, "parents": [20], "children": [23], "function": "_dijkstra", "code": "__iv = iter(graph[u])"}, "23": {"lineno": 34, "parents": [28, 22, 30], "children": [24, 18], "function": "_dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "24": {"lineno": 34, "parents": [23], "children": [25], "function": "_dijkstra", "code": "v, w = next(__iv)"}, "25": {"lineno": 35, "parents": [24], "children": [26, 28], "function": "_dijkstra", "code": "_if: d + w < dist[v]"}, "26": {"lineno": 36, "parents": [25], "children": [27], "function": "_dijkstra", "code": "dist[v] = d + w"}, "27": {"lineno": 37, "parents": [26], "children": [28], "calls": ["heappush"], "function": "_dijkstra", "code": "heapq.heappush(minHeap, (dist[v], v))"}, "28": {"lineno": 38, "parents": [25, 27], "children": [29, 23], "function": "_dijkstra", "code": "_if: dist[v] < dist[u]"}, "29": {"lineno": 39, "parents": [28], "children": [30], "function": "_dijkstra", "code": "ways[u] += ways[v]"}, "30": {"lineno": 40, "parents": [29], "children": [23], "function": "_dijkstra", "code": "ways[u] %= kMod"}, "31": {"lineno": 42, "parents": [18], "children": [11], "function": "_dijkstra", "code": "return ways[src]"}, "32": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1793, "task_title": "Maximum Score of a Good Subarray", "difficulty": 3, "func_name": "maximumScore", "description": "You are given an array of integers `nums` (0-indexed) and an integer `k`.\n\nThe score of a subarray `(i, j)` is defined as `min(nums[i], nums[i+1], ...,\nnums[j]) * (j - i + 1)`. A good subarray is a subarray where `i <= k <= j`.\n\nReturn the maximum possible score of a good subarray.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def maximumScore(self, nums: List[int], k: int) -> int:\n    ans = 0\n    stack = []\n\n    for i in range(len(nums) + 1):\n      while stack and (i == len(nums) or nums[stack[-1]] > nums[i]):\n        h = nums[stack.pop()]\n        w = i - stack[-1] - 1 if stack else i\n        if (not stack or stack[-1] + 1 <= k) and i - 1 >= k:\n          ans = max(ans, h * w)\n      stack.append(i)\n\n    return ans\n", "blocks": [{"type": "if", "start": 20, "end": 21}], "target_lines": [21], "cfg": {"0": {"lineno": 0, "parents": [], "children": [15], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "maximumScore", "code": "enter: maximumScore(self, nums, k)"}, "2": {"lineno": 12, "parents": [14], "children": [], "function": "maximumScore", "code": "exit: maximumScore(self, nums, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "maximumScore", "code": "ans = 0"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "maximumScore", "code": "stack = []"}, "5": {"lineno": 16, "parents": [4], "children": [6], "function": "maximumScore", "code": "__iv = iter(range(len(nums) + 1))"}, "6": {"lineno": 16, "parents": [13, 5], "children": [14, 7], "calls": ["len", "range"], "function": "maximumScore", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "maximumScore", "code": "i = next(__iv)"}, "8": {"lineno": 17, "parents": [11, 12, 7], "children": [9, 13], "function": "maximumScore", "code": "_while: stack and (i == len(nums) or nums[stack[-1]] > nums[i])"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "maximumScore", "code": "h = nums[stack.pop()]"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "maximumScore", "code": "w = i - stack[-1] - 1 if stack else i"}, "11": {"lineno": 20, "parents": [10], "children": [8, 12], "function": "maximumScore", "code": "_if: (not stack or stack[-1] + 1 <= k) and i - 1 >= k"}, "12": {"lineno": 21, "parents": [11], "children": [8], "calls": ["max"], "function": "maximumScore", "code": "ans = max(ans, h * w)"}, "13": {"lineno": 22, "parents": [8], "children": [6], "calls": ["append"], "function": "maximumScore", "code": "stack.append(i)"}, "14": {"lineno": 24, "parents": [6], "children": [2], "function": "maximumScore", "code": "return ans"}, "15": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1805, "task_title": "Number of Different Integers in a String", "difficulty": 1, "func_name": "numDifferentIntegers", "description": "You are given a string `word` that consists of digits and lowercase English\nletters.\n\nYou will replace every non-digit character with a space. For example,\n`\"a123bc34d8ef34\"` will become `\" 123 34 8 34\"`. Notice that you are left with\nsome integers that are separated by at least one space: `\"123\"`, `\"34\"`,\n`\"8\"`, and `\"34\"`.\n\nReturn the number of different integers after performing the replacement\noperations on `word`.\n\nTwo integers are considered different if their decimal representations without\nany leading zeros are different.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def numDifferentIntegers(self, word: str) -> int:\n    nums = set()\n    curr = []\n\n    for c in word:\n      if c.isdigit():\n        curr.append(c)\n      elif curr:\n        nums.add(''.join(self._removeLeadingZeros(curr)))\n        curr = []\n\n    if curr:\n      nums.add(''.join(self._removeLeadingZeros(curr)))\n\n    return len(nums)\n\n  def _removeLeadingZeros(self, s: str) -> str:\n    index = next((i for i, c in enumerate(s) if c != '0'), -1)\n    if index == -1:\n      return ['0']\n    else:\n      return s[index:]\n", "blocks": [{"type": "if", "start": 23, "end": 24}, {"type": "if", "start": 30, "end": 31}, {"type": "else", "start": 32, "end": 33}, {"type": "if", "start": 17, "end": 18}, {"type": "if", "start": 19, "end": 21}], "target_lines": [18, 20, 21, 24, 31, 33], "cfg": {"0": {"lineno": 0, "parents": [], "children": [22], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "numDifferentIntegers", "code": "enter: numDifferentIntegers(self, word)"}, "2": {"lineno": 12, "parents": [15], "children": [], "function": "numDifferentIntegers", "code": "exit: numDifferentIntegers(self, word)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["set"], "function": "numDifferentIntegers", "code": "nums = set()"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "numDifferentIntegers", "code": "curr = []"}, "5": {"lineno": 16, "parents": [4], "children": [6], "function": "numDifferentIntegers", "code": "__iv = iter(word)"}, "6": {"lineno": 16, "parents": [9, 10, 12, 5], "children": [13, 7], "function": "numDifferentIntegers", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "numDifferentIntegers", "code": "c = next(__iv)"}, "8": {"lineno": 17, "parents": [7], "children": [9, 10], "calls": ["isdigit"], "function": "numDifferentIntegers", "code": "_if: c.isdigit()"}, "9": {"lineno": 18, "parents": [8], "children": [6], "calls": ["append"], "function": "numDifferentIntegers", "code": "curr.append(c)"}, "10": {"lineno": 19, "parents": [8], "children": [11, 6], "function": "numDifferentIntegers", "code": "_if: curr"}, "11": {"lineno": 20, "parents": [10], "children": [12], "calls": ["_removeLeadingZeros", "join", "add"], "function": "numDifferentIntegers", "code": "nums.add(''.join(self._removeLeadingZeros(curr)))"}, "12": {"lineno": 21, "parents": [17, 11], "children": [6], "function": "numDifferentIntegers", "code": "curr = []"}, "13": {"lineno": 23, "parents": [6], "children": [14, 15], "function": "numDifferentIntegers", "code": "_if: curr"}, "14": {"lineno": 24, "parents": [13], "children": [15], "calls": ["_removeLeadingZeros", "join", "add", "len"], "function": "numDifferentIntegers", "code": "nums.add(''.join(self._removeLeadingZeros(curr)))"}, "15": {"lineno": 26, "parents": [17, 13, 14], "children": [2], "function": "numDifferentIntegers", "code": "return len(nums)"}, "16": {"lineno": 28, "parents": [11, 14], "children": [18], "function": "_removeLeadingZeros", "code": "enter: _removeLeadingZeros(self, s)"}, "17": {"lineno": 28, "parents": [20, 21], "children": [], "function": "_removeLeadingZeros", "code": "exit: _removeLeadingZeros(self, s)"}, "18": {"lineno": 29, "parents": [16], "children": [19], "calls": ["next"], "function": "_removeLeadingZeros", "code": "index = next((i for i, c in enumerate(s) if c != '0'), -1)"}, "19": {"lineno": 30, "parents": [18], "children": [20, 21], "function": "_removeLeadingZeros", "code": "_if: index == -1"}, "20": {"lineno": 31, "parents": [19], "children": [17], "function": "_removeLeadingZeros", "code": "return ['0']"}, "21": {"lineno": 33, "parents": [19], "children": [17], "function": "_removeLeadingZeros", "code": "return s[index:]"}, "22": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1857, "task_title": "Largest Color Value in a Directed Graph", "difficulty": 3, "func_name": "largestPathValue", "description": "There is a directed graph of `n` colored nodes and `m` edges. The nodes are\nnumbered from `0` to `n - 1`.\n\nYou are given a string `colors` where `colors[i]` is a lowercase English\nletter representing the color of the `ith` node in this graph (0-indexed). You\nare also given a 2D array `edges` where `edges[j] = [aj, bj]` indicates that\nthere is a directed edge from node `aj` to node `bj`.\n\nA valid path in the graph is a sequence of nodes `x1 -> x2 -> x3 -> ... -> xk`\nsuch that there is a directed edge from `xi` to `xi+1` for every `1 <= i < k`.\nThe color value of the path is the number of nodes that are colored the most\nfrequently occurring color along that path.\n\nReturn the largest color value of any valid path in the given graph, or `-1`\nif the graph contains a cycle.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:\n    n = len(colors)\n    ans = 0\n    processed = 0\n    graph = [[] for _ in range(n)]\n    inDegrees = [0] * n\n    q = collections.deque()\n    count = [[0] * 26 for _ in range(n)]\n\n    for u, v in edges:\n      graph[u].append(v)\n      inDegrees[v] += 1\n\n    for i, degree in enumerate(inDegrees):\n      if degree == 0:\n        q.append(i)\n\n    while q:\n      u = q.popleft()\n      processed += 1\n      count[u][ord(colors[u]) - ord('a')] += 1\n      ans = max(ans, count[u][ord(colors[u]) - ord('a')])\n      for v in graph[u]:\n        for i in range(26):\n          count[v][i] = max(count[v][i], count[u][i])\n        inDegrees[v] -= 1\n        if inDegrees[v] == 0:\n          q.append(v)\n\n    if processed == n:\n      return ans\n    else:\n      return -1\n", "blocks": [{"type": "if", "start": 41, "end": 42}, {"type": "else", "start": 43, "end": 44}, {"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 38, "end": 39}], "target_lines": [27, 39, 42, 44], "cfg": {"0": {"lineno": 0, "parents": [], "children": [38], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "largestPathValue", "code": "enter: largestPathValue(self, colors, edges)"}, "2": {"lineno": 12, "parents": [36, 37], "children": [], "function": "largestPathValue", "code": "exit: largestPathValue(self, colors, edges)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "largestPathValue", "code": "n = len(colors)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "largestPathValue", "code": "ans = 0"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "largestPathValue", "code": "processed = 0"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "largestPathValue", "code": "graph = [[] for _ in range(n)]"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "largestPathValue", "code": "inDegrees = [0] * n"}, "8": {"lineno": 18, "parents": [7], "children": [9], "calls": ["deque"], "function": "largestPathValue", "code": "q = collections.deque()"}, "9": {"lineno": 19, "parents": [8], "children": [10], "function": "largestPathValue", "code": "count = [[0] * 26 for _ in range(n)]"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "largestPathValue", "code": "__iv = iter(edges)"}, "11": {"lineno": 21, "parents": [10, 14], "children": [12, 15], "function": "largestPathValue", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "largestPathValue", "code": "u, v = next(__iv)"}, "13": {"lineno": 22, "parents": [12], "children": [14], "calls": ["append"], "function": "largestPathValue", "code": "graph[u].append(v)"}, "14": {"lineno": 23, "parents": [13], "children": [11], "function": "largestPathValue", "code": "inDegrees[v] += 1"}, "15": {"lineno": 25, "parents": [11], "children": [16], "function": "largestPathValue", "code": "__iv = iter(enumerate(inDegrees))"}, "16": {"lineno": 25, "parents": [18, 19, 15], "children": [17, 20], "calls": ["enumerate"], "function": "largestPathValue", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 25, "parents": [16], "children": [18], "function": "largestPathValue", "code": "i, degree = next(__iv)"}, "18": {"lineno": 26, "parents": [17], "children": [16, 19], "function": "largestPathValue", "code": "_if: degree == 0"}, "19": {"lineno": 27, "parents": [18], "children": [16], "calls": ["append"], "function": "largestPathValue", "code": "q.append(i)"}, "20": {"lineno": 29, "parents": [16, 26], "children": [35, 21], "function": "largestPathValue", "code": "_while: q"}, "21": {"lineno": 30, "parents": [20], "children": [22], "calls": ["popleft"], "function": "largestPathValue", "code": "u = q.popleft()"}, "22": {"lineno": 31, "parents": [21], "children": [23], "function": "largestPathValue", "code": "processed += 1"}, "23": {"lineno": 32, "parents": [22], "children": [24], "function": "largestPathValue", "code": "count[u][ord(colors[u]) - ord('a')] += 1"}, "24": {"lineno": 33, "parents": [23], "children": [25], "calls": ["max"], "function": "largestPathValue", "code": "ans = max(ans, count[u][ord(colors[u]) - ord('a')])"}, "25": {"lineno": 34, "parents": [24], "children": [26], "function": "largestPathValue", "code": "__iv = iter(graph[u])"}, "26": {"lineno": 34, "parents": [25, 34, 33], "children": [27, 20], "function": "largestPathValue", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 34, "parents": [26], "children": [28], "function": "largestPathValue", "code": "v = next(__iv)"}, "28": {"lineno": 35, "parents": [27], "children": [29], "function": "largestPathValue", "code": "__iv = iter(range(26))"}, "29": {"lineno": 35, "parents": [28, 31], "children": [32, 30], "calls": ["range"], "function": "largestPathValue", "code": "_for: __iv.__length__hint__() > 0"}, "30": {"lineno": 35, "parents": [29], "children": [31], "function": "largestPathValue", "code": "i = next(__iv)"}, "31": {"lineno": 36, "parents": [30], "children": [29], "calls": ["max"], "function": "largestPathValue", "code": "count[v][i] = max(count[v][i], count[u][i])"}, "32": {"lineno": 37, "parents": [29], "children": [33], "function": "largestPathValue", "code": "inDegrees[v] -= 1"}, "33": {"lineno": 38, "parents": [32], "children": [34, 26], "function": "largestPathValue", "code": "_if: inDegrees[v] == 0"}, "34": {"lineno": 39, "parents": [33], "children": [26], "calls": ["append"], "function": "largestPathValue", "code": "q.append(v)"}, "35": {"lineno": 41, "parents": [20], "children": [36, 37], "function": "largestPathValue", "code": "_if: processed == n"}, "36": {"lineno": 42, "parents": [35], "children": [2], "function": "largestPathValue", "code": "return ans"}, "37": {"lineno": 44, "parents": [35], "children": [2], "function": "largestPathValue", "code": "return -1"}, "38": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1878, "task_title": "Get Biggest Three Rhombus Sums in a Grid", "difficulty": 2, "func_name": "getBiggestThree", "description": "You are given an `m x n` integer matrix `grid`\u200b\u200b\u200b.\n\nA rhombus sum is the sum of the elements that form the border of a regular\nrhombus shape in `grid`\u200b\u200b\u200b. The rhombus must have the shape of a square\nrotated 45 degrees with each of the corners centered in a grid cell. Below is\nan image of four valid rhombus shapes with the corresponding colored cells\nthat should be included in each rhombus sum:\n\nNote that the rhombus can have an area of 0, which is depicted by the purple\nrhombus in the bottom right corner.\n\nReturn the biggest three distinct rhombus sums in the `grid` in descending\norder. If there are less than three distinct values, return all of them.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nfrom sortedcontainers import SortedSet\n\n\nclass Solution:\n  def getBiggestThree(self, grid: List[List[int]]) -> List[int]:\n    m = len(grid)\n    n = len(grid[0])\n    sums = SortedSet()\n\n    for i in range(m):\n      for j in range(n):\n        sz = 0\n        while i + sz < m and i - sz >= 0 and j + 2 * sz < n:\n          summ = grid[i][j] if sz == 0 else self._getSum(grid, i, j, sz)\n          sums.add(summ)\n          if len(sums) > 3:\n            sums.pop(0)\n          sz += 1\n\n    return reversed(sums)\n\n  def _getSum(self, grid: List[List[int]], i: int, j: int, sz: int) -> int:\n    x = i\n    y = j\n    summ = 0\n\n    for _ in range(sz):\n      x -= 1\n      y += 1\n      summ += grid[x][y]\n\n    for _ in range(sz):\n      x += 1\n      y += 1\n      summ += grid[x][y]\n\n    for _ in range(sz):\n      x += 1\n      y -= 1\n      summ += grid[x][y]\n\n    for _ in range(sz):\n      x -= 1\n      y -= 1\n      summ += grid[x][y]\n\n    return summ\n", "blocks": [{"type": "if", "start": 26, "end": 27}], "target_lines": [27], "cfg": {"0": {"lineno": 0, "parents": [], "children": [50], "function": "", "code": "start"}, "1": {"lineno": 15, "parents": [], "children": [3], "function": "getBiggestThree", "code": "enter: getBiggestThree(self, grid)"}, "2": {"lineno": 15, "parents": [19], "children": [], "function": "getBiggestThree", "code": "exit: getBiggestThree(self, grid)"}, "3": {"lineno": 16, "parents": [1], "children": [4], "calls": ["len"], "function": "getBiggestThree", "code": "m = len(grid)"}, "4": {"lineno": 17, "parents": [3], "children": [5], "calls": ["len"], "function": "getBiggestThree", "code": "n = len(grid[0])"}, "5": {"lineno": 18, "parents": [4], "children": [6], "calls": ["SortedSet"], "function": "getBiggestThree", "code": "sums = SortedSet()"}, "6": {"lineno": 20, "parents": [5], "children": [7], "function": "getBiggestThree", "code": "__iv = iter(range(m))"}, "7": {"lineno": 20, "parents": [10, 6], "children": [8, 19], "calls": ["range", "reversed"], "function": "getBiggestThree", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 20, "parents": [7], "children": [9], "function": "getBiggestThree", "code": "i = next(__iv)"}, "9": {"lineno": 21, "parents": [8], "children": [10], "function": "getBiggestThree", "code": "__iv = iter(range(n))"}, "10": {"lineno": 21, "parents": [9, 13], "children": [11, 7], "calls": ["range"], "function": "getBiggestThree", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 21, "parents": [10], "children": [12], "function": "getBiggestThree", "code": "j = next(__iv)"}, "12": {"lineno": 22, "parents": [11], "children": [13], "function": "getBiggestThree", "code": "sz = 0"}, "13": {"lineno": 23, "parents": [18, 12], "children": [10, 14], "function": "getBiggestThree", "code": "_while: i + sz < m and i - sz >= 0 and (j + 2 * sz < n)"}, "14": {"lineno": 24, "parents": [13], "children": [15], "function": "getBiggestThree", "code": "summ = grid[i][j] if sz == 0 else self._getSum(grid, i, j, sz)"}, "15": {"lineno": 25, "parents": [14], "children": [16], "calls": ["add"], "function": "getBiggestThree", "code": "sums.add(summ)"}, "16": {"lineno": 26, "parents": [15], "children": [17, 18], "calls": ["len"], "function": "getBiggestThree", "code": "_if: len(sums) > 3"}, "17": {"lineno": 27, "parents": [16], "children": [18], "calls": ["pop"], "function": "getBiggestThree", "code": "sums.pop(0)"}, "18": {"lineno": 28, "parents": [16, 17], "children": [13], "function": "getBiggestThree", "code": "sz += 1"}, "19": {"lineno": 30, "parents": [7], "children": [2], "function": "getBiggestThree", "code": "return reversed(sums)"}, "20": {"lineno": 32, "parents": [], "children": [22], "function": "_getSum", "code": "enter: _getSum(self, grid, i, j, sz)"}, "21": {"lineno": 32, "parents": [49], "children": [], "function": "_getSum", "code": "exit: _getSum(self, grid, i, j, sz)"}, "22": {"lineno": 33, "parents": [20], "children": [23], "function": "_getSum", "code": "x = i"}, "23": {"lineno": 34, "parents": [22], "children": [24], "function": "_getSum", "code": "y = j"}, "24": {"lineno": 35, "parents": [23], "children": [25], "function": "_getSum", "code": "summ = 0"}, "25": {"lineno": 37, "parents": [24], "children": [26], "function": "_getSum", "code": "__iv = iter(range(sz))"}, "26": {"lineno": 37, "parents": [25, 30], "children": [27, 31], "calls": ["range"], "function": "_getSum", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 37, "parents": [26], "children": [28], "function": "_getSum", "code": "_ = next(__iv)"}, "28": {"lineno": 38, "parents": [27], "children": [29], "function": "_getSum", "code": "x -= 1"}, "29": {"lineno": 39, "parents": [28], "children": [30], "function": "_getSum", "code": "y += 1"}, "30": {"lineno": 40, "parents": [29], "children": [26], "function": "_getSum", "code": "summ += grid[x][y]"}, "31": {"lineno": 42, "parents": [26], "children": [32], "function": "_getSum", "code": "__iv = iter(range(sz))"}, "32": {"lineno": 42, "parents": [36, 31], "children": [33, 37], "calls": ["range"], "function": "_getSum", "code": "_for: __iv.__length__hint__() > 0"}, "33": {"lineno": 42, "parents": [32], "children": [34], "function": "_getSum", "code": "_ = next(__iv)"}, "34": {"lineno": 43, "parents": [33], "children": [35], "function": "_getSum", "code": "x += 1"}, "35": {"lineno": 44, "parents": [34], "children": [36], "function": "_getSum", "code": "y += 1"}, "36": {"lineno": 45, "parents": [35], "children": [32], "function": "_getSum", "code": "summ += grid[x][y]"}, "37": {"lineno": 47, "parents": [32], "children": [38], "function": "_getSum", "code": "__iv = iter(range(sz))"}, "38": {"lineno": 47, "parents": [42, 37], "children": [43, 39], "calls": ["range"], "function": "_getSum", "code": "_for: __iv.__length__hint__() > 0"}, "39": {"lineno": 47, "parents": [38], "children": [40], "function": "_getSum", "code": "_ = next(__iv)"}, "40": {"lineno": 48, "parents": [39], "children": [41], "function": "_getSum", "code": "x += 1"}, "41": {"lineno": 49, "parents": [40], "children": [42], "function": "_getSum", "code": "y -= 1"}, "42": {"lineno": 50, "parents": [41], "children": [38], "function": "_getSum", "code": "summ += grid[x][y]"}, "43": {"lineno": 52, "parents": [38], "children": [44], "function": "_getSum", "code": "__iv = iter(range(sz))"}, "44": {"lineno": 52, "parents": [48, 43], "children": [49, 45], "calls": ["range"], "function": "_getSum", "code": "_for: __iv.__length__hint__() > 0"}, "45": {"lineno": 52, "parents": [44], "children": [46], "function": "_getSum", "code": "_ = next(__iv)"}, "46": {"lineno": 53, "parents": [45], "children": [47], "function": "_getSum", "code": "x -= 1"}, "47": {"lineno": 54, "parents": [46], "children": [48], "function": "_getSum", "code": "y -= 1"}, "48": {"lineno": 55, "parents": [47], "children": [44], "function": "_getSum", "code": "summ += grid[x][y]"}, "49": {"lineno": 57, "parents": [44], "children": [21], "function": "_getSum", "code": "return summ"}, "50": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1896, "task_title": "Minimum Cost to Change the Final Value of Expression", "difficulty": 3, "func_name": "minOperationsToFlip", "description": "You are given a valid boolean expression as a string `expression` consisting\nof the characters `'1'`,`'0'`,`'&'` (bitwise AND operator),`'|'` (bitwise OR\noperator),`'('`, and `')'`.\n\n* For example, `\"()1|1\"` and `\"(1)&()\"` are not valid while `\"1\"`, `\"(((1))|(0))\"`, and `\"1|(0&(1))\"` are valid expressions.\n\nReturn the minimum cost to change the final value of the expression.\n\n* For example, if `expression = \"1|1|(0&0)&1\"`, its value is `1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1`. We want to apply operations so that the new expression evaluates to `0`.\n\nThe cost of changing the final value of an expression is the number of\noperations performed on the expression. The types of operations are described\nas follows:\n\n* Turn a `'1'` into a `'0'`.\n* Turn a `'0'` into a `'1'`.\n* Turn a `'&'` into a `'|'`.\n* Turn a `'|'` into a `'&'`.\n\nNote: `'&'` does not take precedence over `'|'` in the order of calculation.\nEvaluate parentheses first, then in left-to-right order.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minOperationsToFlip(self, expression: str) -> int:\n    stack = []\n\n    for e in expression:\n      if e in '(&|':\n        stack.append((e, 0))\n        continue\n      if e == ')':\n        lastPair = stack.pop()\n        stack.pop()\n      else: \n        lastPair = (e, 1)\n      if stack and stack[-1][0] in '&|':\n        op = stack.pop()[0]\n        a, costA = stack.pop()\n        b, costB = lastPair\n        if op == '&':\n          if a == '0' and b == '0':\n            lastPair = ('0', 1 + min(costA, costB))\n          elif a == '0' and b == '1':\n            lastPair = ('0', 1)\n          elif a == '1' and b == '0':\n            lastPair = ('0', 1)\n          else:\n            lastPair = ('1', min(costA, costB))\n        else:\n          if a == '0' and b == '0':\n            lastPair = ('0', min(costA, costB))\n          elif a == '0' and b == '1':\n            lastPair = ('1', 1)\n          elif a == '1' and b == '0':\n            lastPair = ('1', 1)\n          else:\n            lastPair = ('1', 1 + min(costA, costB))\n      stack.append(lastPair)\n\n    return stack[-1][1]\n", "blocks": [{"type": "if", "start": 16, "end": 18}, {"type": "if", "start": 19, "end": 21}, {"type": "else", "start": 22, "end": 23}, {"type": "if", "start": 24, "end": 45}, {"type": "if", "start": 28, "end": 37}, {"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 38, "end": 39}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 40, "end": 41}, {"type": "if", "start": 33, "end": 34}, {"type": "else", "start": 35, "end": 36}, {"type": "if", "start": 42, "end": 43}, {"type": "else", "start": 44, "end": 45}], "target_lines": [17, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45], "cfg": {"0": {"lineno": 0, "parents": [], "children": [35], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minOperationsToFlip", "code": "enter: minOperationsToFlip(self, expression)"}, "2": {"lineno": 12, "parents": [34], "children": [], "function": "minOperationsToFlip", "code": "exit: minOperationsToFlip(self, expression)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "minOperationsToFlip", "code": "stack = []"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "minOperationsToFlip", "code": "__iv = iter(expression)"}, "5": {"lineno": 15, "parents": [9, 4, 33], "children": [34, 6], "function": "minOperationsToFlip", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "minOperationsToFlip", "code": "e = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8, 10], "function": "minOperationsToFlip", "code": "_if: e in '(&|'"}, "8": {"lineno": 17, "parents": [7], "children": [9], "calls": ["append"], "function": "minOperationsToFlip", "code": "stack.append((e, 0))"}, "9": {"lineno": 18, "parents": [8], "children": [5], "function": "minOperationsToFlip", "code": "continue"}, "10": {"lineno": 19, "parents": [7], "children": [11, 13], "function": "minOperationsToFlip", "code": "_if: e == ')'"}, "11": {"lineno": 20, "parents": [10], "children": [12], "calls": ["pop"], "function": "minOperationsToFlip", "code": "lastPair = stack.pop()"}, "12": {"lineno": 21, "parents": [11], "children": [14], "calls": ["pop"], "function": "minOperationsToFlip", "code": "stack.pop()"}, "13": {"lineno": 23, "parents": [10], "children": [14], "function": "minOperationsToFlip", "code": "lastPair = (e, 1)"}, "14": {"lineno": 24, "parents": [12, 13], "children": [33, 15], "function": "minOperationsToFlip", "code": "_if: stack and stack[-1][0] in '&|'"}, "15": {"lineno": 25, "parents": [14], "children": [16], "function": "minOperationsToFlip", "code": "op = stack.pop()[0]"}, "16": {"lineno": 26, "parents": [15], "children": [17], "calls": ["pop"], "function": "minOperationsToFlip", "code": "a, costA = stack.pop()"}, "17": {"lineno": 27, "parents": [16], "children": [18], "function": "minOperationsToFlip", "code": "b, costB = lastPair"}, "18": {"lineno": 28, "parents": [17], "children": [26, 19], "function": "minOperationsToFlip", "code": "_if: op == '&'"}, "19": {"lineno": 29, "parents": [18], "children": [20, 21], "function": "minOperationsToFlip", "code": "_if: a == '0' and b == '0'"}, "20": {"lineno": 30, "parents": [19], "children": [33], "function": "minOperationsToFlip", "code": "lastPair = ('0', 1 + min(costA, costB))"}, "21": {"lineno": 31, "parents": [19], "children": [22, 23], "function": "minOperationsToFlip", "code": "_if: a == '0' and b == '1'"}, "22": {"lineno": 32, "parents": [21], "children": [33], "function": "minOperationsToFlip", "code": "lastPair = ('0', 1)"}, "23": {"lineno": 33, "parents": [21], "children": [24, 25], "function": "minOperationsToFlip", "code": "_if: a == '1' and b == '0'"}, "24": {"lineno": 34, "parents": [23], "children": [33], "function": "minOperationsToFlip", "code": "lastPair = ('0', 1)"}, "25": {"lineno": 36, "parents": [23], "children": [33], "function": "minOperationsToFlip", "code": "lastPair = ('1', min(costA, costB))"}, "26": {"lineno": 38, "parents": [18], "children": [27, 28], "function": "minOperationsToFlip", "code": "_if: a == '0' and b == '0'"}, "27": {"lineno": 39, "parents": [26], "children": [33], "function": "minOperationsToFlip", "code": "lastPair = ('0', min(costA, costB))"}, "28": {"lineno": 40, "parents": [26], "children": [29, 30], "function": "minOperationsToFlip", "code": "_if: a == '0' and b == '1'"}, "29": {"lineno": 41, "parents": [28], "children": [33], "function": "minOperationsToFlip", "code": "lastPair = ('1', 1)"}, "30": {"lineno": 42, "parents": [28], "children": [32, 31], "function": "minOperationsToFlip", "code": "_if: a == '1' and b == '0'"}, "31": {"lineno": 43, "parents": [30], "children": [33], "function": "minOperationsToFlip", "code": "lastPair = ('1', 1)"}, "32": {"lineno": 45, "parents": [30], "children": [33], "function": "minOperationsToFlip", "code": "lastPair = ('1', 1 + min(costA, costB))"}, "33": {"lineno": 46, "parents": [32, 14, 20, 22, 24, 25, 27, 29, 31], "children": [5], "calls": ["append"], "function": "minOperationsToFlip", "code": "stack.append(lastPair)"}, "34": {"lineno": 48, "parents": [5], "children": [2], "function": "minOperationsToFlip", "code": "return stack[-1][1]"}, "35": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1906, "task_title": "Minimum Absolute Difference Queries", "difficulty": 2, "func_name": "minDifference", "description": "The minimum absolute difference of an array `a` is defined as the minimum\nvalue of `|a[i] - a[j]|`, where `0 <= i < j < a.length` and `a[i] != a[j]`. If\nall elements of `a` are the same, the minimum absolute difference is `-1`.\n\n* For example, the minimum absolute difference of the array `[5,2,3,7,2]` is `|2 - 3| = 1`. Note that it is not `0` because `a[i]` and `a[j]` must be different.\n\nYou are given an integer array `nums` and the array `queries` where\n`queries[i] = [li, ri]`. For each query `i`, compute the minimum absolute\ndifference of the subarray `nums[li...ri]` containing the elements of `nums`\nbetween the 0-based indices `li` and `ri` (inclusive).\n\nReturn an array `ans` where `ans[i]` is the answer to the `ith` query.\n\nA subarray is a contiguous sequence of elements in an array.\n\nThe value of `|x|` is defined as:\n\n* `x` if `x >= 0`.\n* `-x` if `x < 0`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom bisect import bisect_left\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minDifference(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n    numToIndices = [[] for _ in range(101)]\n\n    for i, num in enumerate(nums):\n      numToIndices[num].append(i)\n\n    if len(numToIndices[nums[0]]) == len(nums):\n      return [-1] * len(queries)\n\n    ans = []\n\n    for l, r in queries:\n      prevNum = -1\n      minDiff = 101\n      for num in range(1, 101):\n        indices = numToIndices[num]\n        i = bisect_left(indices, l)\n        if i == len(indices) or indices[i] > r:\n          continue\n        if prevNum != -1:\n          minDiff = min(minDiff, num - prevNum)\n        prevNum = num\n      ans.append(-1 if minDiff == 101 else minDiff)\n\n    return ans\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 32, "end": 33}], "target_lines": [20, 31, 33], "cfg": {"0": {"lineno": 0, "parents": [], "children": [28], "function": "", "code": "start"}, "1": {"lineno": 13, "parents": [], "children": [3], "function": "minDifference", "code": "enter: minDifference(self, nums, queries)"}, "2": {"lineno": 13, "parents": [9, 27], "children": [], "function": "minDifference", "code": "exit: minDifference(self, nums, queries)"}, "3": {"lineno": 14, "parents": [1], "children": [4], "function": "minDifference", "code": "numToIndices = [[] for _ in range(101)]"}, "4": {"lineno": 16, "parents": [3], "children": [5], "function": "minDifference", "code": "__iv = iter(enumerate(nums))"}, "5": {"lineno": 16, "parents": [4, 7], "children": [8, 6], "calls": ["enumerate"], "function": "minDifference", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "minDifference", "code": "i, num = next(__iv)"}, "7": {"lineno": 17, "parents": [6], "children": [5], "calls": ["append"], "function": "minDifference", "code": "numToIndices[num].append(i)"}, "8": {"lineno": 19, "parents": [5], "children": [9, 10], "calls": ["len", "len", "len"], "function": "minDifference", "code": "_if: len(numToIndices[nums[0]]) == len(nums)"}, "9": {"lineno": 20, "parents": [8], "children": [2], "function": "minDifference", "code": "return [-1] * len(queries)"}, "10": {"lineno": 22, "parents": [8], "children": [11], "function": "minDifference", "code": "ans = []"}, "11": {"lineno": 24, "parents": [10], "children": [12], "function": "minDifference", "code": "__iv = iter(queries)"}, "12": {"lineno": 24, "parents": [26, 11], "children": [27, 13], "function": "minDifference", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 24, "parents": [12], "children": [14], "function": "minDifference", "code": "l, r = next(__iv)"}, "14": {"lineno": 25, "parents": [13], "children": [15], "function": "minDifference", "code": "prevNum = -1"}, "15": {"lineno": 26, "parents": [14], "children": [16], "function": "minDifference", "code": "minDiff = 101"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "minDifference", "code": "__iv = iter(range(1, 101))"}, "17": {"lineno": 27, "parents": [16, 25, 22], "children": [18, 26], "calls": ["range"], "function": "minDifference", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "minDifference", "code": "num = next(__iv)"}, "19": {"lineno": 28, "parents": [18], "children": [20], "function": "minDifference", "code": "indices = numToIndices[num]"}, "20": {"lineno": 29, "parents": [19], "children": [21], "calls": ["bisect_left"], "function": "minDifference", "code": "i = bisect_left(indices, l)"}, "21": {"lineno": 30, "parents": [20], "children": [22, 23], "function": "minDifference", "code": "_if: i == len(indices) or indices[i] > r"}, "22": {"lineno": 31, "parents": [21], "children": [17], "function": "minDifference", "code": "continue"}, "23": {"lineno": 32, "parents": [21], "children": [24, 25], "function": "minDifference", "code": "_if: prevNum != -1"}, "24": {"lineno": 33, "parents": [23], "children": [25], "calls": ["min"], "function": "minDifference", "code": "minDiff = min(minDiff, num - prevNum)"}, "25": {"lineno": 34, "parents": [24, 23], "children": [17], "function": "minDifference", "code": "prevNum = num"}, "26": {"lineno": 35, "parents": [17], "children": [12], "calls": ["append"], "function": "minDifference", "code": "ans.append(-1 if minDiff == 101 else minDiff)"}, "27": {"lineno": 37, "parents": [12], "children": [2], "function": "minDifference", "code": "return ans"}, "28": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1923, "task_title": "Longest Common Subpath", "difficulty": 3, "func_name": "longestCommonSubpath", "description": "There is a country of `n` cities numbered from `0` to `n - 1`. In this\ncountry, there is a road connecting every pair of cities.\n\nThere are `m` friends numbered from `0` to `m - 1` who are traveling through\nthe country. Each one of them will take a path consisting of some cities. Each\npath is represented by an integer array that contains the visited cities in\norder. The path may contain a city more than once, but the same city will not\nbe listed consecutively.\n\nGiven an integer `n` and a 2D integer array `paths` where `paths[i]` is an\ninteger array representing the path of the `ith` friend, return the length of\nthe longest common subpath that is shared by every friend's path, or `0` if\nthere is no common subpath at all.\n\nA subpath of a path is a contiguous sequence of cities within that path.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator, Set\n\nclass Solution:\n  def __init__(self):\n    self.kMod = 8_417_508_174_513\n    self.kBase = 165_131\n\n  def longestCommonSubpath(self, n: int, paths: List[List[int]]) -> int:\n    l = 0\n    r = len(paths[0])\n\n    while l < r:\n      m = l + (r - l + 1) // 2\n      if self._checkCommonSubpath(paths, m):\n        l = m\n      else:\n        r = m - 1\n\n    return l\n\n  def _checkCommonSubpath(self, paths: List[List[int]], m: int) -> bool:\n    hashSets = [self._rabinKarp(path, m) for path in paths]\n\n    for subpathHash in hashSets[0]:\n      if all(subpathHash in hashSet for hashSet in hashSets):\n        return True\n\n    return False\n\n  def _rabinKarp(self, path: List[int], m: int) -> Set[int]:\n    hashes = set()\n    maxPower = 1\n    hash = 0\n\n    for i, num in enumerate(path):\n      hash = (hash * self.kBase + num) % self.kMod\n      if i >= m:\n        hash = (hash - path[i - m] * maxPower % self.kMod + self.kMod) % self.kMod\n      else:\n        maxPower = maxPower * self.kBase % self.kMod\n      if i >= m - 1:\n        hashes.add(hash)\n\n    return hashes\n", "blocks": [{"type": "if", "start": 22, "end": 23}, {"type": "else", "start": 24, "end": 25}, {"type": "if", "start": 33, "end": 34}, {"type": "if", "start": 45, "end": 46}, {"type": "else", "start": 47, "end": 48}, {"type": "if", "start": 49, "end": 50}], "target_lines": [23, 25, 34, 46, 48, 50], "cfg": {"0": {"lineno": 0, "parents": [], "children": [39], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "__init__", "code": "self.kMod = 8417508174513"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.kBase = 165131"}, "5": {"lineno": 16, "parents": [], "children": [7], "function": "longestCommonSubpath", "code": "enter: longestCommonSubpath(self, n, paths)"}, "6": {"lineno": 16, "parents": [14], "children": [], "function": "longestCommonSubpath", "code": "exit: longestCommonSubpath(self, n, paths)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "function": "longestCommonSubpath", "code": "l = 0"}, "8": {"lineno": 18, "parents": [7], "children": [9], "calls": ["len"], "function": "longestCommonSubpath", "code": "r = len(paths[0])"}, "9": {"lineno": 20, "parents": [8, 12, 13], "children": [10, 14], "function": "longestCommonSubpath", "code": "_while: l < r"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "longestCommonSubpath", "code": "m = l + (r - l + 1) // 2"}, "11": {"lineno": 22, "parents": [10], "children": [12, 13], "calls": ["_checkCommonSubpath"], "function": "longestCommonSubpath", "code": "_if: self._checkCommonSubpath(paths, m)"}, "12": {"lineno": 23, "parents": [16, 11], "children": [9], "function": "longestCommonSubpath", "code": "l = m"}, "13": {"lineno": 25, "parents": [16, 11], "children": [9], "function": "longestCommonSubpath", "code": "r = m - 1"}, "14": {"lineno": 27, "parents": [9], "children": [6], "function": "longestCommonSubpath", "code": "return l"}, "15": {"lineno": 29, "parents": [11], "children": [17], "function": "_checkCommonSubpath", "code": "enter: _checkCommonSubpath(self, paths, m)"}, "16": {"lineno": 29, "parents": [22, 23], "children": [], "function": "_checkCommonSubpath", "code": "exit: _checkCommonSubpath(self, paths, m)"}, "17": {"lineno": 30, "parents": [15], "children": [18], "function": "_checkCommonSubpath", "code": "hashSets = [self._rabinKarp(path, m) for path in paths]"}, "18": {"lineno": 32, "parents": [17], "children": [19], "function": "_checkCommonSubpath", "code": "__iv = iter(hashSets[0])"}, "19": {"lineno": 32, "parents": [18, 21], "children": [20, 23], "function": "_checkCommonSubpath", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 32, "parents": [19], "children": [21], "function": "_checkCommonSubpath", "code": "subpathHash = next(__iv)"}, "21": {"lineno": 33, "parents": [20], "children": [19, 22], "calls": ["all"], "function": "_checkCommonSubpath", "code": "_if: all((subpathHash in hashSet for hashSet in hashSets))"}, "22": {"lineno": 34, "parents": [21], "children": [16], "function": "_checkCommonSubpath", "code": "return True"}, "23": {"lineno": 36, "parents": [19], "children": [16], "function": "_checkCommonSubpath", "code": "return False"}, "24": {"lineno": 38, "parents": [], "children": [26], "function": "_rabinKarp", "code": "enter: _rabinKarp(self, path, m)"}, "25": {"lineno": 38, "parents": [38], "children": [], "function": "_rabinKarp", "code": "exit: _rabinKarp(self, path, m)"}, "26": {"lineno": 39, "parents": [24], "children": [27], "calls": ["set"], "function": "_rabinKarp", "code": "hashes = set()"}, "27": {"lineno": 40, "parents": [26], "children": [28], "function": "_rabinKarp", "code": "maxPower = 1"}, "28": {"lineno": 41, "parents": [27], "children": [29], "function": "_rabinKarp", "code": "hash = 0"}, "29": {"lineno": 43, "parents": [28], "children": [30], "function": "_rabinKarp", "code": "__iv = iter(enumerate(path))"}, "30": {"lineno": 43, "parents": [37, 36, 29], "children": [38, 31], "calls": ["enumerate"], "function": "_rabinKarp", "code": "_for: __iv.__length__hint__() > 0"}, "31": {"lineno": 43, "parents": [30], "children": [32], "function": "_rabinKarp", "code": "i, num = next(__iv)"}, "32": {"lineno": 44, "parents": [31], "children": [33], "function": "_rabinKarp", "code": "hash = (hash * self.kBase + num) % self.kMod"}, "33": {"lineno": 45, "parents": [32], "children": [34, 35], "function": "_rabinKarp", "code": "_if: i >= m"}, "34": {"lineno": 46, "parents": [33], "children": [36], "function": "_rabinKarp", "code": "hash = (hash - path[i - m] * maxPower % self.kMod + self.kMod) % self.kMod"}, "35": {"lineno": 48, "parents": [33], "children": [36], "function": "_rabinKarp", "code": "maxPower = maxPower * self.kBase % self.kMod"}, "36": {"lineno": 49, "parents": [34, 35], "children": [37, 30], "function": "_rabinKarp", "code": "_if: i >= m - 1"}, "37": {"lineno": 50, "parents": [36], "children": [30], "calls": ["add"], "function": "_rabinKarp", "code": "hashes.add(hash)"}, "38": {"lineno": 52, "parents": [30], "children": [25], "function": "_rabinKarp", "code": "return hashes"}, "39": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1926, "task_title": "Nearest Exit from Entrance in Maze", "difficulty": 2, "func_name": "nearestExit", "description": "You are given an `m x n` matrix `maze` (0-indexed) with empty cells\n(represented as `'.'`) and walls (represented as `'+'`). You are also given\nthe `entrance` of the maze, where `entrance = [entrancerow, entrancecol]`\ndenotes the row and column of the cell you are initially standing at.\n\nIn one step, you can move one cell up, down, left, or right. You cannot step\ninto a cell with a wall, and you cannot step outside the maze. Your goal is to\nfind the nearest exit from the `entrance`. An exit is defined as an empty cell\nthat is at the border of the `maze`. The `entrance` does not count as an exit.\n\nReturn the number of steps in the shortest path from the `entrance` to the\nnearest exit, or `-1` if no such path exists.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def nearestExit(self, maze: List[List[str]], entrance: List[int]) -> int:\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    m = len(maze)\n    n = len(maze[0])\n    ans = 0\n    q = collections.deque([(entrance[0], entrance[1])])\n    seen = {(entrance[0], entrance[1])}\n\n    while q:\n      ans += 1\n      for _ in range(len(q)):\n        i, j = q.popleft()\n        for dx, dy in dirs:\n          x = i + dx\n          y = j + dy\n          if x < 0 or x == m or y < 0 or y == n:\n            continue\n          if (x, y) in seen or maze[x][y] == '+':\n            continue\n          if x == 0 or x == m - 1 or y == 0 or y == n - 1:\n            return ans\n          q.append((x, y))\n          seen.add((x, y))\n\n    return -1\n", "blocks": [{"type": "if", "start": 27, "end": 28}, {"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 31, "end": 32}], "target_lines": [28, 30, 32], "cfg": {"0": {"lineno": 0, "parents": [], "children": [29], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "nearestExit", "code": "enter: nearestExit(self, maze, entrance)"}, "2": {"lineno": 12, "parents": [25, 28], "children": [], "function": "nearestExit", "code": "exit: nearestExit(self, maze, entrance)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "nearestExit", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "nearestExit", "code": "m = len(maze)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["len"], "function": "nearestExit", "code": "n = len(maze[0])"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "nearestExit", "code": "ans = 0"}, "7": {"lineno": 17, "parents": [6], "children": [8], "calls": ["deque"], "function": "nearestExit", "code": "q = collections.deque([(entrance[0], entrance[1])])"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "nearestExit", "code": "seen = {(entrance[0], entrance[1])}"}, "9": {"lineno": 20, "parents": [8, 12], "children": [10, 28], "function": "nearestExit", "code": "_while: q"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "nearestExit", "code": "ans += 1"}, "11": {"lineno": 22, "parents": [10], "children": [12], "function": "nearestExit", "code": "__iv = iter(range(len(q)))"}, "12": {"lineno": 22, "parents": [16, 11], "children": [9, 13], "calls": ["len", "range"], "function": "nearestExit", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 22, "parents": [12], "children": [14], "function": "nearestExit", "code": "_ = next(__iv)"}, "14": {"lineno": 23, "parents": [13], "children": [15], "calls": ["popleft"], "function": "nearestExit", "code": "i, j = q.popleft()"}, "15": {"lineno": 24, "parents": [14], "children": [16], "function": "nearestExit", "code": "__iv = iter(dirs)"}, "16": {"lineno": 24, "parents": [27, 23, 21, 15], "children": [17, 12], "function": "nearestExit", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 24, "parents": [16], "children": [18], "function": "nearestExit", "code": "dx, dy = next(__iv)"}, "18": {"lineno": 25, "parents": [17], "children": [19], "function": "nearestExit", "code": "x = i + dx"}, "19": {"lineno": 26, "parents": [18], "children": [20], "function": "nearestExit", "code": "y = j + dy"}, "20": {"lineno": 27, "parents": [19], "children": [21, 22], "function": "nearestExit", "code": "_if: x < 0 or x == m or y < 0 or (y == n)"}, "21": {"lineno": 28, "parents": [20], "children": [16], "function": "nearestExit", "code": "continue"}, "22": {"lineno": 29, "parents": [20], "children": [24, 23], "function": "nearestExit", "code": "_if: (x, y) in seen or maze[x][y] == '+'"}, "23": {"lineno": 30, "parents": [22], "children": [16], "function": "nearestExit", "code": "continue"}, "24": {"lineno": 31, "parents": [22], "children": [25, 26], "function": "nearestExit", "code": "_if: x == 0 or x == m - 1 or y == 0 or (y == n - 1)"}, "25": {"lineno": 32, "parents": [24], "children": [2], "function": "nearestExit", "code": "return ans"}, "26": {"lineno": 33, "parents": [24], "children": [27], "calls": ["append"], "function": "nearestExit", "code": "q.append((x, y))"}, "27": {"lineno": 34, "parents": [26], "children": [16], "calls": ["add"], "function": "nearestExit", "code": "seen.add((x, y))"}, "28": {"lineno": 36, "parents": [9], "children": [2], "function": "nearestExit", "code": "return -1"}, "29": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1928, "task_title": "Minimum Cost to Reach Destination in Time", "difficulty": 3, "func_name": "minCost", "description": "There is a country of `n` cities numbered from `0` to `n - 1` where all the\ncities are connected by bi-directional roads. The roads are represented as a\n2D integer array `edges` where `edges[i] = [xi, yi, timei]` denotes a road\nbetween cities `xi` and `yi` that takes `timei` minutes to travel. There may\nbe multiple roads of differing travel times connecting the same two cities,\nbut no road connects a city to itself.\n\nEach time you pass through a city, you must pay a passing fee. This is\nrepresented as a 0-indexed integer array `passingFees` of length `n` where\n`passingFees[j]` is the amount of dollars you must pay when you pass through\ncity `j`.\n\nIn the beginning, you are at city `0` and want to reach city `n - 1` in\n`maxTime` minutes or less. The cost of your journey is the summation of\npassing fees for each city that you passed through at some moment of your\njourney (including the source and destination cities).\n\nGiven `maxTime`, `edges`, and `passingFees`, return the minimum cost to\ncomplete your journey, or `-1` if you cannot complete it within `maxTime`\nminutes.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minCost(self, maxTime: int, edges: List[List[int]], passingFees: List[int]) -> int:\n    n = len(passingFees)\n    graph = [[] for _ in range(n)]\n\n    for u, v, w in edges:\n      graph[u].append((v, w))\n      graph[v].append((u, w))\n\n    return self._dijkstra(graph, 0, n - 1, maxTime, passingFees)\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int, dst: int, maxTime: int, passingFees: List[int]) -> int:\n    cost = [math.inf for _ in range(len(graph))]\n    dist = [maxTime + 1 for _ in range(len(graph))]\n\n    cost[src] = passingFees[src]\n    dist[src] = 0\n    minHeap = [(cost[src], dist[src], src)]\n\n    while minHeap:\n      currCost, d, u = heapq.heappop(minHeap)\n      if u == dst:\n        return cost[dst]\n      if d > dist[u] and currCost > cost[u]:\n        continue\n      for v, w in graph[u]:\n        if d + w > maxTime:\n          continue\n        if currCost + passingFees[v] < cost[v]:\n          cost[v] = currCost + passingFees[v]\n          dist[v] = d + w\n          heapq.heappush(minHeap, (cost[v], dist[v], v))\n        elif d + w < dist[v]:\n          dist[v] = d + w\n          heapq.heappush(minHeap, (currCost + passingFees[v], dist[v], v))\n\n    return -1\n", "blocks": [{"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 34, "end": 35}, {"type": "if", "start": 37, "end": 38}, {"type": "if", "start": 39, "end": 42}, {"type": "if", "start": 43, "end": 45}], "target_lines": [33, 35, 38, 40, 41, 42, 44, 45], "cfg": {"0": {"lineno": 0, "parents": [], "children": [37], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minCost", "code": "enter: minCost(self, maxTime, edges, passingFees)"}, "2": {"lineno": 12, "parents": [10], "children": [], "function": "minCost", "code": "exit: minCost(self, maxTime, edges, passingFees)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "minCost", "code": "n = len(passingFees)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "minCost", "code": "graph = [[] for _ in range(n)]"}, "5": {"lineno": 16, "parents": [4], "children": [6], "function": "minCost", "code": "__iv = iter(edges)"}, "6": {"lineno": 16, "parents": [9, 5], "children": [10, 7], "calls": ["_dijkstra"], "function": "minCost", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 16, "parents": [12, 6], "children": [8], "function": "minCost", "code": "u, v, w = next(__iv)"}, "8": {"lineno": 17, "parents": [7], "children": [9], "calls": ["append"], "function": "minCost", "code": "graph[u].append((v, w))"}, "9": {"lineno": 18, "parents": [8], "children": [6], "calls": ["append"], "function": "minCost", "code": "graph[v].append((u, w))"}, "10": {"lineno": 20, "parents": [12, 6], "children": [2], "function": "minCost", "code": "return self._dijkstra(graph, 0, n - 1, maxTime, passingFees)"}, "11": {"lineno": 22, "parents": [6], "children": [13], "function": "_dijkstra", "code": "enter: _dijkstra(self, graph, src, dst, maxTime, passingFees)"}, "12": {"lineno": 22, "parents": [36, 21], "children": [], "function": "_dijkstra", "code": "exit: _dijkstra(self, graph, src, dst, maxTime, passingFees)"}, "13": {"lineno": 23, "parents": [11], "children": [14], "function": "_dijkstra", "code": "cost = [math.inf for _ in range(len(graph))]"}, "14": {"lineno": 24, "parents": [13], "children": [15], "function": "_dijkstra", "code": "dist = [maxTime + 1 for _ in range(len(graph))]"}, "15": {"lineno": 26, "parents": [14], "children": [16], "function": "_dijkstra", "code": "cost[src] = passingFees[src]"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "_dijkstra", "code": "dist[src] = 0"}, "17": {"lineno": 28, "parents": [16], "children": [18], "function": "_dijkstra", "code": "minHeap = [(cost[src], dist[src], src)]"}, "18": {"lineno": 30, "parents": [17, 25, 23], "children": [19, 36], "function": "_dijkstra", "code": "_while: minHeap"}, "19": {"lineno": 31, "parents": [18], "children": [20], "calls": ["heappop"], "function": "_dijkstra", "code": "currCost, d, u = heapq.heappop(minHeap)"}, "20": {"lineno": 32, "parents": [19], "children": [21, 22], "function": "_dijkstra", "code": "_if: u == dst"}, "21": {"lineno": 33, "parents": [20], "children": [12], "function": "_dijkstra", "code": "return cost[dst]"}, "22": {"lineno": 34, "parents": [20], "children": [24, 23], "function": "_dijkstra", "code": "_if: d > dist[u] and currCost > cost[u]"}, "23": {"lineno": 35, "parents": [22], "children": [18], "function": "_dijkstra", "code": "continue"}, "24": {"lineno": 36, "parents": [22], "children": [25], "function": "_dijkstra", "code": "__iv = iter(graph[u])"}, "25": {"lineno": 36, "parents": [32, 33, 35, 24, 28], "children": [26, 18], "function": "_dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "26": {"lineno": 36, "parents": [25], "children": [27], "function": "_dijkstra", "code": "v, w = next(__iv)"}, "27": {"lineno": 37, "parents": [26], "children": [28, 29], "function": "_dijkstra", "code": "_if: d + w > maxTime"}, "28": {"lineno": 38, "parents": [27], "children": [25], "function": "_dijkstra", "code": "continue"}, "29": {"lineno": 39, "parents": [27], "children": [33, 30], "function": "_dijkstra", "code": "_if: currCost + passingFees[v] < cost[v]"}, "30": {"lineno": 40, "parents": [29], "children": [31], "function": "_dijkstra", "code": "cost[v] = currCost + passingFees[v]"}, "31": {"lineno": 41, "parents": [30], "children": [32], "function": "_dijkstra", "code": "dist[v] = d + w"}, "32": {"lineno": 42, "parents": [31], "children": [25], "calls": ["heappush"], "function": "_dijkstra", "code": "heapq.heappush(minHeap, (cost[v], dist[v], v))"}, "33": {"lineno": 43, "parents": [29], "children": [25, 34], "function": "_dijkstra", "code": "_if: d + w < dist[v]"}, "34": {"lineno": 44, "parents": [33], "children": [35], "function": "_dijkstra", "code": "dist[v] = d + w"}, "35": {"lineno": 45, "parents": [34], "children": [25], "calls": ["heappush"], "function": "_dijkstra", "code": "heapq.heappush(minHeap, (currCost + passingFees[v], dist[v], v))"}, "36": {"lineno": 47, "parents": [18], "children": [12], "function": "_dijkstra", "code": "return -1"}, "37": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1938, "task_title": "Maximum Genetic Difference Query", "difficulty": 3, "func_name": "maxGeneticDifference", "description": "There is a rooted tree consisting of `n` nodes numbered `0` to `n - 1`. Each\nnode's number denotes its unique genetic value (i.e. the genetic value of node\n`x` is `x`). The genetic difference between two genetic values is defined as\nthe bitwise-XOR of their values. You are given the integer array `parents`,\nwhere `parents[i]` is the parent for node `i`. If node `x` is the root of the\ntree, then `parents[x] == -1`.\n\nYou are also given the array `queries` where `queries[i] = [nodei, vali]`. For\neach query `i`, find the maximum genetic difference between `vali` and `pi`,\nwhere `pi` is the genetic value of any node that is on the path between\n`nodei` and the root (including `nodei` and the root). More formally, you want\nto maximize `vali XOR pi`.\n\nReturn an array `ans` where `ans[i]` is the answer to the `ith` query.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass TrieNode:\n  def __init__(self):\n    self.children = [None] * 2\n    self.count = 0\n\n\nclass Trie:\n  def __init__(self):\n    self.root = TrieNode()\n    self.kHeight = 17\n\n  def update(self, num: int, val: int) -> None:\n    node = self.root\n    for i in range(self.kHeight, -1, -1):\n      bit = (num >> i) & 1\n      if not node.children[bit]:\n        node.children[bit] = TrieNode()\n      node = node.children[bit]\n      node.count += val\n\n  def query(self, num: int) -> int:\n    ans = 0\n    node = self.root\n    for i in range(self.kHeight, -1, -1):\n      bit = (num >> i) & 1\n      targetBit = bit ^ 1\n      if node.children[targetBit] and node.children[targetBit].count > 0:\n        ans += 1 << i\n        node = node.children[targetBit]\n      else:\n        node = node.children[targetBit ^ 1]\n    return ans\n\n\nclass Solution:\n  def maxGeneticDifference(self, parents: List[int], queries: List[List[int]]) -> List[int]:\n    n = len(parents)\n    ans = [0] * len(queries)\n    rootVal = -1\n    tree = [[] for _ in range(n)]\n    nodeToQueries = collections.defaultdict(list)\n    trie = Trie()\n\n    for i, parent in enumerate(parents):\n      if parent == -1:\n        rootVal = i\n      else:\n        tree[parent].append(i)\n\n    for i, (node, val) in enumerate(queries):\n      nodeToQueries[node].append((i, val))\n\n    def dfs(node: int) -> None:\n      trie.update(node, 1)\n\n      for i, val in nodeToQueries[node]:\n        ans[i] = trie.query(val)\n\n      for child in tree[node]:\n        dfs(child)\n\n      trie.update(node, -1)\n\n    dfs(rootVal)\n    return ans\n", "blocks": [{"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 37, "end": 39}, {"type": "else", "start": 40, "end": 41}, {"type": "if", "start": 55, "end": 56}, {"type": "else", "start": 57, "end": 58}], "target_lines": [27, 38, 39, 41, 56, 58], "cfg": {"0": {"lineno": 0, "parents": [], "children": [66], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "__init__", "code": "self.children = [None] * 2"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.count = 0"}, "5": {"lineno": 18, "parents": [], "children": [7], "function": "__init__", "code": "enter: __init__(self)"}, "6": {"lineno": 18, "parents": [8], "children": [], "function": "__init__", "code": "exit: __init__(self)"}, "7": {"lineno": 19, "parents": [5], "children": [8], "calls": ["TrieNode"], "function": "__init__", "code": "self.root = TrieNode()"}, "8": {"lineno": 20, "parents": [7], "children": [6], "function": "__init__", "code": "self.kHeight = 17"}, "9": {"lineno": 22, "parents": [54, 63], "children": [11], "function": "update", "code": "enter: update(self, num, val)"}, "10": {"lineno": 22, "parents": [13], "children": [], "function": "update", "code": "exit: update(self, num, val)"}, "11": {"lineno": 23, "parents": [9], "children": [12], "function": "update", "code": "node = self.root"}, "12": {"lineno": 24, "parents": [11], "children": [13], "function": "update", "code": "__iv = iter(range(self.kHeight, -1, -1))"}, "13": {"lineno": 24, "parents": [19, 12], "children": [10, 14], "calls": ["range"], "function": "update", "code": "_for: __iv.__length__hint__() > 0"}, "14": {"lineno": 24, "parents": [13], "children": [15], "function": "update", "code": "i = next(__iv)"}, "15": {"lineno": 25, "parents": [14], "children": [16], "function": "update", "code": "bit = num >> i & 1"}, "16": {"lineno": 26, "parents": [15], "children": [17, 18], "function": "update", "code": "_if: not node.children[bit]"}, "17": {"lineno": 27, "parents": [16], "children": [18], "calls": ["TrieNode"], "function": "update", "code": "node.children[bit] = TrieNode()"}, "18": {"lineno": 28, "parents": [16, 17], "children": [19], "function": "update", "code": "node = node.children[bit]"}, "19": {"lineno": 29, "parents": [18], "children": [13], "function": "update", "code": "node.count += val"}, "20": {"lineno": 31, "parents": [58], "children": [22], "function": "query", "code": "enter: query(self, num)"}, "21": {"lineno": 31, "parents": [33], "children": [], "function": "query", "code": "exit: query(self, num)"}, "22": {"lineno": 32, "parents": [20], "children": [23], "function": "query", "code": "ans = 0"}, "23": {"lineno": 33, "parents": [22], "children": [24], "function": "query", "code": "node = self.root"}, "24": {"lineno": 34, "parents": [23], "children": [25], "function": "query", "code": "__iv = iter(range(self.kHeight, -1, -1))"}, "25": {"lineno": 34, "parents": [24, 32, 31], "children": [33, 26], "calls": ["range"], "function": "query", "code": "_for: __iv.__length__hint__() > 0"}, "26": {"lineno": 34, "parents": [25], "children": [27], "function": "query", "code": "i = next(__iv)"}, "27": {"lineno": 35, "parents": [26], "children": [28], "function": "query", "code": "bit = num >> i & 1"}, "28": {"lineno": 36, "parents": [27], "children": [29], "function": "query", "code": "targetBit = bit ^ 1"}, "29": {"lineno": 37, "parents": [28], "children": [32, 30], "function": "query", "code": "_if: node.children[targetBit] and node.children[targetBit].count > 0"}, "30": {"lineno": 38, "parents": [29], "children": [31], "function": "query", "code": "ans += 1 << i"}, "31": {"lineno": 39, "parents": [30], "children": [25], "function": "query", "code": "node = node.children[targetBit]"}, "32": {"lineno": 41, "parents": [29], "children": [25], "function": "query", "code": "node = node.children[targetBit ^ 1]"}, "33": {"lineno": 42, "parents": [25], "children": [21], "function": "query", "code": "return ans"}, "34": {"lineno": 46, "parents": [], "children": [36], "function": "maxGeneticDifference", "code": "enter: maxGeneticDifference(self, parents, queries)"}, "35": {"lineno": 46, "parents": [65], "children": [], "function": "maxGeneticDifference", "code": "exit: maxGeneticDifference(self, parents, queries)"}, "36": {"lineno": 47, "parents": [34], "children": [37], "calls": ["len"], "function": "maxGeneticDifference", "code": "n = len(parents)"}, "37": {"lineno": 48, "parents": [36], "children": [38], "calls": ["len"], "function": "maxGeneticDifference", "code": "ans = [0] * len(queries)"}, "38": {"lineno": 49, "parents": [37], "children": [39], "function": "maxGeneticDifference", "code": "rootVal = -1"}, "39": {"lineno": 50, "parents": [38], "children": [40], "function": "maxGeneticDifference", "code": "tree = [[] for _ in range(n)]"}, "40": {"lineno": 51, "parents": [39], "children": [41], "calls": ["defaultdict"], "function": "maxGeneticDifference", "code": "nodeToQueries = collections.defaultdict(list)"}, "41": {"lineno": 52, "parents": [40], "children": [42], "calls": ["Trie"], "function": "maxGeneticDifference", "code": "trie = Trie()"}, "42": {"lineno": 54, "parents": [41], "children": [43], "function": "maxGeneticDifference", "code": "__iv = iter(enumerate(parents))"}, "43": {"lineno": 54, "parents": [42, 46, 47], "children": [48, 44], "calls": ["enumerate"], "function": "maxGeneticDifference", "code": "_for: __iv.__length__hint__() > 0"}, "44": {"lineno": 54, "parents": [43], "children": [45], "function": "maxGeneticDifference", "code": "i, parent = next(__iv)"}, "45": {"lineno": 55, "parents": [44], "children": [46, 47], "function": "maxGeneticDifference", "code": "_if: parent == -1"}, "46": {"lineno": 56, "parents": [45], "children": [43], "function": "maxGeneticDifference", "code": "rootVal = i"}, "47": {"lineno": 58, "parents": [45], "children": [43], "calls": ["append"], "function": "maxGeneticDifference", "code": "tree[parent].append(i)"}, "48": {"lineno": 60, "parents": [43], "children": [49], "function": "maxGeneticDifference", "code": "__iv = iter(enumerate(queries))"}, "49": {"lineno": 60, "parents": [48, 51], "children": [64, 50], "calls": ["enumerate"], "function": "maxGeneticDifference", "code": "_for: __iv.__length__hint__() > 0"}, "50": {"lineno": 60, "parents": [49], "children": [51], "function": "maxGeneticDifference", "code": "i, (node, val) = next(__iv)"}, "51": {"lineno": 61, "parents": [50], "children": [49], "calls": ["append"], "function": "maxGeneticDifference", "code": "nodeToQueries[node].append((i, val))"}, "52": {"lineno": 63, "parents": [64, 62], "children": [54], "function": "dfs", "code": "enter: dfs(node)"}, "53": {"lineno": 63, "parents": [10, 63], "children": [], "function": "dfs", "code": "exit: dfs(node)"}, "54": {"lineno": 64, "parents": [52], "children": [55], "calls": ["update"], "function": "dfs", "code": "trie.update(node, 1)"}, "55": {"lineno": 66, "parents": [10, 54], "children": [56], "function": "dfs", "code": "__iv = iter(nodeToQueries[node])"}, "56": {"lineno": 66, "parents": [58, 21, 55], "children": [57, 59], "function": "dfs", "code": "_for: __iv.__length__hint__() > 0"}, "57": {"lineno": 66, "parents": [56], "children": [58], "function": "dfs", "code": "i, val = next(__iv)"}, "58": {"lineno": 67, "parents": [57], "children": [56], "calls": ["query"], "function": "dfs", "code": "ans[i] = trie.query(val)"}, "59": {"lineno": 69, "parents": [56], "children": [60], "function": "dfs", "code": "__iv = iter(tree[node])"}, "60": {"lineno": 69, "parents": [59, 53, 62], "children": [61, 63], "function": "dfs", "code": "_for: __iv.__length__hint__() > 0"}, "61": {"lineno": 69, "parents": [60], "children": [62], "function": "dfs", "code": "child = next(__iv)"}, "62": {"lineno": 70, "parents": [61], "children": [60], "calls": ["dfs"], "function": "dfs", "code": "dfs(child)"}, "63": {"lineno": 72, "parents": [60], "children": [53], "calls": ["update"], "function": "dfs", "code": "trie.update(node, -1)"}, "64": {"lineno": 74, "parents": [49], "children": [65], "calls": ["dfs"], "function": "maxGeneticDifference", "code": "dfs(rootVal)"}, "65": {"lineno": 75, "parents": [64, 53], "children": [35], "function": "maxGeneticDifference", "code": "return ans"}, "66": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1971, "task_title": "Find if Path Exists in Graph", "difficulty": 1, "func_name": "validPath", "description": "There is a bi-directional graph with `n` vertices, where each vertex is\nlabeled from `0` to `n - 1` (inclusive). The edges in the graph are\nrepresented as a 2D integer array `edges`, where each `edges[i] = [ui, vi]`\ndenotes a bi-directional edge between vertex `ui` and vertex `vi`. Every\nvertex pair is connected by at most one edge, and no vertex has an edge to\nitself.\n\nYou want to determine if there is a valid path that exists from vertex\n`source` to vertex `destination`.\n\nGiven `edges` and the integers `n`, `source`, and `destination`, return `true`\nif there is a valid path from `source` to `destination`, or `false` otherwise.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:\n    uf = UnionFind(n)\n\n    for u, v in edges:\n      uf.unionByRank(u, v)\n\n    return uf.find(source) == uf.find(destination)\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 23, "end": 24}, {"type": "else", "start": 25, "end": 27}], "target_lines": [20, 22, 24, 26, 27, 31], "cfg": {"0": {"lineno": 0, "parents": [], "children": [30], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.rank = [0] * n"}, "5": {"lineno": 16, "parents": [28], "children": [7], "function": "unionByRank", "code": "enter: unionByRank(self, u, v)"}, "6": {"lineno": 16, "parents": [16, 10, 12, 14], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "calls": ["find"], "function": "unionByRank", "code": "i = self.find(u)"}, "8": {"lineno": 18, "parents": [18, 7], "children": [9], "calls": ["find"], "function": "unionByRank", "code": "j = self.find(v)"}, "9": {"lineno": 19, "parents": [8, 18], "children": [10, 11], "function": "unionByRank", "code": "_if: i == j"}, "10": {"lineno": 20, "parents": [9], "children": [6], "function": "unionByRank", "code": "return"}, "11": {"lineno": 21, "parents": [9], "children": [12, 13], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "12": {"lineno": 22, "parents": [11], "children": [6], "function": "unionByRank", "code": "self.id[i] = j"}, "13": {"lineno": 23, "parents": [11], "children": [14, 15], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "14": {"lineno": 24, "parents": [13], "children": [6], "function": "unionByRank", "code": "self.id[j] = i"}, "15": {"lineno": 26, "parents": [13], "children": [16], "function": "unionByRank", "code": "self.id[i] = j"}, "16": {"lineno": 27, "parents": [15], "children": [6], "function": "unionByRank", "code": "self.rank[j] += 1"}, "17": {"lineno": 29, "parents": [8, 26, 20, 7], "children": [19], "function": "find", "code": "enter: find(self, u)"}, "18": {"lineno": 29, "parents": [21], "children": [], "function": "find", "code": "exit: find(self, u)"}, "19": {"lineno": 30, "parents": [17], "children": [20, 21], "function": "find", "code": "_if: self.id[u] != u"}, "20": {"lineno": 31, "parents": [19], "children": [21], "calls": ["find"], "function": "find", "code": "self.id[u] = self.find(self.id[u])"}, "21": {"lineno": 32, "parents": [18, 19, 20], "children": [18], "function": "find", "code": "return self.id[u]"}, "22": {"lineno": 36, "parents": [], "children": [24], "function": "validPath", "code": "enter: validPath(self, n, edges, source, destination)"}, "23": {"lineno": 36, "parents": [29], "children": [], "function": "validPath", "code": "exit: validPath(self, n, edges, source, destination)"}, "24": {"lineno": 37, "parents": [22], "children": [25], "calls": ["UnionFind"], "function": "validPath", "code": "uf = UnionFind(n)"}, "25": {"lineno": 39, "parents": [24], "children": [26], "function": "validPath", "code": "__iv = iter(edges)"}, "26": {"lineno": 39, "parents": [25, 28, 6], "children": [27, 29], "calls": ["find", "find"], "function": "validPath", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 39, "parents": [26, 18], "children": [28], "function": "validPath", "code": "u, v = next(__iv)"}, "28": {"lineno": 40, "parents": [27], "children": [26], "calls": ["unionByRank"], "function": "validPath", "code": "uf.unionByRank(u, v)"}, "29": {"lineno": 42, "parents": [26, 18], "children": [23], "function": "validPath", "code": "return uf.find(source) == uf.find(destination)"}, "30": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1976, "task_title": "Number of Ways to Arrive at Destination", "difficulty": 2, "func_name": "countPaths", "description": "You are in a city that consists of `n` intersections numbered from `0` to `n -\n1` with bi-directional roads between some intersections. The inputs are\ngenerated such that you can reach any intersection from any other intersection\nand that there is at most one road between any two intersections.\n\nYou are given an integer `n` and a 2D integer array `roads` where `roads[i] =\n[ui, vi, timei]` means that there is a road between intersections `ui` and\n`vi` that takes `timei` minutes to travel. You want to know in how many ways\nyou can travel from intersection `0` to intersection `n - 1` in the shortest\namount of time.\n\nReturn the number of ways you can arrive at your destination in the shortest\namount of time. Since the answer may be large, return it modulo `109 + 7`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def countPaths(self, n: int, roads: List[List[int]]) -> int:\n    graph = [[] for _ in range(n)]\n\n    for u, v, w in roads:\n      graph[u].append((v, w))\n      graph[v].append((u, w))\n\n    return self._dijkstra(graph, 0, n - 1)\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int, dst: int) -> int:\n    kMod = 10**9 + 7\n    ways = [0] * len(graph)\n    dist = [math.inf] * len(graph)\n\n    ways[src] = 1\n    dist[src] = 0\n    minHeap = [(dist[src], src)]\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      if d > dist[u]:\n        continue\n      for v, w in graph[u]:\n        if d + w < dist[v]:\n          dist[v] = d + w\n          ways[v] = ways[u]\n          heapq.heappush(minHeap, (dist[v], v))\n        elif d + w == dist[v]:\n          ways[v] += ways[u]\n          ways[v] %= kMod\n\n    return ways[dst]\n", "blocks": [{"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 35, "end": 38}, {"type": "if", "start": 39, "end": 41}], "target_lines": [33, 36, 37, 38, 40, 41], "cfg": {"0": {"lineno": 0, "parents": [], "children": [33], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "countPaths", "code": "enter: countPaths(self, n, roads)"}, "2": {"lineno": 12, "parents": [9], "children": [], "function": "countPaths", "code": "exit: countPaths(self, n, roads)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "countPaths", "code": "graph = [[] for _ in range(n)]"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "countPaths", "code": "__iv = iter(roads)"}, "5": {"lineno": 15, "parents": [8, 4], "children": [9, 6], "calls": ["_dijkstra"], "function": "countPaths", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [11, 5], "children": [7], "function": "countPaths", "code": "u, v, w = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8], "calls": ["append"], "function": "countPaths", "code": "graph[u].append((v, w))"}, "8": {"lineno": 17, "parents": [7], "children": [5], "calls": ["append"], "function": "countPaths", "code": "graph[v].append((u, w))"}, "9": {"lineno": 19, "parents": [11, 5], "children": [2], "function": "countPaths", "code": "return self._dijkstra(graph, 0, n - 1)"}, "10": {"lineno": 21, "parents": [5], "children": [12], "function": "_dijkstra", "code": "enter: _dijkstra(self, graph, src, dst)"}, "11": {"lineno": 21, "parents": [32], "children": [], "function": "_dijkstra", "code": "exit: _dijkstra(self, graph, src, dst)"}, "12": {"lineno": 22, "parents": [10], "children": [13], "function": "_dijkstra", "code": "kMod = 10 ** 9 + 7"}, "13": {"lineno": 23, "parents": [12], "children": [14], "calls": ["len"], "function": "_dijkstra", "code": "ways = [0] * len(graph)"}, "14": {"lineno": 24, "parents": [13], "children": [15], "calls": ["len"], "function": "_dijkstra", "code": "dist = [math.inf] * len(graph)"}, "15": {"lineno": 26, "parents": [14], "children": [16], "function": "_dijkstra", "code": "ways[src] = 1"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "_dijkstra", "code": "dist[src] = 0"}, "17": {"lineno": 28, "parents": [16], "children": [18], "function": "_dijkstra", "code": "minHeap = [(dist[src], src)]"}, "18": {"lineno": 30, "parents": [17, 21, 23], "children": [32, 19], "function": "_dijkstra", "code": "_while: minHeap"}, "19": {"lineno": 31, "parents": [18], "children": [20], "calls": ["heappop"], "function": "_dijkstra", "code": "d, u = heapq.heappop(minHeap)"}, "20": {"lineno": 32, "parents": [19], "children": [21, 22], "function": "_dijkstra", "code": "_if: d > dist[u]"}, "21": {"lineno": 33, "parents": [20], "children": [18], "function": "_dijkstra", "code": "continue"}, "22": {"lineno": 34, "parents": [20], "children": [23], "function": "_dijkstra", "code": "__iv = iter(graph[u])"}, "23": {"lineno": 34, "parents": [28, 29, 22, 31], "children": [24, 18], "function": "_dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "24": {"lineno": 34, "parents": [23], "children": [25], "function": "_dijkstra", "code": "v, w = next(__iv)"}, "25": {"lineno": 35, "parents": [24], "children": [26, 29], "function": "_dijkstra", "code": "_if: d + w < dist[v]"}, "26": {"lineno": 36, "parents": [25], "children": [27], "function": "_dijkstra", "code": "dist[v] = d + w"}, "27": {"lineno": 37, "parents": [26], "children": [28], "function": "_dijkstra", "code": "ways[v] = ways[u]"}, "28": {"lineno": 38, "parents": [27], "children": [23], "calls": ["heappush"], "function": "_dijkstra", "code": "heapq.heappush(minHeap, (dist[v], v))"}, "29": {"lineno": 39, "parents": [25], "children": [30, 23], "function": "_dijkstra", "code": "_if: d + w == dist[v]"}, "30": {"lineno": 40, "parents": [29], "children": [31], "function": "_dijkstra", "code": "ways[v] += ways[u]"}, "31": {"lineno": 41, "parents": [30], "children": [23], "function": "_dijkstra", "code": "ways[v] %= kMod"}, "32": {"lineno": 43, "parents": [18], "children": [11], "function": "_dijkstra", "code": "return ways[dst]"}, "33": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1977, "task_title": "Number of Ways to Separate Numbers", "difficulty": 3, "func_name": "numberOfCombinations", "description": "You wrote down many positive integers in a string called `num`. However, you\nrealized that you forgot to add commas to seperate the different numbers. You\nremember that the list of integers was non-decreasing and that no integer had\nleading zeros.\n\nReturn the number of possible lists of integers that you could have written\ndown to get the string `num`. Since the answer may be large, return it modulo\n`109 + 7`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def numberOfCombinations(self, num: str) -> int:\n    if num[0] == '0':\n      return 0\n\n    kMod = 1_000_000_007\n    n = len(num)\n    dp = [[0] * (n + 1) for _ in range(n)]\n    lcs = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(n - 1, -1, -1):\n      for j in range(i + 1, n):\n        if num[i] == num[j]:\n          lcs[i][j] = lcs[i + 1][j + 1] + 1\n\n    for i in range(n):\n      for k in range(1, i + 2):\n        dp[i][k] += dp[i][k - 1]\n        dp[i][k] %= kMod\n        s = i - k + 1\n        if num[s] == '0':\n          continue\n        if s == 0:\n          dp[i][k] += 1\n          continue\n        if s < k:\n          dp[i][k] += dp[s - 1][s]\n          continue\n        l = lcs[s - k][s]\n        if l >= k or num[s - k + l] <= num[s + l]:\n          dp[i][k] += dp[s - 1][k]\n        else:\n          dp[i][k] += dp[s - 1][k - 1]\n\n    return dp[n - 1][n] % kMod\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "if", "start": 23, "end": 24}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 33, "end": 35}, {"type": "if", "start": 36, "end": 38}, {"type": "if", "start": 40, "end": 41}, {"type": "else", "start": 42, "end": 43}], "target_lines": [14, 24, 32, 34, 35, 37, 38, 41, 43], "cfg": {"0": {"lineno": 0, "parents": [], "children": [39], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "numberOfCombinations", "code": "enter: numberOfCombinations(self, num)"}, "2": {"lineno": 12, "parents": [4, 38], "children": [], "function": "numberOfCombinations", "code": "exit: numberOfCombinations(self, num)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "function": "numberOfCombinations", "code": "_if: num[0] == '0'"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "numberOfCombinations", "code": "return 0"}, "5": {"lineno": 16, "parents": [3], "children": [6], "function": "numberOfCombinations", "code": "kMod = 1000000007"}, "6": {"lineno": 17, "parents": [5], "children": [7], "calls": ["len"], "function": "numberOfCombinations", "code": "n = len(num)"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "numberOfCombinations", "code": "dp = [[0] * (n + 1) for _ in range(n)]"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "numberOfCombinations", "code": "lcs = [[0] * (n + 1) for _ in range(n + 1)]"}, "9": {"lineno": 21, "parents": [8], "children": [10], "function": "numberOfCombinations", "code": "__iv = iter(range(n - 1, -1, -1))"}, "10": {"lineno": 21, "parents": [9, 13], "children": [17, 11], "calls": ["range"], "function": "numberOfCombinations", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 21, "parents": [10], "children": [12], "function": "numberOfCombinations", "code": "i = next(__iv)"}, "12": {"lineno": 22, "parents": [11], "children": [13], "function": "numberOfCombinations", "code": "__iv = iter(range(i + 1, n))"}, "13": {"lineno": 22, "parents": [16, 12, 15], "children": [10, 14], "calls": ["range"], "function": "numberOfCombinations", "code": "_for: __iv.__length__hint__() > 0"}, "14": {"lineno": 22, "parents": [13], "children": [15], "function": "numberOfCombinations", "code": "j = next(__iv)"}, "15": {"lineno": 23, "parents": [14], "children": [16, 13], "function": "numberOfCombinations", "code": "_if: num[i] == num[j]"}, "16": {"lineno": 24, "parents": [15], "children": [13], "function": "numberOfCombinations", "code": "lcs[i][j] = lcs[i + 1][j + 1] + 1"}, "17": {"lineno": 26, "parents": [10], "children": [18], "function": "numberOfCombinations", "code": "__iv = iter(range(n))"}, "18": {"lineno": 26, "parents": [17, 21], "children": [19, 38], "calls": ["range"], "function": "numberOfCombinations", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 26, "parents": [18], "children": [20], "function": "numberOfCombinations", "code": "i = next(__iv)"}, "20": {"lineno": 27, "parents": [19], "children": [21], "function": "numberOfCombinations", "code": "__iv = iter(range(1, i + 2))"}, "21": {"lineno": 27, "parents": [33, 36, 37, 20, 27, 30], "children": [18, 22], "calls": ["range"], "function": "numberOfCombinations", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 27, "parents": [21], "children": [23], "function": "numberOfCombinations", "code": "k = next(__iv)"}, "23": {"lineno": 28, "parents": [22], "children": [24], "function": "numberOfCombinations", "code": "dp[i][k] += dp[i][k - 1]"}, "24": {"lineno": 29, "parents": [23], "children": [25], "function": "numberOfCombinations", "code": "dp[i][k] %= kMod"}, "25": {"lineno": 30, "parents": [24], "children": [26], "function": "numberOfCombinations", "code": "s = i - k + 1"}, "26": {"lineno": 31, "parents": [25], "children": [27, 28], "function": "numberOfCombinations", "code": "_if: num[s] == '0'"}, "27": {"lineno": 32, "parents": [26], "children": [21], "function": "numberOfCombinations", "code": "continue"}, "28": {"lineno": 33, "parents": [26], "children": [29, 31], "function": "numberOfCombinations", "code": "_if: s == 0"}, "29": {"lineno": 34, "parents": [28], "children": [30], "function": "numberOfCombinations", "code": "dp[i][k] += 1"}, "30": {"lineno": 35, "parents": [29], "children": [21], "function": "numberOfCombinations", "code": "continue"}, "31": {"lineno": 36, "parents": [28], "children": [32, 34], "function": "numberOfCombinations", "code": "_if: s < k"}, "32": {"lineno": 37, "parents": [31], "children": [33], "function": "numberOfCombinations", "code": "dp[i][k] += dp[s - 1][s]"}, "33": {"lineno": 38, "parents": [32], "children": [21], "function": "numberOfCombinations", "code": "continue"}, "34": {"lineno": 39, "parents": [31], "children": [35], "function": "numberOfCombinations", "code": "l = lcs[s - k][s]"}, "35": {"lineno": 40, "parents": [34], "children": [36, 37], "function": "numberOfCombinations", "code": "_if: l >= k or num[s - k + l] <= num[s + l]"}, "36": {"lineno": 41, "parents": [35], "children": [21], "function": "numberOfCombinations", "code": "dp[i][k] += dp[s - 1][k]"}, "37": {"lineno": 43, "parents": [35], "children": [21], "function": "numberOfCombinations", "code": "dp[i][k] += dp[s - 1][k - 1]"}, "38": {"lineno": 45, "parents": [18], "children": [2], "function": "numberOfCombinations", "code": "return dp[n - 1][n] % kMod"}, "39": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1994, "task_title": "The Number of Good Subsets", "difficulty": 3, "func_name": "numberOfGoodSubsets", "description": "You are given an integer array `nums`. We call a subset of `nums` good if its\nproduct can be represented as a product of one or more distinct prime numbers.\n\n* For example, if `nums = [1, 2, 3, 4]`: \n* `[2, 3]`, `[1, 2, 3]`, and `[1, 3]` are good subsets with products `6 = 2*3`, `6 = 2*3`, and `3 = 3` respectively.\n* `[1, 4]` and `[4]` are not good subsets with products `4 = 2*2` and `4 = 2*2` respectively.\n\nReturn the number of different good subsets in `nums` modulo `109 + 7`.\n\nA subset of `nums` is any array that can be obtained by deleting some\n(possibly none or all) elements from `nums`. Two subsets are different if and\nonly if the chosen indices to delete are different.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def numberOfGoodSubsets(self, nums: List[int]) -> int:\n    kMod = 1_000_000_007\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    n = 1 << len(primes)\n    dp = [1] + [0] * (n - 1)\n    count = collections.Counter(nums)\n\n    for num, freq in count.items():\n      if num == 1:\n        continue\n      if any(num % squared == 0 for squared in [4, 9, 25]):\n        continue\n      numPrimesMask = 0\n      for i, prime in enumerate(primes):\n        if num % prime == 0:\n          numPrimesMask += 1 << i\n      for primesMask in range(n):\n        if primesMask & numPrimesMask > 0:\n          continue\n        nextPrimesMask = numPrimesMask | primesMask\n        dp[nextPrimesMask] += dp[primesMask] * freq\n        dp[nextPrimesMask] %= kMod\n\n    return (1 << count[1]) * sum(dp[1:]) % kMod\n", "blocks": [{"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 29, "end": 30}], "target_lines": [21, 23, 27, 30], "cfg": {"0": {"lineno": 0, "parents": [], "children": [30], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "numberOfGoodSubsets", "code": "enter: numberOfGoodSubsets(self, nums)"}, "2": {"lineno": 12, "parents": [29], "children": [], "function": "numberOfGoodSubsets", "code": "exit: numberOfGoodSubsets(self, nums)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "numberOfGoodSubsets", "code": "kMod = 1000000007"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "numberOfGoodSubsets", "code": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["len"], "function": "numberOfGoodSubsets", "code": "n = 1 << len(primes)"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "numberOfGoodSubsets", "code": "dp = [1] + [0] * (n - 1)"}, "7": {"lineno": 17, "parents": [6], "children": [8], "calls": ["Counter"], "function": "numberOfGoodSubsets", "code": "count = collections.Counter(nums)"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "numberOfGoodSubsets", "code": "__iv = iter(count.items())"}, "9": {"lineno": 19, "parents": [8, 12, 14, 22], "children": [10, 29], "calls": ["items", "sum"], "function": "numberOfGoodSubsets", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "numberOfGoodSubsets", "code": "num, freq = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12, 13], "function": "numberOfGoodSubsets", "code": "_if: num == 1"}, "12": {"lineno": 21, "parents": [11], "children": [9], "function": "numberOfGoodSubsets", "code": "continue"}, "13": {"lineno": 22, "parents": [11], "children": [14, 15], "calls": ["any"], "function": "numberOfGoodSubsets", "code": "_if: any((num % squared == 0 for squared in [4, 9, 25]))"}, "14": {"lineno": 23, "parents": [13], "children": [9], "function": "numberOfGoodSubsets", "code": "continue"}, "15": {"lineno": 24, "parents": [13], "children": [16], "function": "numberOfGoodSubsets", "code": "numPrimesMask = 0"}, "16": {"lineno": 25, "parents": [15], "children": [17], "function": "numberOfGoodSubsets", "code": "__iv = iter(enumerate(primes))"}, "17": {"lineno": 25, "parents": [16, 19, 20], "children": [18, 21], "calls": ["enumerate"], "function": "numberOfGoodSubsets", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 25, "parents": [17], "children": [19], "function": "numberOfGoodSubsets", "code": "i, prime = next(__iv)"}, "19": {"lineno": 26, "parents": [18], "children": [17, 20], "function": "numberOfGoodSubsets", "code": "_if: num % prime == 0"}, "20": {"lineno": 27, "parents": [19], "children": [17], "function": "numberOfGoodSubsets", "code": "numPrimesMask += 1 << i"}, "21": {"lineno": 28, "parents": [17], "children": [22], "function": "numberOfGoodSubsets", "code": "__iv = iter(range(n))"}, "22": {"lineno": 28, "parents": [25, 28, 21], "children": [9, 23], "calls": ["range"], "function": "numberOfGoodSubsets", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 28, "parents": [22], "children": [24], "function": "numberOfGoodSubsets", "code": "primesMask = next(__iv)"}, "24": {"lineno": 29, "parents": [23], "children": [25, 26], "function": "numberOfGoodSubsets", "code": "_if: primesMask & numPrimesMask > 0"}, "25": {"lineno": 30, "parents": [24], "children": [22], "function": "numberOfGoodSubsets", "code": "continue"}, "26": {"lineno": 31, "parents": [24], "children": [27], "function": "numberOfGoodSubsets", "code": "nextPrimesMask = numPrimesMask | primesMask"}, "27": {"lineno": 32, "parents": [26], "children": [28], "function": "numberOfGoodSubsets", "code": "dp[nextPrimesMask] += dp[primesMask] * freq"}, "28": {"lineno": 33, "parents": [27], "children": [22], "function": "numberOfGoodSubsets", "code": "dp[nextPrimesMask] %= kMod"}, "29": {"lineno": 35, "parents": [9], "children": [2], "function": "numberOfGoodSubsets", "code": "return (1 << count[1]) * sum(dp[1:]) % kMod"}, "30": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 1998, "task_title": "GCD Sort of an Array", "difficulty": 3, "func_name": "gcdSort", "description": "You are given an integer array `nums`, and you can perform the following\noperation any number of times on `nums`:\n\n* Swap the positions of two elements `nums[i]` and `nums[j]` if `gcd(nums[i], nums[j]) > 1` where `gcd(nums[i], nums[j])` is the greatest common divisor of `nums[i]` and `nums[j]`.\n\nReturn `true` if it is possible to sort `nums` in non-decreasing order using\nthe above swap method, or `false` otherwise.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return False\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n    return True\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def gcdSort(self, nums: List[int]) -> bool:\n    maxNum = max(nums)\n    minPrimeFactors = self._sieveEratosthenes(maxNum + 1)\n    uf = UnionFind(maxNum + 1)\n\n    for num in nums:\n      for primeFactor in self._getPrimeFactors(num, minPrimeFactors):\n        uf.unionByRank(num, primeFactor)\n\n    for a, b in zip(nums, sorted(nums)):\n      if uf.find(a) != uf.find(b):\n        return False\n\n    return True\n\n  def _sieveEratosthenes(self, n: int) -> List[int]:\n    minPrimeFactors = [i for i in range(n + 1)]\n    for i in range(2, int(n**0.5) + 1):\n      if minPrimeFactors[i] == i:\n        for j in range(i * i, n, i):\n          minPrimeFactors[j] = min(minPrimeFactors[j], i)\n    return minPrimeFactors\n\n  def _getPrimeFactors(self, num: int, minPrimeFactors: List[int]) -> List[int]:\n    primeFactors = []\n    while num > 1:\n      divisor = minPrimeFactors[num]\n      primeFactors.append(divisor)\n      while num % divisor == 0:\n        num //= divisor\n    return primeFactors\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 23, "end": 24}, {"type": "else", "start": 25, "end": 27}, {"type": "if", "start": 47, "end": 48}, {"type": "if", "start": 55, "end": 57}], "target_lines": [20, 22, 24, 26, 27, 32, 48, 56, 57], "cfg": {"0": {"lineno": 0, "parents": [], "children": [62], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.rank = [0] * n"}, "5": {"lineno": 16, "parents": [34], "children": [7], "function": "unionByRank", "code": "enter: unionByRank(self, u, v)"}, "6": {"lineno": 16, "parents": [17, 10], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "calls": ["find"], "function": "unionByRank", "code": "i = self.find(u)"}, "8": {"lineno": 18, "parents": [19, 7], "children": [9], "calls": ["find"], "function": "unionByRank", "code": "j = self.find(v)"}, "9": {"lineno": 19, "parents": [8, 19], "children": [10, 11], "function": "unionByRank", "code": "_if: i == j"}, "10": {"lineno": 20, "parents": [9], "children": [6], "function": "unionByRank", "code": "return False"}, "11": {"lineno": 21, "parents": [9], "children": [12, 13], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "12": {"lineno": 22, "parents": [11], "children": [17], "function": "unionByRank", "code": "self.id[i] = j"}, "13": {"lineno": 23, "parents": [11], "children": [14, 15], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "14": {"lineno": 24, "parents": [13], "children": [17], "function": "unionByRank", "code": "self.id[j] = i"}, "15": {"lineno": 26, "parents": [13], "children": [16], "function": "unionByRank", "code": "self.id[i] = j"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "unionByRank", "code": "self.rank[j] += 1"}, "17": {"lineno": 28, "parents": [16, 12, 14], "children": [6], "function": "unionByRank", "code": "return True"}, "18": {"lineno": 30, "parents": [8, 21, 38, 7], "children": [20], "function": "find", "code": "enter: find(self, u)"}, "19": {"lineno": 30, "parents": [22], "children": [], "function": "find", "code": "exit: find(self, u)"}, "20": {"lineno": 31, "parents": [18], "children": [21, 22], "function": "find", "code": "_if: self.id[u] != u"}, "21": {"lineno": 32, "parents": [20], "children": [22], "calls": ["find"], "function": "find", "code": "self.id[u] = self.find(self.id[u])"}, "22": {"lineno": 33, "parents": [19, 20, 21], "children": [19], "function": "find", "code": "return self.id[u]"}, "23": {"lineno": 37, "parents": [], "children": [25], "function": "gcdSort", "code": "enter: gcdSort(self, nums)"}, "24": {"lineno": 37, "parents": [40, 39], "children": [], "function": "gcdSort", "code": "exit: gcdSort(self, nums)"}, "25": {"lineno": 38, "parents": [23], "children": [26], "calls": ["max"], "function": "gcdSort", "code": "maxNum = max(nums)"}, "26": {"lineno": 39, "parents": [25], "children": [27], "calls": ["_sieveEratosthenes"], "function": "gcdSort", "code": "minPrimeFactors = self._sieveEratosthenes(maxNum + 1)"}, "27": {"lineno": 40, "parents": [26, 42], "children": [28], "calls": ["UnionFind"], "function": "gcdSort", "code": "uf = UnionFind(maxNum + 1)"}, "28": {"lineno": 42, "parents": [27], "children": [29], "function": "gcdSort", "code": "__iv = iter(nums)"}, "29": {"lineno": 42, "parents": [32, 28, 54], "children": [35, 30], "function": "gcdSort", "code": "_for: __iv.__length__hint__() > 0"}, "30": {"lineno": 42, "parents": [29], "children": [31], "function": "gcdSort", "code": "num = next(__iv)"}, "31": {"lineno": 43, "parents": [30], "children": [32], "function": "gcdSort", "code": "__iv = iter(self._getPrimeFactors(num, minPrimeFactors))"}, "32": {"lineno": 43, "parents": [34, 6, 31], "children": [33, 29], "calls": ["_getPrimeFactors"], "function": "gcdSort", "code": "_for: __iv.__length__hint__() > 0"}, "33": {"lineno": 43, "parents": [32, 54], "children": [34], "function": "gcdSort", "code": "primeFactor = next(__iv)"}, "34": {"lineno": 44, "parents": [33], "children": [32], "calls": ["unionByRank"], "function": "gcdSort", "code": "uf.unionByRank(num, primeFactor)"}, "35": {"lineno": 46, "parents": [29], "children": [36], "function": "gcdSort", "code": "__iv = iter(zip(nums, sorted(nums)))"}, "36": {"lineno": 46, "parents": [19, 35, 38], "children": [40, 37], "calls": ["sorted", "zip"], "function": "gcdSort", "code": "_for: __iv.__length__hint__() > 0"}, "37": {"lineno": 46, "parents": [36], "children": [38], "function": "gcdSort", "code": "a, b = next(__iv)"}, "38": {"lineno": 47, "parents": [37], "children": [36, 39], "calls": ["find", "find"], "function": "gcdSort", "code": "_if: uf.find(a) != uf.find(b)"}, "39": {"lineno": 48, "parents": [19, 38], "children": [24], "function": "gcdSort", "code": "return False"}, "40": {"lineno": 50, "parents": [36], "children": [24], "function": "gcdSort", "code": "return True"}, "41": {"lineno": 52, "parents": [26], "children": [43], "function": "_sieveEratosthenes", "code": "enter: _sieveEratosthenes(self, n)"}, "42": {"lineno": 52, "parents": [52], "children": [], "function": "_sieveEratosthenes", "code": "exit: _sieveEratosthenes(self, n)"}, "43": {"lineno": 53, "parents": [41], "children": [44], "function": "_sieveEratosthenes", "code": "minPrimeFactors = [i for i in range(n + 1)]"}, "44": {"lineno": 54, "parents": [43], "children": [45], "function": "_sieveEratosthenes", "code": "__iv = iter(range(2, int(n ** 0.5) + 1))"}, "45": {"lineno": 54, "parents": [49, 44, 47], "children": [52, 46], "calls": ["int", "range"], "function": "_sieveEratosthenes", "code": "_for: __iv.__length__hint__() > 0"}, "46": {"lineno": 54, "parents": [45], "children": [47], "function": "_sieveEratosthenes", "code": "i = next(__iv)"}, "47": {"lineno": 55, "parents": [46], "children": [48, 45], "function": "_sieveEratosthenes", "code": "_if: minPrimeFactors[i] == i"}, "48": {"lineno": 56, "parents": [47], "children": [49], "function": "_sieveEratosthenes", "code": "__iv = iter(range(i * i, n, i))"}, "49": {"lineno": 56, "parents": [48, 51], "children": [50, 45], "calls": ["range"], "function": "_sieveEratosthenes", "code": "_for: __iv.__length__hint__() > 0"}, "50": {"lineno": 56, "parents": [49], "children": [51], "function": "_sieveEratosthenes", "code": "j = next(__iv)"}, "51": {"lineno": 57, "parents": [50], "children": [49], "calls": ["min"], "function": "_sieveEratosthenes", "code": "minPrimeFactors[j] = min(minPrimeFactors[j], i)"}, "52": {"lineno": 58, "parents": [45], "children": [42], "function": "_sieveEratosthenes", "code": "return minPrimeFactors"}, "53": {"lineno": 60, "parents": [32], "children": [55], "function": "_getPrimeFactors", "code": "enter: _getPrimeFactors(self, num, minPrimeFactors)"}, "54": {"lineno": 60, "parents": [61], "children": [], "function": "_getPrimeFactors", "code": "exit: _getPrimeFactors(self, num, minPrimeFactors)"}, "55": {"lineno": 61, "parents": [53], "children": [56], "function": "_getPrimeFactors", "code": "primeFactors = []"}, "56": {"lineno": 62, "parents": [59, 55], "children": [57, 61], "function": "_getPrimeFactors", "code": "_while: num > 1"}, "57": {"lineno": 63, "parents": [56], "children": [58], "function": "_getPrimeFactors", "code": "divisor = minPrimeFactors[num]"}, "58": {"lineno": 64, "parents": [57], "children": [59], "calls": ["append"], "function": "_getPrimeFactors", "code": "primeFactors.append(divisor)"}, "59": {"lineno": 65, "parents": [58, 60], "children": [56, 60], "function": "_getPrimeFactors", "code": "_while: num % divisor == 0"}, "60": {"lineno": 66, "parents": [59], "children": [59], "function": "_getPrimeFactors", "code": "num //= divisor"}, "61": {"lineno": 67, "parents": [56], "children": [54], "function": "_getPrimeFactors", "code": "return primeFactors"}, "62": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2019, "task_title": "The Score of Students Solving Math Expression", "difficulty": 3, "func_name": "scoreOfStudents", "description": "You are given a string `s` that contains digits `0-9`, addition symbols `'+'`,\nand multiplication symbols `'*'` only, representing a valid math expression of\nsingle digit numbers (e.g., `3+5*2`). This expression was given to `n`\nelementary school students. The students were instructed to get the answer of\nthe expression by following this order of operations:\n\n1. Compute multiplication, reading from left to right; Then,\n2. Compute addition, reading from left to right.\n\nYou are given an integer array `answers` of length `n`, which are the\nsubmitted answers of the students in no particular order. You are asked to\ngrade the `answers`, by following these rules:\n\n* If an answer equals the correct answer of the expression, this student will be rewarded `5` points;\n* Otherwise, if the answer could be interpreted as if the student applied the operators in the wrong order but had correct arithmetic, this student will be rewarded `2` points;\n* Otherwise, this student will be rewarded `0` points.\n\nReturn the sum of the points of the students.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nimport operator\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def scoreOfStudents(self, s: str, answers: List[int]) -> int:\n    n = len(s) // 2 + 1\n    ans = 0\n    func = {'+': operator.add, '*': operator.mul}\n    dp = [[set() for j in range(n)] for _ in range(n)]\n\n    for i in range(n):\n      dp[i][i].add(int(s[i * 2]))\n\n    for d in range(1, n):\n      for i in range(n - d):\n        j = i + d\n        for k in range(i, j):\n          op = s[k * 2 + 1]\n          for a in dp[i][k]:\n            for b in dp[k + 1][j]:\n              res = func[op](a, b)\n              if res <= 1000:\n                dp[i][j].add(res)\n\n    correctAnswer = eval(s)\n\n    for answer, freq in collections.Counter(answers).items():\n      if answer == correctAnswer:\n        ans += 5 * freq\n      elif answer in dp[0][n - 1]:\n        ans += 2 * freq\n\n    return ans\n", "blocks": [{"type": "if", "start": 36, "end": 37}, {"type": "if", "start": 38, "end": 39}, {"type": "if", "start": 30, "end": 31}], "target_lines": [31, 37, 39], "cfg": {"0": {"lineno": 0, "parents": [], "children": [40], "function": "", "code": "start"}, "1": {"lineno": 13, "parents": [], "children": [3], "function": "scoreOfStudents", "code": "enter: scoreOfStudents(self, s, answers)"}, "2": {"lineno": 13, "parents": [39], "children": [], "function": "scoreOfStudents", "code": "exit: scoreOfStudents(self, s, answers)"}, "3": {"lineno": 14, "parents": [1], "children": [4], "calls": ["len"], "function": "scoreOfStudents", "code": "n = len(s) // 2 + 1"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "scoreOfStudents", "code": "ans = 0"}, "5": {"lineno": 16, "parents": [4], "children": [6], "function": "scoreOfStudents", "code": "func = {'+': operator.add, '*': operator.mul}"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "scoreOfStudents", "code": "dp = [[set() for j in range(n)] for _ in range(n)]"}, "7": {"lineno": 19, "parents": [6], "children": [8], "function": "scoreOfStudents", "code": "__iv = iter(range(n))"}, "8": {"lineno": 19, "parents": [10, 7], "children": [9, 11], "calls": ["range"], "function": "scoreOfStudents", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 19, "parents": [8], "children": [10], "function": "scoreOfStudents", "code": "i = next(__iv)"}, "10": {"lineno": 20, "parents": [9], "children": [8], "calls": ["int", "add"], "function": "scoreOfStudents", "code": "dp[i][i].add(int(s[i * 2]))"}, "11": {"lineno": 22, "parents": [8], "children": [12], "function": "scoreOfStudents", "code": "__iv = iter(range(1, n))"}, "12": {"lineno": 22, "parents": [11, 15], "children": [13, 31], "calls": ["range"], "function": "scoreOfStudents", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 22, "parents": [12], "children": [14], "function": "scoreOfStudents", "code": "d = next(__iv)"}, "14": {"lineno": 23, "parents": [13], "children": [15], "function": "scoreOfStudents", "code": "__iv = iter(range(n - d))"}, "15": {"lineno": 23, "parents": [19, 14], "children": [16, 12], "calls": ["range"], "function": "scoreOfStudents", "code": "_for: __iv.__length__hint__() > 0"}, "16": {"lineno": 23, "parents": [15], "children": [17], "function": "scoreOfStudents", "code": "i = next(__iv)"}, "17": {"lineno": 24, "parents": [16], "children": [18], "function": "scoreOfStudents", "code": "j = i + d"}, "18": {"lineno": 25, "parents": [17], "children": [19], "function": "scoreOfStudents", "code": "__iv = iter(range(i, j))"}, "19": {"lineno": 25, "parents": [18, 23], "children": [20, 15], "calls": ["range"], "function": "scoreOfStudents", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 25, "parents": [19], "children": [21], "function": "scoreOfStudents", "code": "k = next(__iv)"}, "21": {"lineno": 26, "parents": [20], "children": [22], "function": "scoreOfStudents", "code": "op = s[k * 2 + 1]"}, "22": {"lineno": 27, "parents": [21], "children": [23], "function": "scoreOfStudents", "code": "__iv = iter(dp[i][k])"}, "23": {"lineno": 27, "parents": [26, 22], "children": [24, 19], "function": "scoreOfStudents", "code": "_for: __iv.__length__hint__() > 0"}, "24": {"lineno": 27, "parents": [23], "children": [25], "function": "scoreOfStudents", "code": "a = next(__iv)"}, "25": {"lineno": 28, "parents": [24], "children": [26], "function": "scoreOfStudents", "code": "__iv = iter(dp[k + 1][j])"}, "26": {"lineno": 28, "parents": [25, 29, 30], "children": [27, 23], "function": "scoreOfStudents", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 28, "parents": [26], "children": [28], "function": "scoreOfStudents", "code": "b = next(__iv)"}, "28": {"lineno": 29, "parents": [27], "children": [29], "calls": ["func"], "function": "scoreOfStudents", "code": "res = func[op](a, b)"}, "29": {"lineno": 30, "parents": [28], "children": [26, 30], "function": "scoreOfStudents", "code": "_if: res <= 1000"}, "30": {"lineno": 31, "parents": [29], "children": [26], "calls": ["add"], "function": "scoreOfStudents", "code": "dp[i][j].add(res)"}, "31": {"lineno": 33, "parents": [12], "children": [32], "calls": ["eval"], "function": "scoreOfStudents", "code": "correctAnswer = eval(s)"}, "32": {"lineno": 35, "parents": [31], "children": [33], "function": "scoreOfStudents", "code": "__iv = iter(collections.Counter(answers).items())"}, "33": {"lineno": 35, "parents": [32, 36, 37, 38], "children": [34, 39], "calls": ["items"], "function": "scoreOfStudents", "code": "_for: __iv.__length__hint__() > 0"}, "34": {"lineno": 35, "parents": [33], "children": [35], "function": "scoreOfStudents", "code": "answer, freq = next(__iv)"}, "35": {"lineno": 36, "parents": [34], "children": [36, 37], "function": "scoreOfStudents", "code": "_if: answer == correctAnswer"}, "36": {"lineno": 37, "parents": [35], "children": [33], "function": "scoreOfStudents", "code": "ans += 5 * freq"}, "37": {"lineno": 38, "parents": [35], "children": [33, 38], "function": "scoreOfStudents", "code": "_if: answer in dp[0][n - 1]"}, "38": {"lineno": 39, "parents": [37], "children": [33], "function": "scoreOfStudents", "code": "ans += 2 * freq"}, "39": {"lineno": 41, "parents": [33], "children": [2], "function": "scoreOfStudents", "code": "return ans"}, "40": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2030, "task_title": "Smallest K-Length Subsequence With Occurrences of a Letter", "difficulty": 3, "func_name": "smallestSubsequence", "description": "You are given a string `s`, an integer `k`, a letter `letter`, and an integer\n`repetition`.\n\nReturn the lexicographically smallest subsequence of `s` of length `k` that\nhas the letter `letter` appear at least `repetition` times. The test cases are\ngenerated so that the `letter` appears in `s` at least `repetition` times.\n\nA subsequence is a string that can be derived from another string by deleting\nsome or no characters without changing the order of the remaining characters.\n\nA string `a` is lexicographically smaller than a string `b` if in the first\nposition where `a` and `b` differ, string `a` has a letter that appears\nearlier in the alphabet than the corresponding letter in `b`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def smallestSubsequence(self, s: str, k: int, letter: str, repetition: int) -> str:\n    stack = []\n    required = repetition\n    nLetters = s.count(letter)\n\n    for i, c in enumerate(s):\n      while stack and stack[-1] > c  and len(stack) + len(s) - i - 1 >= k and (stack[-1] != letter or nLetters > required):\n        if stack.pop() == letter:\n          required += 1\n      if len(stack) < k:\n        if c == letter:\n          stack.append(c)\n          required -= 1\n        elif k - len(stack) > required:\n          stack.append(c)\n      if c == letter:\n        nLetters -= 1\n\n    return ''.join(stack)\n", "blocks": [{"type": "if", "start": 21, "end": 26}, {"type": "if", "start": 27, "end": 28}, {"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 22, "end": 24}, {"type": "if", "start": 25, "end": 26}], "target_lines": [20, 22, 23, 24, 25, 26, 28], "cfg": {"0": {"lineno": 0, "parents": [], "children": [21], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "smallestSubsequence", "code": "enter: smallestSubsequence(self, s, k, letter, repetition)"}, "2": {"lineno": 12, "parents": [20], "children": [], "function": "smallestSubsequence", "code": "exit: smallestSubsequence(self, s, k, letter, repetition)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "smallestSubsequence", "code": "stack = []"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "smallestSubsequence", "code": "required = repetition"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["count"], "function": "smallestSubsequence", "code": "nLetters = s.count(letter)"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "smallestSubsequence", "code": "__iv = iter(enumerate(s))"}, "7": {"lineno": 17, "parents": [18, 19, 6], "children": [8, 20], "calls": ["enumerate", "join"], "function": "smallestSubsequence", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "smallestSubsequence", "code": "i, c = next(__iv)"}, "9": {"lineno": 18, "parents": [8, 10, 11], "children": [10, 12], "function": "smallestSubsequence", "code": "_while: stack and stack[-1] > c and (len(stack) + len(s) - i - 1 >= k) and (stack[-1] != letter or nLetters > required)"}, "10": {"lineno": 19, "parents": [9], "children": [9, 11], "calls": ["pop"], "function": "smallestSubsequence", "code": "_if: stack.pop() == letter"}, "11": {"lineno": 20, "parents": [10], "children": [9], "function": "smallestSubsequence", "code": "required += 1"}, "12": {"lineno": 21, "parents": [9], "children": [18, 13], "calls": ["len"], "function": "smallestSubsequence", "code": "_if: len(stack) < k"}, "13": {"lineno": 22, "parents": [12], "children": [16, 14], "function": "smallestSubsequence", "code": "_if: c == letter"}, "14": {"lineno": 23, "parents": [13], "children": [15], "calls": ["append"], "function": "smallestSubsequence", "code": "stack.append(c)"}, "15": {"lineno": 24, "parents": [14], "children": [18], "function": "smallestSubsequence", "code": "required -= 1"}, "16": {"lineno": 25, "parents": [13], "children": [17, 18], "calls": ["len"], "function": "smallestSubsequence", "code": "_if: k - len(stack) > required"}, "17": {"lineno": 26, "parents": [16], "children": [18], "calls": ["append"], "function": "smallestSubsequence", "code": "stack.append(c)"}, "18": {"lineno": 27, "parents": [16, 17, 12, 15], "children": [19, 7], "function": "smallestSubsequence", "code": "_if: c == letter"}, "19": {"lineno": 28, "parents": [18], "children": [7], "function": "smallestSubsequence", "code": "nLetters -= 1"}, "20": {"lineno": 30, "parents": [7], "children": [2], "function": "smallestSubsequence", "code": "return ''.join(stack)"}, "21": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2040, "task_title": "Kth Smallest Product of Two Sorted Arrays", "difficulty": 3, "func_name": "kthSmallestProduct", "description": "Given two sorted 0-indexed integer arrays `nums1` and `nums2` as well as an\ninteger `k`, return the `kth` (1-based) smallest product of `nums1[i] *\nnums2[j]` where `0 <= i < nums1.length` and `0 <= j < nums2.length`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def kthSmallestProduct(self, nums1: List[int], nums2: List[int], k: int) -> int:\n    A1 = [-num for num in nums1 if num < 0][::-1]\n    A2 = [num for num in nums1 if num >= 0]\n    B1 = [-num for num in nums2 if num < 0][::-1]\n    B2 = [num for num in nums2 if num >= 0]\n\n    negCount = len(A1) * len(B2) + len(A2) * len(B1)\n\n    if k > negCount:\n      k -= negCount\n      sign = 1\n    else:\n      k = negCount - k + 1\n      sign = -1\n      B1, B2 = B2, B1\n\n    def numProductNoGreaterThan(A: List[int], B: List[int], m: int) -> int:\n      ans = 0\n      j = len(B) - 1\n      for i in range(len(A)):\n        while j >= 0 and A[i] * B[j] > m:\n          j -= 1\n        ans += j + 1\n      return ans\n\n    l = 0\n    r = 10**10\n\n    while l < r:\n      m = (l + r) // 2\n      if numProductNoGreaterThan(A1, B1, m) + numProductNoGreaterThan(A2, B2, m) >= k:\n        r = m\n      else:\n        l = m + 1\n\n    return sign * l\n", "blocks": [{"type": "if", "start": 20, "end": 22}, {"type": "else", "start": 23, "end": 26}, {"type": "if", "start": 42, "end": 43}, {"type": "else", "start": 44, "end": 45}], "target_lines": [21, 22, 24, 25, 26, 43, 45], "cfg": {"0": {"lineno": 0, "parents": [], "children": [33], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "kthSmallestProduct", "code": "enter: kthSmallestProduct(self, nums1, nums2, k)"}, "2": {"lineno": 12, "parents": [32], "children": [], "function": "kthSmallestProduct", "code": "exit: kthSmallestProduct(self, nums1, nums2, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "kthSmallestProduct", "code": "A1 = [-num for num in nums1 if num < 0][::-1]"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "kthSmallestProduct", "code": "A2 = [num for num in nums1 if num >= 0]"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "kthSmallestProduct", "code": "B1 = [-num for num in nums2 if num < 0][::-1]"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "kthSmallestProduct", "code": "B2 = [num for num in nums2 if num >= 0]"}, "7": {"lineno": 18, "parents": [6], "children": [8], "calls": ["len", "len", "len", "len"], "function": "kthSmallestProduct", "code": "negCount = len(A1) * len(B2) + len(A2) * len(B1)"}, "8": {"lineno": 20, "parents": [7], "children": [9, 11], "function": "kthSmallestProduct", "code": "_if: k > negCount"}, "9": {"lineno": 21, "parents": [8], "children": [10], "function": "kthSmallestProduct", "code": "k -= negCount"}, "10": {"lineno": 22, "parents": [9], "children": [25], "function": "kthSmallestProduct", "code": "sign = 1"}, "11": {"lineno": 24, "parents": [8], "children": [12], "function": "kthSmallestProduct", "code": "k = negCount - k + 1"}, "12": {"lineno": 25, "parents": [11], "children": [13], "function": "kthSmallestProduct", "code": "sign = -1"}, "13": {"lineno": 26, "parents": [12], "children": [25], "function": "kthSmallestProduct", "code": "B1, B2 = (B2, B1)"}, "14": {"lineno": 28, "parents": [29], "children": [16], "function": "numProductNoGreaterThan", "code": "enter: numProductNoGreaterThan(A, B, m)"}, "15": {"lineno": 28, "parents": [24], "children": [], "function": "numProductNoGreaterThan", "code": "exit: numProductNoGreaterThan(A, B, m)"}, "16": {"lineno": 29, "parents": [14], "children": [17], "function": "numProductNoGreaterThan", "code": "ans = 0"}, "17": {"lineno": 30, "parents": [16], "children": [18], "calls": ["len"], "function": "numProductNoGreaterThan", "code": "j = len(B) - 1"}, "18": {"lineno": 31, "parents": [17], "children": [19], "function": "numProductNoGreaterThan", "code": "__iv = iter(range(len(A)))"}, "19": {"lineno": 31, "parents": [18, 23], "children": [24, 20], "calls": ["len", "range"], "function": "numProductNoGreaterThan", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 31, "parents": [19], "children": [21], "function": "numProductNoGreaterThan", "code": "i = next(__iv)"}, "21": {"lineno": 32, "parents": [20, 22], "children": [22, 23], "function": "numProductNoGreaterThan", "code": "_while: j >= 0 and A[i] * B[j] > m"}, "22": {"lineno": 33, "parents": [21], "children": [21], "function": "numProductNoGreaterThan", "code": "j -= 1"}, "23": {"lineno": 34, "parents": [21], "children": [19], "function": "numProductNoGreaterThan", "code": "ans += j + 1"}, "24": {"lineno": 35, "parents": [19], "children": [15], "function": "numProductNoGreaterThan", "code": "return ans"}, "25": {"lineno": 37, "parents": [10, 13], "children": [26], "function": "kthSmallestProduct", "code": "l = 0"}, "26": {"lineno": 38, "parents": [25], "children": [27], "function": "kthSmallestProduct", "code": "r = 10 ** 10"}, "27": {"lineno": 40, "parents": [26, 30, 31], "children": [32, 28], "function": "kthSmallestProduct", "code": "_while: l < r"}, "28": {"lineno": 41, "parents": [27], "children": [29], "function": "kthSmallestProduct", "code": "m = (l + r) // 2"}, "29": {"lineno": 42, "parents": [28], "children": [30, 31], "calls": ["numProductNoGreaterThan", "numProductNoGreaterThan"], "function": "kthSmallestProduct", "code": "_if: numProductNoGreaterThan(A1, B1, m) + numProductNoGreaterThan(A2, B2, m) >= k"}, "30": {"lineno": 43, "parents": [29, 15], "children": [27], "function": "kthSmallestProduct", "code": "r = m"}, "31": {"lineno": 45, "parents": [29, 15], "children": [27], "function": "kthSmallestProduct", "code": "l = m + 1"}, "32": {"lineno": 47, "parents": [27], "children": [2], "function": "kthSmallestProduct", "code": "return sign * l"}, "33": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2045, "task_title": "Second Minimum Time to Reach Destination", "difficulty": 3, "func_name": "secondMinimum", "description": "A city is represented as a bi-directional connected graph with `n` vertices\nwhere each vertex is labeled from `1` to `n` (inclusive). The edges in the\ngraph are represented as a 2D integer array `edges`, where each `edges[i] =\n[ui, vi]` denotes a bi-directional edge between vertex `ui` and vertex `vi`.\nEvery vertex pair is connected by at most one edge, and no vertex has an edge\nto itself. The time taken to traverse any edge is `time` minutes.\n\nEach vertex has a traffic signal which changes its color from green to red and\nvice versa every `change` minutes. All signals change at the same time. You\ncan enter a vertex at any time, but can leave a vertex only when the signal is\ngreen. You cannot wait at a vertex if the signal is green.\n\nThe second minimum value is defined as the smallest value strictly larger than\nthe minimum value.\n\n* For example the second minimum value of `[2, 3, 4]` is `3`, and the second minimum value of `[2, 2, 4]` is `4`.\n\nGiven `n`, `edges`, `time`, and `change`, return the second minimum time it\nwill take to go from vertex `1` to vertex `n`.\n\nNotes:\n\n* You can go through any vertex any number of times, including `1` and `n`.\n* You can assume that when the journey starts, all signals have just turned green.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def secondMinimum(self, n: int, edges: List[List[int]], time: int, change: int) -> int:\n    graph = [[] for _ in range(n + 1)]\n    q = collections.deque([(1, 0)])\n    minTime = [[math.inf] * 2 for _ in range(n + 1)]\n    minTime[1][0] = 0\n\n    for u, v in edges:\n      graph[u].append(v)\n      graph[v].append(u)\n\n    while q:\n      i, prevTime = q.popleft()\n\n      numChangeSignal = prevTime // change\n      waitTime = change - (prevTime % change) if numChangeSignal & 1 else 0\n      newTime = prevTime + waitTime + time\n      for j in graph[i]:\n        if newTime < minTime[j][0]:\n          minTime[j][0] = newTime\n          q.append((j, newTime))\n        elif minTime[j][0] < newTime < minTime[j][1]:\n          if j == n:\n            return newTime\n          minTime[j][1] = newTime\n          q.append((j, newTime))\n", "blocks": [{"type": "if", "start": 29, "end": 31}, {"type": "if", "start": 32, "end": 36}, {"type": "if", "start": 33, "end": 34}], "target_lines": [30, 31, 33, 34, 35, 36], "cfg": {"0": {"lineno": 0, "parents": [], "children": [28], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "secondMinimum", "code": "enter: secondMinimum(self, n, edges, time, change)"}, "2": {"lineno": 12, "parents": [25, 12], "children": [], "function": "secondMinimum", "code": "exit: secondMinimum(self, n, edges, time, change)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "secondMinimum", "code": "graph = [[] for _ in range(n + 1)]"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["deque"], "function": "secondMinimum", "code": "q = collections.deque([(1, 0)])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "secondMinimum", "code": "minTime = [[math.inf] * 2 for _ in range(n + 1)]"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "secondMinimum", "code": "minTime[1][0] = 0"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "secondMinimum", "code": "__iv = iter(edges)"}, "8": {"lineno": 18, "parents": [11, 7], "children": [9, 12], "function": "secondMinimum", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "secondMinimum", "code": "u, v = next(__iv)"}, "10": {"lineno": 19, "parents": [9], "children": [11], "calls": ["append"], "function": "secondMinimum", "code": "graph[u].append(v)"}, "11": {"lineno": 20, "parents": [10], "children": [8], "calls": ["append"], "function": "secondMinimum", "code": "graph[v].append(u)"}, "12": {"lineno": 22, "parents": [8, 18], "children": [2, 13], "function": "secondMinimum", "code": "_while: q"}, "13": {"lineno": 23, "parents": [12], "children": [14], "calls": ["popleft"], "function": "secondMinimum", "code": "i, prevTime = q.popleft()"}, "14": {"lineno": 25, "parents": [13], "children": [15], "function": "secondMinimum", "code": "numChangeSignal = prevTime // change"}, "15": {"lineno": 26, "parents": [14], "children": [16], "function": "secondMinimum", "code": "waitTime = change - prevTime % change if numChangeSignal & 1 else 0"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "secondMinimum", "code": "newTime = prevTime + waitTime + time"}, "17": {"lineno": 28, "parents": [16], "children": [18], "function": "secondMinimum", "code": "__iv = iter(graph[i])"}, "18": {"lineno": 28, "parents": [17, 27, 22, 23], "children": [19, 12], "function": "secondMinimum", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 28, "parents": [18], "children": [20], "function": "secondMinimum", "code": "j = next(__iv)"}, "20": {"lineno": 29, "parents": [19], "children": [21, 23], "function": "secondMinimum", "code": "_if: newTime < minTime[j][0]"}, "21": {"lineno": 30, "parents": [20], "children": [22], "function": "secondMinimum", "code": "minTime[j][0] = newTime"}, "22": {"lineno": 31, "parents": [21], "children": [18], "calls": ["append"], "function": "secondMinimum", "code": "q.append((j, newTime))"}, "23": {"lineno": 32, "parents": [20], "children": [24, 18], "function": "secondMinimum", "code": "_if: minTime[j][0] < newTime < minTime[j][1]"}, "24": {"lineno": 33, "parents": [23], "children": [25, 26], "function": "secondMinimum", "code": "_if: j == n"}, "25": {"lineno": 34, "parents": [24], "children": [2], "function": "secondMinimum", "code": "return newTime"}, "26": {"lineno": 35, "parents": [24], "children": [27], "function": "secondMinimum", "code": "minTime[j][1] = newTime"}, "27": {"lineno": 36, "parents": [26], "children": [18], "calls": ["append"], "function": "secondMinimum", "code": "q.append((j, newTime))"}, "28": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2059, "task_title": "Minimum Operations to Convert Number", "difficulty": 2, "func_name": "minimumOperations", "description": "You are given a 0-indexed integer array `nums` containing distinct numbers, an\ninteger `start`, and an integer `goal`. There is an integer `x` that is\ninitially set to `start`, and you want to perform operations on `x` such that\nit is converted to `goal`. You can perform the following operation repeatedly\non the number `x`:\n\nIf `0 <= x <= 1000`, then for any index `i` in the array (`0 <= i <\nnums.length`), you can set `x` to any of the following:\n\n* `x + nums[i]`\n* `x - nums[i]`\n* `x ^ nums[i]` (bitwise-XOR)\n\nNote that you can use each `nums[i]` any number of times in any order.\nOperations that set `x` to be out of the range `0 <= x <= 1000` are valid, but\nno more operations can be done afterward.\n\nReturn the minimum number of operations needed to convert `x = start` into\n`goal`, and `-1` if it is not possible.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumOperations(self, nums: List[int], start: int, goal: int) -> int:\n    ans = 0\n    q = collections.deque([start])\n    seen = {start}\n\n    while q:\n      ans += 1\n      for _ in range(len(q)):\n        x = q.popleft()\n        for num in nums:\n          for res in (x + num, x - num, x ^ num):\n            if res == goal:\n              return ans\n            if res < 0 or res > 1000 or res in seen:\n              continue\n            seen.add(res)\n            q.append(res)\n\n    return -1\n", "blocks": [{"type": "if", "start": 23, "end": 24}, {"type": "if", "start": 25, "end": 26}], "target_lines": [24, 26], "cfg": {"0": {"lineno": 0, "parents": [], "children": [25], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumOperations", "code": "enter: minimumOperations(self, nums, start, goal)"}, "2": {"lineno": 12, "parents": [24, 19], "children": [], "function": "minimumOperations", "code": "exit: minimumOperations(self, nums, start, goal)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "minimumOperations", "code": "ans = 0"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["deque"], "function": "minimumOperations", "code": "q = collections.deque([start])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "minimumOperations", "code": "seen = {start}"}, "6": {"lineno": 17, "parents": [9, 5], "children": [24, 7], "function": "minimumOperations", "code": "_while: q"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "minimumOperations", "code": "ans += 1"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "minimumOperations", "code": "__iv = iter(range(len(q)))"}, "9": {"lineno": 19, "parents": [8, 13], "children": [10, 6], "calls": ["len", "range"], "function": "minimumOperations", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "minimumOperations", "code": "_ = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "calls": ["popleft"], "function": "minimumOperations", "code": "x = q.popleft()"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "minimumOperations", "code": "__iv = iter(nums)"}, "13": {"lineno": 21, "parents": [16, 12], "children": [9, 14], "function": "minimumOperations", "code": "_for: __iv.__length__hint__() > 0"}, "14": {"lineno": 21, "parents": [13], "children": [15], "function": "minimumOperations", "code": "num = next(__iv)"}, "15": {"lineno": 22, "parents": [14], "children": [16], "function": "minimumOperations", "code": "__iv = iter((x + num, x - num, x ^ num))"}, "16": {"lineno": 22, "parents": [23, 21, 15], "children": [17, 13], "function": "minimumOperations", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 22, "parents": [16], "children": [18], "function": "minimumOperations", "code": "res = next(__iv)"}, "18": {"lineno": 23, "parents": [17], "children": [19, 20], "function": "minimumOperations", "code": "_if: res == goal"}, "19": {"lineno": 24, "parents": [18], "children": [2], "function": "minimumOperations", "code": "return ans"}, "20": {"lineno": 25, "parents": [18], "children": [21, 22], "function": "minimumOperations", "code": "_if: res < 0 or res > 1000 or res in seen"}, "21": {"lineno": 26, "parents": [20], "children": [16], "function": "minimumOperations", "code": "continue"}, "22": {"lineno": 27, "parents": [20], "children": [23], "calls": ["add"], "function": "minimumOperations", "code": "seen.add(res)"}, "23": {"lineno": 28, "parents": [22], "children": [16], "calls": ["append"], "function": "minimumOperations", "code": "q.append(res)"}, "24": {"lineno": 30, "parents": [6], "children": [2], "function": "minimumOperations", "code": "return -1"}, "25": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2076, "task_title": "Process Restricted Friend Requests", "difficulty": 3, "func_name": "friendRequests", "description": "You are given an integer `n` indicating the number of people in a network.\nEach person is labeled from `0` to `n - 1`.\n\nYou are also given a 0-indexed 2D integer array `restrictions`, where\n`restrictions[i] = [xi, yi]` means that person `xi` and person `yi` cannot\nbecome friends, either directly or indirectly through other people.\n\nInitially, no one is friends with each other. You are given a list of friend\nrequests as a 0-indexed 2D integer array `requests`, where `requests[j] = [uj,\nvj]` is a friend request between person `uj` and person `vj`.\n\nA friend request is successful if `uj` and `vj` can be friends. Each friend\nrequest is processed in the given order (i.e., `requests[j]` occurs before\n`requests[j + 1]`), and upon a successful request, `uj` and `vj` become direct\nfriends for all future friend requests.\n\nReturn a boolean array `result`, where each `result[j]` is `true` if the `jth`\nfriend request is successful or `false` if it is not.\n\nNote: If `uj` and `vj` are already direct friends, the request is still\nsuccessful.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def friendRequests(self, n: int, restrictions: List[List[int]], requests: List[List[int]]) -> List[bool]:\n    ans = []\n    uf = UnionFind(n)\n\n    for u, v in requests:\n      pu = uf.find(u)\n      pv = uf.find(v)\n      isValid = True\n      if pu != pv:\n        for x, y in restrictions:\n          px = uf.find(x)\n          py = uf.find(y)\n          if (pu, pv) in [(px, py), (py, px)]:\n            isValid = False\n            break\n      ans.append(isValid)\n      if isValid:\n        uf.unionByRank(pu, pv)\n\n    return ans\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 23, "end": 24}, {"type": "else", "start": 25, "end": 27}, {"type": "if", "start": 44, "end": 50}, {"type": "if", "start": 52, "end": 53}, {"type": "if", "start": 48, "end": 50}], "target_lines": [20, 22, 24, 26, 27, 31, 45, 46, 47, 48, 49, 50, 53], "cfg": {"0": {"lineno": 0, "parents": [], "children": [45], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.rank = [0] * n"}, "5": {"lineno": 16, "parents": [43], "children": [7], "function": "unionByRank", "code": "enter: unionByRank(self, u, v)"}, "6": {"lineno": 16, "parents": [16, 10, 12, 14], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "calls": ["find"], "function": "unionByRank", "code": "i = self.find(u)"}, "8": {"lineno": 18, "parents": [18, 7], "children": [9], "calls": ["find"], "function": "unionByRank", "code": "j = self.find(v)"}, "9": {"lineno": 19, "parents": [8, 18], "children": [10, 11], "function": "unionByRank", "code": "_if: i == j"}, "10": {"lineno": 20, "parents": [9], "children": [6], "function": "unionByRank", "code": "return"}, "11": {"lineno": 21, "parents": [9], "children": [12, 13], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "12": {"lineno": 22, "parents": [11], "children": [6], "function": "unionByRank", "code": "self.id[i] = j"}, "13": {"lineno": 23, "parents": [11], "children": [14, 15], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "14": {"lineno": 24, "parents": [13], "children": [6], "function": "unionByRank", "code": "self.id[j] = i"}, "15": {"lineno": 26, "parents": [13], "children": [16], "function": "unionByRank", "code": "self.id[i] = j"}, "16": {"lineno": 27, "parents": [15], "children": [6], "function": "unionByRank", "code": "self.rank[j] += 1"}, "17": {"lineno": 29, "parents": [36, 37, 20, 7, 8, 29, 30], "children": [19], "function": "find", "code": "enter: find(self, u)"}, "18": {"lineno": 29, "parents": [21], "children": [], "function": "find", "code": "exit: find(self, u)"}, "19": {"lineno": 30, "parents": [17], "children": [20, 21], "function": "find", "code": "_if: self.id[u] != u"}, "20": {"lineno": 31, "parents": [19], "children": [21], "calls": ["find"], "function": "find", "code": "self.id[u] = self.find(self.id[u])"}, "21": {"lineno": 32, "parents": [18, 19, 20], "children": [18], "function": "find", "code": "return self.id[u]"}, "22": {"lineno": 36, "parents": [], "children": [24], "function": "friendRequests", "code": "enter: friendRequests(self, n, restrictions, requests)"}, "23": {"lineno": 36, "parents": [44], "children": [], "function": "friendRequests", "code": "exit: friendRequests(self, n, restrictions, requests)"}, "24": {"lineno": 37, "parents": [22], "children": [25], "function": "friendRequests", "code": "ans = []"}, "25": {"lineno": 38, "parents": [24], "children": [26], "calls": ["UnionFind"], "function": "friendRequests", "code": "uf = UnionFind(n)"}, "26": {"lineno": 40, "parents": [25], "children": [27], "function": "friendRequests", "code": "__iv = iter(requests)"}, "27": {"lineno": 40, "parents": [26, 43, 42, 6], "children": [28, 44], "function": "friendRequests", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 40, "parents": [27], "children": [29], "function": "friendRequests", "code": "u, v = next(__iv)"}, "29": {"lineno": 41, "parents": [28], "children": [30], "calls": ["find"], "function": "friendRequests", "code": "pu = uf.find(u)"}, "30": {"lineno": 42, "parents": [18, 29], "children": [31], "calls": ["find"], "function": "friendRequests", "code": "pv = uf.find(v)"}, "31": {"lineno": 43, "parents": [18, 30], "children": [32], "function": "friendRequests", "code": "isValid = True"}, "32": {"lineno": 44, "parents": [31], "children": [33, 41], "function": "friendRequests", "code": "_if: pu != pv"}, "33": {"lineno": 45, "parents": [32], "children": [34], "function": "friendRequests", "code": "__iv = iter(restrictions)"}, "34": {"lineno": 45, "parents": [33, 38], "children": [41, 35], "function": "friendRequests", "code": "_for: __iv.__length__hint__() > 0"}, "35": {"lineno": 45, "parents": [34], "children": [36], "function": "friendRequests", "code": "x, y = next(__iv)"}, "36": {"lineno": 46, "parents": [35], "children": [37], "calls": ["find"], "function": "friendRequests", "code": "px = uf.find(x)"}, "37": {"lineno": 47, "parents": [18, 36], "children": [38], "calls": ["find"], "function": "friendRequests", "code": "py = uf.find(y)"}, "38": {"lineno": 48, "parents": [18, 37], "children": [34, 39], "function": "friendRequests", "code": "_if: (pu, pv) in [(px, py), (py, px)]"}, "39": {"lineno": 49, "parents": [38], "children": [40], "function": "friendRequests", "code": "isValid = False"}, "40": {"lineno": 50, "parents": [39], "children": [41], "function": "friendRequests", "code": "break"}, "41": {"lineno": 51, "parents": [40, 34, 32], "children": [42], "calls": ["append"], "function": "friendRequests", "code": "ans.append(isValid)"}, "42": {"lineno": 52, "parents": [41], "children": [27, 43], "function": "friendRequests", "code": "_if: isValid"}, "43": {"lineno": 53, "parents": [42], "children": [27], "calls": ["unionByRank"], "function": "friendRequests", "code": "uf.unionByRank(pu, pv)"}, "44": {"lineno": 55, "parents": [27], "children": [23], "function": "friendRequests", "code": "return ans"}, "45": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2086, "task_title": "Minimum Number of Food Buckets to Feed the Hamsters", "difficulty": 2, "func_name": "minimumBuckets", "description": "You are given a 0-indexed string `hamsters` where `hamsters[i]` is either:\n\n* `'H'` indicating that there is a hamster at index `i`, or\n* `'.'` indicating that index `i` is empty.\n\nYou will add some number of food buckets at the empty indices in order to feed\nthe hamsters. A hamster can be fed if there is at least one food bucket to its\nleft or to its right. More formally, a hamster at index `i` can be fed if you\nplace a food bucket at index `i - 1` and/or at index `i + 1`.\n\nReturn the minimum number of food buckets you should place at empty indices to\nfeed all the hamsters or `-1` if it is impossible to feed all of them.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumBuckets(self, street: str) -> int:\n    A = list(street)\n\n    for i, c in enumerate(A):\n      if c == 'H':\n        if i > 0 and A[i - 1] == 'B':\n          continue\n        if i + 1 < len(A) and A[i + 1] == '.':\n          A[i + 1] = 'B'\n        elif i > 0 and A[i - 1] == '.':\n          A[i - 1] = 'B'\n        else:\n          return -1\n\n    return A.count('B')\n", "blocks": [{"type": "if", "start": 16, "end": 24}, {"type": "if", "start": 17, "end": 18}, {"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "else", "start": 23, "end": 24}], "target_lines": [17, 18, 19, 20, 21, 22, 24], "cfg": {"0": {"lineno": 0, "parents": [], "children": [16], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumBuckets", "code": "enter: minimumBuckets(self, street)"}, "2": {"lineno": 12, "parents": [14, 15], "children": [], "function": "minimumBuckets", "code": "exit: minimumBuckets(self, street)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["list"], "function": "minimumBuckets", "code": "A = list(street)"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "minimumBuckets", "code": "__iv = iter(enumerate(A))"}, "5": {"lineno": 15, "parents": [4, 7, 9, 11, 13], "children": [6, 15], "calls": ["enumerate", "count"], "function": "minimumBuckets", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "minimumBuckets", "code": "i, c = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8, 5], "function": "minimumBuckets", "code": "_if: c == 'H'"}, "8": {"lineno": 17, "parents": [7], "children": [9, 10], "function": "minimumBuckets", "code": "_if: i > 0 and A[i - 1] == 'B'"}, "9": {"lineno": 18, "parents": [8], "children": [5], "function": "minimumBuckets", "code": "continue"}, "10": {"lineno": 19, "parents": [8], "children": [11, 12], "function": "minimumBuckets", "code": "_if: i + 1 < len(A) and A[i + 1] == '.'"}, "11": {"lineno": 20, "parents": [10], "children": [5], "function": "minimumBuckets", "code": "A[i + 1] = 'B'"}, "12": {"lineno": 21, "parents": [10], "children": [13, 14], "function": "minimumBuckets", "code": "_if: i > 0 and A[i - 1] == '.'"}, "13": {"lineno": 22, "parents": [12], "children": [5], "function": "minimumBuckets", "code": "A[i - 1] = 'B'"}, "14": {"lineno": 24, "parents": [12], "children": [2], "function": "minimumBuckets", "code": "return -1"}, "15": {"lineno": 26, "parents": [5], "children": [2], "function": "minimumBuckets", "code": "return A.count('B')"}, "16": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2092, "task_title": "Find All People With Secret", "difficulty": 3, "func_name": "findAllPeople", "description": "You are given an integer `n` indicating there are `n` people numbered from `0`\nto `n - 1`. You are also given a 0-indexed 2D integer array `meetings` where\n`meetings[i] = [xi, yi, timei]` indicates that person `xi` and person `yi`\nhave a meeting at `timei`. A person may attend multiple meetings at the same\ntime. Finally, you are given an integer `firstPerson`.\n\nPerson `0` has a secret and initially shares the secret with a person\n`firstPerson` at time `0`. This secret is then shared every time a meeting\ntakes place with a person that has the secret. More formally, for every\nmeeting, if a person `xi` has the secret at `timei`, then they will share the\nsecret with person `yi`, and vice versa.\n\nThe secrets are shared instantaneously. That is, a person may receive the\nsecret and share it with people in other meetings within the same time frame.\n\nReturn a list of all the people that have the secret after all the meetings\nhave taken place. You may return the answer in any order.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self._find(u)\n    j = self._find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def connected(self, u: int, v: int) -> bool:\n    return self._find(self.id[u]) == self._find(self.id[v])\n\n  def reset(self, u: int) -> None:\n    self.id[u] = u\n\n  def _find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self._find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:\n    uf = UnionFind(n)\n    timeToPairs = collections.defaultdict(list)\n\n    uf.unionByRank(0, firstPerson)\n\n    for x, y, time in meetings:\n      timeToPairs[time].append((x, y))\n\n    for _, pairs in sorted(timeToPairs.items(), key=lambda x: x[0]):\n      peopleUnioned = set()\n      for x, y in pairs:\n        uf.unionByRank(x, y)\n        peopleUnioned.add(x)\n        peopleUnioned.add(y)\n      for person in peopleUnioned:\n        if not uf.connected(person, 0):\n          uf.reset(person)\n\n    res=[]\n    for i in range(n):\n      if uf.connected(i, 0):\n        res.append(i)\n    return res\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 36, "end": 37}, {"type": "if", "start": 23, "end": 24}, {"type": "else", "start": 25, "end": 27}, {"type": "if", "start": 63, "end": 64}, {"type": "if", "start": 58, "end": 59}], "target_lines": [20, 22, 24, 26, 27, 37, 59, 64], "cfg": {"0": {"lineno": 0, "parents": [], "children": [59], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.rank = [0] * n"}, "5": {"lineno": 16, "parents": [32, 44], "children": [7], "function": "unionByRank", "code": "enter: unionByRank(self, u, v)"}, "6": {"lineno": 16, "parents": [16, 10, 12, 14], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "calls": ["_find"], "function": "unionByRank", "code": "i = self._find(u)"}, "8": {"lineno": 18, "parents": [24, 7], "children": [9], "calls": ["_find"], "function": "unionByRank", "code": "j = self._find(v)"}, "9": {"lineno": 19, "parents": [8, 24], "children": [10, 11], "function": "unionByRank", "code": "_if: i == j"}, "10": {"lineno": 20, "parents": [9], "children": [6], "function": "unionByRank", "code": "return"}, "11": {"lineno": 21, "parents": [9], "children": [12, 13], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "12": {"lineno": 22, "parents": [11], "children": [6], "function": "unionByRank", "code": "self.id[i] = j"}, "13": {"lineno": 23, "parents": [11], "children": [14, 15], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "14": {"lineno": 24, "parents": [13], "children": [6], "function": "unionByRank", "code": "self.id[j] = i"}, "15": {"lineno": 26, "parents": [13], "children": [16], "function": "unionByRank", "code": "self.id[i] = j"}, "16": {"lineno": 27, "parents": [15], "children": [6], "function": "unionByRank", "code": "self.rank[j] += 1"}, "17": {"lineno": 29, "parents": [56, 50], "children": [19], "calls": ["_find", "_find"], "function": "connected", "code": "enter: connected(self, u, v)"}, "18": {"lineno": 29, "parents": [19], "children": [], "function": "connected", "code": "exit: connected(self, u, v)"}, "19": {"lineno": 30, "parents": [24, 17], "children": [18], "function": "connected", "code": "return self._find(self.id[u]) == self._find(self.id[v])"}, "20": {"lineno": 32, "parents": [51], "children": [22], "function": "reset", "code": "enter: reset(self, u)"}, "21": {"lineno": 32, "parents": [22], "children": [], "function": "reset", "code": "exit: reset(self, u)"}, "22": {"lineno": 33, "parents": [20], "children": [21], "function": "reset", "code": "self.id[u] = u"}, "23": {"lineno": 35, "parents": [8, 17, 26, 7], "children": [25], "function": "_find", "code": "enter: _find(self, u)"}, "24": {"lineno": 35, "parents": [27], "children": [], "function": "_find", "code": "exit: _find(self, u)"}, "25": {"lineno": 36, "parents": [23], "children": [26, 27], "function": "_find", "code": "_if: self.id[u] != u"}, "26": {"lineno": 37, "parents": [25], "children": [27], "calls": ["_find"], "function": "_find", "code": "self.id[u] = self._find(self.id[u])"}, "27": {"lineno": 38, "parents": [24, 25, 26], "children": [24], "function": "_find", "code": "return self.id[u]"}, "28": {"lineno": 42, "parents": [], "children": [30], "function": "findAllPeople", "code": "enter: findAllPeople(self, n, meetings, firstPerson)"}, "29": {"lineno": 42, "parents": [58], "children": [], "function": "findAllPeople", "code": "exit: findAllPeople(self, n, meetings, firstPerson)"}, "30": {"lineno": 43, "parents": [28], "children": [31], "calls": ["UnionFind"], "function": "findAllPeople", "code": "uf = UnionFind(n)"}, "31": {"lineno": 44, "parents": [30], "children": [32], "calls": ["defaultdict"], "function": "findAllPeople", "code": "timeToPairs = collections.defaultdict(list)"}, "32": {"lineno": 46, "parents": [31], "children": [33], "calls": ["unionByRank"], "function": "findAllPeople", "code": "uf.unionByRank(0, firstPerson)"}, "33": {"lineno": 48, "parents": [32, 6], "children": [34], "function": "findAllPeople", "code": "__iv = iter(meetings)"}, "34": {"lineno": 48, "parents": [33, 36], "children": [35, 37], "function": "findAllPeople", "code": "_for: __iv.__length__hint__() > 0"}, "35": {"lineno": 48, "parents": [34], "children": [36], "function": "findAllPeople", "code": "x, y, time = next(__iv)"}, "36": {"lineno": 49, "parents": [35], "children": [34], "calls": ["append"], "function": "findAllPeople", "code": "timeToPairs[time].append((x, y))"}, "37": {"lineno": 51, "parents": [34], "children": [38], "function": "findAllPeople", "code": "__iv = iter(sorted(timeToPairs.items(), key=lambda x: x[0]))"}, "38": {"lineno": 51, "parents": [48, 37], "children": [52, 39], "calls": ["items", "sorted"], "function": "findAllPeople", "code": "_for: __iv.__length__hint__() > 0"}, "39": {"lineno": 51, "parents": [38], "children": [40], "function": "findAllPeople", "code": "_, pairs = next(__iv)"}, "40": {"lineno": 52, "parents": [39], "children": [41], "calls": ["set"], "function": "findAllPeople", "code": "peopleUnioned = set()"}, "41": {"lineno": 53, "parents": [40], "children": [42], "function": "findAllPeople", "code": "__iv = iter(pairs)"}, "42": {"lineno": 53, "parents": [41, 46], "children": [43, 47], "function": "findAllPeople", "code": "_for: __iv.__length__hint__() > 0"}, "43": {"lineno": 53, "parents": [42], "children": [44], "function": "findAllPeople", "code": "x, y = next(__iv)"}, "44": {"lineno": 54, "parents": [43], "children": [45], "calls": ["unionByRank"], "function": "findAllPeople", "code": "uf.unionByRank(x, y)"}, "45": {"lineno": 55, "parents": [44, 6], "children": [46], "calls": ["add"], "function": "findAllPeople", "code": "peopleUnioned.add(x)"}, "46": {"lineno": 56, "parents": [45], "children": [42], "calls": ["add"], "function": "findAllPeople", "code": "peopleUnioned.add(y)"}, "47": {"lineno": 57, "parents": [42], "children": [48], "function": "findAllPeople", "code": "__iv = iter(peopleUnioned)"}, "48": {"lineno": 57, "parents": [18, 50, 51, 21, 47], "children": [49, 38], "function": "findAllPeople", "code": "_for: __iv.__length__hint__() > 0"}, "49": {"lineno": 57, "parents": [48], "children": [50], "function": "findAllPeople", "code": "person = next(__iv)"}, "50": {"lineno": 58, "parents": [49], "children": [48, 51], "calls": ["connected"], "function": "findAllPeople", "code": "_if: not uf.connected(person, 0)"}, "51": {"lineno": 59, "parents": [50, 18], "children": [48], "calls": ["reset"], "function": "findAllPeople", "code": "uf.reset(person)"}, "52": {"lineno": 61, "parents": [38], "children": [53], "function": "findAllPeople", "code": "res = []"}, "53": {"lineno": 62, "parents": [52], "children": [54], "function": "findAllPeople", "code": "__iv = iter(range(n))"}, "54": {"lineno": 62, "parents": [56, 57, 18, 53], "children": [58, 55], "calls": ["range"], "function": "findAllPeople", "code": "_for: __iv.__length__hint__() > 0"}, "55": {"lineno": 62, "parents": [54], "children": [56], "function": "findAllPeople", "code": "i = next(__iv)"}, "56": {"lineno": 63, "parents": [55], "children": [57, 54], "calls": ["connected"], "function": "findAllPeople", "code": "_if: uf.connected(i, 0)"}, "57": {"lineno": 64, "parents": [56, 18], "children": [54], "calls": ["append"], "function": "findAllPeople", "code": "res.append(i)"}, "58": {"lineno": 65, "parents": [54], "children": [29], "function": "findAllPeople", "code": "return res"}, "59": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2115, "task_title": "Find All Possible Recipes from Given Supplies", "difficulty": 2, "func_name": "findAllRecipes", "description": "You have information about `n` different recipes. You are given a string array\n`recipes` and a 2D string array `ingredients`. The `ith` recipe has the name\n`recipes[i]`, and you can create it if you have all the needed ingredients\nfrom `ingredients[i]`. Ingredients to a recipe may need to be created from\nother recipes, i.e., `ingredients[i]` may contain a string that is in\n`recipes`.\n\nYou are also given a string array `supplies` containing all the ingredients\nthat you initially have, and you have an infinite supply of all of them.\n\nReturn a list of all the recipes that you can create. You may return the\nanswer in any order.\n\nNote that two recipes may contain each other in their ingredients.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def findAllRecipes(self, recipes: List[str], ingredients: List[List[str]], supplies: List[str]) -> List[str]:\n    ans = []\n    supplies = set(supplies)\n    graph = collections.defaultdict(list)\n    inDegrees = collections.Counter()\n    q = collections.deque()\n\n    for i, recipe in enumerate(recipes):\n      for ingredient in ingredients[i]:\n        if ingredient not in supplies:\n          graph[ingredient].append(recipe)\n          inDegrees[recipe] += 1\n\n    for recipe in recipes:\n      if inDegrees[recipe] == 0:\n        q.append(recipe)\n\n    while q:\n      u = q.popleft()\n      ans.append(u)\n      for v in graph[u]:\n        inDegrees[v] -= 1\n        if inDegrees[v] == 0:\n          q.append(v)\n\n    return ans\n", "blocks": [{"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 21, "end": 23}, {"type": "if", "start": 34, "end": 35}], "target_lines": [22, 23, 27, 35], "cfg": {"0": {"lineno": 0, "parents": [], "children": [32], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "findAllRecipes", "code": "enter: findAllRecipes(self, recipes, ingredients, supplies)"}, "2": {"lineno": 12, "parents": [31], "children": [], "function": "findAllRecipes", "code": "exit: findAllRecipes(self, recipes, ingredients, supplies)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "findAllRecipes", "code": "ans = []"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["set"], "function": "findAllRecipes", "code": "supplies = set(supplies)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["defaultdict"], "function": "findAllRecipes", "code": "graph = collections.defaultdict(list)"}, "6": {"lineno": 16, "parents": [5], "children": [7], "calls": ["Counter"], "function": "findAllRecipes", "code": "inDegrees = collections.Counter()"}, "7": {"lineno": 17, "parents": [6], "children": [8], "calls": ["deque"], "function": "findAllRecipes", "code": "q = collections.deque()"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "findAllRecipes", "code": "__iv = iter(enumerate(recipes))"}, "9": {"lineno": 19, "parents": [8, 12], "children": [17, 10], "calls": ["enumerate"], "function": "findAllRecipes", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "findAllRecipes", "code": "i, recipe = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "findAllRecipes", "code": "__iv = iter(ingredients[i])"}, "12": {"lineno": 20, "parents": [16, 11, 14], "children": [9, 13], "function": "findAllRecipes", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 20, "parents": [12], "children": [14], "function": "findAllRecipes", "code": "ingredient = next(__iv)"}, "14": {"lineno": 21, "parents": [13], "children": [12, 15], "function": "findAllRecipes", "code": "_if: ingredient not in supplies"}, "15": {"lineno": 22, "parents": [14], "children": [16], "calls": ["append"], "function": "findAllRecipes", "code": "graph[ingredient].append(recipe)"}, "16": {"lineno": 23, "parents": [15], "children": [12], "function": "findAllRecipes", "code": "inDegrees[recipe] += 1"}, "17": {"lineno": 25, "parents": [9], "children": [18], "function": "findAllRecipes", "code": "__iv = iter(recipes)"}, "18": {"lineno": 25, "parents": [17, 20, 21], "children": [19, 22], "function": "findAllRecipes", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 25, "parents": [18], "children": [20], "function": "findAllRecipes", "code": "recipe = next(__iv)"}, "20": {"lineno": 26, "parents": [19], "children": [18, 21], "function": "findAllRecipes", "code": "_if: inDegrees[recipe] == 0"}, "21": {"lineno": 27, "parents": [20], "children": [18], "calls": ["append"], "function": "findAllRecipes", "code": "q.append(recipe)"}, "22": {"lineno": 29, "parents": [18, 26], "children": [31, 23], "function": "findAllRecipes", "code": "_while: q"}, "23": {"lineno": 30, "parents": [22], "children": [24], "calls": ["popleft"], "function": "findAllRecipes", "code": "u = q.popleft()"}, "24": {"lineno": 31, "parents": [23], "children": [25], "calls": ["append"], "function": "findAllRecipes", "code": "ans.append(u)"}, "25": {"lineno": 32, "parents": [24], "children": [26], "function": "findAllRecipes", "code": "__iv = iter(graph[u])"}, "26": {"lineno": 32, "parents": [25, 29, 30], "children": [27, 22], "function": "findAllRecipes", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 32, "parents": [26], "children": [28], "function": "findAllRecipes", "code": "v = next(__iv)"}, "28": {"lineno": 33, "parents": [27], "children": [29], "function": "findAllRecipes", "code": "inDegrees[v] -= 1"}, "29": {"lineno": 34, "parents": [28], "children": [26, 30], "function": "findAllRecipes", "code": "_if: inDegrees[v] == 0"}, "30": {"lineno": 35, "parents": [29], "children": [26], "calls": ["append"], "function": "findAllRecipes", "code": "q.append(v)"}, "31": {"lineno": 37, "parents": [22], "children": [2], "function": "findAllRecipes", "code": "return ans"}, "32": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2127, "task_title": "Maximum Employees to Be Invited to a Meeting", "difficulty": 3, "func_name": "maximumInvitations", "description": "A company is organizing a meeting and has a list of `n` employees, waiting to\nbe invited. They have arranged for a large circular table, capable of seating\nany number of employees.\n\nThe employees are numbered from `0` to `n - 1`. Each employee has a favorite\nperson and they will attend the meeting only if they can sit next to their\nfavorite person at the table. The favorite person of an employee is not\nthemself.\n\nGiven a 0-indexed integer array `favorite`, where `favorite[i]` denotes the\nfavorite person of the `ith` employee, return the maximum number of employees\nthat can be invited to the meeting.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nfrom enum import Enum\n\n\nclass State(Enum):\n  kInit = 0\n  kVisiting = 1\n  kVisited = 2\n\n\nclass Solution:\n  def maximumInvitations(self, favorite: List[int]) -> int:\n    n = len(favorite)\n    sumComponentsLength = 0\n    graph = [[] for _ in range(n)]\n    inDegrees = [0] * n\n    maxChainLength = [1] * n\n\n    for i, f in enumerate(favorite):\n      graph[i].append(f)\n      inDegrees[f] += 1\n\n    q = collections.deque([i for i, d in enumerate(inDegrees) if d == 0])\n\n    while q:\n      u = q.popleft()\n      for v in graph[u]:\n        inDegrees[v] -= 1\n        if inDegrees[v] == 0:\n          q.append(v)\n        maxChainLength[v] = max(maxChainLength[v], 1 + maxChainLength[u])\n\n    for i in range(n):\n      if favorite[favorite[i]] == i:\n        sumComponentsLength += maxChainLength[i] + maxChainLength[favorite[i]]\n\n    maxCycleLength = 0\n    parent = [-1] * n\n    seen = set()\n    states = [State.kInit] * n\n\n    def findCycle(u: int) -> None:\n      nonlocal maxCycleLength\n      seen.add(u)\n      states[u] = State.kVisiting\n      for v in graph[u]:\n        if v not in seen:\n          parent[v] = u\n          findCycle(v)\n        elif states[v] == State.kVisiting:\n          curr = u\n          cycleLength = 1\n          while curr != v:\n            curr = parent[curr]\n            cycleLength += 1\n          maxCycleLength = max(maxCycleLength, cycleLength)\n      states[u] = State.kVisited\n\n    for i in range(n):\n      if i not in seen:\n        findCycle(i)\n\n    return max(sumComponentsLength // 2, maxCycleLength)\n", "blocks": [{"type": "if", "start": 43, "end": 44}, {"type": "if", "start": 69, "end": 70}, {"type": "if", "start": 38, "end": 39}, {"type": "if", "start": 56, "end": 58}, {"type": "if", "start": 59, "end": 65}], "target_lines": [39, 44, 57, 58, 60, 61, 62, 63, 64, 65, 70], "cfg": {"0": {"lineno": 0, "parents": [], "children": [1], "function": "", "code": "start"}, "1": {"lineno": 15, "parents": [0], "children": [2], "function": "", "code": "kInit = 0"}, "2": {"lineno": 16, "parents": [1], "children": [3], "function": "", "code": "kVisiting = 1"}, "3": {"lineno": 17, "parents": [2], "children": [59], "function": "", "code": "kVisited = 2"}, "4": {"lineno": 21, "parents": [], "children": [6], "function": "maximumInvitations", "code": "enter: maximumInvitations(self, favorite)"}, "5": {"lineno": 21, "parents": [58], "children": [], "function": "maximumInvitations", "code": "exit: maximumInvitations(self, favorite)"}, "6": {"lineno": 22, "parents": [4], "children": [7], "calls": ["len"], "function": "maximumInvitations", "code": "n = len(favorite)"}, "7": {"lineno": 23, "parents": [6], "children": [8], "function": "maximumInvitations", "code": "sumComponentsLength = 0"}, "8": {"lineno": 24, "parents": [7], "children": [9], "function": "maximumInvitations", "code": "graph = [[] for _ in range(n)]"}, "9": {"lineno": 25, "parents": [8], "children": [10], "function": "maximumInvitations", "code": "inDegrees = [0] * n"}, "10": {"lineno": 26, "parents": [9], "children": [11], "function": "maximumInvitations", "code": "maxChainLength = [1] * n"}, "11": {"lineno": 28, "parents": [10], "children": [12], "function": "maximumInvitations", "code": "__iv = iter(enumerate(favorite))"}, "12": {"lineno": 28, "parents": [11, 15], "children": [16, 13], "calls": ["enumerate"], "function": "maximumInvitations", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 28, "parents": [12], "children": [14], "function": "maximumInvitations", "code": "i, f = next(__iv)"}, "14": {"lineno": 29, "parents": [13], "children": [15], "calls": ["append"], "function": "maximumInvitations", "code": "graph[i].append(f)"}, "15": {"lineno": 30, "parents": [14], "children": [12], "function": "maximumInvitations", "code": "inDegrees[f] += 1"}, "16": {"lineno": 32, "parents": [12], "children": [17], "calls": ["deque"], "function": "maximumInvitations", "code": "q = collections.deque([i for i, d in enumerate(inDegrees) if d == 0])"}, "17": {"lineno": 34, "parents": [16, 20], "children": [18, 26], "function": "maximumInvitations", "code": "_while: q"}, "18": {"lineno": 35, "parents": [17], "children": [19], "calls": ["popleft"], "function": "maximumInvitations", "code": "u = q.popleft()"}, "19": {"lineno": 36, "parents": [18], "children": [20], "function": "maximumInvitations", "code": "__iv = iter(graph[u])"}, "20": {"lineno": 36, "parents": [25, 19], "children": [17, 21], "function": "maximumInvitations", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 36, "parents": [20], "children": [22], "function": "maximumInvitations", "code": "v = next(__iv)"}, "22": {"lineno": 37, "parents": [21], "children": [23], "function": "maximumInvitations", "code": "inDegrees[v] -= 1"}, "23": {"lineno": 38, "parents": [22], "children": [24, 25], "function": "maximumInvitations", "code": "_if: inDegrees[v] == 0"}, "24": {"lineno": 39, "parents": [23], "children": [25], "calls": ["append"], "function": "maximumInvitations", "code": "q.append(v)"}, "25": {"lineno": 40, "parents": [24, 23], "children": [20], "calls": ["max"], "function": "maximumInvitations", "code": "maxChainLength[v] = max(maxChainLength[v], 1 + maxChainLength[u])"}, "26": {"lineno": 42, "parents": [17], "children": [27], "function": "maximumInvitations", "code": "__iv = iter(range(n))"}, "27": {"lineno": 42, "parents": [26, 29, 30], "children": [28, 31], "calls": ["range"], "function": "maximumInvitations", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 42, "parents": [27], "children": [29], "function": "maximumInvitations", "code": "i = next(__iv)"}, "29": {"lineno": 43, "parents": [28], "children": [27, 30], "function": "maximumInvitations", "code": "_if: favorite[favorite[i]] == i"}, "30": {"lineno": 44, "parents": [29], "children": [27], "function": "maximumInvitations", "code": "sumComponentsLength += maxChainLength[i] + maxChainLength[favorite[i]]"}, "31": {"lineno": 46, "parents": [27], "children": [32], "function": "maximumInvitations", "code": "maxCycleLength = 0"}, "32": {"lineno": 47, "parents": [31], "children": [33], "function": "maximumInvitations", "code": "parent = [-1] * n"}, "33": {"lineno": 48, "parents": [32], "children": [34], "calls": ["set"], "function": "maximumInvitations", "code": "seen = set()"}, "34": {"lineno": 49, "parents": [33], "children": [53], "function": "maximumInvitations", "code": "states = [State.kInit] * n"}, "35": {"lineno": 51, "parents": [57, 44], "children": [37], "function": "findCycle", "code": "enter: findCycle(u)"}, "36": {"lineno": 51, "parents": [52], "children": [], "function": "findCycle", "code": "exit: findCycle(u)"}, "37": {"lineno": 53, "parents": [35], "children": [38], "calls": ["add"], "function": "findCycle", "code": "seen.add(u)"}, "38": {"lineno": 54, "parents": [37], "children": [39], "function": "findCycle", "code": "states[u] = State.kVisiting"}, "39": {"lineno": 55, "parents": [38], "children": [40], "function": "findCycle", "code": "__iv = iter(graph[u])"}, "40": {"lineno": 55, "parents": [51, 36, 39, 44, 45], "children": [41, 52], "function": "findCycle", "code": "_for: __iv.__length__hint__() > 0"}, "41": {"lineno": 55, "parents": [40], "children": [42], "function": "findCycle", "code": "v = next(__iv)"}, "42": {"lineno": 56, "parents": [41], "children": [43, 45], "function": "findCycle", "code": "_if: v not in seen"}, "43": {"lineno": 57, "parents": [42], "children": [44], "function": "findCycle", "code": "parent[v] = u"}, "44": {"lineno": 58, "parents": [43], "children": [40], "calls": ["findCycle"], "function": "findCycle", "code": "findCycle(v)"}, "45": {"lineno": 59, "parents": [42], "children": [40, 46], "function": "findCycle", "code": "_if: states[v] == State.kVisiting"}, "46": {"lineno": 60, "parents": [45], "children": [47], "function": "findCycle", "code": "curr = u"}, "47": {"lineno": 61, "parents": [46], "children": [48], "function": "findCycle", "code": "cycleLength = 1"}, "48": {"lineno": 62, "parents": [50, 47], "children": [49, 51], "function": "findCycle", "code": "_while: curr != v"}, "49": {"lineno": 63, "parents": [48], "children": [50], "function": "findCycle", "code": "curr = parent[curr]"}, "50": {"lineno": 64, "parents": [49], "children": [48], "function": "findCycle", "code": "cycleLength += 1"}, "51": {"lineno": 65, "parents": [48], "children": [40], "calls": ["max"], "function": "findCycle", "code": "maxCycleLength = max(maxCycleLength, cycleLength)"}, "52": {"lineno": 66, "parents": [40], "children": [36], "function": "findCycle", "code": "states[u] = State.kVisited"}, "53": {"lineno": 68, "parents": [34], "children": [54], "function": "maximumInvitations", "code": "__iv = iter(range(n))"}, "54": {"lineno": 68, "parents": [56, 57, 36, 53], "children": [58, 55], "calls": ["range", "max"], "function": "maximumInvitations", "code": "_for: __iv.__length__hint__() > 0"}, "55": {"lineno": 68, "parents": [54], "children": [56], "function": "maximumInvitations", "code": "i = next(__iv)"}, "56": {"lineno": 69, "parents": [55], "children": [57, 54], "function": "maximumInvitations", "code": "_if: i not in seen"}, "57": {"lineno": 70, "parents": [56], "children": [54], "calls": ["findCycle"], "function": "maximumInvitations", "code": "findCycle(i)"}, "58": {"lineno": 72, "parents": [54], "children": [5], "function": "maximumInvitations", "code": "return max(sumComponentsLength // 2, maxCycleLength)"}, "59": {"lineno": 0, "parents": [3], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2132, "task_title": "Stamping the Grid", "difficulty": 3, "func_name": "possibleToStamp", "description": "You are given an `m x n` binary matrix `grid` where each cell is either `0`\n(empty) or `1` (occupied).\n\nYou are then given stamps of size `stampHeight x stampWidth`. We want to fit\nthe stamps such that they follow the given restrictions and requirements:\n\n1. Cover all the empty cells.\n2. Do not cover any of the occupied cells.\n3. We can put as many stamps as we want.\n4. Stamps can overlap with each other.\n5. Stamps are not allowed to be rotated.\n6. Stamps must stay completely inside the grid.\n\nReturn `true` if it is possible to fit the stamps while following the given\nrestrictions and requirements. Otherwise, return `false`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def possibleToStamp(self, grid: List[List[int]], stampHeight: int, stampWidth: int) -> bool:\n    m = len(grid)\n    n = len(grid[0])\n    A = [[0] * (n + 1) for _ in range(m + 1)]\n    B = [[0] * (n + 1) for _ in range(m + 1)]\n    fit = [[False] * n for _ in range(m)]\n\n    for i in range(m):\n      for j in range(n):\n        A[i + 1][j + 1] = A[i + 1][j] + A[i][j + 1] - A[i][j] + grid[i][j]\n        if i + 1 >= stampHeight and j + 1 >= stampWidth:\n          x = i - stampHeight + 1\n          y = j - stampWidth + 1\n          if A[i + 1][j + 1] - A[x][j + 1] - A[i + 1][y] + A[x][y] == 0:\n            fit[i][j] = True\n\n    for i in range(m):\n      for j in range(n):\n        B[i + 1][j + 1] = B[i + 1][j] + B[i][j + 1] - B[i][j] + fit[i][j]\n\n    for i in range(m):\n      for j in range(n):\n        if not grid[i][j]:\n          x = min(i + stampHeight, m)\n          y = min(j + stampWidth, n)\n          if B[x][y] - B[i][y] - B[x][j] + B[i][j] == 0:\n            return False\n\n    return True\n", "blocks": [{"type": "if", "start": 22, "end": 26}, {"type": "if", "start": 34, "end": 38}, {"type": "if", "start": 25, "end": 26}, {"type": "if", "start": 37, "end": 38}], "target_lines": [23, 24, 25, 26, 35, 36, 37, 38], "cfg": {"0": {"lineno": 0, "parents": [], "children": [39], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "possibleToStamp", "code": "enter: possibleToStamp(self, grid, stampHeight, stampWidth)"}, "2": {"lineno": 12, "parents": [37, 38], "children": [], "function": "possibleToStamp", "code": "exit: possibleToStamp(self, grid, stampHeight, stampWidth)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "possibleToStamp", "code": "m = len(grid)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "possibleToStamp", "code": "n = len(grid[0])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "possibleToStamp", "code": "A = [[0] * (n + 1) for _ in range(m + 1)]"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "possibleToStamp", "code": "B = [[0] * (n + 1) for _ in range(m + 1)]"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "possibleToStamp", "code": "fit = [[False] * n for _ in range(m)]"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "possibleToStamp", "code": "__iv = iter(range(m))"}, "9": {"lineno": 19, "parents": [8, 12], "children": [10, 20], "calls": ["range"], "function": "possibleToStamp", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "possibleToStamp", "code": "i = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "possibleToStamp", "code": "__iv = iter(range(n))"}, "12": {"lineno": 20, "parents": [19, 18, 11, 15], "children": [9, 13], "calls": ["range"], "function": "possibleToStamp", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 20, "parents": [12], "children": [14], "function": "possibleToStamp", "code": "j = next(__iv)"}, "14": {"lineno": 21, "parents": [13], "children": [15], "function": "possibleToStamp", "code": "A[i + 1][j + 1] = A[i + 1][j] + A[i][j + 1] - A[i][j] + grid[i][j]"}, "15": {"lineno": 22, "parents": [14], "children": [16, 12], "function": "possibleToStamp", "code": "_if: i + 1 >= stampHeight and j + 1 >= stampWidth"}, "16": {"lineno": 23, "parents": [15], "children": [17], "function": "possibleToStamp", "code": "x = i - stampHeight + 1"}, "17": {"lineno": 24, "parents": [16], "children": [18], "function": "possibleToStamp", "code": "y = j - stampWidth + 1"}, "18": {"lineno": 25, "parents": [17], "children": [19, 12], "function": "possibleToStamp", "code": "_if: A[i + 1][j + 1] - A[x][j + 1] - A[i + 1][y] + A[x][y] == 0"}, "19": {"lineno": 26, "parents": [18], "children": [12], "function": "possibleToStamp", "code": "fit[i][j] = True"}, "20": {"lineno": 28, "parents": [9], "children": [21], "function": "possibleToStamp", "code": "__iv = iter(range(m))"}, "21": {"lineno": 28, "parents": [24, 20], "children": [27, 22], "calls": ["range"], "function": "possibleToStamp", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 28, "parents": [21], "children": [23], "function": "possibleToStamp", "code": "i = next(__iv)"}, "23": {"lineno": 29, "parents": [22], "children": [24], "function": "possibleToStamp", "code": "__iv = iter(range(n))"}, "24": {"lineno": 29, "parents": [26, 23], "children": [25, 21], "calls": ["range"], "function": "possibleToStamp", "code": "_for: __iv.__length__hint__() > 0"}, "25": {"lineno": 29, "parents": [24], "children": [26], "function": "possibleToStamp", "code": "j = next(__iv)"}, "26": {"lineno": 30, "parents": [25], "children": [24], "function": "possibleToStamp", "code": "B[i + 1][j + 1] = B[i + 1][j] + B[i][j + 1] - B[i][j] + fit[i][j]"}, "27": {"lineno": 32, "parents": [21], "children": [28], "function": "possibleToStamp", "code": "__iv = iter(range(m))"}, "28": {"lineno": 32, "parents": [27, 31], "children": [29, 38], "calls": ["range"], "function": "possibleToStamp", "code": "_for: __iv.__length__hint__() > 0"}, "29": {"lineno": 32, "parents": [28], "children": [30], "function": "possibleToStamp", "code": "i = next(__iv)"}, "30": {"lineno": 33, "parents": [29], "children": [31], "function": "possibleToStamp", "code": "__iv = iter(range(n))"}, "31": {"lineno": 33, "parents": [33, 36, 30], "children": [32, 28], "calls": ["range"], "function": "possibleToStamp", "code": "_for: __iv.__length__hint__() > 0"}, "32": {"lineno": 33, "parents": [31], "children": [33], "function": "possibleToStamp", "code": "j = next(__iv)"}, "33": {"lineno": 34, "parents": [32], "children": [34, 31], "function": "possibleToStamp", "code": "_if: not grid[i][j]"}, "34": {"lineno": 35, "parents": [33], "children": [35], "calls": ["min"], "function": "possibleToStamp", "code": "x = min(i + stampHeight, m)"}, "35": {"lineno": 36, "parents": [34], "children": [36], "calls": ["min"], "function": "possibleToStamp", "code": "y = min(j + stampWidth, n)"}, "36": {"lineno": 37, "parents": [35], "children": [37, 31], "function": "possibleToStamp", "code": "_if: B[x][y] - B[i][y] - B[x][j] + B[i][j] == 0"}, "37": {"lineno": 38, "parents": [36], "children": [2], "function": "possibleToStamp", "code": "return False"}, "38": {"lineno": 40, "parents": [28], "children": [2], "function": "possibleToStamp", "code": "return True"}, "39": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2146, "task_title": "K Highest Ranked Items Within a Price Range", "difficulty": 2, "func_name": "highestRankedKItems", "description": "You are given a 0-indexed 2D integer array `grid` of size `m x n` that\nrepresents a map of the items in a shop. The integers in the grid represent\nthe following:\n\n* `0` represents a wall that you cannot pass through.\n* `1` represents an empty cell that you can freely move to and from.\n* All other positive integers represent the price of an item in that cell. You may also freely move to and from these item cells.\n\nIt takes `1` step to travel between adjacent grid cells.\n\nYou are also given integer arrays `pricing` and `start` where `pricing = [low,\nhigh]` and `start = [row, col]` indicates that you start at the position\n`(row, col)` and are interested only in items with a price in the range of\n`[low, high]` (inclusive). You are further given an integer `k`.\n\nYou are interested in the positions of the `k` highest-ranked items whose\nprices are within the given price range. The rank is determined by the first\nof these criteria that is different:\n\n1. Distance, defined as the length of the shortest path from the `start` (shorter distance has a higher rank).\n2. Price (lower price has a higher rank, but it must be in the price range).\n3. The row number (smaller row number has a higher rank).\n4. The column number (smaller column number has a higher rank).\n\nReturn the `k` highest-ranked items within the price range sorted by their\nrank (highest to lowest). If there are fewer than `k` reachable items within\nthe price range, return all of them.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def highestRankedKItems(self, grid: List[List[int]], pricing: List[int], start: List[int], k: int) -> List[List[int]]:\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    m = len(grid)\n    n = len(grid[0])\n    low, high = pricing\n    row, col = start\n    ans = []\n\n    if low <= grid[row][col] <= high:\n      ans.append([row, col])\n      if k == 1:\n        return ans\n\n    q = collections.deque([(row, col)])\n    seen = {(row, col)}\n\n    while q:\n      neighbors = []\n      for _ in range(len(q)):\n        i, j = q.popleft()\n        for t in range(4):\n          x = i + dirs[t][0]\n          y = j + dirs[t][1]\n          if x < 0 or x == m or y < 0 or y == n:\n            continue\n          if not grid[x][y] or (x, y) in seen:\n            continue\n          if low <= grid[x][y] <= high:\n            neighbors.append([x, y])\n          q.append((x, y))\n          seen.add((x, y))\n      neighbors.sort(key=lambda x: (grid[x[0]][x[1]], x[0], x[1]))\n      for neighbor in neighbors:\n        if len(ans) < k:\n          ans.append(neighbor)\n        if len(ans) == k:\n          return ans\n\n    return ans\n", "blocks": [{"type": "if", "start": 20, "end": 23}, {"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 45, "end": 46}, {"type": "if", "start": 47, "end": 48}, {"type": "if", "start": 35, "end": 36}, {"type": "if", "start": 37, "end": 38}, {"type": "if", "start": 39, "end": 40}], "target_lines": [21, 22, 23, 36, 38, 40, 46, 48], "cfg": {"0": {"lineno": 0, "parents": [], "children": [43], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "highestRankedKItems", "code": "enter: highestRankedKItems(self, grid, pricing, start, k)"}, "2": {"lineno": 12, "parents": [41, 42, 12], "children": [], "function": "highestRankedKItems", "code": "exit: highestRankedKItems(self, grid, pricing, start, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "highestRankedKItems", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "highestRankedKItems", "code": "m = len(grid)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["len"], "function": "highestRankedKItems", "code": "n = len(grid[0])"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "highestRankedKItems", "code": "low, high = pricing"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "highestRankedKItems", "code": "row, col = start"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "highestRankedKItems", "code": "ans = []"}, "9": {"lineno": 20, "parents": [8], "children": [10, 13], "function": "highestRankedKItems", "code": "_if: low <= grid[row][col] <= high"}, "10": {"lineno": 21, "parents": [9], "children": [11], "calls": ["append"], "function": "highestRankedKItems", "code": "ans.append([row, col])"}, "11": {"lineno": 22, "parents": [10], "children": [12, 13], "function": "highestRankedKItems", "code": "_if: k == 1"}, "12": {"lineno": 23, "parents": [11], "children": [2], "function": "highestRankedKItems", "code": "return ans"}, "13": {"lineno": 25, "parents": [9, 11], "children": [14], "calls": ["deque"], "function": "highestRankedKItems", "code": "q = collections.deque([(row, col)])"}, "14": {"lineno": 26, "parents": [13], "children": [15], "function": "highestRankedKItems", "code": "seen = {(row, col)}"}, "15": {"lineno": 28, "parents": [36, 14], "children": [16, 42], "function": "highestRankedKItems", "code": "_while: q"}, "16": {"lineno": 29, "parents": [15], "children": [17], "function": "highestRankedKItems", "code": "neighbors = []"}, "17": {"lineno": 30, "parents": [16], "children": [18], "function": "highestRankedKItems", "code": "__iv = iter(range(len(q)))"}, "18": {"lineno": 30, "parents": [17, 22], "children": [34, 19], "calls": ["len", "range"], "function": "highestRankedKItems", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 30, "parents": [18], "children": [20], "function": "highestRankedKItems", "code": "_ = next(__iv)"}, "20": {"lineno": 31, "parents": [19], "children": [21], "calls": ["popleft"], "function": "highestRankedKItems", "code": "i, j = q.popleft()"}, "21": {"lineno": 32, "parents": [20], "children": [22], "function": "highestRankedKItems", "code": "__iv = iter(range(4))"}, "22": {"lineno": 32, "parents": [33, 29, 27, 21], "children": [18, 23], "calls": ["range"], "function": "highestRankedKItems", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 32, "parents": [22], "children": [24], "function": "highestRankedKItems", "code": "t = next(__iv)"}, "24": {"lineno": 33, "parents": [23], "children": [25], "function": "highestRankedKItems", "code": "x = i + dirs[t][0]"}, "25": {"lineno": 34, "parents": [24], "children": [26], "function": "highestRankedKItems", "code": "y = j + dirs[t][1]"}, "26": {"lineno": 35, "parents": [25], "children": [27, 28], "function": "highestRankedKItems", "code": "_if: x < 0 or x == m or y < 0 or (y == n)"}, "27": {"lineno": 36, "parents": [26], "children": [22], "function": "highestRankedKItems", "code": "continue"}, "28": {"lineno": 37, "parents": [26], "children": [29, 30], "function": "highestRankedKItems", "code": "_if: not grid[x][y] or (x, y) in seen"}, "29": {"lineno": 38, "parents": [28], "children": [22], "function": "highestRankedKItems", "code": "continue"}, "30": {"lineno": 39, "parents": [28], "children": [32, 31], "function": "highestRankedKItems", "code": "_if: low <= grid[x][y] <= high"}, "31": {"lineno": 40, "parents": [30], "children": [32], "calls": ["append"], "function": "highestRankedKItems", "code": "neighbors.append([x, y])"}, "32": {"lineno": 41, "parents": [30, 31], "children": [33], "calls": ["append"], "function": "highestRankedKItems", "code": "q.append((x, y))"}, "33": {"lineno": 42, "parents": [32], "children": [22], "calls": ["add"], "function": "highestRankedKItems", "code": "seen.add((x, y))"}, "34": {"lineno": 43, "parents": [18], "children": [35], "calls": ["sort"], "function": "highestRankedKItems", "code": "neighbors.sort(key=lambda x: (grid[x[0]][x[1]], x[0], x[1]))"}, "35": {"lineno": 44, "parents": [34], "children": [36], "function": "highestRankedKItems", "code": "__iv = iter(neighbors)"}, "36": {"lineno": 44, "parents": [40, 35], "children": [37, 15], "function": "highestRankedKItems", "code": "_for: __iv.__length__hint__() > 0"}, "37": {"lineno": 44, "parents": [36], "children": [38], "function": "highestRankedKItems", "code": "neighbor = next(__iv)"}, "38": {"lineno": 45, "parents": [37], "children": [40, 39], "calls": ["len"], "function": "highestRankedKItems", "code": "_if: len(ans) < k"}, "39": {"lineno": 46, "parents": [38], "children": [40], "calls": ["append"], "function": "highestRankedKItems", "code": "ans.append(neighbor)"}, "40": {"lineno": 47, "parents": [38, 39], "children": [41, 36], "calls": ["len"], "function": "highestRankedKItems", "code": "_if: len(ans) == k"}, "41": {"lineno": 48, "parents": [40], "children": [2], "function": "highestRankedKItems", "code": "return ans"}, "42": {"lineno": 50, "parents": [15], "children": [2], "function": "highestRankedKItems", "code": "return ans"}, "43": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2157, "task_title": "Groups of Strings", "difficulty": 3, "func_name": "groupStrings", "description": "You are given a 0-indexed array of strings `words`. Each string consists of\nlowercase English letters only. No letter occurs more than once in any string\nof `words`.\n\nTwo strings `s1` and `s2` are said to be connected if the set of letters of\n`s2` can be obtained from the set of letters of `s1` by any one of the\nfollowing operations:\n\n* Adding exactly one letter to the set of the letters of `s1`.\n* Deleting exactly one letter from the set of the letters of `s1`.\n* Replacing exactly one letter from the set of the letters of `s1` with any letter, including itself.\n\nThe array `words` can be divided into one or more non-intersecting groups. A\nstring belongs to a group if any one of the following is true:\n\n* It is connected to at least one other string of the group.\n* It is the only string present in the group.\n\nNote that the strings in `words` should be grouped in such a manner that a\nstring belonging to a group cannot be connected to a string present in any\nother group. It can be proved that such an arrangement is always unique.\n\nReturn an array `ans` of size `2` where:\n\n* `ans[0]` is the maximum number of groups `words` can be divided into, and\n* `ans[1]` is the size of the largest group.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.count = n\n    self.id = list(range(n))\n    self.sz = [1] * n\n\n  def unionBySize(self, u: int, v: int) -> None:\n    i = self._find(u)\n    j = self._find(v)\n    if i == j:\n      return\n    if self.sz[i] < self.sz[j]:\n      self.sz[j] += self.sz[i]\n      self.id[i] = j\n    else:\n      self.sz[i] += self.sz[j]\n      self.id[j] = i\n    self.count -= 1\n\n  def _find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self._find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def groupStrings(self, words: List[str]) -> List[int]:\n    uf = UnionFind(len(words))\n\n    def getMask(s: str) -> int:\n      mask = 0\n      for c in s:\n        mask |= 1 << ord(c) - ord('a')\n      return mask\n\n    def getAddedMasks(mask: int):\n      for i in range(26):\n        if not (mask >> i & 1):\n          yield mask | 1 << i\n\n    def getDeletedMasks(mask: int):\n      for i in range(26):\n        if mask >> i & 1:\n          yield mask ^ 1 << i\n\n    maskToIndex = {getMask(word): i for i, word in enumerate(words)}\n    deletedMaskToIndex = {}\n\n    for i, word in enumerate(words):\n      mask = getMask(word)\n      for m in getAddedMasks(mask):\n        if m in maskToIndex:\n          uf.unionBySize(i, maskToIndex[m])\n      for m in getDeletedMasks(mask):\n        if m in maskToIndex:\n          uf.unionBySize(i, maskToIndex[m])\n        if m in deletedMaskToIndex:\n          uf.unionBySize(i, deletedMaskToIndex[m])\n        else:\n          deletedMaskToIndex[m] = i\n\n    return [uf.count, max(uf.sz)]\n", "blocks": [{"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 22, "end": 24}, {"type": "else", "start": 25, "end": 27}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 48, "end": 49}, {"type": "if", "start": 53, "end": 54}, {"type": "if", "start": 62, "end": 63}, {"type": "if", "start": 65, "end": 66}, {"type": "if", "start": 67, "end": 68}, {"type": "else", "start": 69, "end": 70}], "target_lines": [21, 23, 24, 26, 27, 32, 49, 54, 63, 66, 68, 70], "cfg": {"0": {"lineno": 0, "parents": [], "children": [68], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [5], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "__init__", "code": "self.count = n"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "5": {"lineno": 15, "parents": [4], "children": [2], "function": "__init__", "code": "self.sz = [1] * n"}, "6": {"lineno": 17, "parents": [65, 58, 63], "children": [8], "function": "unionBySize", "code": "enter: unionBySize(self, u, v)"}, "7": {"lineno": 17, "parents": [17, 11], "children": [], "function": "unionBySize", "code": "exit: unionBySize(self, u, v)"}, "8": {"lineno": 18, "parents": [6], "children": [9], "calls": ["_find"], "function": "unionBySize", "code": "i = self._find(u)"}, "9": {"lineno": 19, "parents": [8, 19], "children": [10], "calls": ["_find"], "function": "unionBySize", "code": "j = self._find(v)"}, "10": {"lineno": 20, "parents": [9, 19], "children": [11, 12], "function": "unionBySize", "code": "_if: i == j"}, "11": {"lineno": 21, "parents": [10], "children": [7], "function": "unionBySize", "code": "return"}, "12": {"lineno": 22, "parents": [10], "children": [13, 15], "function": "unionBySize", "code": "_if: self.sz[i] < self.sz[j]"}, "13": {"lineno": 23, "parents": [12], "children": [14], "function": "unionBySize", "code": "self.sz[j] += self.sz[i]"}, "14": {"lineno": 24, "parents": [13], "children": [17], "function": "unionBySize", "code": "self.id[i] = j"}, "15": {"lineno": 26, "parents": [12], "children": [16], "function": "unionBySize", "code": "self.sz[i] += self.sz[j]"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "unionBySize", "code": "self.id[j] = i"}, "17": {"lineno": 28, "parents": [16, 14], "children": [7], "function": "unionBySize", "code": "self.count -= 1"}, "18": {"lineno": 30, "parents": [8, 9, 21], "children": [20], "function": "_find", "code": "enter: _find(self, u)"}, "19": {"lineno": 30, "parents": [22], "children": [], "function": "_find", "code": "exit: _find(self, u)"}, "20": {"lineno": 31, "parents": [18], "children": [21, 22], "function": "_find", "code": "_if: self.id[u] != u"}, "21": {"lineno": 32, "parents": [20], "children": [22], "calls": ["_find"], "function": "_find", "code": "self.id[u] = self._find(self.id[u])"}, "22": {"lineno": 33, "parents": [19, 20, 21], "children": [19], "function": "_find", "code": "return self.id[u]"}, "23": {"lineno": 37, "parents": [], "children": [25], "function": "groupStrings", "code": "enter: groupStrings(self, words)"}, "24": {"lineno": 37, "parents": [67], "children": [], "function": "groupStrings", "code": "exit: groupStrings(self, words)"}, "25": {"lineno": 38, "parents": [23], "children": [48], "calls": ["len", "UnionFind"], "function": "groupStrings", "code": "uf = UnionFind(len(words))"}, "26": {"lineno": 40, "parents": [53], "children": [28], "function": "getMask", "code": "enter: getMask(s)"}, "27": {"lineno": 40, "parents": [33], "children": [], "function": "getMask", "code": "exit: getMask(s)"}, "28": {"lineno": 41, "parents": [26], "children": [29], "function": "getMask", "code": "mask = 0"}, "29": {"lineno": 42, "parents": [28], "children": [30], "function": "getMask", "code": "__iv = iter(s)"}, "30": {"lineno": 42, "parents": [32, 29], "children": [33, 31], "function": "getMask", "code": "_for: __iv.__length__hint__() > 0"}, "31": {"lineno": 42, "parents": [30], "children": [32], "function": "getMask", "code": "c = next(__iv)"}, "32": {"lineno": 43, "parents": [31], "children": [30], "calls": ["ord", "ord"], "function": "getMask", "code": "mask |= 1 << ord(c) - ord('a')"}, "33": {"lineno": 44, "parents": [30], "children": [27], "function": "getMask", "code": "return mask"}, "34": {"lineno": 46, "parents": [55], "children": [36], "function": "getAddedMasks", "code": "enter: getAddedMasks(mask)"}, "35": {"lineno": 46, "parents": [37], "children": [], "function": "getAddedMasks", "code": "exit: getAddedMasks(mask)"}, "36": {"lineno": 47, "parents": [34], "children": [37], "function": "getAddedMasks", "code": "__iv = iter(range(26))"}, "37": {"lineno": 47, "parents": [40, 36, 39], "children": [35, 38], "calls": ["range"], "function": "getAddedMasks", "code": "_for: __iv.__length__hint__() > 0"}, "38": {"lineno": 47, "parents": [37], "children": [39], "function": "getAddedMasks", "code": "i = next(__iv)"}, "39": {"lineno": 48, "parents": [38], "children": [40, 37], "function": "getAddedMasks", "code": "_if: not mask >> i & 1"}, "40": {"lineno": 49, "parents": [39], "children": [37], "function": "getAddedMasks", "code": "yield (mask | 1 << i)"}, "41": {"lineno": 51, "parents": [60], "children": [43], "function": "getDeletedMasks", "code": "enter: getDeletedMasks(mask)"}, "42": {"lineno": 51, "parents": [44], "children": [], "function": "getDeletedMasks", "code": "exit: getDeletedMasks(mask)"}, "43": {"lineno": 52, "parents": [41], "children": [44], "function": "getDeletedMasks", "code": "__iv = iter(range(26))"}, "44": {"lineno": 52, "parents": [43, 46, 47], "children": [42, 45], "calls": ["range"], "function": "getDeletedMasks", "code": "_for: __iv.__length__hint__() > 0"}, "45": {"lineno": 52, "parents": [44], "children": [46], "function": "getDeletedMasks", "code": "i = next(__iv)"}, "46": {"lineno": 53, "parents": [45], "children": [44, 47], "function": "getDeletedMasks", "code": "_if: mask >> i & 1"}, "47": {"lineno": 54, "parents": [46], "children": [44], "function": "getDeletedMasks", "code": "yield (mask ^ 1 << i)"}, "48": {"lineno": 56, "parents": [25], "children": [49], "function": "groupStrings", "code": "maskToIndex = {getMask(word): i for i, word in enumerate(words)}"}, "49": {"lineno": 57, "parents": [48], "children": [50], "function": "groupStrings", "code": "deletedMaskToIndex = {}"}, "50": {"lineno": 59, "parents": [49], "children": [51], "function": "groupStrings", "code": "__iv = iter(enumerate(words))"}, "51": {"lineno": 59, "parents": [50, 60, 42], "children": [67, 52], "calls": ["enumerate"], "function": "groupStrings", "code": "_for: __iv.__length__hint__() > 0"}, "52": {"lineno": 59, "parents": [51], "children": [53], "function": "groupStrings", "code": "i, word = next(__iv)"}, "53": {"lineno": 60, "parents": [52], "children": [54], "calls": ["getMask"], "function": "groupStrings", "code": "mask = getMask(word)"}, "54": {"lineno": 61, "parents": [27, 53], "children": [55], "function": "groupStrings", "code": "__iv = iter(getAddedMasks(mask))"}, "55": {"lineno": 61, "parents": [57, 58, 54, 7], "children": [56, 59], "calls": ["getAddedMasks"], "function": "groupStrings", "code": "_for: __iv.__length__hint__() > 0"}, "56": {"lineno": 61, "parents": [35, 55], "children": [57], "function": "groupStrings", "code": "m = next(__iv)"}, "57": {"lineno": 62, "parents": [56], "children": [58, 55], "function": "groupStrings", "code": "_if: m in maskToIndex"}, "58": {"lineno": 63, "parents": [57], "children": [55], "calls": ["unionBySize"], "function": "groupStrings", "code": "uf.unionBySize(i, maskToIndex[m])"}, "59": {"lineno": 64, "parents": [35, 55], "children": [60], "function": "groupStrings", "code": "__iv = iter(getDeletedMasks(mask))"}, "60": {"lineno": 64, "parents": [65, 66, 59, 7], "children": [51, 61], "calls": ["getDeletedMasks"], "function": "groupStrings", "code": "_for: __iv.__length__hint__() > 0"}, "61": {"lineno": 64, "parents": [42, 60], "children": [62], "function": "groupStrings", "code": "m = next(__iv)"}, "62": {"lineno": 65, "parents": [61], "children": [64, 63], "function": "groupStrings", "code": "_if: m in maskToIndex"}, "63": {"lineno": 66, "parents": [62], "children": [64], "calls": ["unionBySize"], "function": "groupStrings", "code": "uf.unionBySize(i, maskToIndex[m])"}, "64": {"lineno": 67, "parents": [7, 62, 63], "children": [65, 66], "function": "groupStrings", "code": "_if: m in deletedMaskToIndex"}, "65": {"lineno": 68, "parents": [64], "children": [60], "calls": ["unionBySize"], "function": "groupStrings", "code": "uf.unionBySize(i, deletedMaskToIndex[m])"}, "66": {"lineno": 70, "parents": [64], "children": [60], "function": "groupStrings", "code": "deletedMaskToIndex[m] = i"}, "67": {"lineno": 72, "parents": [51], "children": [24], "function": "groupStrings", "code": "return [uf.count, max(uf.sz)]"}, "68": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2182, "task_title": "Construct String With Repeat Limit", "difficulty": 2, "func_name": "repeatLimitedString", "description": "You are given a string `s` and an integer `repeatLimit`. Construct a new\nstring `repeatLimitedString` using the characters of `s` such that no letter\nappears more than `repeatLimit` times in a row. You do not have to use all\ncharacters from `s`.\n\nReturn the lexicographically largest `repeatLimitedString` possible.\n\nA string `a` is lexicographically larger than a string `b` if in the first\nposition where `a` and `b` differ, string `a` has a letter that appears later\nin the alphabet than the corresponding letter in `b`. If the first\n`min(a.length, b.length)` characters do not differ, then the longer string is\nthe lexicographically larger one.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def repeatLimitedString(self, s: str, repeatLimit: int) -> str:\n    ans = ''\n    count = collections.Counter(s)\n\n    while True:\n      addOne = ans and self._shouldAddOne(ans, count)\n      c = self._getLargestChar(ans, count)\n      if c == ' ':\n        break\n      repeats = 1 if addOne else min(count[c], repeatLimit)\n      ans += c * repeats\n      count[c] -= repeats\n\n    return ans\n\n  def _shouldAddOne(self, ans: str, count: collections.Counter) -> bool:\n    for c in reversed(string.ascii_lowercase):\n      if count[c]:\n        return ans[-1] == c\n    return False\n\n  def _getLargestChar(self, ans: str, count: collections.Counter) -> int:\n    for c in reversed(string.ascii_lowercase):\n      if count[c] and (not ans or ans[-1] != c):\n        return c\n    return ' '\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 35, "end": 36}], "target_lines": [20, 30, 36], "cfg": {"0": {"lineno": 0, "parents": [], "children": [30], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "repeatLimitedString", "code": "enter: repeatLimitedString(self, s, repeatLimit)"}, "2": {"lineno": 12, "parents": [13], "children": [], "function": "repeatLimitedString", "code": "exit: repeatLimitedString(self, s, repeatLimit)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "repeatLimitedString", "code": "ans = ''"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["Counter"], "function": "repeatLimitedString", "code": "count = collections.Counter(s)"}, "5": {"lineno": 16, "parents": [4, 12], "children": [13, 6], "function": "repeatLimitedString", "code": "_while: True"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "repeatLimitedString", "code": "addOne = ans and self._shouldAddOne(ans, count)"}, "7": {"lineno": 18, "parents": [6], "children": [8], "calls": ["_getLargestChar"], "function": "repeatLimitedString", "code": "c = self._getLargestChar(ans, count)"}, "8": {"lineno": 19, "parents": [23, 7], "children": [9, 10], "function": "repeatLimitedString", "code": "_if: c == ' '"}, "9": {"lineno": 20, "parents": [8], "children": [13], "function": "repeatLimitedString", "code": "break"}, "10": {"lineno": 21, "parents": [8], "children": [11], "function": "repeatLimitedString", "code": "repeats = 1 if addOne else min(count[c], repeatLimit)"}, "11": {"lineno": 22, "parents": [10], "children": [12], "function": "repeatLimitedString", "code": "ans += c * repeats"}, "12": {"lineno": 23, "parents": [11], "children": [5], "function": "repeatLimitedString", "code": "count[c] -= repeats"}, "13": {"lineno": 25, "parents": [9, 5], "children": [2], "function": "repeatLimitedString", "code": "return ans"}, "14": {"lineno": 27, "parents": [], "children": [16], "function": "_shouldAddOne", "code": "enter: _shouldAddOne(self, ans, count)"}, "15": {"lineno": 27, "parents": [20, 21], "children": [], "function": "_shouldAddOne", "code": "exit: _shouldAddOne(self, ans, count)"}, "16": {"lineno": 28, "parents": [14], "children": [17], "function": "_shouldAddOne", "code": "__iv = iter(reversed(string.ascii_lowercase))"}, "17": {"lineno": 28, "parents": [16, 19], "children": [18, 21], "calls": ["reversed"], "function": "_shouldAddOne", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 28, "parents": [17], "children": [19], "function": "_shouldAddOne", "code": "c = next(__iv)"}, "19": {"lineno": 29, "parents": [18], "children": [17, 20], "function": "_shouldAddOne", "code": "_if: count[c]"}, "20": {"lineno": 30, "parents": [19], "children": [15], "function": "_shouldAddOne", "code": "return ans[-1] == c"}, "21": {"lineno": 31, "parents": [17], "children": [15], "function": "_shouldAddOne", "code": "return False"}, "22": {"lineno": 33, "parents": [7], "children": [24], "function": "_getLargestChar", "code": "enter: _getLargestChar(self, ans, count)"}, "23": {"lineno": 33, "parents": [28, 29], "children": [], "function": "_getLargestChar", "code": "exit: _getLargestChar(self, ans, count)"}, "24": {"lineno": 34, "parents": [22], "children": [25], "function": "_getLargestChar", "code": "__iv = iter(reversed(string.ascii_lowercase))"}, "25": {"lineno": 34, "parents": [24, 27], "children": [26, 29], "calls": ["reversed"], "function": "_getLargestChar", "code": "_for: __iv.__length__hint__() > 0"}, "26": {"lineno": 34, "parents": [25], "children": [27], "function": "_getLargestChar", "code": "c = next(__iv)"}, "27": {"lineno": 35, "parents": [26], "children": [25, 28], "function": "_getLargestChar", "code": "_if: count[c] and (not ans or ans[-1] != c)"}, "28": {"lineno": 36, "parents": [27], "children": [23], "function": "_getLargestChar", "code": "return c"}, "29": {"lineno": 37, "parents": [25], "children": [23], "function": "_getLargestChar", "code": "return ' '"}, "30": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2203, "task_title": "Minimum Weighted Subgraph With the Required Paths", "difficulty": 3, "func_name": "minimumWeight", "description": "You are given an integer `n` denoting the number of nodes of a weighted\ndirected graph. The nodes are numbered from `0` to `n - 1`.\n\nYou are also given a 2D integer array `edges` where `edges[i] = [fromi, toi,\nweighti]` denotes that there exists a directed edge from `fromi` to `toi` with\nweight `weighti`.\n\nLastly, you are given three distinct integers `src1`, `src2`, and `dest`\ndenoting three distinct nodes of the graph.\n\nReturn the minimum weight of a subgraph of the graph such that it is possible\nto reach `dest` from both `src1` and `src2` via a set of edges of this\nsubgraph. In case such a subgraph does not exist, return `-1`.\n\nA subgraph is a graph whose vertices and edges are subsets of the original\ngraph. The weight of a subgraph is the sum of weights of its constituent\nedges.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumWeight(self, n: int, edges: List[List[int]], src1: int, src2: int, dest: int) -> int:\n    graph = [[] for _ in range(n)]\n    reversedGraph = [[] for _ in range(n)]\n\n    for u, v, w in edges:\n      graph[u].append((v, w))\n      reversedGraph[v].append((u, w))\n\n    fromSrc1 = self._dijkstra(graph, src1)\n    fromSrc2 = self._dijkstra(graph, src2)\n    fromDest = self._dijkstra(reversedGraph, dest)\n    minWeight = min(a + b + c for a, b, c in zip(fromSrc1, fromSrc2, fromDest))\n    if minWeight == math.inf:\n      return -1\n    else:\n      return minWeight\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int) -> List[int]:\n    dist = [math.inf] * len(graph)\n\n    dist[src] = 0\n    minHeap = [(dist[src], src)]\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      if d > dist[u]:\n        continue\n      for v, w in graph[u]:\n        if d + w < dist[v]:\n          dist[v] = d + w\n          heapq.heappush(minHeap, (dist[v], v))\n\n    return dist\n", "blocks": [{"type": "if", "start": 24, "end": 25}, {"type": "else", "start": 26, "end": 27}, {"type": "if", "start": 37, "end": 38}, {"type": "if", "start": 40, "end": 42}], "target_lines": [25, 27, 38, 41, 42], "cfg": {"0": {"lineno": 0, "parents": [], "children": [33], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumWeight", "code": "enter: minimumWeight(self, n, edges, src1, src2, dest)"}, "2": {"lineno": 12, "parents": [16, 15], "children": [], "function": "minimumWeight", "code": "exit: minimumWeight(self, n, edges, src1, src2, dest)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "minimumWeight", "code": "graph = [[] for _ in range(n)]"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "minimumWeight", "code": "reversedGraph = [[] for _ in range(n)]"}, "5": {"lineno": 16, "parents": [4], "children": [6], "function": "minimumWeight", "code": "__iv = iter(edges)"}, "6": {"lineno": 16, "parents": [9, 5], "children": [10, 7], "function": "minimumWeight", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "minimumWeight", "code": "u, v, w = next(__iv)"}, "8": {"lineno": 17, "parents": [7], "children": [9], "calls": ["append"], "function": "minimumWeight", "code": "graph[u].append((v, w))"}, "9": {"lineno": 18, "parents": [8], "children": [6], "calls": ["append"], "function": "minimumWeight", "code": "reversedGraph[v].append((u, w))"}, "10": {"lineno": 20, "parents": [6], "children": [11], "calls": ["_dijkstra"], "function": "minimumWeight", "code": "fromSrc1 = self._dijkstra(graph, src1)"}, "11": {"lineno": 21, "parents": [10, 18], "children": [12], "calls": ["_dijkstra"], "function": "minimumWeight", "code": "fromSrc2 = self._dijkstra(graph, src2)"}, "12": {"lineno": 22, "parents": [18, 11], "children": [13], "calls": ["_dijkstra"], "function": "minimumWeight", "code": "fromDest = self._dijkstra(reversedGraph, dest)"}, "13": {"lineno": 23, "parents": [18, 12], "children": [14], "calls": ["min"], "function": "minimumWeight", "code": "minWeight = min((a + b + c for a, b, c in zip(fromSrc1, fromSrc2, fromDest)))"}, "14": {"lineno": 24, "parents": [13], "children": [16, 15], "function": "minimumWeight", "code": "_if: minWeight == math.inf"}, "15": {"lineno": 25, "parents": [14], "children": [2], "function": "minimumWeight", "code": "return -1"}, "16": {"lineno": 27, "parents": [14], "children": [2], "function": "minimumWeight", "code": "return minWeight"}, "17": {"lineno": 29, "parents": [10, 11, 12], "children": [19], "function": "_dijkstra", "code": "enter: _dijkstra(self, graph, src)"}, "18": {"lineno": 29, "parents": [32], "children": [], "function": "_dijkstra", "code": "exit: _dijkstra(self, graph, src)"}, "19": {"lineno": 30, "parents": [17], "children": [20], "calls": ["len"], "function": "_dijkstra", "code": "dist = [math.inf] * len(graph)"}, "20": {"lineno": 32, "parents": [19], "children": [21], "function": "_dijkstra", "code": "dist[src] = 0"}, "21": {"lineno": 33, "parents": [20], "children": [22], "function": "_dijkstra", "code": "minHeap = [(dist[src], src)]"}, "22": {"lineno": 35, "parents": [25, 27, 21], "children": [32, 23], "function": "_dijkstra", "code": "_while: minHeap"}, "23": {"lineno": 36, "parents": [22], "children": [24], "calls": ["heappop"], "function": "_dijkstra", "code": "d, u = heapq.heappop(minHeap)"}, "24": {"lineno": 37, "parents": [23], "children": [25, 26], "function": "_dijkstra", "code": "_if: d > dist[u]"}, "25": {"lineno": 38, "parents": [24], "children": [22], "function": "_dijkstra", "code": "continue"}, "26": {"lineno": 39, "parents": [24], "children": [27], "function": "_dijkstra", "code": "__iv = iter(graph[u])"}, "27": {"lineno": 39, "parents": [26, 29, 31], "children": [28, 22], "function": "_dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 39, "parents": [27], "children": [29], "function": "_dijkstra", "code": "v, w = next(__iv)"}, "29": {"lineno": 40, "parents": [28], "children": [27, 30], "function": "_dijkstra", "code": "_if: d + w < dist[v]"}, "30": {"lineno": 41, "parents": [29], "children": [31], "function": "_dijkstra", "code": "dist[v] = d + w"}, "31": {"lineno": 42, "parents": [30], "children": [27], "calls": ["heappush"], "function": "_dijkstra", "code": "heapq.heappush(minHeap, (dist[v], v))"}, "32": {"lineno": 44, "parents": [22], "children": [18], "function": "_dijkstra", "code": "return dist"}, "33": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2242, "task_title": "Maximum Score of a Node Sequence", "difficulty": 3, "func_name": "maximumScore", "description": "There is an undirected graph with `n` nodes, numbered from `0` to `n - 1`.\n\nYou are given a 0-indexed integer array `scores` of length `n` where\n`scores[i]` denotes the score of node `i`. You are also given a 2D integer\narray `edges` where `edges[i] = [ai, bi]` denotes that there exists an\nundirected edge connecting nodes `ai` and `bi`.\n\nA node sequence is valid if it meets the following conditions:\n\n* There is an edge connecting every pair of adjacent nodes in the sequence.\n* No node appears more than once in the sequence.\n\nThe score of a node sequence is defined as the sum of the scores of the nodes\nin the sequence.\n\nReturn the maximum score of a valid node sequence with a length of `4`. If no\nsuch sequence exists, return `-1`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def maximumScore(self, scores: List[int], edges: List[List[int]]) -> int:\n    n = len(scores)\n    ans = -1\n    graph = [[] for _ in range(n)]\n\n    for u, v in edges:\n      graph[u].append((scores[v], v))\n      graph[v].append((scores[u], u))\n\n    for i in range(n):\n      graph[i] = heapq.nlargest(3, graph[i])\n\n    for u, v in edges:\n      for scoreA, a in graph[u]:\n        for scoreB, b in graph[v]:\n          if a != b and a != v and b != u:\n            ans = max(ans, scoreA + scores[u] + scores[v] + scoreB)\n\n    return ans\n", "blocks": [{"type": "if", "start": 27, "end": 28}], "target_lines": [28], "cfg": {"0": {"lineno": 0, "parents": [], "children": [27], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "maximumScore", "code": "enter: maximumScore(self, scores, edges)"}, "2": {"lineno": 12, "parents": [26], "children": [], "function": "maximumScore", "code": "exit: maximumScore(self, scores, edges)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "maximumScore", "code": "n = len(scores)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "maximumScore", "code": "ans = -1"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "maximumScore", "code": "graph = [[] for _ in range(n)]"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "maximumScore", "code": "__iv = iter(edges)"}, "7": {"lineno": 17, "parents": [10, 6], "children": [8, 11], "function": "maximumScore", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "maximumScore", "code": "u, v = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10], "calls": ["append"], "function": "maximumScore", "code": "graph[u].append((scores[v], v))"}, "10": {"lineno": 19, "parents": [9], "children": [7], "calls": ["append"], "function": "maximumScore", "code": "graph[v].append((scores[u], u))"}, "11": {"lineno": 21, "parents": [7], "children": [12], "function": "maximumScore", "code": "__iv = iter(range(n))"}, "12": {"lineno": 21, "parents": [11, 14], "children": [13, 15], "calls": ["range"], "function": "maximumScore", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 21, "parents": [12], "children": [14], "function": "maximumScore", "code": "i = next(__iv)"}, "14": {"lineno": 22, "parents": [13], "children": [12], "calls": ["nlargest"], "function": "maximumScore", "code": "graph[i] = heapq.nlargest(3, graph[i])"}, "15": {"lineno": 24, "parents": [12], "children": [16], "function": "maximumScore", "code": "__iv = iter(edges)"}, "16": {"lineno": 24, "parents": [19, 15], "children": [17, 26], "function": "maximumScore", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 24, "parents": [16], "children": [18], "function": "maximumScore", "code": "u, v = next(__iv)"}, "18": {"lineno": 25, "parents": [17], "children": [19], "function": "maximumScore", "code": "__iv = iter(graph[u])"}, "19": {"lineno": 25, "parents": [18, 22], "children": [16, 20], "function": "maximumScore", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 25, "parents": [19], "children": [21], "function": "maximumScore", "code": "scoreA, a = next(__iv)"}, "21": {"lineno": 26, "parents": [20], "children": [22], "function": "maximumScore", "code": "__iv = iter(graph[v])"}, "22": {"lineno": 26, "parents": [24, 25, 21], "children": [19, 23], "function": "maximumScore", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 26, "parents": [22], "children": [24], "function": "maximumScore", "code": "scoreB, b = next(__iv)"}, "24": {"lineno": 27, "parents": [23], "children": [25, 22], "function": "maximumScore", "code": "_if: a != b and a != v and (b != u)"}, "25": {"lineno": 28, "parents": [24], "children": [22], "calls": ["max"], "function": "maximumScore", "code": "ans = max(ans, scoreA + scores[u] + scores[v] + scoreB)"}, "26": {"lineno": 30, "parents": [16], "children": [2], "function": "maximumScore", "code": "return ans"}, "27": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2245, "task_title": "Maximum Trailing Zeros in a Cornered Path", "difficulty": 2, "func_name": "maxTrailingZeros", "description": "You are given a 2D integer array `grid` of size `m x n`, where each cell\ncontains a positive integer.\n\nA cornered path is defined as a set of adjacent cells with at most one turn.\nMore specifically, the path should exclusively move either horizontally or\nvertically up to the turn (if there is one), without returning to a previously\nvisited cell. After the turn, the path will then move exclusively in the\nalternate direction: move vertically if it moved horizontally, and vice versa,\nalso without returning to a previously visited cell.\n\nThe product of a path is defined as the product of all the values in the path.\n\nReturn the maximum number of trailing zeros in the product of a cornered path\nfound in `grid`.\n\nNote:\n\n* Horizontal movement means moving in either the left or right direction.\n* Vertical movement means moving in either the up or down direction.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def maxTrailingZeros(self, grid: List[List[int]]) -> int:\n    m = len(grid)\n    n = len(grid[0])\n    leftPrefix2 = [[0] * n for _ in range(m)]\n    leftPrefix5 = [[0] * n for _ in range(m)]\n    topPrefix2 = [[0] * n for _ in range(m)]\n    topPrefix5 = [[0] * n for _ in range(m)]\n\n    def getCount(num: int, factor: int) -> int:\n      count = 0\n      while num % factor == 0:\n        num //= factor\n        count += 1\n      return count\n\n    for i in range(m):\n      for j in range(n):\n        leftPrefix2[i][j] = getCount(grid[i][j], 2)\n        leftPrefix5[i][j] = getCount(grid[i][j], 5)\n        if j:\n          leftPrefix2[i][j] += leftPrefix2[i][j - 1]\n          leftPrefix5[i][j] += leftPrefix5[i][j - 1]\n\n    for j in range(n):\n      for i in range(m):\n        topPrefix2[i][j] = getCount(grid[i][j], 2)\n        topPrefix5[i][j] = getCount(grid[i][j], 5)\n        if i:\n          topPrefix2[i][j] += topPrefix2[i - 1][j]\n          topPrefix5[i][j] += topPrefix5[i - 1][j]\n\n    ans = 0\n    for i in range(m):\n      for j in range(n):\n        curr2 = getCount(grid[i][j], 2)\n        curr5 = getCount(grid[i][j], 5)\n        l2 = leftPrefix2[i][j]\n        l5 = leftPrefix5[i][j]\n        r2 = leftPrefix2[i][n - 1] - (0 if j == 0 else leftPrefix2[i][j - 1])\n        r5 = leftPrefix5[i][n - 1] - (0 if j == 0 else leftPrefix5[i][j - 1])\n        t2 = topPrefix2[i][j]\n        t5 = topPrefix5[i][j]\n        d2 = topPrefix2[m - 1][j] - (0 if i == 0 else topPrefix2[i - 1][j])\n        d5 = topPrefix5[m - 1][j] - (0 if i == 0 else topPrefix5[i - 1][j])\n        ans = max(ans, min(l2 + t2 - curr2, l5 + t5 - curr5), min(r2 + t2 - curr2, r5 + t5 - curr5), min(l2 + d2 - curr2, l5 + d5 - curr5), min(r2 + d2 - curr2, r5 + d5 - curr5))\n\n    return ans\n", "blocks": [{"type": "if", "start": 31, "end": 33}, {"type": "if", "start": 39, "end": 41}], "target_lines": [32, 33, 40, 41], "cfg": {"0": {"lineno": 0, "parents": [], "children": [57], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "maxTrailingZeros", "code": "enter: maxTrailingZeros(self, grid)"}, "2": {"lineno": 12, "parents": [56], "children": [], "function": "maxTrailingZeros", "code": "exit: maxTrailingZeros(self, grid)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "maxTrailingZeros", "code": "m = len(grid)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "maxTrailingZeros", "code": "n = len(grid[0])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "maxTrailingZeros", "code": "leftPrefix2 = [[0] * n for _ in range(m)]"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "maxTrailingZeros", "code": "leftPrefix5 = [[0] * n for _ in range(m)]"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "maxTrailingZeros", "code": "topPrefix2 = [[0] * n for _ in range(m)]"}, "8": {"lineno": 18, "parents": [7], "children": [16], "function": "maxTrailingZeros", "code": "topPrefix5 = [[0] * n for _ in range(m)]"}, "9": {"lineno": 20, "parents": [33, 34, 22, 23, 45, 46], "children": [11], "function": "getCount", "code": "enter: getCount(num, factor)"}, "10": {"lineno": 20, "parents": [15], "children": [], "function": "getCount", "code": "exit: getCount(num, factor)"}, "11": {"lineno": 21, "parents": [9], "children": [12], "function": "getCount", "code": "count = 0"}, "12": {"lineno": 22, "parents": [11, 14], "children": [13, 15], "function": "getCount", "code": "_while: num % factor == 0"}, "13": {"lineno": 23, "parents": [12], "children": [14], "function": "getCount", "code": "num //= factor"}, "14": {"lineno": 24, "parents": [13], "children": [12], "function": "getCount", "code": "count += 1"}, "15": {"lineno": 25, "parents": [12], "children": [10], "function": "getCount", "code": "return count"}, "16": {"lineno": 27, "parents": [8], "children": [17], "function": "maxTrailingZeros", "code": "__iv = iter(range(m))"}, "17": {"lineno": 27, "parents": [16, 20], "children": [18, 27], "calls": ["range"], "function": "maxTrailingZeros", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "maxTrailingZeros", "code": "i = next(__iv)"}, "19": {"lineno": 28, "parents": [18], "children": [20], "function": "maxTrailingZeros", "code": "__iv = iter(range(n))"}, "20": {"lineno": 28, "parents": [24, 26, 19], "children": [17, 21], "calls": ["range"], "function": "maxTrailingZeros", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 28, "parents": [20], "children": [22], "function": "maxTrailingZeros", "code": "j = next(__iv)"}, "22": {"lineno": 29, "parents": [21], "children": [23], "calls": ["getCount"], "function": "maxTrailingZeros", "code": "leftPrefix2[i][j] = getCount(grid[i][j], 2)"}, "23": {"lineno": 30, "parents": [10, 22], "children": [24], "calls": ["getCount"], "function": "maxTrailingZeros", "code": "leftPrefix5[i][j] = getCount(grid[i][j], 5)"}, "24": {"lineno": 31, "parents": [10, 23], "children": [25, 20], "function": "maxTrailingZeros", "code": "_if: j"}, "25": {"lineno": 32, "parents": [24], "children": [26], "function": "maxTrailingZeros", "code": "leftPrefix2[i][j] += leftPrefix2[i][j - 1]"}, "26": {"lineno": 33, "parents": [25], "children": [20], "function": "maxTrailingZeros", "code": "leftPrefix5[i][j] += leftPrefix5[i][j - 1]"}, "27": {"lineno": 35, "parents": [17], "children": [28], "function": "maxTrailingZeros", "code": "__iv = iter(range(n))"}, "28": {"lineno": 35, "parents": [27, 31], "children": [29, 38], "calls": ["range"], "function": "maxTrailingZeros", "code": "_for: __iv.__length__hint__() > 0"}, "29": {"lineno": 35, "parents": [28], "children": [30], "function": "maxTrailingZeros", "code": "j = next(__iv)"}, "30": {"lineno": 36, "parents": [29], "children": [31], "function": "maxTrailingZeros", "code": "__iv = iter(range(m))"}, "31": {"lineno": 36, "parents": [35, 37, 30], "children": [32, 28], "calls": ["range"], "function": "maxTrailingZeros", "code": "_for: __iv.__length__hint__() > 0"}, "32": {"lineno": 36, "parents": [31], "children": [33], "function": "maxTrailingZeros", "code": "i = next(__iv)"}, "33": {"lineno": 37, "parents": [32], "children": [34], "calls": ["getCount"], "function": "maxTrailingZeros", "code": "topPrefix2[i][j] = getCount(grid[i][j], 2)"}, "34": {"lineno": 38, "parents": [33, 10], "children": [35], "calls": ["getCount"], "function": "maxTrailingZeros", "code": "topPrefix5[i][j] = getCount(grid[i][j], 5)"}, "35": {"lineno": 39, "parents": [34, 10], "children": [36, 31], "function": "maxTrailingZeros", "code": "_if: i"}, "36": {"lineno": 40, "parents": [35], "children": [37], "function": "maxTrailingZeros", "code": "topPrefix2[i][j] += topPrefix2[i - 1][j]"}, "37": {"lineno": 41, "parents": [36], "children": [31], "function": "maxTrailingZeros", "code": "topPrefix5[i][j] += topPrefix5[i - 1][j]"}, "38": {"lineno": 43, "parents": [28], "children": [39], "function": "maxTrailingZeros", "code": "ans = 0"}, "39": {"lineno": 44, "parents": [38], "children": [40], "function": "maxTrailingZeros", "code": "__iv = iter(range(m))"}, "40": {"lineno": 44, "parents": [43, 39], "children": [56, 41], "calls": ["range"], "function": "maxTrailingZeros", "code": "_for: __iv.__length__hint__() > 0"}, "41": {"lineno": 44, "parents": [40], "children": [42], "function": "maxTrailingZeros", "code": "i = next(__iv)"}, "42": {"lineno": 45, "parents": [41], "children": [43], "function": "maxTrailingZeros", "code": "__iv = iter(range(n))"}, "43": {"lineno": 45, "parents": [42, 55], "children": [40, 44], "calls": ["range"], "function": "maxTrailingZeros", "code": "_for: __iv.__length__hint__() > 0"}, "44": {"lineno": 45, "parents": [43], "children": [45], "function": "maxTrailingZeros", "code": "j = next(__iv)"}, "45": {"lineno": 46, "parents": [44], "children": [46], "calls": ["getCount"], "function": "maxTrailingZeros", "code": "curr2 = getCount(grid[i][j], 2)"}, "46": {"lineno": 47, "parents": [10, 45], "children": [47], "calls": ["getCount"], "function": "maxTrailingZeros", "code": "curr5 = getCount(grid[i][j], 5)"}, "47": {"lineno": 48, "parents": [10, 46], "children": [48], "function": "maxTrailingZeros", "code": "l2 = leftPrefix2[i][j]"}, "48": {"lineno": 49, "parents": [47], "children": [49], "function": "maxTrailingZeros", "code": "l5 = leftPrefix5[i][j]"}, "49": {"lineno": 50, "parents": [48], "children": [50], "function": "maxTrailingZeros", "code": "r2 = leftPrefix2[i][n - 1] - (0 if j == 0 else leftPrefix2[i][j - 1])"}, "50": {"lineno": 51, "parents": [49], "children": [51], "function": "maxTrailingZeros", "code": "r5 = leftPrefix5[i][n - 1] - (0 if j == 0 else leftPrefix5[i][j - 1])"}, "51": {"lineno": 52, "parents": [50], "children": [52], "function": "maxTrailingZeros", "code": "t2 = topPrefix2[i][j]"}, "52": {"lineno": 53, "parents": [51], "children": [53], "function": "maxTrailingZeros", "code": "t5 = topPrefix5[i][j]"}, "53": {"lineno": 54, "parents": [52], "children": [54], "function": "maxTrailingZeros", "code": "d2 = topPrefix2[m - 1][j] - (0 if i == 0 else topPrefix2[i - 1][j])"}, "54": {"lineno": 55, "parents": [53], "children": [55], "function": "maxTrailingZeros", "code": "d5 = topPrefix5[m - 1][j] - (0 if i == 0 else topPrefix5[i - 1][j])"}, "55": {"lineno": 56, "parents": [54], "children": [43], "calls": ["min", "min", "min", "min", "max"], "function": "maxTrailingZeros", "code": "ans = max(ans, min(l2 + t2 - curr2, l5 + t5 - curr5), min(r2 + t2 - curr2, r5 + t5 - curr5), min(l2 + d2 - curr2, l5 + d5 - curr5), min(r2 + d2 - curr2, r5 + d5 - curr5))"}, "56": {"lineno": 58, "parents": [40], "children": [2], "function": "maxTrailingZeros", "code": "return ans"}, "57": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2257, "task_title": "Count Unguarded Cells in the Grid", "difficulty": 2, "func_name": "countUnguarded", "description": "You are given two integers `m` and `n` representing a 0-indexed `m x n` grid.\nYou are also given two 2D integer arrays `guards` and `walls` where `guards[i]\n= [rowi, coli]` and `walls[j] = [rowj, colj]` represent the positions of the\n`ith` guard and `jth` wall respectively.\n\nA guard can see every cell in the four cardinal directions (north, east,\nsouth, or west) starting from their position unless obstructed by a wall or\nanother guard. A cell is guarded if there is at least one guard that can see\nit.\n\nReturn the number of unoccupied cells that are not guarded.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def countUnguarded(self, m: int, n: int, guards: List[List[int]], walls: List[List[int]]) -> int:\n    ans = 0\n    grid = [[0] * n for _ in range(m)]\n    left = [[0] * n for _ in range(m)]\n    right = [[0] * n for _ in range(m)]\n    up = [[0] * n for _ in range(m)]\n    down = [[0] * n for _ in range(m)]\n\n    for row, col in guards:\n      grid[row][col] = 'G'\n\n    for row, col in walls:\n      grid[row][col] = 'W'\n\n    for i in range(m):\n      lastCell = 0\n      for j in range(n):\n        if grid[i][j] == 'G' or grid[i][j] == 'W':\n          lastCell = grid[i][j]\n        else:\n          left[i][j] = lastCell\n      lastCell = 0\n      for j in range(n - 1, -1, -1):\n        if grid[i][j] == 'G' or grid[i][j] == 'W':\n          lastCell = grid[i][j]\n        else:\n          right[i][j] = lastCell\n\n    for j in range(n):\n      lastCell = 0\n      for i in range(m):\n        if grid[i][j] == 'G' or grid[i][j] == 'W':\n          lastCell = grid[i][j]\n        else:\n          up[i][j] = lastCell\n      lastCell = 0\n      for i in range(m - 1, -1, -1):\n        if grid[i][j] == 'G' or grid[i][j] == 'W':\n          lastCell = grid[i][j]\n        else:\n          down[i][j] = lastCell\n\n    for i in range(m):\n      for j in range(n):\n        if grid[i][j] == 0 and left[i][j] != 'G' and right[i][j] != 'G' and up[i][j] != 'G' and down[i][j] != 'G':\n          ans += 1\n\n    return ans\n", "blocks": [{"type": "if", "start": 29, "end": 30}, {"type": "else", "start": 31, "end": 32}, {"type": "if", "start": 35, "end": 36}, {"type": "else", "start": 37, "end": 38}, {"type": "if", "start": 43, "end": 44}, {"type": "else", "start": 45, "end": 46}, {"type": "if", "start": 49, "end": 50}, {"type": "else", "start": 51, "end": 52}, {"type": "if", "start": 56, "end": 57}], "target_lines": [30, 32, 36, 38, 44, 46, 50, 52, 57], "cfg": {"0": {"lineno": 0, "parents": [], "children": [60], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "countUnguarded", "code": "enter: countUnguarded(self, m, n, guards, walls)"}, "2": {"lineno": 12, "parents": [59], "children": [], "function": "countUnguarded", "code": "exit: countUnguarded(self, m, n, guards, walls)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "countUnguarded", "code": "ans = 0"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "countUnguarded", "code": "grid = [[0] * n for _ in range(m)]"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "countUnguarded", "code": "left = [[0] * n for _ in range(m)]"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "countUnguarded", "code": "right = [[0] * n for _ in range(m)]"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "countUnguarded", "code": "up = [[0] * n for _ in range(m)]"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "countUnguarded", "code": "down = [[0] * n for _ in range(m)]"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "countUnguarded", "code": "__iv = iter(guards)"}, "10": {"lineno": 20, "parents": [9, 12], "children": [11, 13], "function": "countUnguarded", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "countUnguarded", "code": "row, col = next(__iv)"}, "12": {"lineno": 21, "parents": [11], "children": [10], "function": "countUnguarded", "code": "grid[row][col] = 'G'"}, "13": {"lineno": 23, "parents": [10], "children": [14], "function": "countUnguarded", "code": "__iv = iter(walls)"}, "14": {"lineno": 23, "parents": [16, 13], "children": [17, 15], "function": "countUnguarded", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 23, "parents": [14], "children": [16], "function": "countUnguarded", "code": "row, col = next(__iv)"}, "16": {"lineno": 24, "parents": [15], "children": [14], "function": "countUnguarded", "code": "grid[row][col] = 'W'"}, "17": {"lineno": 26, "parents": [14], "children": [18], "function": "countUnguarded", "code": "__iv = iter(range(m))"}, "18": {"lineno": 26, "parents": [17, 29], "children": [34, 19], "calls": ["range"], "function": "countUnguarded", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 26, "parents": [18], "children": [20], "function": "countUnguarded", "code": "i = next(__iv)"}, "20": {"lineno": 27, "parents": [19], "children": [21], "function": "countUnguarded", "code": "lastCell = 0"}, "21": {"lineno": 28, "parents": [20], "children": [22], "function": "countUnguarded", "code": "__iv = iter(range(n))"}, "22": {"lineno": 28, "parents": [25, 26, 21], "children": [27, 23], "calls": ["range"], "function": "countUnguarded", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 28, "parents": [22], "children": [24], "function": "countUnguarded", "code": "j = next(__iv)"}, "24": {"lineno": 29, "parents": [23], "children": [25, 26], "function": "countUnguarded", "code": "_if: grid[i][j] == 'G' or grid[i][j] == 'W'"}, "25": {"lineno": 30, "parents": [24], "children": [22], "function": "countUnguarded", "code": "lastCell = grid[i][j]"}, "26": {"lineno": 32, "parents": [24], "children": [22], "function": "countUnguarded", "code": "left[i][j] = lastCell"}, "27": {"lineno": 33, "parents": [22], "children": [28], "function": "countUnguarded", "code": "lastCell = 0"}, "28": {"lineno": 34, "parents": [27], "children": [29], "function": "countUnguarded", "code": "__iv = iter(range(n - 1, -1, -1))"}, "29": {"lineno": 34, "parents": [32, 33, 28], "children": [18, 30], "calls": ["range"], "function": "countUnguarded", "code": "_for: __iv.__length__hint__() > 0"}, "30": {"lineno": 34, "parents": [29], "children": [31], "function": "countUnguarded", "code": "j = next(__iv)"}, "31": {"lineno": 35, "parents": [30], "children": [32, 33], "function": "countUnguarded", "code": "_if: grid[i][j] == 'G' or grid[i][j] == 'W'"}, "32": {"lineno": 36, "parents": [31], "children": [29], "function": "countUnguarded", "code": "lastCell = grid[i][j]"}, "33": {"lineno": 38, "parents": [31], "children": [29], "function": "countUnguarded", "code": "right[i][j] = lastCell"}, "34": {"lineno": 40, "parents": [18], "children": [35], "function": "countUnguarded", "code": "__iv = iter(range(n))"}, "35": {"lineno": 40, "parents": [34, 46], "children": [51, 36], "calls": ["range"], "function": "countUnguarded", "code": "_for: __iv.__length__hint__() > 0"}, "36": {"lineno": 40, "parents": [35], "children": [37], "function": "countUnguarded", "code": "j = next(__iv)"}, "37": {"lineno": 41, "parents": [36], "children": [38], "function": "countUnguarded", "code": "lastCell = 0"}, "38": {"lineno": 42, "parents": [37], "children": [39], "function": "countUnguarded", "code": "__iv = iter(range(m))"}, "39": {"lineno": 42, "parents": [42, 43, 38], "children": [40, 44], "calls": ["range"], "function": "countUnguarded", "code": "_for: __iv.__length__hint__() > 0"}, "40": {"lineno": 42, "parents": [39], "children": [41], "function": "countUnguarded", "code": "i = next(__iv)"}, "41": {"lineno": 43, "parents": [40], "children": [42, 43], "function": "countUnguarded", "code": "_if: grid[i][j] == 'G' or grid[i][j] == 'W'"}, "42": {"lineno": 44, "parents": [41], "children": [39], "function": "countUnguarded", "code": "lastCell = grid[i][j]"}, "43": {"lineno": 46, "parents": [41], "children": [39], "function": "countUnguarded", "code": "up[i][j] = lastCell"}, "44": {"lineno": 47, "parents": [39], "children": [45], "function": "countUnguarded", "code": "lastCell = 0"}, "45": {"lineno": 48, "parents": [44], "children": [46], "function": "countUnguarded", "code": "__iv = iter(range(m - 1, -1, -1))"}, "46": {"lineno": 48, "parents": [49, 50, 45], "children": [35, 47], "calls": ["range"], "function": "countUnguarded", "code": "_for: __iv.__length__hint__() > 0"}, "47": {"lineno": 48, "parents": [46], "children": [48], "function": "countUnguarded", "code": "i = next(__iv)"}, "48": {"lineno": 49, "parents": [47], "children": [49, 50], "function": "countUnguarded", "code": "_if: grid[i][j] == 'G' or grid[i][j] == 'W'"}, "49": {"lineno": 50, "parents": [48], "children": [46], "function": "countUnguarded", "code": "lastCell = grid[i][j]"}, "50": {"lineno": 52, "parents": [48], "children": [46], "function": "countUnguarded", "code": "down[i][j] = lastCell"}, "51": {"lineno": 54, "parents": [35], "children": [52], "function": "countUnguarded", "code": "__iv = iter(range(m))"}, "52": {"lineno": 54, "parents": [51, 55], "children": [59, 53], "calls": ["range"], "function": "countUnguarded", "code": "_for: __iv.__length__hint__() > 0"}, "53": {"lineno": 54, "parents": [52], "children": [54], "function": "countUnguarded", "code": "i = next(__iv)"}, "54": {"lineno": 55, "parents": [53], "children": [55], "function": "countUnguarded", "code": "__iv = iter(range(n))"}, "55": {"lineno": 55, "parents": [57, 58, 54], "children": [56, 52], "calls": ["range"], "function": "countUnguarded", "code": "_for: __iv.__length__hint__() > 0"}, "56": {"lineno": 55, "parents": [55], "children": [57], "function": "countUnguarded", "code": "j = next(__iv)"}, "57": {"lineno": 56, "parents": [56], "children": [58, 55], "function": "countUnguarded", "code": "_if: grid[i][j] == 0 and left[i][j] != 'G' and (right[i][j] != 'G') and (up[i][j] != 'G') and (down[i][j] != 'G')"}, "58": {"lineno": 57, "parents": [57], "children": [55], "function": "countUnguarded", "code": "ans += 1"}, "59": {"lineno": 59, "parents": [52], "children": [2], "function": "countUnguarded", "code": "return ans"}, "60": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2258, "task_title": "Escape the Spreading Fire", "difficulty": 3, "func_name": "maximumMinutes", "description": "You are given a 0-indexed 2D integer array `grid` of size `m x n` which\nrepresents a field. Each cell has one of three values:\n\n* `0` represents grass,\n* `1` represents fire,\n* `2` represents a wall that you and fire cannot pass through.\n\nYou are situated in the top-left cell, `(0, 0)`, and you want to travel to the\nsafehouse at the bottom-right cell, `(m - 1, n - 1)`. Every minute, you may\nmove to an adjacent grass cell. After your move, every fire cell will spread\nto all adjacent cells that are not walls.\n\nReturn the maximum number of minutes that you can stay in your initial\nposition before moving while still safely reaching the safehouse. If this is\nimpossible, return `-1`. If you can always reach the safehouse regardless of\nthe minutes stayed, return `109`.\n\nNote that even if the fire spreads to the safehouse immediately after you have\nreached it, it will be counted as safely reaching the safehouse.\n\nA cell is adjacent to another cell if the former is directly north, east,\nsouth, or west of the latter (i.e., their sides are touching).\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def maximumMinutes(self, grid: List[List[int]]) -> int:\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    kMax = len(grid) * len(grid[0])\n    fireGrid = [[-1] * len(grid[0]) for _ in range(len(grid))]\n    self._buildFireGrid(grid, fireGrid, dirs)\n\n    ans = -1\n    l = 0\n    r = kMax\n\n    while l <= r:\n      m = (l + r) // 2\n      if self._canStayFor(grid, fireGrid, m, dirs):\n        ans = m\n        l = m + 1\n      else:\n        r = m - 1\n\n    return int(1e9) if ans == kMax else ans\n\n  def _buildFireGrid(self, grid: List[List[int]], fireMinute: List[List[int]], dirs: List[int]) -> None:\n    minuteFromFire = 0\n    q = collections.deque()\n\n    for i in range(len(grid)):\n      for j in range(len(grid[0])):\n        if grid[i][j] == 1:\n          q.append((i, j))\n          fireMinute[i][j] = 0\n    while q:\n      minuteFromFire += 1\n      for _ in range(len(q)):\n        i, j = q.popleft()\n        for dx, dy in dirs:\n          x = i + dx\n          y = j + dy\n          if x < 0 or x == len(grid) or y < 0 or y == len(grid[0]):\n            continue\n          if grid[x][y] == 2:\n            continue\n          if fireMinute[x][y] != -1:\n            continue\n          fireMinute[x][y] = minuteFromFire\n          q.append((x, y))\n\n  def _canStayFor(self, grid: List[List[int]], fireMinute: List[List[int]], minute: int, dirs: List[int]) -> bool:\n    q = collections.deque([(0, 0)])\n    seen = {(0, 0)}\n\n    while q:\n      minute += 1\n      for _ in range(len(q)):\n        i, j = q.popleft()\n        for dx, dy in dirs:\n          x = i + dx\n          y = j + dy\n          if x < 0 or x == len(grid) or y < 0 or y == len(grid[0]):\n            continue\n          if grid[x][y] == 2:\n            continue\n          if x == len(grid) - 1 and y == len(grid[0]) - 1:\n            if fireMinute[x][y] != -1 and fireMinute[x][y] < minute:\n              continue\n            return True\n          if fireMinute[x][y] != -1 and fireMinute[x][y] <= minute:\n            continue\n          if (x, y) in seen:\n            continue\n          q.append((x, y))\n          seen.add((x, y))\n\n    return False\n", "blocks": [{"type": "if", "start": 24, "end": 26}, {"type": "else", "start": 27, "end": 28}, {"type": "if", "start": 38, "end": 40}, {"type": "if", "start": 48, "end": 49}, {"type": "if", "start": 50, "end": 51}, {"type": "if", "start": 52, "end": 53}, {"type": "if", "start": 68, "end": 69}, {"type": "if", "start": 70, "end": 71}, {"type": "if", "start": 72, "end": 75}, {"type": "if", "start": 76, "end": 77}, {"type": "if", "start": 78, "end": 79}, {"type": "if", "start": 73, "end": 74}], "target_lines": [25, 26, 28, 39, 40, 49, 51, 53, 69, 71, 73, 74, 75, 77, 79], "cfg": {"0": {"lineno": 0, "parents": [], "children": [79], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "maximumMinutes", "code": "enter: maximumMinutes(self, grid)"}, "2": {"lineno": 12, "parents": [16], "children": [], "function": "maximumMinutes", "code": "exit: maximumMinutes(self, grid)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "maximumMinutes", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len", "len"], "function": "maximumMinutes", "code": "kMax = len(grid) * len(grid[0])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "maximumMinutes", "code": "fireGrid = [[-1] * len(grid[0]) for _ in range(len(grid))]"}, "6": {"lineno": 16, "parents": [5], "children": [7], "calls": ["_buildFireGrid"], "function": "maximumMinutes", "code": "self._buildFireGrid(grid, fireGrid, dirs)"}, "7": {"lineno": 18, "parents": [18, 6], "children": [8], "function": "maximumMinutes", "code": "ans = -1"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "maximumMinutes", "code": "l = 0"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "maximumMinutes", "code": "r = kMax"}, "10": {"lineno": 22, "parents": [9, 14, 15], "children": [16, 11], "function": "maximumMinutes", "code": "_while: l <= r"}, "11": {"lineno": 23, "parents": [10], "children": [12], "function": "maximumMinutes", "code": "m = (l + r) // 2"}, "12": {"lineno": 24, "parents": [11], "children": [13, 15], "calls": ["_canStayFor"], "function": "maximumMinutes", "code": "_if: self._canStayFor(grid, fireGrid, m, dirs)"}, "13": {"lineno": 25, "parents": [50, 12], "children": [14], "function": "maximumMinutes", "code": "ans = m"}, "14": {"lineno": 26, "parents": [13], "children": [10], "function": "maximumMinutes", "code": "l = m + 1"}, "15": {"lineno": 28, "parents": [50, 12], "children": [10], "function": "maximumMinutes", "code": "r = m - 1"}, "16": {"lineno": 30, "parents": [10], "children": [2], "function": "maximumMinutes", "code": "return int(1000000000.0) if ans == kMax else ans"}, "17": {"lineno": 32, "parents": [6], "children": [19], "function": "_buildFireGrid", "code": "enter: _buildFireGrid(self, grid, fireMinute, dirs)"}, "18": {"lineno": 32, "parents": [30], "children": [], "function": "_buildFireGrid", "code": "exit: _buildFireGrid(self, grid, fireMinute, dirs)"}, "19": {"lineno": 33, "parents": [17], "children": [20], "function": "_buildFireGrid", "code": "minuteFromFire = 0"}, "20": {"lineno": 34, "parents": [19], "children": [21], "calls": ["deque"], "function": "_buildFireGrid", "code": "q = collections.deque()"}, "21": {"lineno": 36, "parents": [20], "children": [22], "function": "_buildFireGrid", "code": "__iv = iter(range(len(grid)))"}, "22": {"lineno": 36, "parents": [25, 21], "children": [30, 23], "calls": ["len", "range"], "function": "_buildFireGrid", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 36, "parents": [22], "children": [24], "function": "_buildFireGrid", "code": "i = next(__iv)"}, "24": {"lineno": 37, "parents": [23], "children": [25], "function": "_buildFireGrid", "code": "__iv = iter(range(len(grid[0])))"}, "25": {"lineno": 37, "parents": [24, 27, 29], "children": [26, 22], "calls": ["len", "range"], "function": "_buildFireGrid", "code": "_for: __iv.__length__hint__() > 0"}, "26": {"lineno": 37, "parents": [25], "children": [27], "function": "_buildFireGrid", "code": "j = next(__iv)"}, "27": {"lineno": 38, "parents": [26], "children": [25, 28], "function": "_buildFireGrid", "code": "_if: grid[i][j] == 1"}, "28": {"lineno": 39, "parents": [27], "children": [29], "calls": ["append"], "function": "_buildFireGrid", "code": "q.append((i, j))"}, "29": {"lineno": 40, "parents": [28], "children": [25], "function": "_buildFireGrid", "code": "fireMinute[i][j] = 0"}, "30": {"lineno": 41, "parents": [33, 22], "children": [18, 31], "function": "_buildFireGrid", "code": "_while: q"}, "31": {"lineno": 42, "parents": [30], "children": [32], "function": "_buildFireGrid", "code": "minuteFromFire += 1"}, "32": {"lineno": 43, "parents": [31], "children": [33], "function": "_buildFireGrid", "code": "__iv = iter(range(len(q)))"}, "33": {"lineno": 43, "parents": [32, 37], "children": [34, 30], "calls": ["len", "range"], "function": "_buildFireGrid", "code": "_for: __iv.__length__hint__() > 0"}, "34": {"lineno": 43, "parents": [33], "children": [35], "function": "_buildFireGrid", "code": "_ = next(__iv)"}, "35": {"lineno": 44, "parents": [34], "children": [36], "calls": ["popleft"], "function": "_buildFireGrid", "code": "i, j = q.popleft()"}, "36": {"lineno": 45, "parents": [35], "children": [37], "function": "_buildFireGrid", "code": "__iv = iter(dirs)"}, "37": {"lineno": 45, "parents": [48, 36, 42, 44, 46], "children": [33, 38], "function": "_buildFireGrid", "code": "_for: __iv.__length__hint__() > 0"}, "38": {"lineno": 45, "parents": [37], "children": [39], "function": "_buildFireGrid", "code": "dx, dy = next(__iv)"}, "39": {"lineno": 46, "parents": [38], "children": [40], "function": "_buildFireGrid", "code": "x = i + dx"}, "40": {"lineno": 47, "parents": [39], "children": [41], "function": "_buildFireGrid", "code": "y = j + dy"}, "41": {"lineno": 48, "parents": [40], "children": [42, 43], "function": "_buildFireGrid", "code": "_if: x < 0 or x == len(grid) or y < 0 or (y == len(grid[0]))"}, "42": {"lineno": 49, "parents": [41], "children": [37], "function": "_buildFireGrid", "code": "continue"}, "43": {"lineno": 50, "parents": [41], "children": [44, 45], "function": "_buildFireGrid", "code": "_if: grid[x][y] == 2"}, "44": {"lineno": 51, "parents": [43], "children": [37], "function": "_buildFireGrid", "code": "continue"}, "45": {"lineno": 52, "parents": [43], "children": [46, 47], "function": "_buildFireGrid", "code": "_if: fireMinute[x][y] != -1"}, "46": {"lineno": 53, "parents": [45], "children": [37], "function": "_buildFireGrid", "code": "continue"}, "47": {"lineno": 54, "parents": [45], "children": [48], "function": "_buildFireGrid", "code": "fireMinute[x][y] = minuteFromFire"}, "48": {"lineno": 55, "parents": [47], "children": [37], "calls": ["append"], "function": "_buildFireGrid", "code": "q.append((x, y))"}, "49": {"lineno": 57, "parents": [12], "children": [51], "function": "_canStayFor", "code": "enter: _canStayFor(self, grid, fireMinute, minute, dirs)"}, "50": {"lineno": 57, "parents": [78, 71], "children": [], "function": "_canStayFor", "code": "exit: _canStayFor(self, grid, fireMinute, minute, dirs)"}, "51": {"lineno": 58, "parents": [49], "children": [52], "calls": ["deque"], "function": "_canStayFor", "code": "q = collections.deque([(0, 0)])"}, "52": {"lineno": 59, "parents": [51], "children": [53], "function": "_canStayFor", "code": "seen = {(0, 0)}"}, "53": {"lineno": 61, "parents": [56, 52], "children": [78, 54], "function": "_canStayFor", "code": "_while: q"}, "54": {"lineno": 62, "parents": [53], "children": [55], "function": "_canStayFor", "code": "minute += 1"}, "55": {"lineno": 63, "parents": [54], "children": [56], "function": "_canStayFor", "code": "__iv = iter(range(len(q)))"}, "56": {"lineno": 63, "parents": [60, 55], "children": [57, 53], "calls": ["len", "range"], "function": "_canStayFor", "code": "_for: __iv.__length__hint__() > 0"}, "57": {"lineno": 63, "parents": [56], "children": [58], "function": "_canStayFor", "code": "_ = next(__iv)"}, "58": {"lineno": 64, "parents": [57], "children": [59], "calls": ["popleft"], "function": "_canStayFor", "code": "i, j = q.popleft()"}, "59": {"lineno": 65, "parents": [58], "children": [60], "function": "_canStayFor", "code": "__iv = iter(dirs)"}, "60": {"lineno": 65, "parents": [65, 67, 70, 73, 75, 77, 59], "children": [56, 61], "function": "_canStayFor", "code": "_for: __iv.__length__hint__() > 0"}, "61": {"lineno": 65, "parents": [60], "children": [62], "function": "_canStayFor", "code": "dx, dy = next(__iv)"}, "62": {"lineno": 66, "parents": [61], "children": [63], "function": "_canStayFor", "code": "x = i + dx"}, "63": {"lineno": 67, "parents": [62], "children": [64], "function": "_canStayFor", "code": "y = j + dy"}, "64": {"lineno": 68, "parents": [63], "children": [65, 66], "function": "_canStayFor", "code": "_if: x < 0 or x == len(grid) or y < 0 or (y == len(grid[0]))"}, "65": {"lineno": 69, "parents": [64], "children": [60], "function": "_canStayFor", "code": "continue"}, "66": {"lineno": 70, "parents": [64], "children": [67, 68], "function": "_canStayFor", "code": "_if: grid[x][y] == 2"}, "67": {"lineno": 71, "parents": [66], "children": [60], "function": "_canStayFor", "code": "continue"}, "68": {"lineno": 72, "parents": [66], "children": [72, 69], "function": "_canStayFor", "code": "_if: x == len(grid) - 1 and y == len(grid[0]) - 1"}, "69": {"lineno": 73, "parents": [68], "children": [70, 71], "function": "_canStayFor", "code": "_if: fireMinute[x][y] != -1 and fireMinute[x][y] < minute"}, "70": {"lineno": 74, "parents": [69], "children": [60], "function": "_canStayFor", "code": "continue"}, "71": {"lineno": 75, "parents": [69], "children": [50], "function": "_canStayFor", "code": "return True"}, "72": {"lineno": 76, "parents": [68], "children": [73, 74], "function": "_canStayFor", "code": "_if: fireMinute[x][y] != -1 and fireMinute[x][y] <= minute"}, "73": {"lineno": 77, "parents": [72], "children": [60], "function": "_canStayFor", "code": "continue"}, "74": {"lineno": 78, "parents": [72], "children": [75, 76], "function": "_canStayFor", "code": "_if: (x, y) in seen"}, "75": {"lineno": 79, "parents": [74], "children": [60], "function": "_canStayFor", "code": "continue"}, "76": {"lineno": 80, "parents": [74], "children": [77], "calls": ["append"], "function": "_canStayFor", "code": "q.append((x, y))"}, "77": {"lineno": 81, "parents": [76], "children": [60], "calls": ["add"], "function": "_canStayFor", "code": "seen.add((x, y))"}, "78": {"lineno": 83, "parents": [53], "children": [50], "function": "_canStayFor", "code": "return False"}, "79": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2290, "task_title": "Minimum Obstacle Removal to Reach Corner", "difficulty": 3, "func_name": "minimumObstacles", "description": "You are given a 0-indexed 2D integer array `grid` of size `m x n`. Each cell\nhas one of two values:\n\n* `0` represents an empty cell,\n* `1` represents an obstacle that may be removed.\n\nYou can move up, down, left, or right from and to an empty cell.\n\nReturn the minimum number of obstacles to remove so you can move from the\nupper left corner `(0, 0)` to the lower right corner `(m - 1, n - 1)`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumObstacles(self, grid: List[List[int]]) -> int:\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    m = len(grid)\n    n = len(grid[0])\n    minHeap = [(grid[0][0], 0, 0)]  # (d, i, j)\n    dist = [[math.inf] * n for _ in range(m)]\n    dist[0][0] = grid[0][0]\n\n    while minHeap:\n      d, i, j = heapq.heappop(minHeap)\n      if i == m - 1 and j == n - 1:\n        return d\n      for dx, dy in dirs:\n        x = i + dx\n        y = j + dy\n        if x < 0 or x == m or y < 0 or y == n:\n          continue\n        newDist = d + grid[i][j]\n        if newDist < dist[x][y]:\n          dist[x][y] = newDist\n          heapq.heappush(minHeap, (newDist, x, y))\n\n    return dist[m - 1][n - 1]\n", "blocks": [{"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 27, "end": 28}, {"type": "if", "start": 30, "end": 32}], "target_lines": [23, 28, 31, 32], "cfg": {"0": {"lineno": 0, "parents": [], "children": [25], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumObstacles", "code": "enter: minimumObstacles(self, grid)"}, "2": {"lineno": 12, "parents": [24, 12], "children": [], "function": "minimumObstacles", "code": "exit: minimumObstacles(self, grid)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "minimumObstacles", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "minimumObstacles", "code": "m = len(grid)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["len"], "function": "minimumObstacles", "code": "n = len(grid[0])"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "minimumObstacles", "code": "minHeap = [(grid[0][0], 0, 0)]"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "minimumObstacles", "code": "dist = [[math.inf] * n for _ in range(m)]"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "minimumObstacles", "code": "dist[0][0] = grid[0][0]"}, "9": {"lineno": 20, "parents": [8, 14], "children": [24, 10], "function": "minimumObstacles", "code": "_while: minHeap"}, "10": {"lineno": 21, "parents": [9], "children": [11], "calls": ["heappop"], "function": "minimumObstacles", "code": "d, i, j = heapq.heappop(minHeap)"}, "11": {"lineno": 22, "parents": [10], "children": [12, 13], "function": "minimumObstacles", "code": "_if: i == m - 1 and j == n - 1"}, "12": {"lineno": 23, "parents": [11], "children": [2], "function": "minimumObstacles", "code": "return d"}, "13": {"lineno": 24, "parents": [11], "children": [14], "function": "minimumObstacles", "code": "__iv = iter(dirs)"}, "14": {"lineno": 24, "parents": [21, 19, 13, 23], "children": [9, 15], "function": "minimumObstacles", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 24, "parents": [14], "children": [16], "function": "minimumObstacles", "code": "dx, dy = next(__iv)"}, "16": {"lineno": 25, "parents": [15], "children": [17], "function": "minimumObstacles", "code": "x = i + dx"}, "17": {"lineno": 26, "parents": [16], "children": [18], "function": "minimumObstacles", "code": "y = j + dy"}, "18": {"lineno": 27, "parents": [17], "children": [19, 20], "function": "minimumObstacles", "code": "_if: x < 0 or x == m or y < 0 or (y == n)"}, "19": {"lineno": 28, "parents": [18], "children": [14], "function": "minimumObstacles", "code": "continue"}, "20": {"lineno": 29, "parents": [18], "children": [21], "function": "minimumObstacles", "code": "newDist = d + grid[i][j]"}, "21": {"lineno": 30, "parents": [20], "children": [22, 14], "function": "minimumObstacles", "code": "_if: newDist < dist[x][y]"}, "22": {"lineno": 31, "parents": [21], "children": [23], "function": "minimumObstacles", "code": "dist[x][y] = newDist"}, "23": {"lineno": 32, "parents": [22], "children": [14], "calls": ["heappush"], "function": "minimumObstacles", "code": "heapq.heappush(minHeap, (newDist, x, y))"}, "24": {"lineno": 34, "parents": [9], "children": [2], "function": "minimumObstacles", "code": "return dist[m - 1][n - 1]"}, "25": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2299, "task_title": "Strong Password Checker II", "difficulty": 1, "func_name": "strongPasswordCheckerII", "description": "A password is said to be strong if it satisfies all the following criteria:\n\n* It has at least `8` characters.\n* It contains at least one lowercase letter.\n* It contains at least one uppercase letter.\n* It contains at least one digit.\n* It contains at least one special character. The special characters are the characters in the following string: `\"!@#$%^&*()-+\"`.\n* It does not contain `2` of the same character in adjacent positions (i.e., `\"aab\"` violates this condition, but `\"aba\"` does not).\n\nGiven a string `password`, return `true` if it is a strong password.\nOtherwise, return `false`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def strongPasswordCheckerII(self, password: str) -> bool:\n    if len(password) < 8:\n      return False\n    if not any(c.islower() for c in password):\n      return False\n    if not any(c.isupper() for c in password):\n      return False\n    if not any(c.isdigit() for c in password):\n      return False\n    if not any(\"!@#$%^&*()-+\".find(c) != -1 for c in password):\n      return False\n    return all(a != b for a, b in zip(password, password[1:]))\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "if", "start": 15, "end": 16}, {"type": "if", "start": 17, "end": 18}, {"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}], "target_lines": [14, 16, 18, 20, 22], "cfg": {"0": {"lineno": 0, "parents": [], "children": [14], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "strongPasswordCheckerII", "code": "enter: strongPasswordCheckerII(self, password)"}, "2": {"lineno": 12, "parents": [4, 6, 8, 10, 12, 13], "children": [], "function": "strongPasswordCheckerII", "code": "exit: strongPasswordCheckerII(self, password)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "calls": ["len"], "function": "strongPasswordCheckerII", "code": "_if: len(password) < 8"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "strongPasswordCheckerII", "code": "return False"}, "5": {"lineno": 15, "parents": [3], "children": [6, 7], "calls": ["any"], "function": "strongPasswordCheckerII", "code": "_if: not any((c.islower() for c in password))"}, "6": {"lineno": 16, "parents": [5], "children": [2], "function": "strongPasswordCheckerII", "code": "return False"}, "7": {"lineno": 17, "parents": [5], "children": [8, 9], "calls": ["any"], "function": "strongPasswordCheckerII", "code": "_if: not any((c.isupper() for c in password))"}, "8": {"lineno": 18, "parents": [7], "children": [2], "function": "strongPasswordCheckerII", "code": "return False"}, "9": {"lineno": 19, "parents": [7], "children": [10, 11], "calls": ["any"], "function": "strongPasswordCheckerII", "code": "_if: not any((c.isdigit() for c in password))"}, "10": {"lineno": 20, "parents": [9], "children": [2], "function": "strongPasswordCheckerII", "code": "return False"}, "11": {"lineno": 21, "parents": [9], "children": [12, 13], "calls": ["any", "all"], "function": "strongPasswordCheckerII", "code": "_if: not any(('!@#$%^&*()-+'.find(c) != -1 for c in password))"}, "12": {"lineno": 22, "parents": [11], "children": [2], "function": "strongPasswordCheckerII", "code": "return False"}, "13": {"lineno": 23, "parents": [11], "children": [2], "function": "strongPasswordCheckerII", "code": "return all((a != b for a, b in zip(password, password[1:])))"}, "14": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2301, "task_title": "Match Substring After Replacement", "difficulty": 3, "func_name": "matchReplacement", "description": "You are given two strings `s` and `sub`. You are also given a 2D character\narray `mappings` where `mappings[i] = [oldi, newi]` indicates that you may\nperform the following operation any number of times:\n\n* Replace a character `oldi` of `sub` with `newi`.\n\nEach character in `sub` cannot be replaced more than once.\n\nReturn `true` if it is possible to make `sub` a substring of `s` by replacing\nzero or more characters according to `mappings`. Otherwise, return `false`.\n\nA substring is a contiguous non-empty sequence of characters within a string.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def matchReplacement(self, s: str, sub: str, mappings: List[List[str]]) -> bool:\n    isMapped = [[False] * 128 for _ in range(128)]\n\n    for old, new in mappings:\n      isMapped[ord(old)][ord(new)] = True\n\n    for i in range(len(s)):\n      if self._canTransform(s, i, sub, isMapped):\n        return True\n\n    return False\n\n  def _canTransform(self, s: str, start: int, sub: str, isMapped: List[List[bool]]) -> bool:\n    if start + len(sub) > len(s):\n      return False\n\n    for i in range(len(sub)):\n      a = sub[i]\n      b = s[start + i]\n      if a != b and not isMapped[ord(a)][ord(b)]:\n        return False\n\n    return True\n", "blocks": [{"type": "if", "start": 25, "end": 26}, {"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 31, "end": 32}], "target_lines": [20, 26, 32], "cfg": {"0": {"lineno": 0, "parents": [], "children": [26], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "matchReplacement", "code": "enter: matchReplacement(self, s, sub, mappings)"}, "2": {"lineno": 12, "parents": [12, 13], "children": [], "function": "matchReplacement", "code": "exit: matchReplacement(self, s, sub, mappings)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "matchReplacement", "code": "isMapped = [[False] * 128 for _ in range(128)]"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "matchReplacement", "code": "__iv = iter(mappings)"}, "5": {"lineno": 15, "parents": [4, 7], "children": [8, 6], "function": "matchReplacement", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "matchReplacement", "code": "old, new = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [5], "function": "matchReplacement", "code": "isMapped[ord(old)][ord(new)] = True"}, "8": {"lineno": 18, "parents": [5], "children": [9], "function": "matchReplacement", "code": "__iv = iter(range(len(s)))"}, "9": {"lineno": 18, "parents": [8, 11, 15], "children": [10, 13], "calls": ["len", "range"], "function": "matchReplacement", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 18, "parents": [9], "children": [11], "function": "matchReplacement", "code": "i = next(__iv)"}, "11": {"lineno": 19, "parents": [10], "children": [9, 12], "calls": ["_canTransform"], "function": "matchReplacement", "code": "_if: self._canTransform(s, i, sub, isMapped)"}, "12": {"lineno": 20, "parents": [11, 15], "children": [2], "function": "matchReplacement", "code": "return True"}, "13": {"lineno": 22, "parents": [9], "children": [2], "function": "matchReplacement", "code": "return False"}, "14": {"lineno": 24, "parents": [11], "children": [16], "function": "_canTransform", "code": "enter: _canTransform(self, s, start, sub, isMapped)"}, "15": {"lineno": 24, "parents": [24, 17, 25], "children": [], "function": "_canTransform", "code": "exit: _canTransform(self, s, start, sub, isMapped)"}, "16": {"lineno": 25, "parents": [14], "children": [17, 18], "calls": ["len", "len"], "function": "_canTransform", "code": "_if: start + len(sub) > len(s)"}, "17": {"lineno": 26, "parents": [16], "children": [15], "function": "_canTransform", "code": "return False"}, "18": {"lineno": 28, "parents": [16], "children": [19], "function": "_canTransform", "code": "__iv = iter(range(len(sub)))"}, "19": {"lineno": 28, "parents": [18, 23], "children": [25, 20], "calls": ["len", "range"], "function": "_canTransform", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 28, "parents": [19], "children": [21], "function": "_canTransform", "code": "i = next(__iv)"}, "21": {"lineno": 29, "parents": [20], "children": [22], "function": "_canTransform", "code": "a = sub[i]"}, "22": {"lineno": 30, "parents": [21], "children": [23], "function": "_canTransform", "code": "b = s[start + i]"}, "23": {"lineno": 31, "parents": [22], "children": [24, 19], "function": "_canTransform", "code": "_if: a != b and (not isMapped[ord(a)][ord(b)])"}, "24": {"lineno": 32, "parents": [23], "children": [15], "function": "_canTransform", "code": "return False"}, "25": {"lineno": 34, "parents": [19], "children": [15], "function": "_canTransform", "code": "return True"}, "26": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2322, "task_title": "Minimum Score After Removals on a Tree", "difficulty": 3, "func_name": "minimumScore", "description": "There is an undirected connected tree with `n` nodes labeled from `0` to `n -\n1` and `n - 1` edges.\n\nYou are given a 0-indexed integer array `nums` of length `n` where `nums[i]`\nrepresents the value of the `ith` node. You are also given a 2D integer array\n`edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is\nan edge between nodes `ai` and `bi` in the tree.\n\nRemove two distinct edges of the tree to form three connected components. For\na pair of removed edges, the following steps are defined:\n\n1. Get the XOR of all the values of the nodes for each of the three components respectively.\n2. The difference between the largest XOR value and the smallest XOR value is the score of the pair.\n\n* For example, say the three components have the node values: `[4,5,7]`, `[1,9]`, and `[3,3,3]`. The three XOR values are `4 ^ 5 ^ 7 = 6`, `1 ^ 9 = 8`, and `3 ^ 3 ^ 3 = 3`. The largest XOR value is `8` and the smallest XOR value is `3`. The score is then `8 - 3 = 5`.\n\nReturn the minimum score of any possible pair of edge removals on the given\ntree.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator, Set\n\nclass Solution:\n  def minimumScore(self, nums: List[int], edges: List[List[int]]) -> int:\n    n = len(nums)\n    xors = functools.reduce(lambda x, y: x ^ y, nums)\n    subXors = nums[:]\n    tree = [[] for _ in range(n)]\n    children = [{i} for i in range(n)]\n\n    for u, v in edges:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    def dfs(u: int, parent: int) -> Tuple[int, Set[int]]:\n      for v in tree[u]:\n        if v == parent:\n          continue\n        vXor, vChildren = dfs(v, u)\n        subXors[u] ^= vXor\n        children[u] |= vChildren\n      return subXors[u], children[u]\n\n    dfs(0, -1)\n\n    ans = math.inf\n    for i in range(len(edges)):\n      a, b = edges[i]\n      if b in children[a]:\n        a, b = b, a\n      for j in range(i):\n        c, d = edges[j]\n        if d in children[c]:\n          c, d = d, c\n\n        if c in children[a] and a != c:\n          cands = [subXors[c], subXors[a] ^ subXors[c], xors ^ subXors[a]]\n        elif a in children[c] and a != c:\n          cands = [subXors[a], subXors[c] ^ subXors[a], xors ^ subXors[c]]\n        else:\n          cands = [subXors[a], subXors[c], xors ^ subXors[a] ^ subXors[c]]\n        ans = min(ans, max(cands) - min(cands))\n\n    return ans\n", "blocks": [{"type": "if", "start": 37, "end": 38}, {"type": "if", "start": 25, "end": 26}, {"type": "if", "start": 41, "end": 42}, {"type": "if", "start": 44, "end": 45}, {"type": "if", "start": 46, "end": 47}, {"type": "else", "start": 48, "end": 49}], "target_lines": [26, 38, 42, 45, 47, 49], "cfg": {"0": {"lineno": 0, "parents": [], "children": [45], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumScore", "code": "enter: minimumScore(self, nums, edges)"}, "2": {"lineno": 12, "parents": [44], "children": [], "function": "minimumScore", "code": "exit: minimumScore(self, nums, edges)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "minimumScore", "code": "n = len(nums)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["reduce"], "function": "minimumScore", "code": "xors = functools.reduce(lambda x, y: x ^ y, nums)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "minimumScore", "code": "subXors = nums[:]"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "minimumScore", "code": "tree = [[] for _ in range(n)]"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "minimumScore", "code": "children = [{i} for i in range(n)]"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "minimumScore", "code": "__iv = iter(edges)"}, "9": {"lineno": 19, "parents": [8, 12], "children": [24, 10], "function": "minimumScore", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "minimumScore", "code": "u, v = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "calls": ["append"], "function": "minimumScore", "code": "tree[u].append(v)"}, "12": {"lineno": 21, "parents": [11], "children": [9], "calls": ["append"], "function": "minimumScore", "code": "tree[v].append(u)"}, "13": {"lineno": 23, "parents": [24, 20], "children": [15], "function": "dfs", "code": "enter: dfs(u, parent)"}, "14": {"lineno": 23, "parents": [23], "children": [], "function": "dfs", "code": "exit: dfs(u, parent)"}, "15": {"lineno": 24, "parents": [13], "children": [16], "function": "dfs", "code": "__iv = iter(tree[u])"}, "16": {"lineno": 24, "parents": [19, 22, 15], "children": [17, 23], "function": "dfs", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 24, "parents": [16], "children": [18], "function": "dfs", "code": "v = next(__iv)"}, "18": {"lineno": 25, "parents": [17], "children": [19, 20], "function": "dfs", "code": "_if: v == parent"}, "19": {"lineno": 26, "parents": [18], "children": [16], "function": "dfs", "code": "continue"}, "20": {"lineno": 27, "parents": [18], "children": [21], "calls": ["dfs"], "function": "dfs", "code": "vXor, vChildren = dfs(v, u)"}, "21": {"lineno": 28, "parents": [20, 14], "children": [22], "function": "dfs", "code": "subXors[u] ^= vXor"}, "22": {"lineno": 29, "parents": [21], "children": [16], "function": "dfs", "code": "children[u] |= vChildren"}, "23": {"lineno": 30, "parents": [16], "children": [14], "function": "dfs", "code": "return (subXors[u], children[u])"}, "24": {"lineno": 32, "parents": [9], "children": [25], "calls": ["dfs"], "function": "minimumScore", "code": "dfs(0, -1)"}, "25": {"lineno": 34, "parents": [24, 14], "children": [26], "function": "minimumScore", "code": "ans = math.inf"}, "26": {"lineno": 35, "parents": [25], "children": [27], "function": "minimumScore", "code": "__iv = iter(range(len(edges)))"}, "27": {"lineno": 35, "parents": [33, 26], "children": [28, 44], "calls": ["len", "range"], "function": "minimumScore", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 35, "parents": [27], "children": [29], "function": "minimumScore", "code": "i = next(__iv)"}, "29": {"lineno": 36, "parents": [28], "children": [30], "function": "minimumScore", "code": "a, b = edges[i]"}, "30": {"lineno": 37, "parents": [29], "children": [32, 31], "function": "minimumScore", "code": "_if: b in children[a]"}, "31": {"lineno": 38, "parents": [30], "children": [32], "function": "minimumScore", "code": "a, b = (b, a)"}, "32": {"lineno": 39, "parents": [30, 31], "children": [33], "function": "minimumScore", "code": "__iv = iter(range(i))"}, "33": {"lineno": 39, "parents": [32, 43], "children": [34, 27], "calls": ["range"], "function": "minimumScore", "code": "_for: __iv.__length__hint__() > 0"}, "34": {"lineno": 39, "parents": [33], "children": [35], "function": "minimumScore", "code": "j = next(__iv)"}, "35": {"lineno": 40, "parents": [34], "children": [36], "function": "minimumScore", "code": "c, d = edges[j]"}, "36": {"lineno": 41, "parents": [35], "children": [37, 38], "function": "minimumScore", "code": "_if: d in children[c]"}, "37": {"lineno": 42, "parents": [36], "children": [38], "function": "minimumScore", "code": "c, d = (d, c)"}, "38": {"lineno": 44, "parents": [36, 37], "children": [40, 39], "function": "minimumScore", "code": "_if: c in children[a] and a != c"}, "39": {"lineno": 45, "parents": [38], "children": [43], "function": "minimumScore", "code": "cands = [subXors[c], subXors[a] ^ subXors[c], xors ^ subXors[a]]"}, "40": {"lineno": 46, "parents": [38], "children": [41, 42], "function": "minimumScore", "code": "_if: a in children[c] and a != c"}, "41": {"lineno": 47, "parents": [40], "children": [43], "function": "minimumScore", "code": "cands = [subXors[a], subXors[c] ^ subXors[a], xors ^ subXors[c]]"}, "42": {"lineno": 49, "parents": [40], "children": [43], "function": "minimumScore", "code": "cands = [subXors[a], subXors[c], xors ^ subXors[a] ^ subXors[c]]"}, "43": {"lineno": 50, "parents": [41, 42, 39], "children": [33], "calls": ["max", "min", "min"], "function": "minimumScore", "code": "ans = min(ans, max(cands) - min(cands))"}, "44": {"lineno": 52, "parents": [27], "children": [2], "function": "minimumScore", "code": "return ans"}, "45": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2332, "task_title": "The Latest Time to Catch a Bus", "difficulty": 2, "func_name": "latestTimeCatchTheBus", "description": "You are given a 0-indexed integer array `buses` of length `n`, where\n`buses[i]` represents the departure time of the `ith` bus. You are also given\na 0-indexed integer array `passengers` of length `m`, where `passengers[j]`\nrepresents the arrival time of the `jth` passenger. All bus departure times\nare unique. All passenger arrival times are unique.\n\nYou are given an integer `capacity`, which represents the maximum number of\npassengers that can get on each bus.\n\nWhen a passenger arrives, they will wait in line for the next available bus.\nYou can get on a bus that departs at `x` minutes if you arrive at `y` minutes\nwhere `y <= x`, and the bus is not full. Passengers with the earliest arrival\ntimes get on the bus first.\n\nMore formally when a bus arrives, either:\n\n* If `capacity` or fewer passengers are waiting for a bus, they will all get on the bus, or\n* The `capacity` passengers with the earliest arrival times will get on the bus.\n\nReturn the latest time you may arrive at the bus station to catch a bus. You\ncannot arrive at the same time as another passenger.\n\nNote: The arrays `buses` and `passengers` are not necessarily sorted.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def latestTimeCatchTheBus(self, buses: List[int], passengers: List[int], capacity: int) -> int:\n    buses.sort()\n    passengers.sort()\n\n    if passengers[0] > buses[-1]:\n      return buses[-1]\n\n    ans = passengers[0] - 1\n    i = 0\n    j = 0\n    while i < len(buses):\n      arrived = 0\n      while arrived < capacity and j < len(passengers) and passengers[j] <= buses[i]:\n        if j > 0 and passengers[j] != passengers[j - 1] + 1:\n          ans = passengers[j] - 1\n        j += 1\n        arrived += 1\n\n      if arrived < capacity and j > 0 and passengers[j - 1] != buses[i]:\n        ans = buses[i]\n      i += 1\n\n    return ans\n", "blocks": [{"type": "if", "start": 16, "end": 17}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 25, "end": 26}], "target_lines": [17, 26, 31], "cfg": {"0": {"lineno": 0, "parents": [], "children": [21], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "latestTimeCatchTheBus", "code": "enter: latestTimeCatchTheBus(self, buses, passengers, capacity)"}, "2": {"lineno": 12, "parents": [20, 6], "children": [], "function": "latestTimeCatchTheBus", "code": "exit: latestTimeCatchTheBus(self, buses, passengers, capacity)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["sort"], "function": "latestTimeCatchTheBus", "code": "buses.sort()"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["sort"], "function": "latestTimeCatchTheBus", "code": "passengers.sort()"}, "5": {"lineno": 16, "parents": [4], "children": [6, 7], "function": "latestTimeCatchTheBus", "code": "_if: passengers[0] > buses[-1]"}, "6": {"lineno": 17, "parents": [5], "children": [2], "function": "latestTimeCatchTheBus", "code": "return buses[-1]"}, "7": {"lineno": 19, "parents": [5], "children": [8], "function": "latestTimeCatchTheBus", "code": "ans = passengers[0] - 1"}, "8": {"lineno": 20, "parents": [7], "children": [9], "function": "latestTimeCatchTheBus", "code": "i = 0"}, "9": {"lineno": 21, "parents": [8], "children": [10], "function": "latestTimeCatchTheBus", "code": "j = 0"}, "10": {"lineno": 22, "parents": [9, 19], "children": [11, 20], "calls": ["len"], "function": "latestTimeCatchTheBus", "code": "_while: i < len(buses)"}, "11": {"lineno": 23, "parents": [10], "children": [12], "function": "latestTimeCatchTheBus", "code": "arrived = 0"}, "12": {"lineno": 24, "parents": [16, 11], "children": [17, 13], "function": "latestTimeCatchTheBus", "code": "_while: arrived < capacity and j < len(passengers) and (passengers[j] <= buses[i])"}, "13": {"lineno": 25, "parents": [12], "children": [14, 15], "function": "latestTimeCatchTheBus", "code": "_if: j > 0 and passengers[j] != passengers[j - 1] + 1"}, "14": {"lineno": 26, "parents": [13], "children": [15], "function": "latestTimeCatchTheBus", "code": "ans = passengers[j] - 1"}, "15": {"lineno": 27, "parents": [13, 14], "children": [16], "function": "latestTimeCatchTheBus", "code": "j += 1"}, "16": {"lineno": 28, "parents": [15], "children": [12], "function": "latestTimeCatchTheBus", "code": "arrived += 1"}, "17": {"lineno": 30, "parents": [12], "children": [18, 19], "function": "latestTimeCatchTheBus", "code": "_if: arrived < capacity and j > 0 and (passengers[j - 1] != buses[i])"}, "18": {"lineno": 31, "parents": [17], "children": [19], "function": "latestTimeCatchTheBus", "code": "ans = buses[i]"}, "19": {"lineno": 32, "parents": [17, 18], "children": [10], "function": "latestTimeCatchTheBus", "code": "i += 1"}, "20": {"lineno": 34, "parents": [10], "children": [2], "function": "latestTimeCatchTheBus", "code": "return ans"}, "21": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2337, "task_title": "Move Pieces to Obtain a String", "difficulty": 2, "func_name": "canChange", "description": "You are given two strings `start` and `target`, both of length `n`. Each\nstring consists only of the characters `'L'`, `'R'`, and `'_'` where:\n\n* The characters `'L'` and `'R'` represent pieces, where a piece `'L'` can move to the left only if there is a blank space directly to its left, and a piece `'R'` can move to the right only if there is a blank space directly to its right.\n* The character `'_'` represents a blank space that can be occupied by any of the `'L'` or `'R'` pieces.\n\nReturn `true` if it is possible to obtain the string `target` by moving the\npieces of the string `start` any number of times. Otherwise, return `false`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def canChange(self, start: str, target: str) -> bool:\n    n = len(start)\n    i = 0\n    j = 0\n\n    while i <= n and j <= n:\n      while i < n and start[i] == '_':\n        i += 1\n      while j < n and target[j] == '_':\n        j += 1\n      if i == n or j == n:\n        return i == n and j == n\n      if start[i] != target[j]:\n        return False\n      if start[i] == 'R' and i > j:\n        return False\n      if start[i] == 'L' and i < j:\n        return False\n      i += 1\n      j += 1\n\n    return True\n", "blocks": [{"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 24, "end": 25}, {"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 28, "end": 29}], "target_lines": [23, 25, 27, 29], "cfg": {"0": {"lineno": 0, "parents": [], "children": [22], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "canChange", "code": "enter: canChange(self, start, target)"}, "2": {"lineno": 12, "parents": [16, 18, 21, 12, 14], "children": [], "function": "canChange", "code": "exit: canChange(self, start, target)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "canChange", "code": "n = len(start)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "canChange", "code": "i = 0"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "canChange", "code": "j = 0"}, "6": {"lineno": 17, "parents": [20, 5], "children": [21, 7], "function": "canChange", "code": "_while: i <= n and j <= n"}, "7": {"lineno": 18, "parents": [8, 6], "children": [8, 9], "function": "canChange", "code": "_while: i < n and start[i] == '_'"}, "8": {"lineno": 19, "parents": [7], "children": [21, 7], "function": "canChange", "code": "i += 1"}, "9": {"lineno": 20, "parents": [10, 7], "children": [10, 11], "function": "canChange", "code": "_while: j < n and target[j] == '_'"}, "10": {"lineno": 21, "parents": [9], "children": [9], "function": "canChange", "code": "j += 1"}, "11": {"lineno": 22, "parents": [9], "children": [12, 13], "function": "canChange", "code": "_if: i == n or j == n"}, "12": {"lineno": 23, "parents": [11], "children": [2], "function": "canChange", "code": "return i == n and j == n"}, "13": {"lineno": 24, "parents": [11], "children": [14, 15], "function": "canChange", "code": "_if: start[i] != target[j]"}, "14": {"lineno": 25, "parents": [13], "children": [2], "function": "canChange", "code": "return False"}, "15": {"lineno": 26, "parents": [13], "children": [16, 17], "function": "canChange", "code": "_if: start[i] == 'R' and i > j"}, "16": {"lineno": 27, "parents": [15], "children": [2], "function": "canChange", "code": "return False"}, "17": {"lineno": 28, "parents": [15], "children": [18, 19], "function": "canChange", "code": "_if: start[i] == 'L' and i < j"}, "18": {"lineno": 29, "parents": [17], "children": [2], "function": "canChange", "code": "return False"}, "19": {"lineno": 30, "parents": [17], "children": [20], "function": "canChange", "code": "i += 1"}, "20": {"lineno": 31, "parents": [19], "children": [6], "function": "canChange", "code": "j += 1"}, "21": {"lineno": 33, "parents": [8, 6], "children": [2], "function": "canChange", "code": "return True"}, "22": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2392, "task_title": "Build a Matrix With Conditions", "difficulty": 3, "func_name": "buildMatrix", "description": "You are given a positive integer `k`. You are also given:\n\n* a 2D integer array `rowConditions` of size `n` where `rowConditions[i] = [abovei, belowi]`, and\n* a 2D integer array `colConditions` of size `m` where `colConditions[i] = [lefti, righti]`.\n\nThe two arrays contain integers from `1` to `k`.\n\nYou have to build a `k x k` matrix that contains each of the numbers from `1`\nto `k` exactly once. The remaining cells should have the value `0`.\n\nThe matrix should also satisfy the following conditions:\n\n* The number `abovei` should appear in a row that is strictly above the row at which the number `belowi` appears for all `i` from `0` to `n - 1`.\n* The number `lefti` should appear in a column that is strictly left of the column at which the number `righti` appears for all `i` from `0` to `m - 1`.\n\nReturn any matrix that satisfies the conditions. If no answer exists, return\nan empty matrix.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def buildMatrix(self, k: int, rowConditions: List[List[int]], colConditions: List[List[int]]) -> List[List[int]]:\n    rowOrder = self._topologicalSort(rowConditions, k)\n    if not rowOrder:\n      return []\n\n    colOrder = self._topologicalSort(colConditions, k)\n    if not colOrder:\n      return []\n\n    ans = [[0] * k for _ in range(k)]\n    nodeToRowIndex = [0] * (k + 1)\n\n    for i, node in enumerate(rowOrder):\n      nodeToRowIndex[node] = i\n\n    for j, node in enumerate(colOrder):\n      i = nodeToRowIndex[node]\n      ans[i][j] = node\n\n    return ans\n\n  def _topologicalSort(self, conditions: List[List[int]], n: int) -> List[int]:\n    order = []\n    graph = [[] for _ in range(n + 1)]\n    inDegrees = [0] * (n + 1)\n\n    for u, v in conditions:\n      graph[u].append(v)\n      inDegrees[v] += 1\n\n    q = collections.deque([i for i in range(1, n + 1) if inDegrees[i] == 0])\n\n    while q:\n      u = q.popleft()\n      order.append(u)\n      for v in graph[u]:\n        inDegrees[v] -= 1\n        if inDegrees[v] == 0:\n          q.append(v)\n\n    if len(order) == n:\n      return order\n    else:\n      return []\n", "blocks": [{"type": "if", "start": 14, "end": 15}, {"type": "if", "start": 18, "end": 19}, {"type": "if", "start": 52, "end": 53}, {"type": "else", "start": 54, "end": 55}, {"type": "if", "start": 49, "end": 50}], "target_lines": [15, 19, 50, 53, 55], "cfg": {"0": {"lineno": 0, "parents": [], "children": [44], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "buildMatrix", "code": "enter: buildMatrix(self, k, rowConditions, colConditions)"}, "2": {"lineno": 12, "parents": [8, 20, 5], "children": [], "function": "buildMatrix", "code": "exit: buildMatrix(self, k, rowConditions, colConditions)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["_topologicalSort"], "function": "buildMatrix", "code": "rowOrder = self._topologicalSort(rowConditions, k)"}, "4": {"lineno": 14, "parents": [3, 22], "children": [5, 6], "function": "buildMatrix", "code": "_if: not rowOrder"}, "5": {"lineno": 15, "parents": [4], "children": [2], "function": "buildMatrix", "code": "return []"}, "6": {"lineno": 17, "parents": [4], "children": [7], "calls": ["_topologicalSort"], "function": "buildMatrix", "code": "colOrder = self._topologicalSort(colConditions, k)"}, "7": {"lineno": 18, "parents": [6, 22], "children": [8, 9], "function": "buildMatrix", "code": "_if: not colOrder"}, "8": {"lineno": 19, "parents": [7], "children": [2], "function": "buildMatrix", "code": "return []"}, "9": {"lineno": 21, "parents": [7], "children": [10], "function": "buildMatrix", "code": "ans = [[0] * k for _ in range(k)]"}, "10": {"lineno": 22, "parents": [9], "children": [11], "function": "buildMatrix", "code": "nodeToRowIndex = [0] * (k + 1)"}, "11": {"lineno": 24, "parents": [10], "children": [12], "function": "buildMatrix", "code": "__iv = iter(enumerate(rowOrder))"}, "12": {"lineno": 24, "parents": [11, 14], "children": [13, 15], "calls": ["enumerate"], "function": "buildMatrix", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 24, "parents": [12], "children": [14], "function": "buildMatrix", "code": "i, node = next(__iv)"}, "14": {"lineno": 25, "parents": [13], "children": [12], "function": "buildMatrix", "code": "nodeToRowIndex[node] = i"}, "15": {"lineno": 27, "parents": [12], "children": [16], "function": "buildMatrix", "code": "__iv = iter(enumerate(colOrder))"}, "16": {"lineno": 27, "parents": [19, 15], "children": [17, 20], "calls": ["enumerate"], "function": "buildMatrix", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 27, "parents": [16], "children": [18], "function": "buildMatrix", "code": "j, node = next(__iv)"}, "18": {"lineno": 28, "parents": [17], "children": [19], "function": "buildMatrix", "code": "i = nodeToRowIndex[node]"}, "19": {"lineno": 29, "parents": [18], "children": [16], "function": "buildMatrix", "code": "ans[i][j] = node"}, "20": {"lineno": 31, "parents": [16], "children": [2], "function": "buildMatrix", "code": "return ans"}, "21": {"lineno": 33, "parents": [3, 6], "children": [23], "function": "_topologicalSort", "code": "enter: _topologicalSort(self, conditions, n)"}, "22": {"lineno": 33, "parents": [42, 43], "children": [], "function": "_topologicalSort", "code": "exit: _topologicalSort(self, conditions, n)"}, "23": {"lineno": 34, "parents": [21], "children": [24], "function": "_topologicalSort", "code": "order = []"}, "24": {"lineno": 35, "parents": [23], "children": [25], "function": "_topologicalSort", "code": "graph = [[] for _ in range(n + 1)]"}, "25": {"lineno": 36, "parents": [24], "children": [26], "function": "_topologicalSort", "code": "inDegrees = [0] * (n + 1)"}, "26": {"lineno": 38, "parents": [25], "children": [27], "function": "_topologicalSort", "code": "__iv = iter(conditions)"}, "27": {"lineno": 38, "parents": [26, 30], "children": [28, 31], "function": "_topologicalSort", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 38, "parents": [27], "children": [29], "function": "_topologicalSort", "code": "u, v = next(__iv)"}, "29": {"lineno": 39, "parents": [28], "children": [30], "calls": ["append"], "function": "_topologicalSort", "code": "graph[u].append(v)"}, "30": {"lineno": 40, "parents": [29], "children": [27], "function": "_topologicalSort", "code": "inDegrees[v] += 1"}, "31": {"lineno": 42, "parents": [27], "children": [32], "calls": ["deque"], "function": "_topologicalSort", "code": "q = collections.deque([i for i in range(1, n + 1) if inDegrees[i] == 0])"}, "32": {"lineno": 44, "parents": [36, 31], "children": [33, 41], "function": "_topologicalSort", "code": "_while: q"}, "33": {"lineno": 45, "parents": [32], "children": [34], "calls": ["popleft"], "function": "_topologicalSort", "code": "u = q.popleft()"}, "34": {"lineno": 46, "parents": [33], "children": [35], "calls": ["append"], "function": "_topologicalSort", "code": "order.append(u)"}, "35": {"lineno": 47, "parents": [34], "children": [36], "function": "_topologicalSort", "code": "__iv = iter(graph[u])"}, "36": {"lineno": 47, "parents": [40, 35, 39], "children": [32, 37], "function": "_topologicalSort", "code": "_for: __iv.__length__hint__() > 0"}, "37": {"lineno": 47, "parents": [36], "children": [38], "function": "_topologicalSort", "code": "v = next(__iv)"}, "38": {"lineno": 48, "parents": [37], "children": [39], "function": "_topologicalSort", "code": "inDegrees[v] -= 1"}, "39": {"lineno": 49, "parents": [38], "children": [40, 36], "function": "_topologicalSort", "code": "_if: inDegrees[v] == 0"}, "40": {"lineno": 50, "parents": [39], "children": [36], "calls": ["append"], "function": "_topologicalSort", "code": "q.append(v)"}, "41": {"lineno": 52, "parents": [32], "children": [42, 43], "calls": ["len"], "function": "_topologicalSort", "code": "_if: len(order) == n"}, "42": {"lineno": 53, "parents": [41], "children": [22], "function": "_topologicalSort", "code": "return order"}, "43": {"lineno": 55, "parents": [41], "children": [22], "function": "_topologicalSort", "code": "return []"}, "44": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2437, "task_title": "Number of Valid Clock Times", "difficulty": 1, "func_name": "countTime", "description": "You are given a string of length `5` called `time`, representing the current\ntime on a digital clock in the format `\"hh:mm\"`. The earliest possible time is\n`\"00:00\"` and the latest possible time is `\"23:59\"`.\n\nIn the string `time`, the digits represented by the `?` symbol are unknown,\nand must be replaced with a digit from `0` to `9`.\n\nReturn an integer `answer`, the number of valid clock times that can be\ncreated by replacing every `?` with a digit from `0` to `9`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def countTime(self, time: str) -> int:\n    ans = 1\n    if time[3] == '?':\n      ans *= 6\n    if time[4] == '?':\n      ans *= 10\n\n    if time[0] == '?' and time[1] == '?':\n      return ans * 24\n    if time[0] == '?':\n      if time[1] < '4':\n        return ans * 3\n      else:\n        return ans * 2\n    if time[1] == '?':\n      if time[0] == '2':\n        return ans * 4\n      else:\n        return ans * 10\n    return ans\n", "blocks": [{"type": "if", "start": 14, "end": 15}, {"type": "if", "start": 16, "end": 17}, {"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 25}, {"type": "if", "start": 26, "end": 30}, {"type": "if", "start": 22, "end": 23}, {"type": "else", "start": 24, "end": 25}, {"type": "if", "start": 27, "end": 28}, {"type": "else", "start": 29, "end": 30}], "target_lines": [15, 17, 20, 22, 23, 25, 27, 28, 30], "cfg": {"0": {"lineno": 0, "parents": [], "children": [19], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "countTime", "code": "enter: countTime(self, time)"}, "2": {"lineno": 12, "parents": [16, 17, 18, 9, 12, 13], "children": [], "function": "countTime", "code": "exit: countTime(self, time)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "countTime", "code": "ans = 1"}, "4": {"lineno": 14, "parents": [3], "children": [5, 6], "function": "countTime", "code": "_if: time[3] == '?'"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "countTime", "code": "ans *= 6"}, "6": {"lineno": 16, "parents": [4, 5], "children": [8, 7], "function": "countTime", "code": "_if: time[4] == '?'"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "countTime", "code": "ans *= 10"}, "8": {"lineno": 19, "parents": [6, 7], "children": [9, 10], "function": "countTime", "code": "_if: time[0] == '?' and time[1] == '?'"}, "9": {"lineno": 20, "parents": [8], "children": [2], "function": "countTime", "code": "return ans * 24"}, "10": {"lineno": 21, "parents": [8], "children": [11, 14], "function": "countTime", "code": "_if: time[0] == '?'"}, "11": {"lineno": 22, "parents": [10], "children": [12, 13], "function": "countTime", "code": "_if: time[1] < '4'"}, "12": {"lineno": 23, "parents": [11], "children": [2], "function": "countTime", "code": "return ans * 3"}, "13": {"lineno": 25, "parents": [11], "children": [2], "function": "countTime", "code": "return ans * 2"}, "14": {"lineno": 26, "parents": [10], "children": [18, 15], "function": "countTime", "code": "_if: time[1] == '?'"}, "15": {"lineno": 27, "parents": [14], "children": [16, 17], "function": "countTime", "code": "_if: time[0] == '2'"}, "16": {"lineno": 28, "parents": [15], "children": [2], "function": "countTime", "code": "return ans * 4"}, "17": {"lineno": 30, "parents": [15], "children": [2], "function": "countTime", "code": "return ans * 10"}, "18": {"lineno": 31, "parents": [14], "children": [2], "function": "countTime", "code": "return ans"}, "19": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2456, "task_title": "Most Popular Video Creator", "difficulty": 2, "func_name": "mostPopularCreator", "description": "You are given two string arrays `creators` and `ids`, and an integer array\n`views`, all of length `n`. The `ith` video on a platform was created by\n`creator[i]`, has an id of `ids[i]`, and has `views[i]` views.\n\nThe popularity of a creator is the sum of the number of views on all of the\ncreator's videos. Find the creator with the highest popularity and the id of\ntheir most viewed video.\n\n* If multiple creators have the highest popularity, find all of them.\n* If multiple videos have the highest view count for a creator, find the lexicographically smallest id.\n\nReturn a 2D array of strings `answer` where `answer[i] = [creatori, idi]`\nmeans that `creatori` has the highest popularity and `idi` is the id of their\nmost popular video. The answer can be returned in any order.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Creator:\n  def __init__(self, popularity: int, videoId: str, maxView: int):\n    self.popularity = popularity\n    self.videoId = videoId\n    self.maxView = maxView\n\n\nclass Solution:\n  def mostPopularCreator(self, creators: List[str], ids: List[str], views: List[int]) -> List[List[str]]:\n    ans = []\n    maxPopularity = 0\n    nameToCreator = {}\n\n    for name, id, view in zip(creators, ids, views):\n      if name not in nameToCreator:\n        nameToCreator[name] = Creator(view, id, view)\n        maxPopularity = max(maxPopularity, view)\n        continue\n      creator = nameToCreator[name]\n      creator.popularity += view\n      maxPopularity = max(maxPopularity, creator.popularity)\n      if creator.maxView < view or creator.maxView == view and creator.videoId > id:\n        creator.videoId = id\n        creator.maxView = view\n\n    for name, creator in nameToCreator.items():\n      if creator.popularity == maxPopularity:\n        ans.append([name, creator.videoId])\n\n    return ans\n", "blocks": [{"type": "if", "start": 25, "end": 28}, {"type": "if", "start": 32, "end": 34}, {"type": "if", "start": 37, "end": 38}], "target_lines": [26, 27, 28, 33, 34, 38], "cfg": {"0": {"lineno": 0, "parents": [], "children": [30], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, popularity, videoId, maxView)"}, "2": {"lineno": 12, "parents": [5], "children": [], "function": "__init__", "code": "exit: __init__(self, popularity, videoId, maxView)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "__init__", "code": "self.popularity = popularity"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "__init__", "code": "self.videoId = videoId"}, "5": {"lineno": 15, "parents": [4], "children": [2], "function": "__init__", "code": "self.maxView = maxView"}, "6": {"lineno": 19, "parents": [], "children": [8], "function": "mostPopularCreator", "code": "enter: mostPopularCreator(self, creators, ids, views)"}, "7": {"lineno": 19, "parents": [29], "children": [], "function": "mostPopularCreator", "code": "exit: mostPopularCreator(self, creators, ids, views)"}, "8": {"lineno": 20, "parents": [6], "children": [9], "function": "mostPopularCreator", "code": "ans = []"}, "9": {"lineno": 21, "parents": [8], "children": [10], "function": "mostPopularCreator", "code": "maxPopularity = 0"}, "10": {"lineno": 22, "parents": [9], "children": [11], "function": "mostPopularCreator", "code": "nameToCreator = {}"}, "11": {"lineno": 24, "parents": [10], "children": [12], "function": "mostPopularCreator", "code": "__iv = iter(zip(creators, ids, views))"}, "12": {"lineno": 24, "parents": [17, 11, 21, 23], "children": [24, 13], "calls": ["zip"], "function": "mostPopularCreator", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 24, "parents": [12], "children": [14], "function": "mostPopularCreator", "code": "name, id, view = next(__iv)"}, "14": {"lineno": 25, "parents": [13], "children": [18, 15], "function": "mostPopularCreator", "code": "_if: name not in nameToCreator"}, "15": {"lineno": 26, "parents": [14], "children": [16], "calls": ["Creator"], "function": "mostPopularCreator", "code": "nameToCreator[name] = Creator(view, id, view)"}, "16": {"lineno": 27, "parents": [15], "children": [17], "calls": ["max"], "function": "mostPopularCreator", "code": "maxPopularity = max(maxPopularity, view)"}, "17": {"lineno": 28, "parents": [16], "children": [12], "function": "mostPopularCreator", "code": "continue"}, "18": {"lineno": 29, "parents": [14], "children": [19], "function": "mostPopularCreator", "code": "creator = nameToCreator[name]"}, "19": {"lineno": 30, "parents": [18], "children": [20], "function": "mostPopularCreator", "code": "creator.popularity += view"}, "20": {"lineno": 31, "parents": [19], "children": [21], "calls": ["max"], "function": "mostPopularCreator", "code": "maxPopularity = max(maxPopularity, creator.popularity)"}, "21": {"lineno": 32, "parents": [20], "children": [12, 22], "function": "mostPopularCreator", "code": "_if: creator.maxView < view or (creator.maxView == view and creator.videoId > id)"}, "22": {"lineno": 33, "parents": [21], "children": [23], "function": "mostPopularCreator", "code": "creator.videoId = id"}, "23": {"lineno": 34, "parents": [22], "children": [12], "function": "mostPopularCreator", "code": "creator.maxView = view"}, "24": {"lineno": 36, "parents": [12], "children": [25], "function": "mostPopularCreator", "code": "__iv = iter(nameToCreator.items())"}, "25": {"lineno": 36, "parents": [24, 27, 28], "children": [26, 29], "calls": ["items"], "function": "mostPopularCreator", "code": "_for: __iv.__length__hint__() > 0"}, "26": {"lineno": 36, "parents": [25], "children": [27], "function": "mostPopularCreator", "code": "name, creator = next(__iv)"}, "27": {"lineno": 37, "parents": [26], "children": [25, 28], "function": "mostPopularCreator", "code": "_if: creator.popularity == maxPopularity"}, "28": {"lineno": 38, "parents": [27], "children": [25], "calls": ["append"], "function": "mostPopularCreator", "code": "ans.append([name, creator.videoId])"}, "29": {"lineno": 40, "parents": [25], "children": [7], "function": "mostPopularCreator", "code": "return ans"}, "30": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2462, "task_title": "Total Cost to Hire K Workers", "difficulty": 2, "func_name": "totalCost", "description": "You are given a 0-indexed integer array `costs` where `costs[i]` is the cost\nof hiring the `ith` worker.\n\nYou are also given two integers `k` and `candidates`. We want to hire exactly\n`k` workers according to the following rules:\n\n* You will run `k` sessions and hire exactly one worker in each session.\n* In each hiring session, choose the worker with the lowest cost from either the first `candidates` workers or the last `candidates` workers. Break the tie by the smallest index. \n* For example, if `costs = [3,2,7,7,1,2]` and `candidates = 2`, then in the first hiring session, we will choose the `4th` worker because they have the lowest cost `[3,2,7,7,1,2]`.\n* In the second hiring session, we will choose `1st` worker because they have the same lowest cost as `4th` worker but they have the smallest index `[3,2,7,7,2]`. Please note that the indexing may be changed in the process.\n* If there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.\n* A worker can only be chosen once.\n\nReturn the total cost to hire exactly `k` workers.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def totalCost(self, costs: List[int], k: int, candidates: int) -> int:\n    ans = 0\n    i = 0\n    j = len(costs) - 1\n    minHeapL = []\n    minHeapR = []\n\n    for _ in range(k):\n      while len(minHeapL) < candidates and i <= j:\n        heapq.heappush(minHeapL, costs[i])\n        i += 1\n      while len(minHeapR) < candidates and i <= j:\n        heapq.heappush(minHeapR, costs[j])\n        j -= 1\n      if not minHeapL:\n        ans += heapq.heappop(minHeapR)\n      elif not minHeapR:\n        ans += heapq.heappop(minHeapL)\n      elif minHeapL[0] <= minHeapR[0]:\n        ans += heapq.heappop(minHeapL)\n      else:\n        ans += heapq.heappop(minHeapR)\n\n    return ans\n", "blocks": [{"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 28, "end": 29}, {"type": "if", "start": 30, "end": 31}, {"type": "else", "start": 32, "end": 33}], "target_lines": [27, 29, 31, 33], "cfg": {"0": {"lineno": 0, "parents": [], "children": [25], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "totalCost", "code": "enter: totalCost(self, costs, k, candidates)"}, "2": {"lineno": 12, "parents": [24], "children": [], "function": "totalCost", "code": "exit: totalCost(self, costs, k, candidates)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "totalCost", "code": "ans = 0"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "totalCost", "code": "i = 0"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["len"], "function": "totalCost", "code": "j = len(costs) - 1"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "totalCost", "code": "minHeapL = []"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "totalCost", "code": "minHeapR = []"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "totalCost", "code": "__iv = iter(range(k))"}, "9": {"lineno": 19, "parents": [18, 20, 22, 23, 8], "children": [24, 10], "calls": ["range"], "function": "totalCost", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "totalCost", "code": "_ = next(__iv)"}, "11": {"lineno": 20, "parents": [10, 13], "children": [12, 14], "function": "totalCost", "code": "_while: len(minHeapL) < candidates and i <= j"}, "12": {"lineno": 21, "parents": [11], "children": [13], "calls": ["heappush"], "function": "totalCost", "code": "heapq.heappush(minHeapL, costs[i])"}, "13": {"lineno": 22, "parents": [12], "children": [11], "function": "totalCost", "code": "i += 1"}, "14": {"lineno": 23, "parents": [16, 11], "children": [17, 15], "function": "totalCost", "code": "_while: len(minHeapR) < candidates and i <= j"}, "15": {"lineno": 24, "parents": [14], "children": [16], "calls": ["heappush"], "function": "totalCost", "code": "heapq.heappush(minHeapR, costs[j])"}, "16": {"lineno": 25, "parents": [15], "children": [14], "function": "totalCost", "code": "j -= 1"}, "17": {"lineno": 26, "parents": [14], "children": [18, 19], "function": "totalCost", "code": "_if: not minHeapL"}, "18": {"lineno": 27, "parents": [17], "children": [9], "calls": ["heappop"], "function": "totalCost", "code": "ans += heapq.heappop(minHeapR)"}, "19": {"lineno": 28, "parents": [17], "children": [20, 21], "function": "totalCost", "code": "_if: not minHeapR"}, "20": {"lineno": 29, "parents": [19], "children": [9], "calls": ["heappop"], "function": "totalCost", "code": "ans += heapq.heappop(minHeapL)"}, "21": {"lineno": 30, "parents": [19], "children": [22, 23], "function": "totalCost", "code": "_if: minHeapL[0] <= minHeapR[0]"}, "22": {"lineno": 31, "parents": [21], "children": [9], "calls": ["heappop"], "function": "totalCost", "code": "ans += heapq.heappop(minHeapL)"}, "23": {"lineno": 33, "parents": [21], "children": [9], "calls": ["heappop"], "function": "totalCost", "code": "ans += heapq.heappop(minHeapR)"}, "24": {"lineno": 35, "parents": [9], "children": [2], "function": "totalCost", "code": "return ans"}, "25": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2467, "task_title": "Most Profitable Path in a Tree", "difficulty": 2, "func_name": "mostProfitablePath", "description": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1`, rooted\nat node `0`. You are given a 2D integer array `edges` of length `n - 1` where\n`edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and\n`bi` in the tree.\n\nAt every node `i`, there is a gate. You are also given an array of even\nintegers `amount`, where `amount[i]` represents:\n\n* the price needed to open the gate at node `i`, if `amount[i]` is negative, or,\n* the cash reward obtained on opening the gate at node `i`, otherwise.\n\nThe game goes on as follows:\n\n* Initially, Alice is at node `0` and Bob is at node `bob`.\n* At every second, Alice and Bob each move to an adjacent node. Alice moves towards some leaf node, while Bob moves towards node `0`.\n* For every node along their path, Alice and Bob either spend money to open the gate at that node, or accept the reward. Note that: \n* If the gate is already open, no price will be required, nor will there be any cash reward.\n* If Alice and Bob reach the node simultaneously, they share the price/reward for opening the gate there. In other words, if the price to open the gate is `c`, then both Alice and Bob pay `c / 2` each. Similarly, if the reward at the gate is `c`, both of them receive `c / 2` each.\n* If Alice reaches a leaf node, she stops moving. Similarly, if Bob reaches node `0`, he stops moving. Note that these events are independent of each other.\n\nReturn the maximum net income Alice can have if she travels towards the\noptimal leaf node.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def mostProfitablePath(self, edges: List[List[int]], bob: int, amount: List[int]) -> int:\n    n = len(amount)\n    tree = [[] for _ in range(n)]\n    parent = [0] * n\n    aliceDist = [-1] * n\n\n    for u, v in edges:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    def dfs(u: int, prev: int, d: int) -> None:\n      parent[u] = prev\n      aliceDist[u] = d\n      for v in tree[u]:\n        if aliceDist[v] == -1:\n          dfs(v, u, d + 1)\n\n    dfs(0, -1, 0)\n\n    u = bob\n    bobDist = 0\n    while u != 0:\n      if bobDist < aliceDist[u]:\n        amount[u] = 0\n      elif bobDist == aliceDist[u]:\n        amount[u] //= 2\n      u = parent[u]\n      bobDist += 1\n\n    return self._getMoney(tree, 0, -1, amount)\n\n  def _getMoney(self, tree: List[List[int]], u: int, prev: int, amount: List[int]) -> int:\n    if len(tree[u]) == 1 and tree[u][0] == prev:\n      return amount[u]\n\n    maxPath = -math.inf\n    for v in tree[u]:\n      if v != prev:\n        maxPath = max(maxPath, self._getMoney(tree, v, u, amount))\n\n    return amount[u] + maxPath\n", "blocks": [{"type": "if", "start": 44, "end": 45}, {"type": "if", "start": 34, "end": 35}, {"type": "if", "start": 49, "end": 50}, {"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 36, "end": 37}], "target_lines": [27, 35, 37, 45, 50], "cfg": {"0": {"lineno": 0, "parents": [], "children": [43], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "mostProfitablePath", "code": "enter: mostProfitablePath(self, edges, bob, amount)"}, "2": {"lineno": 12, "parents": [31], "children": [], "function": "mostProfitablePath", "code": "exit: mostProfitablePath(self, edges, bob, amount)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "mostProfitablePath", "code": "n = len(amount)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "mostProfitablePath", "code": "tree = [[] for _ in range(n)]"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "mostProfitablePath", "code": "parent = [0] * n"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "mostProfitablePath", "code": "aliceDist = [-1] * n"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "mostProfitablePath", "code": "__iv = iter(edges)"}, "8": {"lineno": 18, "parents": [11, 7], "children": [9, 21], "function": "mostProfitablePath", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "mostProfitablePath", "code": "u, v = next(__iv)"}, "10": {"lineno": 19, "parents": [9], "children": [11], "calls": ["append"], "function": "mostProfitablePath", "code": "tree[u].append(v)"}, "11": {"lineno": 20, "parents": [10], "children": [8], "calls": ["append"], "function": "mostProfitablePath", "code": "tree[v].append(u)"}, "12": {"lineno": 22, "parents": [20, 21], "children": [14], "function": "dfs", "code": "enter: dfs(u, prev, d)"}, "13": {"lineno": 22, "parents": [17], "children": [], "function": "dfs", "code": "exit: dfs(u, prev, d)"}, "14": {"lineno": 23, "parents": [12], "children": [15], "function": "dfs", "code": "parent[u] = prev"}, "15": {"lineno": 24, "parents": [14], "children": [16], "function": "dfs", "code": "aliceDist[u] = d"}, "16": {"lineno": 25, "parents": [15], "children": [17], "function": "dfs", "code": "__iv = iter(tree[u])"}, "17": {"lineno": 25, "parents": [16, 19, 20, 13], "children": [18, 13], "function": "dfs", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 25, "parents": [17], "children": [19], "function": "dfs", "code": "v = next(__iv)"}, "19": {"lineno": 26, "parents": [18], "children": [17, 20], "function": "dfs", "code": "_if: aliceDist[v] == -1"}, "20": {"lineno": 27, "parents": [19], "children": [17], "calls": ["dfs"], "function": "dfs", "code": "dfs(v, u, d + 1)"}, "21": {"lineno": 29, "parents": [8], "children": [22], "calls": ["dfs"], "function": "mostProfitablePath", "code": "dfs(0, -1, 0)"}, "22": {"lineno": 31, "parents": [13, 21], "children": [23], "function": "mostProfitablePath", "code": "u = bob"}, "23": {"lineno": 32, "parents": [22], "children": [24], "function": "mostProfitablePath", "code": "bobDist = 0"}, "24": {"lineno": 33, "parents": [30, 23], "children": [25, 31], "calls": ["_getMoney"], "function": "mostProfitablePath", "code": "_while: u != 0"}, "25": {"lineno": 34, "parents": [24, 33], "children": [26, 27], "function": "mostProfitablePath", "code": "_if: bobDist < aliceDist[u]"}, "26": {"lineno": 35, "parents": [25], "children": [29], "function": "mostProfitablePath", "code": "amount[u] = 0"}, "27": {"lineno": 36, "parents": [25], "children": [28, 29], "function": "mostProfitablePath", "code": "_if: bobDist == aliceDist[u]"}, "28": {"lineno": 37, "parents": [27], "children": [29], "function": "mostProfitablePath", "code": "amount[u] //= 2"}, "29": {"lineno": 38, "parents": [26, 27, 28], "children": [30], "function": "mostProfitablePath", "code": "u = parent[u]"}, "30": {"lineno": 39, "parents": [29], "children": [24], "function": "mostProfitablePath", "code": "bobDist += 1"}, "31": {"lineno": 41, "parents": [24, 33], "children": [2], "function": "mostProfitablePath", "code": "return self._getMoney(tree, 0, -1, amount)"}, "32": {"lineno": 43, "parents": [24, 41], "children": [34], "function": "_getMoney", "code": "enter: _getMoney(self, tree, u, prev, amount)"}, "33": {"lineno": 43, "parents": [42, 35], "children": [], "function": "_getMoney", "code": "exit: _getMoney(self, tree, u, prev, amount)"}, "34": {"lineno": 44, "parents": [32], "children": [35, 36], "function": "_getMoney", "code": "_if: len(tree[u]) == 1 and tree[u][0] == prev"}, "35": {"lineno": 45, "parents": [34], "children": [33], "function": "_getMoney", "code": "return amount[u]"}, "36": {"lineno": 47, "parents": [34], "children": [37], "function": "_getMoney", "code": "maxPath = -math.inf"}, "37": {"lineno": 48, "parents": [36], "children": [38], "function": "_getMoney", "code": "__iv = iter(tree[u])"}, "38": {"lineno": 48, "parents": [40, 41, 37, 33], "children": [42, 39], "function": "_getMoney", "code": "_for: __iv.__length__hint__() > 0"}, "39": {"lineno": 48, "parents": [38], "children": [40], "function": "_getMoney", "code": "v = next(__iv)"}, "40": {"lineno": 49, "parents": [39], "children": [41, 38], "function": "_getMoney", "code": "_if: v != prev"}, "41": {"lineno": 50, "parents": [40], "children": [38], "calls": ["_getMoney", "max"], "function": "_getMoney", "code": "maxPath = max(maxPath, self._getMoney(tree, v, u, amount))"}, "42": {"lineno": 52, "parents": [38], "children": [33], "function": "_getMoney", "code": "return amount[u] + maxPath"}, "43": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2499, "task_title": "Minimum Total Cost to Make Arrays Unequal", "difficulty": 3, "func_name": "minimumTotalCost", "description": "You are given two 0-indexed integer arrays `nums1` and `nums2`, of equal\nlength `n`.\n\nIn one operation, you can swap the values of any two indices of `nums1`. The\ncost of this operation is the sum of the indices.\n\nFind the minimum total cost of performing the given operation any number of\ntimes such that `nums1[i] != nums2[i]` for all `0 <= i <= n - 1` after\nperforming all the operations.\n\nReturn the minimum total cost such that `nums1` and `nums2` satisfy the above\ncondition. In case it is not possible, return `-1`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumTotalCost(self, nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n    ans = 0\n    maxFreq = 0\n    maxFreqNum = 0\n    shouldBeSwapped = 0\n    conflictedNumCount = [0] * (n + 1)\n\n    for i, (num1, num2) in enumerate(zip(nums1, nums2)):\n      if num1 == num2:\n        conflictedNum = num1\n        conflictedNumCount[conflictedNum] += 1\n        if conflictedNumCount[conflictedNum] > maxFreq:\n          maxFreq = conflictedNumCount[conflictedNum]\n          maxFreqNum = conflictedNum\n        shouldBeSwapped += 1\n        ans += i\n\n    for i, (num1, num2) in enumerate(zip(nums1, nums2)):\n      if maxFreq * 2 <= shouldBeSwapped:\n        break\n      if num1 == num2:\n        continue\n\n      if num1 == maxFreqNum or num2 == maxFreqNum:\n        continue\n      shouldBeSwapped += 1\n      ans += i\n\n    if maxFreq * 2 > shouldBeSwapped:\n      return -1\n    else:\n      return ans\n", "blocks": [{"type": "if", "start": 41, "end": 42}, {"type": "else", "start": 43, "end": 44}, {"type": "if", "start": 21, "end": 28}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 33, "end": 34}, {"type": "if", "start": 36, "end": 37}, {"type": "if", "start": 24, "end": 26}], "target_lines": [22, 23, 24, 25, 26, 27, 28, 32, 34, 37, 42, 44], "cfg": {"0": {"lineno": 0, "parents": [], "children": [34], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumTotalCost", "code": "enter: minimumTotalCost(self, nums1, nums2)"}, "2": {"lineno": 12, "parents": [32, 33], "children": [], "function": "minimumTotalCost", "code": "exit: minimumTotalCost(self, nums1, nums2)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "minimumTotalCost", "code": "n = len(nums1)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "minimumTotalCost", "code": "ans = 0"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "minimumTotalCost", "code": "maxFreq = 0"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "minimumTotalCost", "code": "maxFreqNum = 0"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "minimumTotalCost", "code": "shouldBeSwapped = 0"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "minimumTotalCost", "code": "conflictedNumCount = [0] * (n + 1)"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "minimumTotalCost", "code": "__iv = iter(enumerate(zip(nums1, nums2)))"}, "10": {"lineno": 20, "parents": [9, 19, 12], "children": [11, 20], "calls": ["zip", "enumerate"], "function": "minimumTotalCost", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "minimumTotalCost", "code": "i, (num1, num2) = next(__iv)"}, "12": {"lineno": 21, "parents": [11], "children": [10, 13], "function": "minimumTotalCost", "code": "_if: num1 == num2"}, "13": {"lineno": 22, "parents": [12], "children": [14], "function": "minimumTotalCost", "code": "conflictedNum = num1"}, "14": {"lineno": 23, "parents": [13], "children": [15], "function": "minimumTotalCost", "code": "conflictedNumCount[conflictedNum] += 1"}, "15": {"lineno": 24, "parents": [14], "children": [16, 18], "function": "minimumTotalCost", "code": "_if: conflictedNumCount[conflictedNum] > maxFreq"}, "16": {"lineno": 25, "parents": [15], "children": [17], "function": "minimumTotalCost", "code": "maxFreq = conflictedNumCount[conflictedNum]"}, "17": {"lineno": 26, "parents": [16], "children": [18], "function": "minimumTotalCost", "code": "maxFreqNum = conflictedNum"}, "18": {"lineno": 27, "parents": [17, 15], "children": [19], "function": "minimumTotalCost", "code": "shouldBeSwapped += 1"}, "19": {"lineno": 28, "parents": [18], "children": [10], "function": "minimumTotalCost", "code": "ans += i"}, "20": {"lineno": 30, "parents": [10], "children": [21], "function": "minimumTotalCost", "code": "__iv = iter(enumerate(zip(nums1, nums2)))"}, "21": {"lineno": 30, "parents": [26, 20, 28, 30], "children": [22, 31], "calls": ["zip", "enumerate"], "function": "minimumTotalCost", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 30, "parents": [21], "children": [23], "function": "minimumTotalCost", "code": "i, (num1, num2) = next(__iv)"}, "23": {"lineno": 31, "parents": [22], "children": [24, 25], "function": "minimumTotalCost", "code": "_if: maxFreq * 2 <= shouldBeSwapped"}, "24": {"lineno": 32, "parents": [23], "children": [31], "function": "minimumTotalCost", "code": "break"}, "25": {"lineno": 33, "parents": [23], "children": [26, 27], "function": "minimumTotalCost", "code": "_if: num1 == num2"}, "26": {"lineno": 34, "parents": [25], "children": [21], "function": "minimumTotalCost", "code": "continue"}, "27": {"lineno": 36, "parents": [25], "children": [28, 29], "function": "minimumTotalCost", "code": "_if: num1 == maxFreqNum or num2 == maxFreqNum"}, "28": {"lineno": 37, "parents": [27], "children": [21], "function": "minimumTotalCost", "code": "continue"}, "29": {"lineno": 38, "parents": [27], "children": [30], "function": "minimumTotalCost", "code": "shouldBeSwapped += 1"}, "30": {"lineno": 39, "parents": [29], "children": [21], "function": "minimumTotalCost", "code": "ans += i"}, "31": {"lineno": 41, "parents": [24, 21], "children": [32, 33], "function": "minimumTotalCost", "code": "_if: maxFreq * 2 > shouldBeSwapped"}, "32": {"lineno": 42, "parents": [31], "children": [2], "function": "minimumTotalCost", "code": "return -1"}, "33": {"lineno": 44, "parents": [31], "children": [2], "function": "minimumTotalCost", "code": "return ans"}, "34": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2503, "task_title": "Maximum Number of Points From Grid Queries", "difficulty": 3, "func_name": "maxPoints", "description": "You are given an `m x n` integer matrix `grid` and an array `queries` of size\n`k`.\n\nFind an array `answer` of size `k` such that for each integer `queries[i]` you\nstart in the top left cell of the matrix and repeat the following process:\n\n* If `queries[i]` is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all `4` directions: up, down, left, and right.\n* Otherwise, you do not get any points, and you end this process.\n\nAfter the process, `answer[i]` is the maximum number of points you can get.\nNote that for each query you are allowed to visit the same cell multiple\ntimes.\n\nReturn the resulting array `answer`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass IndexedQuery:\n  def __init__(self, queryIndex: int, query: int):\n    self.queryIndex = queryIndex\n    self.query = query\n\n  def __iter__(self):\n    yield self.queryIndex\n    yield self.query\n\n\nclass Solution:\n  def maxPoints(self, grid: List[List[int]], queries: List[int]) -> List[int]:\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    m = len(grid)\n    n = len(grid[0])\n    ans = [0] * len(queries)\n    minHeap = [(grid[0][0], 0, 0)]\n    seen = {(0, 0)}\n    accumulate = 0\n\n    for queryIndex, query in sorted([IndexedQuery(i, query) for i, query in enumerate(queries)], key=lambda iq: iq.query):\n      while minHeap:\n        val, i, j = heapq.heappop(minHeap)\n        if val >= query:\n          heapq.heappush(minHeap, (val, i, j))\n          break\n        accumulate += 1\n        for dx, dy in dirs:\n          x = i + dx\n          y = j + dy\n          if x < 0 or x == m or y < 0 or y == n:\n            continue\n          if (x, y) in seen:\n            continue\n          heapq.heappush(minHeap, (grid[x][y], x, y))\n          seen.add((x, y))\n      ans[queryIndex] = accumulate\n\n    return ans\n", "blocks": [{"type": "if", "start": 34, "end": 36}, {"type": "if", "start": 41, "end": 42}, {"type": "if", "start": 43, "end": 44}], "target_lines": [35, 36, 42, 44], "cfg": {"0": {"lineno": 0, "parents": [], "children": [40], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, queryIndex, query)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, queryIndex, query)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "__init__", "code": "self.queryIndex = queryIndex"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.query = query"}, "5": {"lineno": 16, "parents": [], "children": [7], "function": "__iter__", "code": "enter: __iter__(self)"}, "6": {"lineno": 16, "parents": [8], "children": [], "function": "__iter__", "code": "exit: __iter__(self)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "function": "__iter__", "code": "yield self.queryIndex"}, "8": {"lineno": 18, "parents": [7], "children": [6], "function": "__iter__", "code": "yield self.query"}, "9": {"lineno": 22, "parents": [], "children": [11], "function": "maxPoints", "code": "enter: maxPoints(self, grid, queries)"}, "10": {"lineno": 22, "parents": [39], "children": [], "function": "maxPoints", "code": "exit: maxPoints(self, grid, queries)"}, "11": {"lineno": 23, "parents": [9], "children": [12], "function": "maxPoints", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "12": {"lineno": 24, "parents": [11], "children": [13], "calls": ["len"], "function": "maxPoints", "code": "m = len(grid)"}, "13": {"lineno": 25, "parents": [12], "children": [14], "calls": ["len"], "function": "maxPoints", "code": "n = len(grid[0])"}, "14": {"lineno": 26, "parents": [13], "children": [15], "calls": ["len"], "function": "maxPoints", "code": "ans = [0] * len(queries)"}, "15": {"lineno": 27, "parents": [14], "children": [16], "function": "maxPoints", "code": "minHeap = [(grid[0][0], 0, 0)]"}, "16": {"lineno": 28, "parents": [15], "children": [17], "function": "maxPoints", "code": "seen = {(0, 0)}"}, "17": {"lineno": 29, "parents": [16], "children": [18], "function": "maxPoints", "code": "accumulate = 0"}, "18": {"lineno": 31, "parents": [17], "children": [19], "function": "maxPoints", "code": "__iv = iter(sorted([IndexedQuery(i, query) for i, query in enumerate(queries)], key=lambda iq: iq.query))"}, "19": {"lineno": 31, "parents": [18, 38], "children": [20, 39], "calls": ["sorted"], "function": "maxPoints", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 31, "parents": [19], "children": [21], "function": "maxPoints", "code": "queryIndex, query = next(__iv)"}, "21": {"lineno": 32, "parents": [20, 28], "children": [38, 22], "function": "maxPoints", "code": "_while: minHeap"}, "22": {"lineno": 33, "parents": [21], "children": [23], "calls": ["heappop"], "function": "maxPoints", "code": "val, i, j = heapq.heappop(minHeap)"}, "23": {"lineno": 34, "parents": [22], "children": [24, 26], "function": "maxPoints", "code": "_if: val >= query"}, "24": {"lineno": 35, "parents": [23], "children": [25], "calls": ["heappush"], "function": "maxPoints", "code": "heapq.heappush(minHeap, (val, i, j))"}, "25": {"lineno": 36, "parents": [24], "children": [38], "function": "maxPoints", "code": "break"}, "26": {"lineno": 37, "parents": [23], "children": [27], "function": "maxPoints", "code": "accumulate += 1"}, "27": {"lineno": 38, "parents": [26], "children": [28], "function": "maxPoints", "code": "__iv = iter(dirs)"}, "28": {"lineno": 38, "parents": [33, 27, 37, 35], "children": [21, 29], "function": "maxPoints", "code": "_for: __iv.__length__hint__() > 0"}, "29": {"lineno": 38, "parents": [28], "children": [30], "function": "maxPoints", "code": "dx, dy = next(__iv)"}, "30": {"lineno": 39, "parents": [29], "children": [31], "function": "maxPoints", "code": "x = i + dx"}, "31": {"lineno": 40, "parents": [30], "children": [32], "function": "maxPoints", "code": "y = j + dy"}, "32": {"lineno": 41, "parents": [31], "children": [33, 34], "function": "maxPoints", "code": "_if: x < 0 or x == m or y < 0 or (y == n)"}, "33": {"lineno": 42, "parents": [32], "children": [28], "function": "maxPoints", "code": "continue"}, "34": {"lineno": 43, "parents": [32], "children": [35, 36], "function": "maxPoints", "code": "_if: (x, y) in seen"}, "35": {"lineno": 44, "parents": [34], "children": [28], "function": "maxPoints", "code": "continue"}, "36": {"lineno": 45, "parents": [34], "children": [37], "calls": ["heappush"], "function": "maxPoints", "code": "heapq.heappush(minHeap, (grid[x][y], x, y))"}, "37": {"lineno": 46, "parents": [36], "children": [28], "calls": ["add"], "function": "maxPoints", "code": "seen.add((x, y))"}, "38": {"lineno": 47, "parents": [25, 21], "children": [19], "function": "maxPoints", "code": "ans[queryIndex] = accumulate"}, "39": {"lineno": 49, "parents": [19], "children": [10], "function": "maxPoints", "code": "return ans"}, "40": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2508, "task_title": "Add Edges to Make Degrees of All Nodes Even", "difficulty": 3, "func_name": "isPossible", "description": "There is an undirected graph consisting of `n` nodes numbered from `1` to `n`.\nYou are given the integer `n` and a 2D array `edges` where `edges[i] = [ai,\nbi]` indicates that there is an edge between nodes `ai` and `bi`. The graph\ncan be disconnected.\n\nYou can add at most two additional edges (possibly none) to this graph so that\nthere are no repeated edges and no self-loops.\n\nReturn `true` if it is possible to make the degree of each node in the graph\neven, otherwise return `false`.\n\nThe degree of a node is the number of edges connected to it.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def isPossible(self, n: int, edges: List[List[int]]) -> bool:\n    graph = [set() for _ in range(n)]\n\n    for u, v in edges:\n      graph[u - 1].add(v - 1)\n      graph[v - 1].add(u - 1)\n\n    oddNodes = [i for i, neighbor in enumerate(graph) if len(neighbor) & 1]\n    if not oddNodes:\n      return True\n    if len(oddNodes) == 2:\n      a, b = oddNodes\n      return any(a not in graph[i] and b not in graph[i] for i in range(n))\n    if len(oddNodes) == 4:\n      a, b, c, d = oddNodes\n      return (b not in graph[a] and d not in graph[c]) or (c not in graph[a] and d not in graph[b]) or (d not in graph[a] and c not in graph[b])\n    return False\n", "blocks": [{"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 22, "end": 24}, {"type": "if", "start": 25, "end": 27}], "target_lines": [21, 23, 24, 26, 27], "cfg": {"0": {"lineno": 0, "parents": [], "children": [19], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "isPossible", "code": "enter: isPossible(self, n, edges)"}, "2": {"lineno": 12, "parents": [17, 18, 11, 14], "children": [], "function": "isPossible", "code": "exit: isPossible(self, n, edges)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "isPossible", "code": "graph = [set() for _ in range(n)]"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "isPossible", "code": "__iv = iter(edges)"}, "5": {"lineno": 15, "parents": [8, 4], "children": [9, 6], "function": "isPossible", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "isPossible", "code": "u, v = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8], "calls": ["add"], "function": "isPossible", "code": "graph[u - 1].add(v - 1)"}, "8": {"lineno": 17, "parents": [7], "children": [5], "calls": ["add"], "function": "isPossible", "code": "graph[v - 1].add(u - 1)"}, "9": {"lineno": 19, "parents": [5], "children": [10], "function": "isPossible", "code": "oddNodes = [i for i, neighbor in enumerate(graph) if len(neighbor) & 1]"}, "10": {"lineno": 20, "parents": [9], "children": [11, 12], "function": "isPossible", "code": "_if: not oddNodes"}, "11": {"lineno": 21, "parents": [10], "children": [2], "function": "isPossible", "code": "return True"}, "12": {"lineno": 22, "parents": [10], "children": [13, 15], "calls": ["len"], "function": "isPossible", "code": "_if: len(oddNodes) == 2"}, "13": {"lineno": 23, "parents": [12], "children": [14], "calls": ["any"], "function": "isPossible", "code": "a, b = oddNodes"}, "14": {"lineno": 24, "parents": [13], "children": [2], "function": "isPossible", "code": "return any((a not in graph[i] and b not in graph[i] for i in range(n)))"}, "15": {"lineno": 25, "parents": [12], "children": [16, 18], "calls": ["len"], "function": "isPossible", "code": "_if: len(oddNodes) == 4"}, "16": {"lineno": 26, "parents": [15], "children": [17], "function": "isPossible", "code": "a, b, c, d = oddNodes"}, "17": {"lineno": 27, "parents": [16], "children": [2], "function": "isPossible", "code": "return b not in graph[a] and d not in graph[c] or (c not in graph[a] and d not in graph[b]) or (d not in graph[a] and c not in graph[b])"}, "18": {"lineno": 28, "parents": [15], "children": [2], "function": "isPossible", "code": "return False"}, "19": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2523, "task_title": "Closest Prime Numbers in Range", "difficulty": 2, "func_name": "closestPrimes", "description": "Given two positive integers `left` and `right`, find the two integers `num1`\nand `num2` such that:\n\n* `left <= num1 < num2 <= right `.\n* `num1` and `num2` are both prime numbers.\n* `num2 - num1` is the minimum amongst all other pairs satisfying the above conditions.\n\nReturn the positive integer array `ans = [num1, num2]`. If there are multiple\npairs satisfying these conditions, return the one with the minimum `num1`\nvalue or `[-1, -1]` if such numbers do not exist.\n\nA number greater than `1` is called prime if it is only divisible by `1` and\nitself.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def closestPrimes(self, left: int, right: int) -> List[int]:\n    isPrime = self._sieveEratosthenes(right + 1)\n    primes=[]\n    for i in range(left, right+1):\n      if isPrime[i]:\n        primes.append(i)\n\n    if len(primes) < 2:\n      return [-1, -1]\n\n    minDiff = math.inf\n    num1 = -1\n    num2 = -1\n\n    for a, b in zip(primes, primes[1:]):\n      diff = b - a\n      if diff < minDiff:\n        minDiff = diff\n        num1 = a\n        num2 = b\n\n    return [num1, num2]\n\n  def _sieveEratosthenes(self, n: int) -> List[bool]:\n    isPrime = [True] * n\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n      if isPrime[i]:\n        for j in range(i * i, n, i):\n          isPrime[j] = False\n    return isPrime\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 16, "end": 17}, {"type": "if", "start": 28, "end": 31}, {"type": "if", "start": 40, "end": 42}], "target_lines": [17, 20, 29, 30, 31, 41, 42], "cfg": {"0": {"lineno": 0, "parents": [], "children": [38], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "closestPrimes", "code": "enter: closestPrimes(self, left, right)"}, "2": {"lineno": 12, "parents": [11, 23], "children": [], "function": "closestPrimes", "code": "exit: closestPrimes(self, left, right)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["_sieveEratosthenes"], "function": "closestPrimes", "code": "isPrime = self._sieveEratosthenes(right + 1)"}, "4": {"lineno": 14, "parents": [25, 3], "children": [5], "function": "closestPrimes", "code": "primes = []"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "closestPrimes", "code": "__iv = iter(range(left, right + 1))"}, "6": {"lineno": 15, "parents": [8, 9, 5], "children": [10, 7], "calls": ["range"], "function": "closestPrimes", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 15, "parents": [6], "children": [8], "function": "closestPrimes", "code": "i = next(__iv)"}, "8": {"lineno": 16, "parents": [7], "children": [9, 6], "function": "closestPrimes", "code": "_if: isPrime[i]"}, "9": {"lineno": 17, "parents": [8], "children": [6], "calls": ["append"], "function": "closestPrimes", "code": "primes.append(i)"}, "10": {"lineno": 19, "parents": [6], "children": [11, 12], "calls": ["len"], "function": "closestPrimes", "code": "_if: len(primes) < 2"}, "11": {"lineno": 20, "parents": [10], "children": [2], "function": "closestPrimes", "code": "return [-1, -1]"}, "12": {"lineno": 22, "parents": [10], "children": [13], "function": "closestPrimes", "code": "minDiff = math.inf"}, "13": {"lineno": 23, "parents": [12], "children": [14], "function": "closestPrimes", "code": "num1 = -1"}, "14": {"lineno": 24, "parents": [13], "children": [15], "function": "closestPrimes", "code": "num2 = -1"}, "15": {"lineno": 26, "parents": [14], "children": [16], "function": "closestPrimes", "code": "__iv = iter(zip(primes, primes[1:]))"}, "16": {"lineno": 26, "parents": [19, 22, 15], "children": [17, 23], "calls": ["zip"], "function": "closestPrimes", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 26, "parents": [16], "children": [18], "function": "closestPrimes", "code": "a, b = next(__iv)"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "closestPrimes", "code": "diff = b - a"}, "19": {"lineno": 28, "parents": [18], "children": [16, 20], "function": "closestPrimes", "code": "_if: diff < minDiff"}, "20": {"lineno": 29, "parents": [19], "children": [21], "function": "closestPrimes", "code": "minDiff = diff"}, "21": {"lineno": 30, "parents": [20], "children": [22], "function": "closestPrimes", "code": "num1 = a"}, "22": {"lineno": 31, "parents": [21], "children": [16], "function": "closestPrimes", "code": "num2 = b"}, "23": {"lineno": 33, "parents": [16], "children": [2], "function": "closestPrimes", "code": "return [num1, num2]"}, "24": {"lineno": 35, "parents": [3], "children": [26], "function": "_sieveEratosthenes", "code": "enter: _sieveEratosthenes(self, n)"}, "25": {"lineno": 35, "parents": [37], "children": [], "function": "_sieveEratosthenes", "code": "exit: _sieveEratosthenes(self, n)"}, "26": {"lineno": 36, "parents": [24], "children": [27], "function": "_sieveEratosthenes", "code": "isPrime = [True] * n"}, "27": {"lineno": 37, "parents": [26], "children": [28], "function": "_sieveEratosthenes", "code": "isPrime[0] = False"}, "28": {"lineno": 38, "parents": [27], "children": [29], "function": "_sieveEratosthenes", "code": "isPrime[1] = False"}, "29": {"lineno": 39, "parents": [28], "children": [30], "function": "_sieveEratosthenes", "code": "__iv = iter(range(2, int(n ** 0.5) + 1))"}, "30": {"lineno": 39, "parents": [32, 34, 29], "children": [37, 31], "calls": ["int", "range"], "function": "_sieveEratosthenes", "code": "_for: __iv.__length__hint__() > 0"}, "31": {"lineno": 39, "parents": [30], "children": [32], "function": "_sieveEratosthenes", "code": "i = next(__iv)"}, "32": {"lineno": 40, "parents": [31], "children": [33, 30], "function": "_sieveEratosthenes", "code": "_if: isPrime[i]"}, "33": {"lineno": 41, "parents": [32], "children": [34], "function": "_sieveEratosthenes", "code": "__iv = iter(range(i * i, n, i))"}, "34": {"lineno": 41, "parents": [33, 36], "children": [35, 30], "calls": ["range"], "function": "_sieveEratosthenes", "code": "_for: __iv.__length__hint__() > 0"}, "35": {"lineno": 41, "parents": [34], "children": [36], "function": "_sieveEratosthenes", "code": "j = next(__iv)"}, "36": {"lineno": 42, "parents": [35], "children": [34], "function": "_sieveEratosthenes", "code": "isPrime[j] = False"}, "37": {"lineno": 43, "parents": [30], "children": [25], "function": "_sieveEratosthenes", "code": "return isPrime"}, "38": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2532, "task_title": "Time to Cross a Bridge", "difficulty": 3, "func_name": "findCrossingTime", "description": "There are `k` workers who want to move `n` boxes from an old warehouse to a\nnew one. You are given the two integers `n` and `k`, and a 2D integer array\n`time` of size `k x 4` where `time[i] = [leftToRighti, pickOldi, rightToLefti,\nputNewi]`.\n\nThe warehouses are separated by a river and connected by a bridge. The old\nwarehouse is on the right bank of the river, and the new warehouse is on the\nleft bank of the river. Initially, all `k` workers are waiting on the left\nside of the bridge. To move the boxes, the `ith` worker (0-indexed) can :\n\n* Cross the bridge from the left bank (new warehouse) to the right bank (old warehouse) in `leftToRighti` minutes.\n* Pick a box from the old warehouse and return to the bridge in `pickOldi` minutes. Different workers can pick up their boxes simultaneously.\n* Cross the bridge from the right bank (old warehouse) to the left bank (new warehouse) in `rightToLefti` minutes.\n* Put the box in the new warehouse and return to the bridge in `putNewi` minutes. Different workers can put their boxes simultaneously.\n\nA worker `i` is less efficient than a worker `j` if either condition is met:\n\n* `leftToRighti + rightToLefti > leftToRightj + rightToLeftj`\n* `leftToRighti + rightToLefti == leftToRightj + rightToLeftj` and `i > j`\n\nThe following rules regulate the movement of the workers through the bridge :\n\n* If a worker `x` reaches the bridge while another worker `y` is crossing the bridge, `x` waits at their side of the bridge.\n* If the bridge is free, the worker waiting on the right side of the bridge gets to cross the bridge. If more than one worker is waiting on the right side, the one with the lowest efficiency crosses first.\n* If the bridge is free and no worker is waiting on the right side, and at least one box remains at the old warehouse, the worker on the left side of the river gets to cross the bridge. If more than one worker is waiting on the left side, the one with the lowest efficiency crosses first.\n\nReturn the instance of time at which the last worker reaches the left bank of\nthe river after all n boxes have been put in the new warehouse.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def findCrossingTime(self, n: int, k: int, time: List[List[int]]) -> int:\n    ans = 0\n    leftBridgeQueue = [(-leftToRight - rightToLeft, -i) for i, (leftToRight, pickOld, rightToLeft, pickNew) in enumerate(time)]\n    rightBridgeQueue = []\n    leftWorkers = []\n    rightWorkers = []\n\n    heapq.heapify(leftBridgeQueue)\n\n    while n > 0 or rightBridgeQueue or rightWorkers:\n      while leftWorkers and leftWorkers[0][0] <= ans:\n        i = heapq.heappop(leftWorkers)[1]\n        heapq.heappush(leftBridgeQueue, (-time[i][0] - time[i][2], -i))\n      while rightWorkers and rightWorkers[0][0] <= ans:\n        i = heapq.heappop(rightWorkers)[1]\n        heapq.heappush(rightBridgeQueue, (-time[i][0] - time[i][2], -i))\n      if rightBridgeQueue:\n        i = -heapq.heappop(rightBridgeQueue)[1]\n        ans += time[i][2]\n        heapq.heappush(leftWorkers, (ans + time[i][3], i))\n      elif leftBridgeQueue and n > 0:\n        i = -heapq.heappop(leftBridgeQueue)[1]\n        ans += time[i][0]\n        heapq.heappush(rightWorkers, (ans + time[i][1], i))\n        n -= 1\n      else:\n        if leftWorkers and n > 0:\n          ans1=leftWorkers[0][0]\n        else:\n          ans1=math.inf\n        if rightWorkers:\n          ans2=rightWorkers[0][0]\n        else:\n          ans2=math.inf\n        ans=min(ans1,ans2)\n\n    return ans", "blocks": [{"type": "if", "start": 28, "end": 31}, {"type": "if", "start": 32, "end": 36}, {"type": "else", "start": 37, "end": 46}, {"type": "if", "start": 38, "end": 39}, {"type": "else", "start": 40, "end": 41}, {"type": "if", "start": 42, "end": 43}, {"type": "else", "start": 44, "end": 45}], "target_lines": [29, 30, 31, 33, 34, 35, 36, 38, 39, 41, 42, 43, 45, 46], "cfg": {"0": {"lineno": 0, "parents": [], "children": [33], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "findCrossingTime", "code": "enter: findCrossingTime(self, n, k, time)"}, "2": {"lineno": 12, "parents": [32], "children": [], "function": "findCrossingTime", "code": "exit: findCrossingTime(self, n, k, time)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "findCrossingTime", "code": "ans = 0"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "findCrossingTime", "code": "leftBridgeQueue = [(-leftToRight - rightToLeft, -i) for i, (leftToRight, pickOld, rightToLeft, pickNew) in enumerate(time)]"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "findCrossingTime", "code": "rightBridgeQueue = []"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "findCrossingTime", "code": "leftWorkers = []"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "findCrossingTime", "code": "rightWorkers = []"}, "8": {"lineno": 19, "parents": [7], "children": [9], "calls": ["heapify"], "function": "findCrossingTime", "code": "heapq.heapify(leftBridgeQueue)"}, "9": {"lineno": 21, "parents": [8, 24, 19, 31], "children": [32, 10], "function": "findCrossingTime", "code": "_while: n > 0 or rightBridgeQueue or rightWorkers"}, "10": {"lineno": 22, "parents": [9, 12], "children": [11, 13], "function": "findCrossingTime", "code": "_while: leftWorkers and leftWorkers[0][0] <= ans"}, "11": {"lineno": 23, "parents": [10], "children": [12], "function": "findCrossingTime", "code": "i = heapq.heappop(leftWorkers)[1]"}, "12": {"lineno": 24, "parents": [11], "children": [32, 10], "calls": ["heappush"], "function": "findCrossingTime", "code": "heapq.heappush(leftBridgeQueue, (-time[i][0] - time[i][2], -i))"}, "13": {"lineno": 25, "parents": [10, 15], "children": [16, 14], "function": "findCrossingTime", "code": "_while: rightWorkers and rightWorkers[0][0] <= ans"}, "14": {"lineno": 26, "parents": [13], "children": [15], "function": "findCrossingTime", "code": "i = heapq.heappop(rightWorkers)[1]"}, "15": {"lineno": 27, "parents": [14], "children": [13], "calls": ["heappush"], "function": "findCrossingTime", "code": "heapq.heappush(rightBridgeQueue, (-time[i][0] - time[i][2], -i))"}, "16": {"lineno": 28, "parents": [13], "children": [17, 20], "function": "findCrossingTime", "code": "_if: rightBridgeQueue"}, "17": {"lineno": 29, "parents": [16], "children": [18], "function": "findCrossingTime", "code": "i = -heapq.heappop(rightBridgeQueue)[1]"}, "18": {"lineno": 30, "parents": [17], "children": [19], "function": "findCrossingTime", "code": "ans += time[i][2]"}, "19": {"lineno": 31, "parents": [18], "children": [9], "calls": ["heappush"], "function": "findCrossingTime", "code": "heapq.heappush(leftWorkers, (ans + time[i][3], i))"}, "20": {"lineno": 32, "parents": [16], "children": [25, 21], "function": "findCrossingTime", "code": "_if: leftBridgeQueue and n > 0"}, "21": {"lineno": 33, "parents": [20], "children": [22], "function": "findCrossingTime", "code": "i = -heapq.heappop(leftBridgeQueue)[1]"}, "22": {"lineno": 34, "parents": [21], "children": [23], "function": "findCrossingTime", "code": "ans += time[i][0]"}, "23": {"lineno": 35, "parents": [22], "children": [24], "calls": ["heappush"], "function": "findCrossingTime", "code": "heapq.heappush(rightWorkers, (ans + time[i][1], i))"}, "24": {"lineno": 36, "parents": [23], "children": [9], "function": "findCrossingTime", "code": "n -= 1"}, "25": {"lineno": 38, "parents": [20], "children": [26, 27], "function": "findCrossingTime", "code": "_if: leftWorkers and n > 0"}, "26": {"lineno": 39, "parents": [25], "children": [28], "function": "findCrossingTime", "code": "ans1 = leftWorkers[0][0]"}, "27": {"lineno": 41, "parents": [25], "children": [28], "function": "findCrossingTime", "code": "ans1 = math.inf"}, "28": {"lineno": 42, "parents": [26, 27], "children": [29, 30], "function": "findCrossingTime", "code": "_if: rightWorkers"}, "29": {"lineno": 43, "parents": [28], "children": [31], "function": "findCrossingTime", "code": "ans2 = rightWorkers[0][0]"}, "30": {"lineno": 45, "parents": [28], "children": [31], "function": "findCrossingTime", "code": "ans2 = math.inf"}, "31": {"lineno": 46, "parents": [29, 30], "children": [9], "calls": ["min"], "function": "findCrossingTime", "code": "ans = min(ans1, ans2)"}, "32": {"lineno": 48, "parents": [9, 12], "children": [2], "function": "findCrossingTime", "code": "return ans"}, "33": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2577, "task_title": "Minimum Time to Visit a Cell In a Grid", "difficulty": 3, "func_name": "minimumTime", "description": "You are given a `m x n` matrix `grid` consisting of non-negative integers\nwhere `grid[row][col]` represents the minimum time required to be able to\nvisit the cell `(row, col)`, which means you can visit the cell `(row, col)`\nonly when the time you visit it is greater than or equal to `grid[row][col]`.\n\nYou are standing in the top-left cell of the matrix in the `0th` second, and\nyou must move to any adjacent cell in the four directions: up, down, left, and\nright. Each move you make takes 1 second.\n\nReturn the minimum time required in which you can visit the bottom-right cell\nof the matrix. If you cannot visit the bottom-right cell, then return `-1`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumTime(self, grid: List[List[int]]) -> int:\n    if grid[0][1] > 1 and grid[1][0] > 1:\n      return -1\n\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    m = len(grid)\n    n = len(grid[0])\n    minHeap = [(0, 0, 0)]\n    seen = {(0, 0)}\n\n    while minHeap:\n      time, i, j = heapq.heappop(minHeap)\n      if i == m - 1 and j == n - 1:\n        return time\n      for dx, dy in dirs:\n        x = i + dx\n        y = j + dy\n        if x < 0 or x == m or y < 0 or y == n:\n          continue\n        if (x, y) in seen:\n          continue\n        if (grid[x][y] - time) % 2 == 0:\n          extraWait = 1\n        else:\n          extraWait = 0\n        nextTime = max(time + 1, grid[x][y] + extraWait)\n        heapq.heappush(minHeap, (nextTime, x, y))\n        seen.add((x, y))\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "if", "start": 24, "end": 25}, {"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 33, "end": 34}, {"type": "else", "start": 35, "end": 36}], "target_lines": [14, 25, 30, 32, 34, 36], "cfg": {"0": {"lineno": 0, "parents": [], "children": [29], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumTime", "code": "enter: minimumTime(self, grid)"}, "2": {"lineno": 12, "parents": [10, 4, 13], "children": [], "function": "minimumTime", "code": "exit: minimumTime(self, grid)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "function": "minimumTime", "code": "_if: grid[0][1] > 1 and grid[1][0] > 1"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "minimumTime", "code": "return -1"}, "5": {"lineno": 16, "parents": [3], "children": [6], "function": "minimumTime", "code": "dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "6": {"lineno": 17, "parents": [5], "children": [7], "calls": ["len"], "function": "minimumTime", "code": "m = len(grid)"}, "7": {"lineno": 18, "parents": [6], "children": [8], "calls": ["len"], "function": "minimumTime", "code": "n = len(grid[0])"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "minimumTime", "code": "minHeap = [(0, 0, 0)]"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "minimumTime", "code": "seen = {(0, 0)}"}, "10": {"lineno": 22, "parents": [9, 15], "children": [2, 11], "function": "minimumTime", "code": "_while: minHeap"}, "11": {"lineno": 23, "parents": [10], "children": [12], "calls": ["heappop"], "function": "minimumTime", "code": "time, i, j = heapq.heappop(minHeap)"}, "12": {"lineno": 24, "parents": [11], "children": [13, 14], "function": "minimumTime", "code": "_if: i == m - 1 and j == n - 1"}, "13": {"lineno": 25, "parents": [12], "children": [2], "function": "minimumTime", "code": "return time"}, "14": {"lineno": 26, "parents": [12], "children": [15], "function": "minimumTime", "code": "__iv = iter(dirs)"}, "15": {"lineno": 26, "parents": [20, 28, 14, 22], "children": [16, 10], "function": "minimumTime", "code": "_for: __iv.__length__hint__() > 0"}, "16": {"lineno": 26, "parents": [15], "children": [17], "function": "minimumTime", "code": "dx, dy = next(__iv)"}, "17": {"lineno": 27, "parents": [16], "children": [18], "function": "minimumTime", "code": "x = i + dx"}, "18": {"lineno": 28, "parents": [17], "children": [19], "function": "minimumTime", "code": "y = j + dy"}, "19": {"lineno": 29, "parents": [18], "children": [20, 21], "function": "minimumTime", "code": "_if: x < 0 or x == m or y < 0 or (y == n)"}, "20": {"lineno": 30, "parents": [19], "children": [15], "function": "minimumTime", "code": "continue"}, "21": {"lineno": 31, "parents": [19], "children": [22, 23], "function": "minimumTime", "code": "_if: (x, y) in seen"}, "22": {"lineno": 32, "parents": [21], "children": [15], "function": "minimumTime", "code": "continue"}, "23": {"lineno": 33, "parents": [21], "children": [24, 25], "function": "minimumTime", "code": "_if: (grid[x][y] - time) % 2 == 0"}, "24": {"lineno": 34, "parents": [23], "children": [26], "function": "minimumTime", "code": "extraWait = 1"}, "25": {"lineno": 36, "parents": [23], "children": [26], "function": "minimumTime", "code": "extraWait = 0"}, "26": {"lineno": 37, "parents": [24, 25], "children": [27], "calls": ["max"], "function": "minimumTime", "code": "nextTime = max(time + 1, grid[x][y] + extraWait)"}, "27": {"lineno": 38, "parents": [26], "children": [28], "calls": ["heappush"], "function": "minimumTime", "code": "heapq.heappush(minHeap, (nextTime, x, y))"}, "28": {"lineno": 39, "parents": [27], "children": [15], "calls": ["add"], "function": "minimumTime", "code": "seen.add((x, y))"}, "29": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2601, "task_title": "Prime Subtraction Operation", "difficulty": 2, "func_name": "primeSubOperation", "description": "You are given a 0-indexed integer array `nums` of length `n`.\n\nYou can perform the following operation as many times as you want:\n\n* Pick an index `i` that you haven\u2019t picked before, and pick a prime `p` strictly less than `nums[i]`, then subtract `p` from `nums[i]`.\n\nReturn true if you can make `nums` a strictly increasing array using the above\noperation and false otherwise.\n\nA strictly increasing array is an array whose each element is strictly greater\nthan its preceding element.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def primeSubOperation(self, nums: List[int]) -> bool:\n    kMax = 1000\n    primes = self._sieveEratosthenes(kMax)\n\n    prevNum = 0\n    for num in nums:\n      i = bisect.bisect_left(primes, num - prevNum)\n      if i > 0:\n        num -= primes[i - 1]\n      if num <= prevNum:\n        return False\n      prevNum = num\n\n    return True\n\n  def _sieveEratosthenes(self, n: int) -> List[int]:\n    isPrime = [True] * n\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n      if isPrime[i]:\n        for j in range(i * i, n, i):\n          isPrime[j] = False\n    return [i for i in range(n) if isPrime[i]]\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 32, "end": 34}], "target_lines": [20, 22, 33, 34], "cfg": {"0": {"lineno": 0, "parents": [], "children": [30], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "primeSubOperation", "code": "enter: primeSubOperation(self, nums)"}, "2": {"lineno": 12, "parents": [13, 15], "children": [], "function": "primeSubOperation", "code": "exit: primeSubOperation(self, nums)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "primeSubOperation", "code": "kMax = 1000"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["_sieveEratosthenes"], "function": "primeSubOperation", "code": "primes = self._sieveEratosthenes(kMax)"}, "5": {"lineno": 16, "parents": [17, 4], "children": [6], "function": "primeSubOperation", "code": "prevNum = 0"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "primeSubOperation", "code": "__iv = iter(nums)"}, "7": {"lineno": 17, "parents": [6, 14], "children": [8, 15], "function": "primeSubOperation", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "primeSubOperation", "code": "num = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10], "calls": ["bisect_left"], "function": "primeSubOperation", "code": "i = bisect.bisect_left(primes, num - prevNum)"}, "10": {"lineno": 19, "parents": [9], "children": [11, 12], "function": "primeSubOperation", "code": "_if: i > 0"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "primeSubOperation", "code": "num -= primes[i - 1]"}, "12": {"lineno": 21, "parents": [10, 11], "children": [13, 14], "function": "primeSubOperation", "code": "_if: num <= prevNum"}, "13": {"lineno": 22, "parents": [12], "children": [2], "function": "primeSubOperation", "code": "return False"}, "14": {"lineno": 23, "parents": [12], "children": [7], "function": "primeSubOperation", "code": "prevNum = num"}, "15": {"lineno": 25, "parents": [7], "children": [2], "function": "primeSubOperation", "code": "return True"}, "16": {"lineno": 27, "parents": [4], "children": [18], "function": "_sieveEratosthenes", "code": "enter: _sieveEratosthenes(self, n)"}, "17": {"lineno": 27, "parents": [29], "children": [], "function": "_sieveEratosthenes", "code": "exit: _sieveEratosthenes(self, n)"}, "18": {"lineno": 28, "parents": [16], "children": [19], "function": "_sieveEratosthenes", "code": "isPrime = [True] * n"}, "19": {"lineno": 29, "parents": [18], "children": [20], "function": "_sieveEratosthenes", "code": "isPrime[0] = False"}, "20": {"lineno": 30, "parents": [19], "children": [21], "function": "_sieveEratosthenes", "code": "isPrime[1] = False"}, "21": {"lineno": 31, "parents": [20], "children": [22], "function": "_sieveEratosthenes", "code": "__iv = iter(range(2, int(n ** 0.5) + 1))"}, "22": {"lineno": 31, "parents": [24, 26, 21], "children": [29, 23], "calls": ["int", "range"], "function": "_sieveEratosthenes", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 31, "parents": [22], "children": [24], "function": "_sieveEratosthenes", "code": "i = next(__iv)"}, "24": {"lineno": 32, "parents": [23], "children": [25, 22], "function": "_sieveEratosthenes", "code": "_if: isPrime[i]"}, "25": {"lineno": 33, "parents": [24], "children": [26], "function": "_sieveEratosthenes", "code": "__iv = iter(range(i * i, n, i))"}, "26": {"lineno": 33, "parents": [25, 28], "children": [27, 22], "calls": ["range"], "function": "_sieveEratosthenes", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 33, "parents": [26], "children": [28], "function": "_sieveEratosthenes", "code": "j = next(__iv)"}, "28": {"lineno": 34, "parents": [27], "children": [26], "function": "_sieveEratosthenes", "code": "isPrime[j] = False"}, "29": {"lineno": 35, "parents": [22], "children": [17], "function": "_sieveEratosthenes", "code": "return [i for i in range(n) if isPrime[i]]"}, "30": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2603, "task_title": "Collect Coins in a Tree", "difficulty": 3, "func_name": "collectTheCoins", "description": "There exists an undirected and unrooted tree with `n` nodes indexed from `0`\nto `n - 1`. You are given an integer `n` and a 2D integer array edges of\nlength `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge\nbetween nodes `ai` and `bi` in the tree. You are also given an array `coins`\nof size `n` where `coins[i]` can be either `0` or `1`, where `1` indicates the\npresence of a coin in the vertex `i`.\n\nInitially, you choose to start at any vertex in the tree. Then, you can\nperform the following operations any number of times:\n\n* Collect all the coins that are at a distance of at most `2` from the current vertex, or\n* Move to any adjacent vertex in the tree.\n\nFind the minimum number of edges you need to go through to collect all the\ncoins and go back to the initial vertex.\n\nNote that if you pass an edge several times, you need to count it into the\nanswer several times.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def collectTheCoins(self, coins: List[int], edges: List[List[int]]) -> int:\n    n = len(coins)\n    tree = [set() for _ in range(n)]\n    leavesToBeRemoved = collections.deque()\n\n    for u, v in edges:\n      tree[u].add(v)\n      tree[v].add(u)\n\n    for u in range(n):\n      while len(tree[u]) == 1 and coins[u] == 0:\n        v = tree[u].pop()\n        tree[v].remove(u)\n        u = v\n      if len(tree[u]) == 1:\n        leavesToBeRemoved.append(u)\n\n    for _ in range(2):\n      for _ in range(len(leavesToBeRemoved)):\n        u = leavesToBeRemoved.popleft()\n        if tree[u]:\n          v = tree[u].pop()\n          tree[v].remove(u)\n          if len(tree[v]) == 1:\n            leavesToBeRemoved.append(v)\n\n    return sum(len(children) for children in tree)\n", "blocks": [{"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 32, "end": 36}, {"type": "if", "start": 35, "end": 36}], "target_lines": [27, 33, 34, 35, 36], "cfg": {"0": {"lineno": 0, "parents": [], "children": [33], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "collectTheCoins", "code": "enter: collectTheCoins(self, coins, edges)"}, "2": {"lineno": 12, "parents": [32], "children": [], "function": "collectTheCoins", "code": "exit: collectTheCoins(self, coins, edges)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "collectTheCoins", "code": "n = len(coins)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "collectTheCoins", "code": "tree = [set() for _ in range(n)]"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["deque"], "function": "collectTheCoins", "code": "leavesToBeRemoved = collections.deque()"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "collectTheCoins", "code": "__iv = iter(edges)"}, "7": {"lineno": 17, "parents": [10, 6], "children": [8, 11], "function": "collectTheCoins", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "collectTheCoins", "code": "u, v = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10], "calls": ["add"], "function": "collectTheCoins", "code": "tree[u].add(v)"}, "10": {"lineno": 19, "parents": [9], "children": [7], "calls": ["add"], "function": "collectTheCoins", "code": "tree[v].add(u)"}, "11": {"lineno": 21, "parents": [7], "children": [12], "function": "collectTheCoins", "code": "__iv = iter(range(n))"}, "12": {"lineno": 21, "parents": [19, 18, 11], "children": [20, 13], "calls": ["range"], "function": "collectTheCoins", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 21, "parents": [12], "children": [14], "function": "collectTheCoins", "code": "u = next(__iv)"}, "14": {"lineno": 22, "parents": [17, 13], "children": [18, 15], "function": "collectTheCoins", "code": "_while: len(tree[u]) == 1 and coins[u] == 0"}, "15": {"lineno": 23, "parents": [14], "children": [16], "calls": ["pop"], "function": "collectTheCoins", "code": "v = tree[u].pop()"}, "16": {"lineno": 24, "parents": [15], "children": [17], "calls": ["remove"], "function": "collectTheCoins", "code": "tree[v].remove(u)"}, "17": {"lineno": 25, "parents": [16], "children": [14], "function": "collectTheCoins", "code": "u = v"}, "18": {"lineno": 26, "parents": [14], "children": [19, 12], "calls": ["len"], "function": "collectTheCoins", "code": "_if: len(tree[u]) == 1"}, "19": {"lineno": 27, "parents": [18], "children": [12], "calls": ["append"], "function": "collectTheCoins", "code": "leavesToBeRemoved.append(u)"}, "20": {"lineno": 29, "parents": [12], "children": [21], "function": "collectTheCoins", "code": "__iv = iter(range(2))"}, "21": {"lineno": 29, "parents": [24, 20], "children": [32, 22], "calls": ["range", "sum"], "function": "collectTheCoins", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 29, "parents": [21], "children": [23], "function": "collectTheCoins", "code": "_ = next(__iv)"}, "23": {"lineno": 30, "parents": [22], "children": [24], "function": "collectTheCoins", "code": "__iv = iter(range(len(leavesToBeRemoved)))"}, "24": {"lineno": 30, "parents": [27, 31, 30, 23], "children": [25, 21], "calls": ["len", "range"], "function": "collectTheCoins", "code": "_for: __iv.__length__hint__() > 0"}, "25": {"lineno": 30, "parents": [24], "children": [26], "function": "collectTheCoins", "code": "_ = next(__iv)"}, "26": {"lineno": 31, "parents": [25], "children": [27], "calls": ["popleft"], "function": "collectTheCoins", "code": "u = leavesToBeRemoved.popleft()"}, "27": {"lineno": 32, "parents": [26], "children": [24, 28], "function": "collectTheCoins", "code": "_if: tree[u]"}, "28": {"lineno": 33, "parents": [27], "children": [29], "calls": ["pop"], "function": "collectTheCoins", "code": "v = tree[u].pop()"}, "29": {"lineno": 34, "parents": [28], "children": [30], "calls": ["remove"], "function": "collectTheCoins", "code": "tree[v].remove(u)"}, "30": {"lineno": 35, "parents": [29], "children": [24, 31], "calls": ["len"], "function": "collectTheCoins", "code": "_if: len(tree[v]) == 1"}, "31": {"lineno": 36, "parents": [30], "children": [24], "calls": ["append"], "function": "collectTheCoins", "code": "leavesToBeRemoved.append(v)"}, "32": {"lineno": 38, "parents": [21], "children": [2], "function": "collectTheCoins", "code": "return sum((len(children) for children in tree))"}, "33": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2653, "task_title": "Sliding Subarray Beauty", "difficulty": 2, "func_name": "getSubarrayBeauty", "description": "Given an integer array `nums` containing `n` integers, find the beauty of each\nsubarray of size `k`.\n\nThe beauty of a subarray is the `xth` smallest integer in the subarray if it\nis negative, or `0` if there are fewer than `x` negative integers.\n\nReturn an integer array containing `n - k + 1` integers, which denote the\nbeauty of the subarrays in order from the first index in the array.\n\n* A subarray is a contiguous non-empty sequence of elements within an array.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def getSubarrayBeauty(self, nums: List[int], k: int, x: int) -> List[int]:\n    ans = []\n    count = [0] * 50\n\n    for i, num in enumerate(nums):\n      if num < 0:\n        count[num + 50] += 1\n      if i - k >= 0 and nums[i - k] < 0:\n        count[nums[i - k] + 50] -= 1\n      if i + 1 >= k:\n        ans.append(self._getXthSmallestNum(count, x))\n\n    return ans\n\n  def _getXthSmallestNum(self, count: List[int], x: int) -> int:\n    prefix = 0\n    for i in range(50):\n      prefix += count[i]\n      if prefix >= x:\n        return i - 50\n    return 0\n", "blocks": [{"type": "if", "start": 17, "end": 18}, {"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 30, "end": 31}], "target_lines": [18, 20, 22, 31], "cfg": {"0": {"lineno": 0, "parents": [], "children": [25], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "getSubarrayBeauty", "code": "enter: getSubarrayBeauty(self, nums, k, x)"}, "2": {"lineno": 12, "parents": [14], "children": [], "function": "getSubarrayBeauty", "code": "exit: getSubarrayBeauty(self, nums, k, x)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "getSubarrayBeauty", "code": "ans = []"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "getSubarrayBeauty", "code": "count = [0] * 50"}, "5": {"lineno": 16, "parents": [4], "children": [6], "function": "getSubarrayBeauty", "code": "__iv = iter(enumerate(nums))"}, "6": {"lineno": 16, "parents": [16, 13, 12, 5], "children": [14, 7], "calls": ["enumerate"], "function": "getSubarrayBeauty", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "getSubarrayBeauty", "code": "i, num = next(__iv)"}, "8": {"lineno": 17, "parents": [7], "children": [9, 10], "function": "getSubarrayBeauty", "code": "_if: num < 0"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "getSubarrayBeauty", "code": "count[num + 50] += 1"}, "10": {"lineno": 19, "parents": [8, 9], "children": [11, 12], "function": "getSubarrayBeauty", "code": "_if: i - k >= 0 and nums[i - k] < 0"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "getSubarrayBeauty", "code": "count[nums[i - k] + 50] -= 1"}, "12": {"lineno": 21, "parents": [10, 11], "children": [13, 6], "function": "getSubarrayBeauty", "code": "_if: i + 1 >= k"}, "13": {"lineno": 22, "parents": [12], "children": [6], "calls": ["_getXthSmallestNum", "append"], "function": "getSubarrayBeauty", "code": "ans.append(self._getXthSmallestNum(count, x))"}, "14": {"lineno": 24, "parents": [6], "children": [2], "function": "getSubarrayBeauty", "code": "return ans"}, "15": {"lineno": 26, "parents": [13], "children": [17], "function": "_getXthSmallestNum", "code": "enter: _getXthSmallestNum(self, count, x)"}, "16": {"lineno": 26, "parents": [24, 23], "children": [], "function": "_getXthSmallestNum", "code": "exit: _getXthSmallestNum(self, count, x)"}, "17": {"lineno": 27, "parents": [15], "children": [18], "function": "_getXthSmallestNum", "code": "prefix = 0"}, "18": {"lineno": 28, "parents": [17], "children": [19], "function": "_getXthSmallestNum", "code": "__iv = iter(range(50))"}, "19": {"lineno": 28, "parents": [18, 22], "children": [24, 20], "calls": ["range"], "function": "_getXthSmallestNum", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 28, "parents": [19], "children": [21], "function": "_getXthSmallestNum", "code": "i = next(__iv)"}, "21": {"lineno": 29, "parents": [20], "children": [22], "function": "_getXthSmallestNum", "code": "prefix += count[i]"}, "22": {"lineno": 30, "parents": [21], "children": [19, 23], "function": "_getXthSmallestNum", "code": "_if: prefix >= x"}, "23": {"lineno": 31, "parents": [22], "children": [16], "function": "_getXthSmallestNum", "code": "return i - 50"}, "24": {"lineno": 32, "parents": [19], "children": [16], "function": "_getXthSmallestNum", "code": "return 0"}, "25": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2662, "task_title": "Minimum Cost of a Path With Special Roads", "difficulty": 2, "func_name": "minimumCost", "description": "You are given an array `start` where `start = [startX, startY]` represents\nyour initial position `(startX, startY)` in a 2D space. You are also given the\narray `target` where `target = [targetX, targetY]` represents your target\nposition `(targetX, targetY)`.\n\nThe cost of going from a position `(x1, y1)` to any other position in the\nspace `(x2, y2)` is `|x2 - x1| + |y2 - y1|`.\n\nThere are also some special roads. You are given a 2D array `specialRoads`\nwhere `specialRoads[i] = [x1i, y1i, x2i, y2i, costi]` indicates that the `ith`\nspecial road can take you from `(x1i, y1i)` to `(x2i, y2i)` with a cost equal\nto `costi`. You can use each special road any number of times.\n\nReturn the minimum cost required to go from `(startX, startY)` to `(targetX,\ntargetY)`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumCost(self, start: List[int], target: List[int], specialRoads: List[List[int]]) -> int:\n    return self.dijkstra(specialRoads, *start, *target)\n\n  def dijkstra(self, specialRoads: List[List[int]], srcX: int, srcY: int, dstX: int, dstY: int) -> int:\n    n = len(specialRoads)\n    dist = [math.inf] * n\n    minHeap = []\n\n    for u, (x1, y1, _, _, cost) in enumerate(specialRoads):\n      d = abs(x1 - srcX) + abs(y1 - srcY) + cost\n      dist[u] = d\n      heapq.heappush(minHeap, (dist[u], u))\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      if d > dist[u]:\n        continue\n      _, _, ux2, uy2, _ = specialRoads[u]\n      for v in range(n):\n        if v == u:\n          continue\n        vx1, vy1, _, _, vcost = specialRoads[v]\n        newDist = d + abs(vx1 - ux2) + abs(vy1 - uy2) + vcost\n        if newDist < dist[v]:\n          dist[v] = newDist\n          heapq.heappush(minHeap, (dist[v], v))\n\n    ans = abs(dstX - srcX) + abs(dstY - srcY)\n    for u in range(n):\n      _, _, x2, y2, _ = specialRoads[u]\n      ans = min(ans, dist[u] + abs(dstX - x2) + abs(dstY - y2))\n\n    return ans\n", "blocks": [{"type": "if", "start": 27, "end": 28}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 35, "end": 37}], "target_lines": [28, 32, 36, 37], "cfg": {"0": {"lineno": 0, "parents": [], "children": [37], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "calls": ["dijkstra"], "function": "minimumCost", "code": "enter: minimumCost(self, start, target, specialRoads)"}, "2": {"lineno": 12, "parents": [3], "children": [], "function": "minimumCost", "code": "exit: minimumCost(self, start, target, specialRoads)"}, "3": {"lineno": 13, "parents": [1, 5], "children": [2], "function": "minimumCost", "code": "return self.dijkstra(specialRoads, *start, *target)"}, "4": {"lineno": 15, "parents": [1], "children": [6], "function": "dijkstra", "code": "enter: dijkstra(self, specialRoads, srcX, srcY, dstX, dstY)"}, "5": {"lineno": 15, "parents": [36], "children": [], "function": "dijkstra", "code": "exit: dijkstra(self, specialRoads, srcX, srcY, dstX, dstY)"}, "6": {"lineno": 16, "parents": [4], "children": [7], "calls": ["len"], "function": "dijkstra", "code": "n = len(specialRoads)"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "dijkstra", "code": "dist = [math.inf] * n"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "dijkstra", "code": "minHeap = []"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "dijkstra", "code": "__iv = iter(enumerate(specialRoads))"}, "10": {"lineno": 20, "parents": [9, 14], "children": [11, 15], "calls": ["enumerate"], "function": "dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "dijkstra", "code": "u, (x1, y1, _, _, cost) = next(__iv)"}, "12": {"lineno": 21, "parents": [11], "children": [13], "calls": ["abs", "abs"], "function": "dijkstra", "code": "d = abs(x1 - srcX) + abs(y1 - srcY) + cost"}, "13": {"lineno": 22, "parents": [12], "children": [14], "function": "dijkstra", "code": "dist[u] = d"}, "14": {"lineno": 23, "parents": [13], "children": [10], "calls": ["heappush"], "function": "dijkstra", "code": "heapq.heappush(minHeap, (dist[u], u))"}, "15": {"lineno": 25, "parents": [10, 18, 21], "children": [16, 30], "function": "dijkstra", "code": "_while: minHeap"}, "16": {"lineno": 26, "parents": [15], "children": [17], "calls": ["heappop"], "function": "dijkstra", "code": "d, u = heapq.heappop(minHeap)"}, "17": {"lineno": 27, "parents": [16], "children": [18, 19], "function": "dijkstra", "code": "_if: d > dist[u]"}, "18": {"lineno": 28, "parents": [17], "children": [15], "function": "dijkstra", "code": "continue"}, "19": {"lineno": 29, "parents": [17], "children": [20], "function": "dijkstra", "code": "_, _, ux2, uy2, _ = specialRoads[u]"}, "20": {"lineno": 30, "parents": [19], "children": [21], "function": "dijkstra", "code": "__iv = iter(range(n))"}, "21": {"lineno": 30, "parents": [24, 27, 20, 29], "children": [22, 15], "calls": ["range"], "function": "dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 30, "parents": [21], "children": [23], "function": "dijkstra", "code": "v = next(__iv)"}, "23": {"lineno": 31, "parents": [22], "children": [24, 25], "function": "dijkstra", "code": "_if: v == u"}, "24": {"lineno": 32, "parents": [23], "children": [21], "function": "dijkstra", "code": "continue"}, "25": {"lineno": 33, "parents": [23], "children": [26], "function": "dijkstra", "code": "vx1, vy1, _, _, vcost = specialRoads[v]"}, "26": {"lineno": 34, "parents": [25], "children": [27], "calls": ["abs", "abs"], "function": "dijkstra", "code": "newDist = d + abs(vx1 - ux2) + abs(vy1 - uy2) + vcost"}, "27": {"lineno": 35, "parents": [26], "children": [28, 21], "function": "dijkstra", "code": "_if: newDist < dist[v]"}, "28": {"lineno": 36, "parents": [27], "children": [29], "function": "dijkstra", "code": "dist[v] = newDist"}, "29": {"lineno": 37, "parents": [28], "children": [21], "calls": ["heappush"], "function": "dijkstra", "code": "heapq.heappush(minHeap, (dist[v], v))"}, "30": {"lineno": 39, "parents": [15], "children": [31], "calls": ["abs", "abs"], "function": "dijkstra", "code": "ans = abs(dstX - srcX) + abs(dstY - srcY)"}, "31": {"lineno": 40, "parents": [30], "children": [32], "function": "dijkstra", "code": "__iv = iter(range(n))"}, "32": {"lineno": 40, "parents": [35, 31], "children": [33, 36], "calls": ["range"], "function": "dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "33": {"lineno": 40, "parents": [32], "children": [34], "function": "dijkstra", "code": "u = next(__iv)"}, "34": {"lineno": 41, "parents": [33], "children": [35], "function": "dijkstra", "code": "_, _, x2, y2, _ = specialRoads[u]"}, "35": {"lineno": 42, "parents": [34], "children": [32], "calls": ["abs", "abs", "min"], "function": "dijkstra", "code": "ans = min(ans, dist[u] + abs(dstX - x2) + abs(dstY - y2))"}, "36": {"lineno": 44, "parents": [32], "children": [5], "function": "dijkstra", "code": "return ans"}, "37": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2663, "task_title": "Lexicographically Smallest Beautiful String", "difficulty": 3, "func_name": "smallestBeautifulString", "description": "A string is beautiful if:\n\n* It consists of the first `k` letters of the English lowercase alphabet.\n* It does not contain any substring of length `2` or more which is a palindrome.\n\nYou are given a beautiful string `s` of length `n` and a positive integer `k`.\n\nReturn the lexicographically smallest string of length `n`, which is larger\nthan `s` and is beautiful. If there is no such string, return an empty string.\n\nA string `a` is lexicographically larger than a string `b` (of the same\nlength) if in the first position where `a` and `b` differ, `a` has a character\nstrictly larger than the corresponding character in `b`.\n\n* For example, `\"abcd\"` is lexicographically larger than `\"abcc\"` because the first position they differ is at the fourth character, and `d` is greater than `c`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def smallestBeautifulString(self, s: str, k: int) -> str:\n    chars = list(s)\n\n    for i in reversed(range(len(chars))):\n      chars[i] = chr(ord(chars[i]) + 1)\n      while self._containsPalindrome(chars, i):\n        chars[i] = chr(ord(chars[i]) + 1)\n      if chars[i] < chr(ord('a') + k):\n        return self._changeSuffix(chars, i + 1)\n\n    return ''\n\n  def _containsPalindrome(self, chars: List[str], i: int) -> bool:\n    return (i > 0 and chars[i] == chars[i - 1]) or (i > 1 and chars[i] == chars[i - 2])\n\n  def _changeSuffix(self, chars: List[str], i: int) -> str:\n    for j in range(i, len(chars)):\n      chars[j] = 'a'\n      while self._containsPalindrome(chars, j):\n        chars[j] = chr(ord(chars[j]) + 1)\n    return ''.join(chars)\n", "blocks": [{"type": "if", "start": 19, "end": 20}], "target_lines": [20], "cfg": {"0": {"lineno": 0, "parents": [], "children": [25], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "smallestBeautifulString", "code": "enter: smallestBeautifulString(self, s, k)"}, "2": {"lineno": 12, "parents": [11, 12], "children": [], "function": "smallestBeautifulString", "code": "exit: smallestBeautifulString(self, s, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["list"], "function": "smallestBeautifulString", "code": "chars = list(s)"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "smallestBeautifulString", "code": "__iv = iter(reversed(range(len(chars))))"}, "5": {"lineno": 15, "parents": [17, 10, 4], "children": [12, 6], "calls": ["len", "range", "reversed"], "function": "smallestBeautifulString", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "smallestBeautifulString", "code": "i = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8], "calls": ["ord", "chr"], "function": "smallestBeautifulString", "code": "chars[i] = chr(ord(chars[i]) + 1)"}, "8": {"lineno": 17, "parents": [9, 7], "children": [9, 10], "calls": ["_containsPalindrome"], "function": "smallestBeautifulString", "code": "_while: self._containsPalindrome(chars, i)"}, "9": {"lineno": 18, "parents": [8, 14], "children": [8], "calls": ["ord", "chr"], "function": "smallestBeautifulString", "code": "chars[i] = chr(ord(chars[i]) + 1)"}, "10": {"lineno": 19, "parents": [8, 14], "children": [11, 5], "calls": ["ord", "chr", "_changeSuffix"], "function": "smallestBeautifulString", "code": "_if: chars[i] < chr(ord('a') + k)"}, "11": {"lineno": 20, "parents": [17, 10], "children": [2], "function": "smallestBeautifulString", "code": "return self._changeSuffix(chars, i + 1)"}, "12": {"lineno": 22, "parents": [5], "children": [2], "function": "smallestBeautifulString", "code": "return ''"}, "13": {"lineno": 24, "parents": [8, 22], "children": [15], "function": "_containsPalindrome", "code": "enter: _containsPalindrome(self, chars, i)"}, "14": {"lineno": 24, "parents": [15], "children": [], "function": "_containsPalindrome", "code": "exit: _containsPalindrome(self, chars, i)"}, "15": {"lineno": 25, "parents": [13], "children": [14], "function": "_containsPalindrome", "code": "return i > 0 and chars[i] == chars[i - 1] or (i > 1 and chars[i] == chars[i - 2])"}, "16": {"lineno": 27, "parents": [10], "children": [18], "function": "_changeSuffix", "code": "enter: _changeSuffix(self, chars, i)"}, "17": {"lineno": 27, "parents": [24], "children": [], "function": "_changeSuffix", "code": "exit: _changeSuffix(self, chars, i)"}, "18": {"lineno": 28, "parents": [16], "children": [19], "function": "_changeSuffix", "code": "__iv = iter(range(i, len(chars)))"}, "19": {"lineno": 28, "parents": [18, 22, 14], "children": [24, 20], "calls": ["len", "range", "join"], "function": "_changeSuffix", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 28, "parents": [19], "children": [21], "function": "_changeSuffix", "code": "j = next(__iv)"}, "21": {"lineno": 29, "parents": [20], "children": [22], "function": "_changeSuffix", "code": "chars[j] = 'a'"}, "22": {"lineno": 30, "parents": [21, 23], "children": [19, 23], "calls": ["_containsPalindrome"], "function": "_changeSuffix", "code": "_while: self._containsPalindrome(chars, j)"}, "23": {"lineno": 31, "parents": [22, 14], "children": [22], "calls": ["ord", "chr"], "function": "_changeSuffix", "code": "chars[j] = chr(ord(chars[j]) + 1)"}, "24": {"lineno": 32, "parents": [19], "children": [17], "function": "_changeSuffix", "code": "return ''.join(chars)"}, "25": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2672, "task_title": "Number of Adjacent Elements With the Same Color", "difficulty": 2, "func_name": "colorTheArray", "description": "There is a 0-indexed array `nums` of length `n`. Initially, all elements are\nuncolored (has a value of `0`).\n\nYou are given a 2D integer array `queries` where `queries[i] = [indexi,\ncolori]`.\n\nFor each query, you color the index `indexi` with the color `colori` in the\narray `nums`.\n\nReturn an array `answer` of the same length as `queries` where `answer[i]` is\nthe number of adjacent elements with the same color after the `ith` query.\n\nMore formally, `answer[i]` is the number of indices `j`, such that `0 <= j < n\n- 1` and `nums[j] == nums[j + 1]` and `nums[j] != 0` after the `ith` query.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def colorTheArray(self, n: int, queries: List[List[int]]) -> List[int]:\n    ans = []\n    arr = [0] * n\n    sameColors = 0\n\n    for i, color in queries:\n      if i + 1 < n:\n        if arr[i + 1] > 0 and arr[i + 1] == arr[i]:\n          sameColors -= 1\n        if arr[i + 1] == color:\n          sameColors += 1\n      if i > 0:\n        if arr[i - 1] > 0 and arr[i - 1] == arr[i]:\n          sameColors -= 1\n        if arr[i - 1] == color:\n          sameColors += 1\n      arr[i] = color\n      ans.append(sameColors)\n\n    return ans\n", "blocks": [{"type": "if", "start": 18, "end": 22}, {"type": "if", "start": 23, "end": 27}, {"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 24, "end": 25}, {"type": "if", "start": 26, "end": 27}], "target_lines": [19, 20, 21, 22, 24, 25, 26, 27], "cfg": {"0": {"lineno": 0, "parents": [], "children": [22], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "colorTheArray", "code": "enter: colorTheArray(self, n, queries)"}, "2": {"lineno": 12, "parents": [21], "children": [], "function": "colorTheArray", "code": "exit: colorTheArray(self, n, queries)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "colorTheArray", "code": "ans = []"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "colorTheArray", "code": "arr = [0] * n"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "colorTheArray", "code": "sameColors = 0"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "colorTheArray", "code": "__iv = iter(queries)"}, "7": {"lineno": 17, "parents": [20, 6], "children": [8, 21], "function": "colorTheArray", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "colorTheArray", "code": "i, color = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10, 14], "function": "colorTheArray", "code": "_if: i + 1 < n"}, "10": {"lineno": 19, "parents": [9], "children": [11, 12], "function": "colorTheArray", "code": "_if: arr[i + 1] > 0 and arr[i + 1] == arr[i]"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "colorTheArray", "code": "sameColors -= 1"}, "12": {"lineno": 21, "parents": [10, 11], "children": [13, 14], "function": "colorTheArray", "code": "_if: arr[i + 1] == color"}, "13": {"lineno": 22, "parents": [12], "children": [14], "function": "colorTheArray", "code": "sameColors += 1"}, "14": {"lineno": 23, "parents": [9, 12, 13], "children": [19, 15], "function": "colorTheArray", "code": "_if: i > 0"}, "15": {"lineno": 24, "parents": [14], "children": [16, 17], "function": "colorTheArray", "code": "_if: arr[i - 1] > 0 and arr[i - 1] == arr[i]"}, "16": {"lineno": 25, "parents": [15], "children": [17], "function": "colorTheArray", "code": "sameColors -= 1"}, "17": {"lineno": 26, "parents": [16, 15], "children": [18, 19], "function": "colorTheArray", "code": "_if: arr[i - 1] == color"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "colorTheArray", "code": "sameColors += 1"}, "19": {"lineno": 28, "parents": [17, 18, 14], "children": [20], "function": "colorTheArray", "code": "arr[i] = color"}, "20": {"lineno": 29, "parents": [19], "children": [7], "calls": ["append"], "function": "colorTheArray", "code": "ans.append(sameColors)"}, "21": {"lineno": 31, "parents": [7], "children": [2], "function": "colorTheArray", "code": "return ans"}, "22": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2684, "task_title": "Maximum Number of Moves in a Grid", "difficulty": 2, "func_name": "maxMoves", "description": "You are given a 0-indexed `m x n` matrix `grid` consisting of positive\nintegers.\n\nYou can start at any cell in the first column of the matrix, and traverse the\ngrid in the following way:\n\n* From a cell `(row, col)`, you can move to any of the cells: `(row - 1, col + 1)`, `(row, col + 1)` and `(row + 1, col + 1)` such that the value of the cell you move to, should be strictly bigger than the value of the current cell.\n\nReturn the maximum number of moves that you can perform.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def maxMoves(self, grid: List[List[int]]) -> int:\n    m = len(grid)\n    n = len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n\n    for j in range(n - 2, -1, -1):\n      for i in range(m):\n        if grid[i][j + 1] > grid[i][j]:\n          dp[i][j] = 1 + dp[i][j + 1]\n        if i > 0 and grid[i - 1][j + 1] > grid[i][j]:\n          dp[i][j] = max(dp[i][j], 1 + dp[i - 1][j + 1])\n        if i + 1 < m and grid[i + 1][j + 1] > grid[i][j]:\n          dp[i][j] = max(dp[i][j], 1 + dp[i + 1][j + 1])\n\n    return max(dp[i][0] for i in range(m))\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 23, "end": 24}], "target_lines": [20, 22, 24], "cfg": {"0": {"lineno": 0, "parents": [], "children": [19], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "maxMoves", "code": "enter: maxMoves(self, grid)"}, "2": {"lineno": 12, "parents": [18], "children": [], "function": "maxMoves", "code": "exit: maxMoves(self, grid)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "maxMoves", "code": "m = len(grid)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "maxMoves", "code": "n = len(grid[0])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "maxMoves", "code": "dp = [[0] * n for _ in range(m)]"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "maxMoves", "code": "__iv = iter(range(n - 2, -1, -1))"}, "7": {"lineno": 17, "parents": [10, 6], "children": [8, 18], "calls": ["range", "max"], "function": "maxMoves", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "maxMoves", "code": "j = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "maxMoves", "code": "__iv = iter(range(m))"}, "10": {"lineno": 18, "parents": [16, 9, 17], "children": [11, 7], "calls": ["range"], "function": "maxMoves", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 18, "parents": [10], "children": [12], "function": "maxMoves", "code": "i = next(__iv)"}, "12": {"lineno": 19, "parents": [11], "children": [13, 14], "function": "maxMoves", "code": "_if: grid[i][j + 1] > grid[i][j]"}, "13": {"lineno": 20, "parents": [12], "children": [14], "function": "maxMoves", "code": "dp[i][j] = 1 + dp[i][j + 1]"}, "14": {"lineno": 21, "parents": [12, 13], "children": [16, 15], "function": "maxMoves", "code": "_if: i > 0 and grid[i - 1][j + 1] > grid[i][j]"}, "15": {"lineno": 22, "parents": [14], "children": [16], "calls": ["max"], "function": "maxMoves", "code": "dp[i][j] = max(dp[i][j], 1 + dp[i - 1][j + 1])"}, "16": {"lineno": 23, "parents": [14, 15], "children": [17, 10], "function": "maxMoves", "code": "_if: i + 1 < m and grid[i + 1][j + 1] > grid[i][j]"}, "17": {"lineno": 24, "parents": [16], "children": [10], "calls": ["max"], "function": "maxMoves", "code": "dp[i][j] = max(dp[i][j], 1 + dp[i + 1][j + 1])"}, "18": {"lineno": 26, "parents": [7], "children": [2], "function": "maxMoves", "code": "return max((dp[i][0] for i in range(m)))"}, "19": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2685, "task_title": "Count the Number of Complete Components", "difficulty": 2, "func_name": "countCompleteComponents", "description": "You are given an integer `n`. There is an undirected graph with `n` vertices,\nnumbered from `0` to `n - 1`. You are given a 2D integer array `edges` where\n`edges[i] = [ai, bi]` denotes that there exists an undirected edge connecting\nvertices `ai` and `bi`.\n\nReturn the number of complete connected components of the graph.\n\nA connected component is a subgraph of a graph in which there exists a path\nbetween any two vertices, and no vertex of the subgraph shares an edge with a\nvertex outside of the subgraph.\n\nA connected component is said to be complete if there exists an edge between\nevery pair of its vertices.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n    self.nodeCount = [1] * n\n    self.edgeCount = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    self.edgeCount[i] += 1\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n      self.edgeCount[j] += self.edgeCount[i]\n      self.nodeCount[j] += self.nodeCount[i]\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n      self.edgeCount[i] += self.edgeCount[j]\n      self.nodeCount[i] += self.nodeCount[j]\n    else:\n      self.id[i] = j\n      self.edgeCount[j] += self.edgeCount[i]\n      self.nodeCount[j] += self.nodeCount[i]\n      self.rank[j] += 1\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n  def isComplete(self, u):\n    return self.nodeCount[u] * (self.nodeCount[u] - 1) // 2 == self.edgeCount[u]\n\n\nclass Solution:\n  def countCompleteComponents(self, n: int, edges: List[List[int]]) -> int:\n    ans = 0\n    uf = UnionFind(n)\n    parents = set()\n\n    for u, v in edges:\n      uf.unionByRank(u, v)\n\n    for i in range(n):\n      parent = uf.find(i)\n      if parent not in parents and uf.isComplete(parent):\n        ans += 1\n        parents.add(parent)\n\n    return ans\n", "blocks": [{"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 24, "end": 27}, {"type": "if", "start": 39, "end": 40}, {"type": "if", "start": 28, "end": 31}, {"type": "else", "start": 32, "end": 36}, {"type": "if", "start": 58, "end": 60}], "target_lines": [23, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 40, 59, 60], "cfg": {"0": {"lineno": 0, "parents": [], "children": [51], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [6], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "__init__", "code": "self.rank = [0] * n"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "__init__", "code": "self.nodeCount = [1] * n"}, "6": {"lineno": 16, "parents": [5], "children": [2], "function": "__init__", "code": "self.edgeCount = [0] * n"}, "7": {"lineno": 18, "parents": [42], "children": [9], "function": "unionByRank", "code": "enter: unionByRank(self, u, v)"}, "8": {"lineno": 18, "parents": [17, 21, 13, 25], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v)"}, "9": {"lineno": 19, "parents": [7], "children": [10], "calls": ["find"], "function": "unionByRank", "code": "i = self.find(u)"}, "10": {"lineno": 20, "parents": [9, 27], "children": [11], "calls": ["find"], "function": "unionByRank", "code": "j = self.find(v)"}, "11": {"lineno": 21, "parents": [10, 27], "children": [12], "function": "unionByRank", "code": "self.edgeCount[i] += 1"}, "12": {"lineno": 22, "parents": [11], "children": [13, 14], "function": "unionByRank", "code": "_if: i == j"}, "13": {"lineno": 23, "parents": [12], "children": [8], "function": "unionByRank", "code": "return"}, "14": {"lineno": 24, "parents": [12], "children": [18, 15], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "15": {"lineno": 25, "parents": [14], "children": [16], "function": "unionByRank", "code": "self.id[i] = j"}, "16": {"lineno": 26, "parents": [15], "children": [17], "function": "unionByRank", "code": "self.edgeCount[j] += self.edgeCount[i]"}, "17": {"lineno": 27, "parents": [16], "children": [8], "function": "unionByRank", "code": "self.nodeCount[j] += self.nodeCount[i]"}, "18": {"lineno": 28, "parents": [14], "children": [19, 22], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "19": {"lineno": 29, "parents": [18], "children": [20], "function": "unionByRank", "code": "self.id[j] = i"}, "20": {"lineno": 30, "parents": [19], "children": [21], "function": "unionByRank", "code": "self.edgeCount[i] += self.edgeCount[j]"}, "21": {"lineno": 31, "parents": [20], "children": [8], "function": "unionByRank", "code": "self.nodeCount[i] += self.nodeCount[j]"}, "22": {"lineno": 33, "parents": [18], "children": [23], "function": "unionByRank", "code": "self.id[i] = j"}, "23": {"lineno": 34, "parents": [22], "children": [24], "function": "unionByRank", "code": "self.edgeCount[j] += self.edgeCount[i]"}, "24": {"lineno": 35, "parents": [23], "children": [25], "function": "unionByRank", "code": "self.nodeCount[j] += self.nodeCount[i]"}, "25": {"lineno": 36, "parents": [24], "children": [8], "function": "unionByRank", "code": "self.rank[j] += 1"}, "26": {"lineno": 38, "parents": [9, 10, 29, 46], "children": [28], "function": "find", "code": "enter: find(self, u)"}, "27": {"lineno": 38, "parents": [30], "children": [], "function": "find", "code": "exit: find(self, u)"}, "28": {"lineno": 39, "parents": [26], "children": [29, 30], "function": "find", "code": "_if: self.id[u] != u"}, "29": {"lineno": 40, "parents": [28], "children": [30], "calls": ["find"], "function": "find", "code": "self.id[u] = self.find(self.id[u])"}, "30": {"lineno": 41, "parents": [27, 28, 29], "children": [27], "function": "find", "code": "return self.id[u]"}, "31": {"lineno": 43, "parents": [], "children": [33], "function": "isComplete", "code": "enter: isComplete(self, u)"}, "32": {"lineno": 43, "parents": [33], "children": [], "function": "isComplete", "code": "exit: isComplete(self, u)"}, "33": {"lineno": 44, "parents": [31], "children": [32], "function": "isComplete", "code": "return self.nodeCount[u] * (self.nodeCount[u] - 1) // 2 == self.edgeCount[u]"}, "34": {"lineno": 48, "parents": [], "children": [36], "function": "countCompleteComponents", "code": "enter: countCompleteComponents(self, n, edges)"}, "35": {"lineno": 48, "parents": [50], "children": [], "function": "countCompleteComponents", "code": "exit: countCompleteComponents(self, n, edges)"}, "36": {"lineno": 49, "parents": [34], "children": [37], "function": "countCompleteComponents", "code": "ans = 0"}, "37": {"lineno": 50, "parents": [36], "children": [38], "calls": ["UnionFind"], "function": "countCompleteComponents", "code": "uf = UnionFind(n)"}, "38": {"lineno": 51, "parents": [37], "children": [39], "calls": ["set"], "function": "countCompleteComponents", "code": "parents = set()"}, "39": {"lineno": 53, "parents": [38], "children": [40], "function": "countCompleteComponents", "code": "__iv = iter(edges)"}, "40": {"lineno": 53, "parents": [8, 42, 39], "children": [41, 43], "function": "countCompleteComponents", "code": "_for: __iv.__length__hint__() > 0"}, "41": {"lineno": 53, "parents": [40], "children": [42], "function": "countCompleteComponents", "code": "u, v = next(__iv)"}, "42": {"lineno": 54, "parents": [41], "children": [40], "calls": ["unionByRank"], "function": "countCompleteComponents", "code": "uf.unionByRank(u, v)"}, "43": {"lineno": 56, "parents": [40], "children": [44], "function": "countCompleteComponents", "code": "__iv = iter(range(n))"}, "44": {"lineno": 56, "parents": [49, 43, 47], "children": [50, 45], "calls": ["range"], "function": "countCompleteComponents", "code": "_for: __iv.__length__hint__() > 0"}, "45": {"lineno": 56, "parents": [44], "children": [46], "function": "countCompleteComponents", "code": "i = next(__iv)"}, "46": {"lineno": 57, "parents": [45], "children": [47], "calls": ["find"], "function": "countCompleteComponents", "code": "parent = uf.find(i)"}, "47": {"lineno": 58, "parents": [27, 46], "children": [48, 44], "function": "countCompleteComponents", "code": "_if: parent not in parents and uf.isComplete(parent)"}, "48": {"lineno": 59, "parents": [47], "children": [49], "function": "countCompleteComponents", "code": "ans += 1"}, "49": {"lineno": 60, "parents": [48], "children": [44], "calls": ["add"], "function": "countCompleteComponents", "code": "parents.add(parent)"}, "50": {"lineno": 62, "parents": [44], "children": [35], "function": "countCompleteComponents", "code": "return ans"}, "51": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2699, "task_title": "Modify Graph Edge Weights", "difficulty": 3, "func_name": "modifiedGraphEdges", "description": "You are given an undirected weighted connected graph containing `n` nodes\nlabeled from `0` to `n - 1`, and an integer array `edges` where `edges[i] =\n[ai, bi, wi]` indicates that there is an edge between nodes `ai` and `bi` with\nweight `wi`.\n\nSome edges have a weight of `-1` (`wi = -1`), while others have a positive\nweight (`wi > 0`).\n\nYour task is to modify all edges with a weight of `-1` by assigning them\npositive integer values in the range `[1, 2 * 109]` so that the shortest\ndistance between the nodes `source` and `destination` becomes equal to an\ninteger `target`. If there are multiple modifications that make the shortest\ndistance between `source` and `destination` equal to `target`, any of them\nwill be considered correct.\n\nReturn an array containing all edges (even unmodified ones) in any order if it\nis possible to make the shortest distance from `source` to `destination` equal\nto `target`, or an empty array if it's impossible.\n\nNote: You are not allowed to modify the weights of edges with initial positive\nweights.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\n\nclass Solution:\n  def modifiedGraphEdges(self, n: int, edges: List[List[int]], source: int, destination: int, target: int) -> List[List[int]]:\n    kMax = 2_000_000_000\n    graph = [[] for _ in range(n)]\n\n    for u, v, w in edges:\n      if w == -1:\n        continue\n      graph[u].append((v, w))\n      graph[v].append((u, w))\n\n    distToDestination = self._dijkstra(graph, source, destination)\n    if distToDestination < target:\n      return []\n    if distToDestination == target:\n      for edge in edges:\n        if edge[2] == -1:\n          edge[2] = kMax\n      return edges\n\n    for i, (u, v, w) in enumerate(edges):\n      if w != -1:\n        continue\n      edges[i][2] = 1\n      graph[u].append((v, 1))\n      graph[v].append((u, 1))\n      distToDestination = self._dijkstra(graph, source, destination)\n      if distToDestination <= target:\n        edges[i][2] += target - distToDestination\n        for j in range(i + 1, len(edges)):\n          if edges[j][2] == -1:\n            edges[j][2] = kMax\n        return edges\n\n    return []\n\n  def _dijkstra(self, graph: List[List[int]], src: int, dst: int) -> int:\n    dist = [math.inf] * len(graph)\n    minHeap = []\n    dist[src] = 0\n    heapq.heappush(minHeap, (dist[src], src))\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      if d > dist[u]:\n        continue\n      for v, w in graph[u]:\n        if d + w < dist[v]:\n          dist[v] = d + w\n          heapq.heappush(minHeap, (dist[v], v))\n\n    return dist[dst]\n", "blocks": [{"type": "if", "start": 24, "end": 25}, {"type": "if", "start": 26, "end": 30}, {"type": "if", "start": 18, "end": 19}, {"type": "if", "start": 33, "end": 34}, {"type": "if", "start": 39, "end": 44}, {"type": "if", "start": 56, "end": 57}, {"type": "if", "start": 28, "end": 29}, {"type": "if", "start": 59, "end": 61}, {"type": "if", "start": 42, "end": 43}], "target_lines": [19, 25, 27, 28, 29, 30, 34, 40, 41, 42, 43, 44, 57, 60, 61], "cfg": {"0": {"lineno": 0, "parents": [], "children": [57], "function": "", "code": "start"}, "1": {"lineno": 13, "parents": [], "children": [3], "function": "modifiedGraphEdges", "code": "enter: modifiedGraphEdges(self, n, edges, source, destination, target)"}, "2": {"lineno": 13, "parents": [38, 21, 14, 39], "children": [], "function": "modifiedGraphEdges", "code": "exit: modifiedGraphEdges(self, n, edges, source, destination, target)"}, "3": {"lineno": 14, "parents": [1], "children": [4], "function": "modifiedGraphEdges", "code": "kMax = 2000000000"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "modifiedGraphEdges", "code": "graph = [[] for _ in range(n)]"}, "5": {"lineno": 17, "parents": [4], "children": [6], "function": "modifiedGraphEdges", "code": "__iv = iter(edges)"}, "6": {"lineno": 17, "parents": [9, 11, 5], "children": [12, 7], "function": "modifiedGraphEdges", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "modifiedGraphEdges", "code": "u, v, w = next(__iv)"}, "8": {"lineno": 18, "parents": [7], "children": [9, 10], "function": "modifiedGraphEdges", "code": "_if: w == -1"}, "9": {"lineno": 19, "parents": [8], "children": [6], "function": "modifiedGraphEdges", "code": "continue"}, "10": {"lineno": 20, "parents": [8], "children": [11], "calls": ["append"], "function": "modifiedGraphEdges", "code": "graph[u].append((v, w))"}, "11": {"lineno": 21, "parents": [10], "children": [6], "calls": ["append"], "function": "modifiedGraphEdges", "code": "graph[v].append((u, w))"}, "12": {"lineno": 23, "parents": [6], "children": [13], "calls": ["_dijkstra"], "function": "modifiedGraphEdges", "code": "distToDestination = self._dijkstra(graph, source, destination)"}, "13": {"lineno": 24, "parents": [41, 12], "children": [14, 15], "function": "modifiedGraphEdges", "code": "_if: distToDestination < target"}, "14": {"lineno": 25, "parents": [13], "children": [2], "function": "modifiedGraphEdges", "code": "return []"}, "15": {"lineno": 26, "parents": [13], "children": [16, 22], "function": "modifiedGraphEdges", "code": "_if: distToDestination == target"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "modifiedGraphEdges", "code": "__iv = iter(edges)"}, "17": {"lineno": 27, "parents": [16, 19, 20], "children": [18, 21], "function": "modifiedGraphEdges", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "modifiedGraphEdges", "code": "edge = next(__iv)"}, "19": {"lineno": 28, "parents": [18], "children": [17, 20], "function": "modifiedGraphEdges", "code": "_if: edge[2] == -1"}, "20": {"lineno": 29, "parents": [19], "children": [17], "function": "modifiedGraphEdges", "code": "edge[2] = kMax"}, "21": {"lineno": 30, "parents": [17], "children": [2], "function": "modifiedGraphEdges", "code": "return edges"}, "22": {"lineno": 32, "parents": [15], "children": [23], "function": "modifiedGraphEdges", "code": "__iv = iter(enumerate(edges))"}, "23": {"lineno": 32, "parents": [26, 22, 31], "children": [24, 39], "calls": ["enumerate"], "function": "modifiedGraphEdges", "code": "_for: __iv.__length__hint__() > 0"}, "24": {"lineno": 32, "parents": [23], "children": [25], "function": "modifiedGraphEdges", "code": "i, (u, v, w) = next(__iv)"}, "25": {"lineno": 33, "parents": [24], "children": [26, 27], "function": "modifiedGraphEdges", "code": "_if: w != -1"}, "26": {"lineno": 34, "parents": [25], "children": [23], "function": "modifiedGraphEdges", "code": "continue"}, "27": {"lineno": 35, "parents": [25], "children": [28], "function": "modifiedGraphEdges", "code": "edges[i][2] = 1"}, "28": {"lineno": 36, "parents": [27], "children": [29], "calls": ["append"], "function": "modifiedGraphEdges", "code": "graph[u].append((v, 1))"}, "29": {"lineno": 37, "parents": [28], "children": [30], "calls": ["append"], "function": "modifiedGraphEdges", "code": "graph[v].append((u, 1))"}, "30": {"lineno": 38, "parents": [29], "children": [31], "calls": ["_dijkstra"], "function": "modifiedGraphEdges", "code": "distToDestination = self._dijkstra(graph, source, destination)"}, "31": {"lineno": 39, "parents": [41, 30], "children": [32, 23], "function": "modifiedGraphEdges", "code": "_if: distToDestination <= target"}, "32": {"lineno": 40, "parents": [31], "children": [33], "function": "modifiedGraphEdges", "code": "edges[i][2] += target - distToDestination"}, "33": {"lineno": 41, "parents": [32], "children": [34], "function": "modifiedGraphEdges", "code": "__iv = iter(range(i + 1, len(edges)))"}, "34": {"lineno": 41, "parents": [33, 36, 37], "children": [35, 38], "calls": ["len", "range"], "function": "modifiedGraphEdges", "code": "_for: __iv.__length__hint__() > 0"}, "35": {"lineno": 41, "parents": [34], "children": [36], "function": "modifiedGraphEdges", "code": "j = next(__iv)"}, "36": {"lineno": 42, "parents": [35], "children": [34, 37], "function": "modifiedGraphEdges", "code": "_if: edges[j][2] == -1"}, "37": {"lineno": 43, "parents": [36], "children": [34], "function": "modifiedGraphEdges", "code": "edges[j][2] = kMax"}, "38": {"lineno": 44, "parents": [34], "children": [2], "function": "modifiedGraphEdges", "code": "return edges"}, "39": {"lineno": 46, "parents": [23], "children": [2], "function": "modifiedGraphEdges", "code": "return []"}, "40": {"lineno": 48, "parents": [12, 30], "children": [42], "function": "_dijkstra", "code": "enter: _dijkstra(self, graph, src, dst)"}, "41": {"lineno": 48, "parents": [56], "children": [], "function": "_dijkstra", "code": "exit: _dijkstra(self, graph, src, dst)"}, "42": {"lineno": 49, "parents": [40], "children": [43], "calls": ["len"], "function": "_dijkstra", "code": "dist = [math.inf] * len(graph)"}, "43": {"lineno": 50, "parents": [42], "children": [44], "function": "_dijkstra", "code": "minHeap = []"}, "44": {"lineno": 51, "parents": [43], "children": [45], "function": "_dijkstra", "code": "dist[src] = 0"}, "45": {"lineno": 52, "parents": [44], "children": [46], "calls": ["heappush"], "function": "_dijkstra", "code": "heapq.heappush(minHeap, (dist[src], src))"}, "46": {"lineno": 54, "parents": [49, 51, 45], "children": [56, 47], "function": "_dijkstra", "code": "_while: minHeap"}, "47": {"lineno": 55, "parents": [46], "children": [48], "calls": ["heappop"], "function": "_dijkstra", "code": "d, u = heapq.heappop(minHeap)"}, "48": {"lineno": 56, "parents": [47], "children": [49, 50], "function": "_dijkstra", "code": "_if: d > dist[u]"}, "49": {"lineno": 57, "parents": [48], "children": [46], "function": "_dijkstra", "code": "continue"}, "50": {"lineno": 58, "parents": [48], "children": [51], "function": "_dijkstra", "code": "__iv = iter(graph[u])"}, "51": {"lineno": 58, "parents": [50, 53, 55], "children": [52, 46], "function": "_dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "52": {"lineno": 58, "parents": [51], "children": [53], "function": "_dijkstra", "code": "v, w = next(__iv)"}, "53": {"lineno": 59, "parents": [52], "children": [51, 54], "function": "_dijkstra", "code": "_if: d + w < dist[v]"}, "54": {"lineno": 60, "parents": [53], "children": [55], "function": "_dijkstra", "code": "dist[v] = d + w"}, "55": {"lineno": 61, "parents": [54], "children": [51], "calls": ["heappush"], "function": "_dijkstra", "code": "heapq.heappush(minHeap, (dist[v], v))"}, "56": {"lineno": 63, "parents": [46], "children": [41], "function": "_dijkstra", "code": "return dist[dst]"}, "57": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2708, "task_title": "Maximum Strength of a Group", "difficulty": 2, "func_name": "maxStrength", "description": "You are given a 0-indexed integer array `nums` representing the score of\nstudents in an exam. The teacher would like to form one non-empty group of\nstudents with maximal strength, where the strength of a group of students of\nindices `i0`, `i1`, `i2`, ... , `ik` is defined as `nums[i0] * nums[i1] *\nnums[i2] * ... * nums[ik\u200b]`.\n\nReturn the maximum strength of a group the teacher can create.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def maxStrength(self, nums: List[int]) -> int:\n    posProd = 1\n    negProd = 1\n    maxNeg = -math.inf\n    negCount = 0\n    hasPos = False\n    hasZero = False\n\n    for num in nums:\n      if num > 0:\n        posProd *= num\n        hasPos = True\n      elif num < 0:\n        negProd *= num\n        maxNeg = max(maxNeg, num)\n        negCount += 1\n      else:\n        hasZero = True\n\n    if negCount == 0 and not hasPos:\n      return 0\n    if negCount % 2 == 0:\n      return negProd * posProd\n    if negCount >= 3:\n      return negProd // maxNeg * posProd\n    if hasPos:\n      return posProd\n    if hasZero:\n      return 0\n    return maxNeg\n", "blocks": [{"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 33, "end": 34}, {"type": "if", "start": 35, "end": 36}, {"type": "if", "start": 37, "end": 38}, {"type": "if", "start": 39, "end": 40}, {"type": "if", "start": 21, "end": 23}, {"type": "if", "start": 24, "end": 27}, {"type": "else", "start": 28, "end": 29}], "target_lines": [22, 23, 25, 26, 27, 29, 32, 34, 36, 38, 40], "cfg": {"0": {"lineno": 0, "parents": [], "children": [31], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "maxStrength", "code": "enter: maxStrength(self, nums)"}, "2": {"lineno": 12, "parents": [21, 23, 25, 27, 29, 30], "children": [], "function": "maxStrength", "code": "exit: maxStrength(self, nums)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "maxStrength", "code": "posProd = 1"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "maxStrength", "code": "negProd = 1"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "maxStrength", "code": "maxNeg = -math.inf"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "maxStrength", "code": "negCount = 0"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "maxStrength", "code": "hasPos = False"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "maxStrength", "code": "hasZero = False"}, "9": {"lineno": 20, "parents": [8], "children": [10], "function": "maxStrength", "code": "__iv = iter(nums)"}, "10": {"lineno": 20, "parents": [9, 18, 19, 14], "children": [11, 20], "function": "maxStrength", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "maxStrength", "code": "num = next(__iv)"}, "12": {"lineno": 21, "parents": [11], "children": [13, 15], "function": "maxStrength", "code": "_if: num > 0"}, "13": {"lineno": 22, "parents": [12], "children": [14], "function": "maxStrength", "code": "posProd *= num"}, "14": {"lineno": 23, "parents": [13], "children": [10], "function": "maxStrength", "code": "hasPos = True"}, "15": {"lineno": 24, "parents": [12], "children": [16, 19], "function": "maxStrength", "code": "_if: num < 0"}, "16": {"lineno": 25, "parents": [15], "children": [17], "function": "maxStrength", "code": "negProd *= num"}, "17": {"lineno": 26, "parents": [16], "children": [18], "calls": ["max"], "function": "maxStrength", "code": "maxNeg = max(maxNeg, num)"}, "18": {"lineno": 27, "parents": [17], "children": [10], "function": "maxStrength", "code": "negCount += 1"}, "19": {"lineno": 29, "parents": [15], "children": [10], "function": "maxStrength", "code": "hasZero = True"}, "20": {"lineno": 31, "parents": [10], "children": [21, 22], "function": "maxStrength", "code": "_if: negCount == 0 and (not hasPos)"}, "21": {"lineno": 32, "parents": [20], "children": [2], "function": "maxStrength", "code": "return 0"}, "22": {"lineno": 33, "parents": [20], "children": [24, 23], "function": "maxStrength", "code": "_if: negCount % 2 == 0"}, "23": {"lineno": 34, "parents": [22], "children": [2], "function": "maxStrength", "code": "return negProd * posProd"}, "24": {"lineno": 35, "parents": [22], "children": [25, 26], "function": "maxStrength", "code": "_if: negCount >= 3"}, "25": {"lineno": 36, "parents": [24], "children": [2], "function": "maxStrength", "code": "return negProd // maxNeg * posProd"}, "26": {"lineno": 37, "parents": [24], "children": [27, 28], "function": "maxStrength", "code": "_if: hasPos"}, "27": {"lineno": 38, "parents": [26], "children": [2], "function": "maxStrength", "code": "return posProd"}, "28": {"lineno": 39, "parents": [26], "children": [29, 30], "function": "maxStrength", "code": "_if: hasZero"}, "29": {"lineno": 40, "parents": [28], "children": [2], "function": "maxStrength", "code": "return 0"}, "30": {"lineno": 41, "parents": [28], "children": [2], "function": "maxStrength", "code": "return maxNeg"}, "31": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2709, "task_title": "Greatest Common Divisor Traversal", "difficulty": 3, "func_name": "canTraverseAllPairs", "description": "You are given a 0-indexed integer array `nums`, and you are allowed to\ntraverse between its indices. You can traverse between index `i` and index\n`j`, `i != j`, if and only if `gcd(nums[i], nums[j]) > 1`, where `gcd` is the\ngreatest common divisor.\n\nYour task is to determine if for every pair of indices `i` and `j` in nums,\nwhere `i < j`, there exists a sequence of traversals that can take us from `i`\nto `j`.\n\nReturn `true` if it is possible to traverse between all such pairs of indices,\nor `false` otherwise.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.sz = [1] * n\n\n  def unionBySize(self, u: int, v: int) -> None:\n    i = self._find(u)\n    j = self._find(v)\n    if i == j:\n      return\n    if self.sz[i] < self.sz[j]:\n      self.sz[j] += self.sz[i]\n      self.id[i] = j\n    else:\n      self.sz[i] += self.sz[j]\n      self.id[j] = i\n\n  def getSize(self, i: int) -> int:\n    return self.sz[i]\n\n  def _find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self._find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def canTraverseAllPairs(self, nums: List[int]) -> bool:\n    n = len(nums)\n    max_num = max(nums)\n    maxPrimeFactor = self._sieveEratosthenes(max_num + 1)\n    primeToFirstIndex = collections.defaultdict(int)\n    uf = UnionFind(n)\n\n    for i, num in enumerate(nums):\n      for prime_factor in self._getPrimeFactors(num, maxPrimeFactor):\n        if prime_factor in primeToFirstIndex:\n          uf.unionBySize(primeToFirstIndex[prime_factor], i)\n        else:\n          primeToFirstIndex[prime_factor] = i\n\n    return any(uf.getSize(i) == n for i in range(n))\n\n  def _sieveEratosthenes(self, n: int) -> List[int]:\n    minPrimeFactors = [i for i in range(n + 1)]\n    for i in range(2, int(n**0.5) + 1):\n      if minPrimeFactors[i] == i:\n        for j in range(i * i, n, i):\n          minPrimeFactors[j] = min(minPrimeFactors[j], i)\n    return minPrimeFactors\n\n  def _getPrimeFactors(self, num: int, minPrimeFactors: List[int]) -> List[int]:\n    primeFactors = []\n    while num > 1:\n      divisor = minPrimeFactors[num]\n      primeFactors.append(divisor)\n      while num % divisor == 0:\n        num //= divisor\n    return primeFactors\n", "blocks": [{"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 21, "end": 23}, {"type": "else", "start": 24, "end": 26}, {"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 57, "end": 59}, {"type": "if", "start": 47, "end": 48}, {"type": "else", "start": 49, "end": 50}], "target_lines": [20, 22, 23, 25, 26, 33, 48, 50, 58, 59], "cfg": {"0": {"lineno": 0, "parents": [], "children": [62], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.sz = [1] * n"}, "5": {"lineno": 16, "parents": [38], "children": [7], "function": "unionBySize", "code": "enter: unionBySize(self, u, v)"}, "6": {"lineno": 16, "parents": [10, 13, 15], "children": [], "function": "unionBySize", "code": "exit: unionBySize(self, u, v)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "calls": ["_find"], "function": "unionBySize", "code": "i = self._find(u)"}, "8": {"lineno": 18, "parents": [20, 7], "children": [9], "calls": ["_find"], "function": "unionBySize", "code": "j = self._find(v)"}, "9": {"lineno": 19, "parents": [8, 20], "children": [10, 11], "function": "unionBySize", "code": "_if: i == j"}, "10": {"lineno": 20, "parents": [9], "children": [6], "function": "unionBySize", "code": "return"}, "11": {"lineno": 21, "parents": [9], "children": [12, 14], "function": "unionBySize", "code": "_if: self.sz[i] < self.sz[j]"}, "12": {"lineno": 22, "parents": [11], "children": [13], "function": "unionBySize", "code": "self.sz[j] += self.sz[i]"}, "13": {"lineno": 23, "parents": [12], "children": [6], "function": "unionBySize", "code": "self.id[i] = j"}, "14": {"lineno": 25, "parents": [11], "children": [15], "function": "unionBySize", "code": "self.sz[i] += self.sz[j]"}, "15": {"lineno": 26, "parents": [14], "children": [6], "function": "unionBySize", "code": "self.id[j] = i"}, "16": {"lineno": 28, "parents": [], "children": [18], "function": "getSize", "code": "enter: getSize(self, i)"}, "17": {"lineno": 28, "parents": [18], "children": [], "function": "getSize", "code": "exit: getSize(self, i)"}, "18": {"lineno": 29, "parents": [16], "children": [17], "function": "getSize", "code": "return self.sz[i]"}, "19": {"lineno": 31, "parents": [8, 22, 7], "children": [21], "function": "_find", "code": "enter: _find(self, u)"}, "20": {"lineno": 31, "parents": [23], "children": [], "function": "_find", "code": "exit: _find(self, u)"}, "21": {"lineno": 32, "parents": [19], "children": [22, 23], "function": "_find", "code": "_if: self.id[u] != u"}, "22": {"lineno": 33, "parents": [21], "children": [23], "calls": ["_find"], "function": "_find", "code": "self.id[u] = self._find(self.id[u])"}, "23": {"lineno": 34, "parents": [20, 21, 22], "children": [20], "function": "_find", "code": "return self.id[u]"}, "24": {"lineno": 38, "parents": [], "children": [26], "function": "canTraverseAllPairs", "code": "enter: canTraverseAllPairs(self, nums)"}, "25": {"lineno": 38, "parents": [40], "children": [], "function": "canTraverseAllPairs", "code": "exit: canTraverseAllPairs(self, nums)"}, "26": {"lineno": 39, "parents": [24], "children": [27], "calls": ["len"], "function": "canTraverseAllPairs", "code": "n = len(nums)"}, "27": {"lineno": 40, "parents": [26], "children": [28], "calls": ["max"], "function": "canTraverseAllPairs", "code": "max_num = max(nums)"}, "28": {"lineno": 41, "parents": [27], "children": [29], "calls": ["_sieveEratosthenes"], "function": "canTraverseAllPairs", "code": "maxPrimeFactor = self._sieveEratosthenes(max_num + 1)"}, "29": {"lineno": 42, "parents": [42, 28], "children": [30], "calls": ["defaultdict"], "function": "canTraverseAllPairs", "code": "primeToFirstIndex = collections.defaultdict(int)"}, "30": {"lineno": 43, "parents": [29], "children": [31], "calls": ["UnionFind"], "function": "canTraverseAllPairs", "code": "uf = UnionFind(n)"}, "31": {"lineno": 45, "parents": [30], "children": [32], "function": "canTraverseAllPairs", "code": "__iv = iter(enumerate(nums))"}, "32": {"lineno": 45, "parents": [35, 54, 31], "children": [40, 33], "calls": ["enumerate", "any"], "function": "canTraverseAllPairs", "code": "_for: __iv.__length__hint__() > 0"}, "33": {"lineno": 45, "parents": [32], "children": [34], "function": "canTraverseAllPairs", "code": "i, num = next(__iv)"}, "34": {"lineno": 46, "parents": [33], "children": [35], "function": "canTraverseAllPairs", "code": "__iv = iter(self._getPrimeFactors(num, maxPrimeFactor))"}, "35": {"lineno": 46, "parents": [34, 6, 38, 39], "children": [32, 36], "calls": ["_getPrimeFactors"], "function": "canTraverseAllPairs", "code": "_for: __iv.__length__hint__() > 0"}, "36": {"lineno": 46, "parents": [35, 54], "children": [37], "function": "canTraverseAllPairs", "code": "prime_factor = next(__iv)"}, "37": {"lineno": 47, "parents": [36], "children": [38, 39], "function": "canTraverseAllPairs", "code": "_if: prime_factor in primeToFirstIndex"}, "38": {"lineno": 48, "parents": [37], "children": [35], "calls": ["unionBySize"], "function": "canTraverseAllPairs", "code": "uf.unionBySize(primeToFirstIndex[prime_factor], i)"}, "39": {"lineno": 50, "parents": [37], "children": [35], "function": "canTraverseAllPairs", "code": "primeToFirstIndex[prime_factor] = i"}, "40": {"lineno": 52, "parents": [32], "children": [25], "function": "canTraverseAllPairs", "code": "return any((uf.getSize(i) == n for i in range(n)))"}, "41": {"lineno": 54, "parents": [28], "children": [43], "function": "_sieveEratosthenes", "code": "enter: _sieveEratosthenes(self, n)"}, "42": {"lineno": 54, "parents": [52], "children": [], "function": "_sieveEratosthenes", "code": "exit: _sieveEratosthenes(self, n)"}, "43": {"lineno": 55, "parents": [41], "children": [44], "function": "_sieveEratosthenes", "code": "minPrimeFactors = [i for i in range(n + 1)]"}, "44": {"lineno": 56, "parents": [43], "children": [45], "function": "_sieveEratosthenes", "code": "__iv = iter(range(2, int(n ** 0.5) + 1))"}, "45": {"lineno": 56, "parents": [49, 44, 47], "children": [52, 46], "calls": ["int", "range"], "function": "_sieveEratosthenes", "code": "_for: __iv.__length__hint__() > 0"}, "46": {"lineno": 56, "parents": [45], "children": [47], "function": "_sieveEratosthenes", "code": "i = next(__iv)"}, "47": {"lineno": 57, "parents": [46], "children": [48, 45], "function": "_sieveEratosthenes", "code": "_if: minPrimeFactors[i] == i"}, "48": {"lineno": 58, "parents": [47], "children": [49], "function": "_sieveEratosthenes", "code": "__iv = iter(range(i * i, n, i))"}, "49": {"lineno": 58, "parents": [48, 51], "children": [50, 45], "calls": ["range"], "function": "_sieveEratosthenes", "code": "_for: __iv.__length__hint__() > 0"}, "50": {"lineno": 58, "parents": [49], "children": [51], "function": "_sieveEratosthenes", "code": "j = next(__iv)"}, "51": {"lineno": 59, "parents": [50], "children": [49], "calls": ["min"], "function": "_sieveEratosthenes", "code": "minPrimeFactors[j] = min(minPrimeFactors[j], i)"}, "52": {"lineno": 60, "parents": [45], "children": [42], "function": "_sieveEratosthenes", "code": "return minPrimeFactors"}, "53": {"lineno": 62, "parents": [35], "children": [55], "function": "_getPrimeFactors", "code": "enter: _getPrimeFactors(self, num, minPrimeFactors)"}, "54": {"lineno": 62, "parents": [61], "children": [], "function": "_getPrimeFactors", "code": "exit: _getPrimeFactors(self, num, minPrimeFactors)"}, "55": {"lineno": 63, "parents": [53], "children": [56], "function": "_getPrimeFactors", "code": "primeFactors = []"}, "56": {"lineno": 64, "parents": [59, 55], "children": [57, 61], "function": "_getPrimeFactors", "code": "_while: num > 1"}, "57": {"lineno": 65, "parents": [56], "children": [58], "function": "_getPrimeFactors", "code": "divisor = minPrimeFactors[num]"}, "58": {"lineno": 66, "parents": [57], "children": [59], "calls": ["append"], "function": "_getPrimeFactors", "code": "primeFactors.append(divisor)"}, "59": {"lineno": 67, "parents": [58, 60], "children": [56, 60], "function": "_getPrimeFactors", "code": "_while: num % divisor == 0"}, "60": {"lineno": 68, "parents": [59], "children": [59], "function": "_getPrimeFactors", "code": "num //= divisor"}, "61": {"lineno": 69, "parents": [56], "children": [54], "function": "_getPrimeFactors", "code": "return primeFactors"}, "62": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2736, "task_title": "Maximum Sum Queries", "difficulty": 3, "func_name": "maximumSumQueries", "description": "You are given two 0-indexed integer arrays `nums1` and `nums2`, each of length\n`n`, and a 1-indexed 2D array `queries` where `queries[i] = [xi, yi]`.\n\nFor the `ith` query, find the maximum value of `nums1[j] + nums2[j]` among all\nindices `j` `(0 <= j < n)`, where `nums1[j] >= xi` and `nums2[j] >= yi`, or -1\nif there is no `j` satisfying the constraints.\n\nReturn an array `answer` where `answer[i]` is the answer to the `ith` query.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Pair:\n  def __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n\n  def __iter__(self):\n    yield self.x\n    yield self.y\n\n\nclass IndexedQuery:\n  def __init__(self, queryIndex: int, minX: int, minY: int):\n    self.queryIndex = queryIndex\n    self.minX = minX\n    self.minY = minY\n\n  def __iter__(self):\n    yield self.queryIndex\n    yield self.minX\n    yield self.minY\n\n\nclass Solution:\n  def maximumSumQueries(self, nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:\n    pairs = sorted([Pair(nums1[i], nums2[i])\n                   for i in range(len(nums1))], key=lambda p: p.x, reverse=True)\n    ans = [0] * len(queries)\n    stack = []  # [(y, x + y)]\n\n    pairsIndex = 0\n    for queryIndex, minX, minY in sorted([IndexedQuery(i, query[0], query[1]) for i, query in enumerate(queries)], key=lambda iq: -iq.minX):\n      while pairsIndex < len(pairs) and pairs[pairsIndex].x >= minX:\n        x, y = pairs[pairsIndex]\n        while stack and x + y >= stack[-1][1]:\n          stack.pop()\n        if not stack or y > stack[-1][0]:\n          stack.append((y, x + y))\n        pairsIndex += 1\n      j = self._firstGreaterEqual(stack, minY)\n      if j == len(stack):\n        ans[queryIndex] = -1\n      else:\n        ans[queryIndex] = stack[j][1]\n\n    return ans\n\n  def _firstGreaterEqual(self, A: List[Tuple[int, int]], target: int) -> int:\n    l = 0\n    r = len(A)\n    while l < r:\n      m = (l + r) // 2\n      if A[m][0] >= target:\n        r = m\n      else:\n        l = m + 1\n    return l\n", "blocks": [{"type": "if", "start": 50, "end": 51}, {"type": "else", "start": 52, "end": 53}, {"type": "if", "start": 62, "end": 63}, {"type": "else", "start": 64, "end": 65}, {"type": "if", "start": 46, "end": 47}], "target_lines": [47, 51, 53, 63, 65], "cfg": {"0": {"lineno": 0, "parents": [], "children": [50], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, x, y)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, x, y)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "__init__", "code": "self.x = x"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.y = y"}, "5": {"lineno": 16, "parents": [], "children": [7], "function": "__iter__", "code": "enter: __iter__(self)"}, "6": {"lineno": 16, "parents": [8], "children": [], "function": "__iter__", "code": "exit: __iter__(self)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "function": "__iter__", "code": "yield self.x"}, "8": {"lineno": 18, "parents": [7], "children": [6], "function": "__iter__", "code": "yield self.y"}, "9": {"lineno": 22, "parents": [], "children": [11], "function": "__init__", "code": "enter: __init__(self, queryIndex, minX, minY)"}, "10": {"lineno": 22, "parents": [13], "children": [], "function": "__init__", "code": "exit: __init__(self, queryIndex, minX, minY)"}, "11": {"lineno": 23, "parents": [9], "children": [12], "function": "__init__", "code": "self.queryIndex = queryIndex"}, "12": {"lineno": 24, "parents": [11], "children": [13], "function": "__init__", "code": "self.minX = minX"}, "13": {"lineno": 25, "parents": [12], "children": [10], "function": "__init__", "code": "self.minY = minY"}, "14": {"lineno": 27, "parents": [], "children": [16], "function": "__iter__", "code": "enter: __iter__(self)"}, "15": {"lineno": 27, "parents": [18], "children": [], "function": "__iter__", "code": "exit: __iter__(self)"}, "16": {"lineno": 28, "parents": [14], "children": [17], "function": "__iter__", "code": "yield self.queryIndex"}, "17": {"lineno": 29, "parents": [16], "children": [18], "function": "__iter__", "code": "yield self.minX"}, "18": {"lineno": 30, "parents": [17], "children": [15], "function": "__iter__", "code": "yield self.minY"}, "19": {"lineno": 34, "parents": [], "children": [21], "function": "maximumSumQueries", "code": "enter: maximumSumQueries(self, nums1, nums2, queries)"}, "20": {"lineno": 34, "parents": [39], "children": [], "function": "maximumSumQueries", "code": "exit: maximumSumQueries(self, nums1, nums2, queries)"}, "21": {"lineno": 35, "parents": [19], "children": [22], "calls": ["sorted"], "function": "maximumSumQueries", "code": "pairs = sorted([Pair(nums1[i], nums2[i]) for i in range(len(nums1))], key=lambda p: p.x, reverse=True)"}, "22": {"lineno": 37, "parents": [21], "children": [23], "calls": ["len"], "function": "maximumSumQueries", "code": "ans = [0] * len(queries)"}, "23": {"lineno": 38, "parents": [22], "children": [24], "function": "maximumSumQueries", "code": "stack = []"}, "24": {"lineno": 40, "parents": [23], "children": [25], "function": "maximumSumQueries", "code": "pairsIndex = 0"}, "25": {"lineno": 41, "parents": [24], "children": [26], "function": "maximumSumQueries", "code": "__iv = iter(sorted([IndexedQuery(i, query[0], query[1]) for i, query in enumerate(queries)], key=lambda iq: -iq.minX))"}, "26": {"lineno": 41, "parents": [25, 37, 38], "children": [27, 39], "calls": ["sorted"], "function": "maximumSumQueries", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 41, "parents": [26], "children": [28], "function": "maximumSumQueries", "code": "queryIndex, minX, minY = next(__iv)"}, "28": {"lineno": 42, "parents": [34, 27], "children": [35, 29], "function": "maximumSumQueries", "code": "_while: pairsIndex < len(pairs) and pairs[pairsIndex].x >= minX"}, "29": {"lineno": 43, "parents": [28], "children": [30], "function": "maximumSumQueries", "code": "x, y = pairs[pairsIndex]"}, "30": {"lineno": 44, "parents": [29, 31], "children": [32, 31], "function": "maximumSumQueries", "code": "_while: stack and x + y >= stack[-1][1]"}, "31": {"lineno": 45, "parents": [30], "children": [30], "calls": ["pop"], "function": "maximumSumQueries", "code": "stack.pop()"}, "32": {"lineno": 46, "parents": [30], "children": [33, 34], "function": "maximumSumQueries", "code": "_if: not stack or y > stack[-1][0]"}, "33": {"lineno": 47, "parents": [32], "children": [34], "calls": ["append"], "function": "maximumSumQueries", "code": "stack.append((y, x + y))"}, "34": {"lineno": 48, "parents": [32, 33], "children": [28], "function": "maximumSumQueries", "code": "pairsIndex += 1"}, "35": {"lineno": 49, "parents": [28], "children": [36], "calls": ["_firstGreaterEqual"], "function": "maximumSumQueries", "code": "j = self._firstGreaterEqual(stack, minY)"}, "36": {"lineno": 50, "parents": [41, 35], "children": [37, 38], "calls": ["len"], "function": "maximumSumQueries", "code": "_if: j == len(stack)"}, "37": {"lineno": 51, "parents": [36], "children": [26], "function": "maximumSumQueries", "code": "ans[queryIndex] = -1"}, "38": {"lineno": 53, "parents": [36], "children": [26], "function": "maximumSumQueries", "code": "ans[queryIndex] = stack[j][1]"}, "39": {"lineno": 55, "parents": [26], "children": [20], "function": "maximumSumQueries", "code": "return ans"}, "40": {"lineno": 57, "parents": [35], "children": [42], "function": "_firstGreaterEqual", "code": "enter: _firstGreaterEqual(self, A, target)"}, "41": {"lineno": 57, "parents": [49], "children": [], "function": "_firstGreaterEqual", "code": "exit: _firstGreaterEqual(self, A, target)"}, "42": {"lineno": 58, "parents": [40], "children": [43], "function": "_firstGreaterEqual", "code": "l = 0"}, "43": {"lineno": 59, "parents": [42], "children": [44], "calls": ["len"], "function": "_firstGreaterEqual", "code": "r = len(A)"}, "44": {"lineno": 60, "parents": [48, 43, 47], "children": [49, 45], "function": "_firstGreaterEqual", "code": "_while: l < r"}, "45": {"lineno": 61, "parents": [44], "children": [46], "function": "_firstGreaterEqual", "code": "m = (l + r) // 2"}, "46": {"lineno": 62, "parents": [45], "children": [48, 47], "function": "_firstGreaterEqual", "code": "_if: A[m][0] >= target"}, "47": {"lineno": 63, "parents": [46], "children": [44], "function": "_firstGreaterEqual", "code": "r = m"}, "48": {"lineno": 65, "parents": [46], "children": [44], "function": "_firstGreaterEqual", "code": "l = m + 1"}, "49": {"lineno": 66, "parents": [44], "children": [41], "function": "_firstGreaterEqual", "code": "return l"}, "50": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2747, "task_title": "Count Zero Request Servers", "difficulty": 2, "func_name": "countServers", "description": "You are given an integer `n` denoting the total number of servers and a 2D\n0-indexed integer array `logs`, where `logs[i] = [server_id, time]` denotes\nthat the server with id `server_id` received a request at time `time`.\n\nYou are also given an integer `x` and a 0-indexed integer array `queries`.\n\nReturn a 0-indexed integer array `arr` of length `queries.length` where\n`arr[i]` represents the number of servers that did not receive any requests\nduring the time interval `[queries[i] - x, queries[i]]`.\n\nNote that the time intervals are inclusive.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass IndexedQuery:\n  def __init__(self, queryIndex: int, query: int):\n    self.queryIndex = queryIndex\n    self.query = query\n\n  def __iter__(self):\n    yield self.queryIndex\n    yield self.query\n\n\nclass Solution:\n  def countServers(self, n: int, logs: List[List[int]], x: int, queries: List[int]) -> List[int]:\n    ans = [0] * len(queries)\n    count = [0] * (n + 1)\n\n    logs.sort(key=lambda log: log[1])\n\n    i = 0\n    j = 0\n    servers = 0\n\n    for queryIndex, query in sorted([IndexedQuery(i, query) for i, query in enumerate(queries)], key=lambda iq: iq.query):\n      while j < len(logs) and logs[j][1] <= query:\n        count[logs[j][0]] += 1\n        if count[logs[j][0]] == 1:\n          servers += 1\n        j += 1\n      while i < len(logs) and logs[i][1] < query - x:\n        count[logs[i][0]] -= 1\n        if count[logs[i][0]] == 0:\n          servers -= 1\n        i += 1\n      ans[queryIndex] = n - servers\n\n    return ans\n", "blocks": [{"type": "if", "start": 35, "end": 36}, {"type": "if", "start": 40, "end": 41}], "target_lines": [36, 41], "cfg": {"0": {"lineno": 0, "parents": [], "children": [32], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, queryIndex, query)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "__init__", "code": "exit: __init__(self, queryIndex, query)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "__init__", "code": "self.queryIndex = queryIndex"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "__init__", "code": "self.query = query"}, "5": {"lineno": 16, "parents": [], "children": [7], "function": "__iter__", "code": "enter: __iter__(self)"}, "6": {"lineno": 16, "parents": [8], "children": [], "function": "__iter__", "code": "exit: __iter__(self)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "function": "__iter__", "code": "yield self.queryIndex"}, "8": {"lineno": 18, "parents": [7], "children": [6], "function": "__iter__", "code": "yield self.query"}, "9": {"lineno": 22, "parents": [], "children": [11], "function": "countServers", "code": "enter: countServers(self, n, logs, x, queries)"}, "10": {"lineno": 22, "parents": [31], "children": [], "function": "countServers", "code": "exit: countServers(self, n, logs, x, queries)"}, "11": {"lineno": 23, "parents": [9], "children": [12], "calls": ["len"], "function": "countServers", "code": "ans = [0] * len(queries)"}, "12": {"lineno": 24, "parents": [11], "children": [13], "function": "countServers", "code": "count = [0] * (n + 1)"}, "13": {"lineno": 26, "parents": [12], "children": [14], "calls": ["sort"], "function": "countServers", "code": "logs.sort(key=lambda log: log[1])"}, "14": {"lineno": 28, "parents": [13], "children": [15], "function": "countServers", "code": "i = 0"}, "15": {"lineno": 29, "parents": [14], "children": [16], "function": "countServers", "code": "j = 0"}, "16": {"lineno": 30, "parents": [15], "children": [17], "function": "countServers", "code": "servers = 0"}, "17": {"lineno": 32, "parents": [16], "children": [18], "function": "countServers", "code": "__iv = iter(sorted([IndexedQuery(i, query) for i, query in enumerate(queries)], key=lambda iq: iq.query))"}, "18": {"lineno": 32, "parents": [17, 30], "children": [19, 31], "calls": ["sorted"], "function": "countServers", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 32, "parents": [18], "children": [20], "function": "countServers", "code": "queryIndex, query = next(__iv)"}, "20": {"lineno": 33, "parents": [24, 19], "children": [25, 21], "function": "countServers", "code": "_while: j < len(logs) and logs[j][1] <= query"}, "21": {"lineno": 34, "parents": [20], "children": [22], "function": "countServers", "code": "count[logs[j][0]] += 1"}, "22": {"lineno": 35, "parents": [21], "children": [24, 23], "function": "countServers", "code": "_if: count[logs[j][0]] == 1"}, "23": {"lineno": 36, "parents": [22], "children": [24], "function": "countServers", "code": "servers += 1"}, "24": {"lineno": 37, "parents": [22, 23], "children": [20], "function": "countServers", "code": "j += 1"}, "25": {"lineno": 38, "parents": [20, 29], "children": [26, 30], "function": "countServers", "code": "_while: i < len(logs) and logs[i][1] < query - x"}, "26": {"lineno": 39, "parents": [25], "children": [27], "function": "countServers", "code": "count[logs[i][0]] -= 1"}, "27": {"lineno": 40, "parents": [26], "children": [28, 29], "function": "countServers", "code": "_if: count[logs[i][0]] == 0"}, "28": {"lineno": 41, "parents": [27], "children": [29], "function": "countServers", "code": "servers -= 1"}, "29": {"lineno": 42, "parents": [27, 28], "children": [25], "function": "countServers", "code": "i += 1"}, "30": {"lineno": 43, "parents": [25], "children": [18], "function": "countServers", "code": "ans[queryIndex] = n - servers"}, "31": {"lineno": 45, "parents": [18], "children": [10], "function": "countServers", "code": "return ans"}, "32": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2751, "task_title": "Robot Collisions", "difficulty": 3, "func_name": "survivedRobotsHealths", "description": "There are `n` 1-indexed robots, each having a position on a line, health, and\nmovement direction.\n\nYou are given 0-indexed integer arrays `positions`, `healths`, and a string\n`directions` (`directions[i]` is either 'L' for left or 'R' for right). All\nintegers in `positions` are unique.\n\nAll robots start moving on the line simultaneously at the same speed in their\ngiven directions. If two robots ever share the same position while moving,\nthey will collide.\n\nIf two robots collide, the robot with lower health is removed from the line,\nand the health of the other robot decreases by one. The surviving robot\ncontinues in the same direction it was going. If both robots have the same\nhealth, they are both removed from the line.\n\nYour task is to determine the health of the robots that survive the\ncollisions, in the same order that the robots were given, i.e. final heath of\nrobot 1 (if survived), final health of robot 2 (if survived), and so on. If\nthere are no survivors, return an empty array.\n\nReturn an array containing the health of the remaining robots (in the order\nthey were given in the input), after no further collisions can occur.\n\nNote: The positions may be unsorted.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\nfrom dataclasses import dataclass\n\n@dataclass\nclass Robot:\n  index: int\n  position: int\n  health: int\n  direction: str\n\n\nclass Solution:\n  def survivedRobotsHealths(self, positions: List[int], healths: List[int], directions: str) -> List[int]:\n    robots = sorted([Robot(index, position, health, direction) for index, (position, health, direction) in enumerate(zip(positions, healths, directions))], key=lambda robot: robot.position)\n    stack: List[Robot] = []\n\n    for robot in robots:\n      if robot.direction == 'R':\n        stack.append(robot)\n        continue\n      while stack and stack[-1].direction == 'R' and robot.health > 0:\n        if stack[-1].health == robot.health:\n          stack.pop()\n          robot.health = 0\n        elif stack[-1].health < robot.health:\n          stack.pop()\n          robot.health -= 1\n        else:\n          stack[-1].health -= 1\n          robot.health = 0\n      if robot.health > 0:\n        stack.append(robot)\n\n    stack.sort(key=lambda robot: robot.index)\n    return [robot.health for robot in stack]\n", "blocks": [{"type": "if", "start": 26, "end": 28}, {"type": "if", "start": 39, "end": 40}, {"type": "if", "start": 30, "end": 32}, {"type": "if", "start": 33, "end": 35}, {"type": "else", "start": 36, "end": 38}], "target_lines": [27, 28, 31, 32, 34, 35, 37, 38, 40], "cfg": {"0": {"lineno": 0, "parents": [], "children": [1], "function": "", "code": "start"}, "1": {"lineno": 14, "parents": [0], "children": [2], "function": "", "code": "index: int"}, "2": {"lineno": 15, "parents": [1], "children": [3], "function": "", "code": "position: int"}, "3": {"lineno": 16, "parents": [2], "children": [4], "function": "", "code": "health: int"}, "4": {"lineno": 17, "parents": [3], "children": [28], "function": "", "code": "direction: str"}, "5": {"lineno": 21, "parents": [], "children": [7], "function": "survivedRobotsHealths", "code": "enter: survivedRobotsHealths(self, positions, healths, directions)"}, "6": {"lineno": 21, "parents": [27], "children": [], "function": "survivedRobotsHealths", "code": "exit: survivedRobotsHealths(self, positions, healths, directions)"}, "7": {"lineno": 22, "parents": [5], "children": [8], "calls": ["sorted"], "function": "survivedRobotsHealths", "code": "robots = sorted([Robot(index, position, health, direction) for index, (position, health, direction) in enumerate(zip(positions, healths, directions))], key=lambda robot: robot.position)"}, "8": {"lineno": 23, "parents": [7], "children": [9], "function": "survivedRobotsHealths", "code": "stack: List[Robot] = []"}, "9": {"lineno": 25, "parents": [8], "children": [10], "function": "survivedRobotsHealths", "code": "__iv = iter(robots)"}, "10": {"lineno": 25, "parents": [24, 9, 14, 25], "children": [26, 11], "function": "survivedRobotsHealths", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 25, "parents": [10], "children": [12], "function": "survivedRobotsHealths", "code": "robot = next(__iv)"}, "12": {"lineno": 26, "parents": [11], "children": [13, 15], "function": "survivedRobotsHealths", "code": "_if: robot.direction == 'R'"}, "13": {"lineno": 27, "parents": [12], "children": [14], "calls": ["append"], "function": "survivedRobotsHealths", "code": "stack.append(robot)"}, "14": {"lineno": 28, "parents": [13], "children": [10], "function": "survivedRobotsHealths", "code": "continue"}, "15": {"lineno": 29, "parents": [18, 12, 21, 23], "children": [16, 24], "function": "survivedRobotsHealths", "code": "_while: stack and stack[-1].direction == 'R' and (robot.health > 0)"}, "16": {"lineno": 30, "parents": [15], "children": [17, 19], "function": "survivedRobotsHealths", "code": "_if: stack[-1].health == robot.health"}, "17": {"lineno": 31, "parents": [16], "children": [18], "calls": ["pop"], "function": "survivedRobotsHealths", "code": "stack.pop()"}, "18": {"lineno": 32, "parents": [17], "children": [15], "function": "survivedRobotsHealths", "code": "robot.health = 0"}, "19": {"lineno": 33, "parents": [16], "children": [20, 22], "function": "survivedRobotsHealths", "code": "_if: stack[-1].health < robot.health"}, "20": {"lineno": 34, "parents": [19], "children": [21], "calls": ["pop"], "function": "survivedRobotsHealths", "code": "stack.pop()"}, "21": {"lineno": 35, "parents": [20], "children": [15], "function": "survivedRobotsHealths", "code": "robot.health -= 1"}, "22": {"lineno": 37, "parents": [19], "children": [23], "function": "survivedRobotsHealths", "code": "stack[-1].health -= 1"}, "23": {"lineno": 38, "parents": [22], "children": [15], "function": "survivedRobotsHealths", "code": "robot.health = 0"}, "24": {"lineno": 39, "parents": [15], "children": [25, 10], "function": "survivedRobotsHealths", "code": "_if: robot.health > 0"}, "25": {"lineno": 40, "parents": [24], "children": [10], "calls": ["append"], "function": "survivedRobotsHealths", "code": "stack.append(robot)"}, "26": {"lineno": 42, "parents": [10], "children": [27], "calls": ["sort"], "function": "survivedRobotsHealths", "code": "stack.sort(key=lambda robot: robot.index)"}, "27": {"lineno": 43, "parents": [26], "children": [6], "function": "survivedRobotsHealths", "code": "return [robot.health for robot in stack]"}, "28": {"lineno": 0, "parents": [4], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2812, "task_title": "Find the Safest Path in a Grid", "difficulty": 2, "func_name": "maximumSafenessFactor", "description": "You are given a 0-indexed 2D matrix `grid` of size `n x n`, where `(r, c)`\nrepresents:\n\n* A cell containing a thief if `grid[r][c] = 1`\n* An empty cell if `grid[r][c] = 0`\n\nYou are initially positioned at cell `(0, 0)`. In one move, you can move to\nany adjacent cell in the grid, including cells containing thieves.\n\nThe safeness factor of a path on the grid is defined as the minimum manhattan\ndistance from any cell in the path to any thief in the grid.\n\nReturn the maximum safeness factor of all paths leading to cell `(n - 1, n -\n1)`.\n\nAn adjacent cell of cell `(r, c)`, is one of the cells `(r, c + 1)`, `(r, c -\n1)`, `(r + 1, c)` and `(r - 1, c)` if it exists.\n\nThe Manhattan distance between two cells `(a, b)` and `(x, y)` is equal to `|a\n- x| + |b - y|`, where `|val|` denotes the absolute value of val.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def maximumSafenessFactor(self, grid: List[List[int]]) -> int:\n    self.dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    n = len(grid)\n    distToThief = self._getDistToThief(grid)\n\n    def hasValidPath(safeness: int) -> bool:\n      if distToThief[0][0] < safeness:\n        return False\n\n      q = collections.deque([(0, 0)])\n      seen = {(0, 0)}\n\n      while q:\n        i, j = q.popleft()\n        if distToThief[i][j] < safeness:\n          continue\n        if i == n - 1 and j == n - 1:\n          return True\n        for dx, dy in self.dirs:\n          x = i + dx\n          y = j + dy\n          if x < 0 or x == n or y < 0 or y == n:\n            continue\n          if (x, y) in seen:\n            continue\n          q.append((x, y))\n          seen.add((x, y))\n\n      return False\n\n    return bisect.bisect_left(range(n * 2), True, key=lambda m: not hasValidPath(m)) - 1\n\n  def _getDistToThief(self, grid: List[List[int]]) -> List[List[int]]:\n    n = len(grid)\n    distToThief = [[0] * n for _ in range(n)]\n    q = collections.deque()\n    seen = set()\n\n    for i in range(n):\n      for j in range(n):\n        if grid[i][j] == 1:\n          q.append((i, j))\n          seen.add((i, j))\n\n    dist = 0\n    while q:\n      for _ in range(len(q)):\n        i, j = q.popleft()\n        distToThief[i][j] = dist\n        for dx, dy in self.dirs:\n          x = i + dx\n          y = j + dy\n          if x < 0 or x == n or y < 0 or y == n:\n            continue\n          if (x, y) in seen:\n            continue\n          q.append((x, y))\n          seen.add((x, y))\n      dist += 1\n\n    return distToThief\n", "blocks": [{"type": "if", "start": 18, "end": 19}, {"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 28, "end": 29}, {"type": "if", "start": 52, "end": 54}, {"type": "if", "start": 33, "end": 34}, {"type": "if", "start": 35, "end": 36}, {"type": "if", "start": 64, "end": 65}, {"type": "if", "start": 66, "end": 67}], "target_lines": [19, 27, 29, 34, 36, 53, 54, 65, 67], "cfg": {"0": {"lineno": 0, "parents": [], "children": [66], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "maximumSafenessFactor", "code": "enter: maximumSafenessFactor(self, grid)"}, "2": {"lineno": 12, "parents": [30], "children": [], "function": "maximumSafenessFactor", "code": "exit: maximumSafenessFactor(self, grid)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "maximumSafenessFactor", "code": "self.dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "maximumSafenessFactor", "code": "n = len(grid)"}, "5": {"lineno": 15, "parents": [4], "children": [30], "calls": ["_getDistToThief", "range", "bisect_left"], "function": "maximumSafenessFactor", "code": "distToThief = self._getDistToThief(grid)"}, "6": {"lineno": 17, "parents": [], "children": [8], "function": "hasValidPath", "code": "enter: hasValidPath(safeness)"}, "7": {"lineno": 17, "parents": [9, 29, 17], "children": [], "function": "hasValidPath", "code": "exit: hasValidPath(safeness)"}, "8": {"lineno": 18, "parents": [6], "children": [9, 10], "function": "hasValidPath", "code": "_if: distToThief[0][0] < safeness"}, "9": {"lineno": 19, "parents": [8], "children": [7], "function": "hasValidPath", "code": "return False"}, "10": {"lineno": 21, "parents": [8], "children": [11], "calls": ["deque"], "function": "hasValidPath", "code": "q = collections.deque([(0, 0)])"}, "11": {"lineno": 22, "parents": [10], "children": [12], "function": "hasValidPath", "code": "seen = {(0, 0)}"}, "12": {"lineno": 24, "parents": [19, 11, 15], "children": [29, 13], "function": "hasValidPath", "code": "_while: q"}, "13": {"lineno": 25, "parents": [12], "children": [14], "calls": ["popleft"], "function": "hasValidPath", "code": "i, j = q.popleft()"}, "14": {"lineno": 26, "parents": [13], "children": [16, 15], "function": "hasValidPath", "code": "_if: distToThief[i][j] < safeness"}, "15": {"lineno": 27, "parents": [14], "children": [12], "function": "hasValidPath", "code": "continue"}, "16": {"lineno": 28, "parents": [14], "children": [17, 18], "function": "hasValidPath", "code": "_if: i == n - 1 and j == n - 1"}, "17": {"lineno": 29, "parents": [16], "children": [7], "function": "hasValidPath", "code": "return True"}, "18": {"lineno": 30, "parents": [16], "children": [19], "function": "hasValidPath", "code": "__iv = iter(self.dirs)"}, "19": {"lineno": 30, "parents": [24, 18, 26, 28], "children": [20, 12], "function": "hasValidPath", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 30, "parents": [19], "children": [21], "function": "hasValidPath", "code": "dx, dy = next(__iv)"}, "21": {"lineno": 31, "parents": [20], "children": [22], "function": "hasValidPath", "code": "x = i + dx"}, "22": {"lineno": 32, "parents": [21], "children": [23], "function": "hasValidPath", "code": "y = j + dy"}, "23": {"lineno": 33, "parents": [22], "children": [24, 25], "function": "hasValidPath", "code": "_if: x < 0 or x == n or y < 0 or (y == n)"}, "24": {"lineno": 34, "parents": [23], "children": [19], "function": "hasValidPath", "code": "continue"}, "25": {"lineno": 35, "parents": [23], "children": [26, 27], "function": "hasValidPath", "code": "_if: (x, y) in seen"}, "26": {"lineno": 36, "parents": [25], "children": [19], "function": "hasValidPath", "code": "continue"}, "27": {"lineno": 37, "parents": [25], "children": [28], "calls": ["append"], "function": "hasValidPath", "code": "q.append((x, y))"}, "28": {"lineno": 38, "parents": [27], "children": [19], "calls": ["add"], "function": "hasValidPath", "code": "seen.add((x, y))"}, "29": {"lineno": 40, "parents": [12], "children": [7], "function": "hasValidPath", "code": "return False"}, "30": {"lineno": 42, "parents": [32, 5], "children": [2], "function": "maximumSafenessFactor", "code": "return bisect.bisect_left(range(n * 2), True, key=lambda m: not hasValidPath(m)) - 1"}, "31": {"lineno": 44, "parents": [5], "children": [33], "function": "_getDistToThief", "code": "enter: _getDistToThief(self, grid)"}, "32": {"lineno": 44, "parents": [65], "children": [], "function": "_getDistToThief", "code": "exit: _getDistToThief(self, grid)"}, "33": {"lineno": 45, "parents": [31], "children": [34], "calls": ["len"], "function": "_getDistToThief", "code": "n = len(grid)"}, "34": {"lineno": 46, "parents": [33], "children": [35], "function": "_getDistToThief", "code": "distToThief = [[0] * n for _ in range(n)]"}, "35": {"lineno": 47, "parents": [34], "children": [36], "calls": ["deque"], "function": "_getDistToThief", "code": "q = collections.deque()"}, "36": {"lineno": 48, "parents": [35], "children": [37], "calls": ["set"], "function": "_getDistToThief", "code": "seen = set()"}, "37": {"lineno": 50, "parents": [36], "children": [38], "function": "_getDistToThief", "code": "__iv = iter(range(n))"}, "38": {"lineno": 50, "parents": [41, 37], "children": [46, 39], "calls": ["range"], "function": "_getDistToThief", "code": "_for: __iv.__length__hint__() > 0"}, "39": {"lineno": 50, "parents": [38], "children": [40], "function": "_getDistToThief", "code": "i = next(__iv)"}, "40": {"lineno": 51, "parents": [39], "children": [41], "function": "_getDistToThief", "code": "__iv = iter(range(n))"}, "41": {"lineno": 51, "parents": [40, 43, 45], "children": [42, 38], "calls": ["range"], "function": "_getDistToThief", "code": "_for: __iv.__length__hint__() > 0"}, "42": {"lineno": 51, "parents": [41], "children": [43], "function": "_getDistToThief", "code": "j = next(__iv)"}, "43": {"lineno": 52, "parents": [42], "children": [41, 44], "function": "_getDistToThief", "code": "_if: grid[i][j] == 1"}, "44": {"lineno": 53, "parents": [43], "children": [45], "calls": ["append"], "function": "_getDistToThief", "code": "q.append((i, j))"}, "45": {"lineno": 54, "parents": [44], "children": [41], "calls": ["add"], "function": "_getDistToThief", "code": "seen.add((i, j))"}, "46": {"lineno": 56, "parents": [38], "children": [47], "function": "_getDistToThief", "code": "dist = 0"}, "47": {"lineno": 57, "parents": [64, 46], "children": [48, 65], "function": "_getDistToThief", "code": "_while: q"}, "48": {"lineno": 58, "parents": [47], "children": [49], "function": "_getDistToThief", "code": "__iv = iter(range(len(q)))"}, "49": {"lineno": 58, "parents": [48, 54], "children": [64, 50], "calls": ["len", "range"], "function": "_getDistToThief", "code": "_for: __iv.__length__hint__() > 0"}, "50": {"lineno": 58, "parents": [49], "children": [51], "function": "_getDistToThief", "code": "_ = next(__iv)"}, "51": {"lineno": 59, "parents": [50], "children": [52], "calls": ["popleft"], "function": "_getDistToThief", "code": "i, j = q.popleft()"}, "52": {"lineno": 60, "parents": [51], "children": [53], "function": "_getDistToThief", "code": "distToThief[i][j] = dist"}, "53": {"lineno": 61, "parents": [52], "children": [54], "function": "_getDistToThief", "code": "__iv = iter(self.dirs)"}, "54": {"lineno": 61, "parents": [61, 59, 53, 63], "children": [49, 55], "function": "_getDistToThief", "code": "_for: __iv.__length__hint__() > 0"}, "55": {"lineno": 61, "parents": [54], "children": [56], "function": "_getDistToThief", "code": "dx, dy = next(__iv)"}, "56": {"lineno": 62, "parents": [55], "children": [57], "function": "_getDistToThief", "code": "x = i + dx"}, "57": {"lineno": 63, "parents": [56], "children": [58], "function": "_getDistToThief", "code": "y = j + dy"}, "58": {"lineno": 64, "parents": [57], "children": [59, 60], "function": "_getDistToThief", "code": "_if: x < 0 or x == n or y < 0 or (y == n)"}, "59": {"lineno": 65, "parents": [58], "children": [54], "function": "_getDistToThief", "code": "continue"}, "60": {"lineno": 66, "parents": [58], "children": [61, 62], "function": "_getDistToThief", "code": "_if: (x, y) in seen"}, "61": {"lineno": 67, "parents": [60], "children": [54], "function": "_getDistToThief", "code": "continue"}, "62": {"lineno": 68, "parents": [60], "children": [63], "calls": ["append"], "function": "_getDistToThief", "code": "q.append((x, y))"}, "63": {"lineno": 69, "parents": [62], "children": [54], "calls": ["add"], "function": "_getDistToThief", "code": "seen.add((x, y))"}, "64": {"lineno": 70, "parents": [49], "children": [47], "function": "_getDistToThief", "code": "dist += 1"}, "65": {"lineno": 72, "parents": [47], "children": [32], "function": "_getDistToThief", "code": "return distToThief"}, "66": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2818, "task_title": "Apply Operations to Maximize Score", "difficulty": 3, "func_name": "maximumScore", "description": "You are given an array `nums` of `n` positive integers and an integer `k`.\n\nInitially, you start with a score of `1`. You have to maximize your score by\napplying the following operation at most `k` times:\n\n* Choose any non-empty subarray `nums[l, ..., r]` that you haven't chosen previously.\n* Choose an element `x` of `nums[l, ..., r]` with the highest prime score. If multiple such elements exist, choose the one with the smallest index.\n* Multiply your score by `x`.\n\nHere, `nums[l, ..., r]` denotes the subarray of `nums` starting at index `l`\nand ending at the index `r`, both ends being inclusive.\n\nThe prime score of an integer `x` is equal to the number of distinct prime\nfactors of `x`. For example, the prime score of `300` is `3` since `300 = 2 *\n2 * 3 * 5 * 5`.\n\nReturn the maximum possible score after applying at most `k` operations.\n\nSince the answer may be large, return it modulo `109 + 7`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def maximumScore(self, nums: List[int], k: int) -> int:\n    kMod = 1_000_000_007\n    n = len(nums)\n    ans = 1\n    minPrimeFactors = self._sieveEratosthenes(max(nums) + 1)\n    primeScores = [self._getPrimeScore(num, minPrimeFactors) for num in nums]\n    left = [-1] * n\n    right = [n] * n\n    stack = []\n\n    for i in reversed(range(n)):\n      while stack and primeScores[stack[-1]] <= primeScores[i]:\n        left[stack.pop()] = i\n      stack.append(i)\n\n    stack = []\n\n    for i in range(n):\n      while stack and primeScores[stack[-1]] < primeScores[i]:\n        right[stack.pop()] = i\n      stack.append(i)\n\n    numAndIndexes = [(num, i) for i, num in enumerate(nums)]\n\n    def modPow(x: int, n: int) -> int:\n      if n == 0:\n        return 1\n      if n & 1:\n        return x * modPow(x, n - 1) % kMod\n      return modPow(x * x % kMod, n // 2)\n\n    for num, i in sorted(numAndIndexes, key=lambda x: (-x[0], x[1])):\n      rangeCount = (i - left[i]) * (right[i] - i)\n      actualCount = min(rangeCount, k)\n      k -= actualCount\n      ans *= modPow(num, actualCount)\n      ans %= kMod\n\n    return ans\n\n  def _sieveEratosthenes(self, n: int) -> List[int]:\n    minPrimeFactors = [i for i in range(n + 1)]\n    for i in range(2, int(n**0.5) + 1):\n      if minPrimeFactors[i] == i:\n        for j in range(i * i, n, i):\n          minPrimeFactors[j] = min(minPrimeFactors[j], i)\n    return minPrimeFactors\n\n  def _getPrimeScore(self, num: int, minPrimeFactors: List[int]) -> int:\n    primeFactors = set()\n    while num > 1:\n      divisor = minPrimeFactors[num]\n      primeFactors.add(divisor)\n      while num % divisor == 0:\n        num //= divisor\n    return len(primeFactors)\n", "blocks": [{"type": "if", "start": 37, "end": 38}, {"type": "if", "start": 39, "end": 40}, {"type": "if", "start": 55, "end": 57}], "target_lines": [38, 40, 56, 57], "cfg": {"0": {"lineno": 0, "parents": [], "children": [62], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "maximumScore", "code": "enter: maximumScore(self, nums, k)"}, "2": {"lineno": 12, "parents": [40], "children": [], "function": "maximumScore", "code": "exit: maximumScore(self, nums, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "maximumScore", "code": "kMod = 1000000007"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "maximumScore", "code": "n = len(nums)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "maximumScore", "code": "ans = 1"}, "6": {"lineno": 16, "parents": [5], "children": [7], "calls": ["max", "_sieveEratosthenes"], "function": "maximumScore", "code": "minPrimeFactors = self._sieveEratosthenes(max(nums) + 1)"}, "7": {"lineno": 17, "parents": [42, 6], "children": [8], "function": "maximumScore", "code": "primeScores = [self._getPrimeScore(num, minPrimeFactors) for num in nums]"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "maximumScore", "code": "left = [-1] * n"}, "9": {"lineno": 19, "parents": [8], "children": [10], "function": "maximumScore", "code": "right = [n] * n"}, "10": {"lineno": 20, "parents": [9], "children": [11], "function": "maximumScore", "code": "stack = []"}, "11": {"lineno": 22, "parents": [10], "children": [12], "function": "maximumScore", "code": "__iv = iter(reversed(range(n)))"}, "12": {"lineno": 22, "parents": [16, 11], "children": [17, 13], "calls": ["range", "reversed"], "function": "maximumScore", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 22, "parents": [12], "children": [14], "function": "maximumScore", "code": "i = next(__iv)"}, "14": {"lineno": 23, "parents": [13, 15], "children": [16, 15], "function": "maximumScore", "code": "_while: stack and primeScores[stack[-1]] <= primeScores[i]"}, "15": {"lineno": 24, "parents": [14], "children": [14], "function": "maximumScore", "code": "left[stack.pop()] = i"}, "16": {"lineno": 25, "parents": [14], "children": [12], "calls": ["append"], "function": "maximumScore", "code": "stack.append(i)"}, "17": {"lineno": 27, "parents": [12], "children": [18], "function": "maximumScore", "code": "stack = []"}, "18": {"lineno": 29, "parents": [17], "children": [19], "function": "maximumScore", "code": "__iv = iter(range(n))"}, "19": {"lineno": 29, "parents": [18, 23], "children": [24, 20], "calls": ["range"], "function": "maximumScore", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 29, "parents": [19], "children": [21], "function": "maximumScore", "code": "i = next(__iv)"}, "21": {"lineno": 30, "parents": [20, 22], "children": [22, 23], "function": "maximumScore", "code": "_while: stack and primeScores[stack[-1]] < primeScores[i]"}, "22": {"lineno": 31, "parents": [21], "children": [21], "function": "maximumScore", "code": "right[stack.pop()] = i"}, "23": {"lineno": 32, "parents": [21], "children": [19], "calls": ["append"], "function": "maximumScore", "code": "stack.append(i)"}, "24": {"lineno": 34, "parents": [19], "children": [32], "function": "maximumScore", "code": "numAndIndexes = [(num, i) for i, num in enumerate(nums)]"}, "25": {"lineno": 36, "parents": [29, 38], "children": [27], "function": "modPow", "code": "enter: modPow(x, n)"}, "26": {"lineno": 36, "parents": [28, 30, 31], "children": [], "function": "modPow", "code": "exit: modPow(x, n)"}, "27": {"lineno": 37, "parents": [25], "children": [28, 29], "function": "modPow", "code": "_if: n == 0"}, "28": {"lineno": 38, "parents": [27], "children": [26], "function": "modPow", "code": "return 1"}, "29": {"lineno": 39, "parents": [27], "children": [30, 31], "calls": ["modPow", "modPow"], "function": "modPow", "code": "_if: n & 1"}, "30": {"lineno": 40, "parents": [26, 29], "children": [26], "function": "modPow", "code": "return x * modPow(x, n - 1) % kMod"}, "31": {"lineno": 41, "parents": [26, 29], "children": [26], "function": "modPow", "code": "return modPow(x * x % kMod, n // 2)"}, "32": {"lineno": 43, "parents": [24], "children": [33], "function": "maximumScore", "code": "__iv = iter(sorted(numAndIndexes, key=lambda x: (-x[0], x[1])))"}, "33": {"lineno": 43, "parents": [32, 39], "children": [40, 34], "calls": ["sorted"], "function": "maximumScore", "code": "_for: __iv.__length__hint__() > 0"}, "34": {"lineno": 43, "parents": [33], "children": [35], "function": "maximumScore", "code": "num, i = next(__iv)"}, "35": {"lineno": 44, "parents": [34], "children": [36], "function": "maximumScore", "code": "rangeCount = (i - left[i]) * (right[i] - i)"}, "36": {"lineno": 45, "parents": [35], "children": [37], "calls": ["min"], "function": "maximumScore", "code": "actualCount = min(rangeCount, k)"}, "37": {"lineno": 46, "parents": [36], "children": [38], "function": "maximumScore", "code": "k -= actualCount"}, "38": {"lineno": 47, "parents": [37], "children": [39], "calls": ["modPow"], "function": "maximumScore", "code": "ans *= modPow(num, actualCount)"}, "39": {"lineno": 48, "parents": [26, 38], "children": [33], "function": "maximumScore", "code": "ans %= kMod"}, "40": {"lineno": 50, "parents": [33], "children": [2], "function": "maximumScore", "code": "return ans"}, "41": {"lineno": 52, "parents": [6], "children": [43], "function": "_sieveEratosthenes", "code": "enter: _sieveEratosthenes(self, n)"}, "42": {"lineno": 52, "parents": [52], "children": [], "function": "_sieveEratosthenes", "code": "exit: _sieveEratosthenes(self, n)"}, "43": {"lineno": 53, "parents": [41], "children": [44], "function": "_sieveEratosthenes", "code": "minPrimeFactors = [i for i in range(n + 1)]"}, "44": {"lineno": 54, "parents": [43], "children": [45], "function": "_sieveEratosthenes", "code": "__iv = iter(range(2, int(n ** 0.5) + 1))"}, "45": {"lineno": 54, "parents": [49, 44, 47], "children": [52, 46], "calls": ["int", "range"], "function": "_sieveEratosthenes", "code": "_for: __iv.__length__hint__() > 0"}, "46": {"lineno": 54, "parents": [45], "children": [47], "function": "_sieveEratosthenes", "code": "i = next(__iv)"}, "47": {"lineno": 55, "parents": [46], "children": [48, 45], "function": "_sieveEratosthenes", "code": "_if: minPrimeFactors[i] == i"}, "48": {"lineno": 56, "parents": [47], "children": [49], "function": "_sieveEratosthenes", "code": "__iv = iter(range(i * i, n, i))"}, "49": {"lineno": 56, "parents": [48, 51], "children": [50, 45], "calls": ["range"], "function": "_sieveEratosthenes", "code": "_for: __iv.__length__hint__() > 0"}, "50": {"lineno": 56, "parents": [49], "children": [51], "function": "_sieveEratosthenes", "code": "j = next(__iv)"}, "51": {"lineno": 57, "parents": [50], "children": [49], "calls": ["min"], "function": "_sieveEratosthenes", "code": "minPrimeFactors[j] = min(minPrimeFactors[j], i)"}, "52": {"lineno": 58, "parents": [45], "children": [42], "function": "_sieveEratosthenes", "code": "return minPrimeFactors"}, "53": {"lineno": 60, "parents": [], "children": [55], "function": "_getPrimeScore", "code": "enter: _getPrimeScore(self, num, minPrimeFactors)"}, "54": {"lineno": 60, "parents": [61], "children": [], "function": "_getPrimeScore", "code": "exit: _getPrimeScore(self, num, minPrimeFactors)"}, "55": {"lineno": 61, "parents": [53], "children": [56], "calls": ["set"], "function": "_getPrimeScore", "code": "primeFactors = set()"}, "56": {"lineno": 62, "parents": [59, 55], "children": [57, 61], "calls": ["len"], "function": "_getPrimeScore", "code": "_while: num > 1"}, "57": {"lineno": 63, "parents": [56], "children": [58], "function": "_getPrimeScore", "code": "divisor = minPrimeFactors[num]"}, "58": {"lineno": 64, "parents": [57], "children": [59], "calls": ["add"], "function": "_getPrimeScore", "code": "primeFactors.add(divisor)"}, "59": {"lineno": 65, "parents": [58, 60], "children": [56, 60], "function": "_getPrimeScore", "code": "_while: num % divisor == 0"}, "60": {"lineno": 66, "parents": [59], "children": [59], "function": "_getPrimeScore", "code": "num //= divisor"}, "61": {"lineno": 67, "parents": [56], "children": [54], "function": "_getPrimeScore", "code": "return len(primeFactors)"}, "62": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2836, "task_title": "Maximize Value of Function in a Ball Passing Game", "difficulty": 3, "func_name": "getMaxFunctionValue", "description": "You are given an integer array `receiver` of length `n` and an integer `k`.\n`n` players are playing a ball-passing game.\n\nYou choose the starting player, `i`. The game proceeds as follows: player `i`\npasses the ball to player `receiver[i]`, who then passes it to\n`receiver[receiver[i]]`, and so on, for `k` passes in total. The game's score\nis the sum of the indices of the players who touched the ball, including\nrepetitions, i.e. `i + receiver[i] + receiver[receiver[i]] + ... +\nreceiver(k)[i]`.\n\nReturn the maximum possible score.\n\nNotes:\n\n* `receiver` may contain duplicates.\n* `receiver[i]` may be equal to `i`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def getMaxFunctionValue(self, receiver: List[int], k: int) -> int:\n    n = len(receiver)\n    m = int(math.log2(k)) + 1\n    ans = 0\n    jump = [[0] * m for _ in range(n)]\n    summ = [[0] * m for _ in range(n)]\n\n    for i in range(n):\n      jump[i][0] = receiver[i]\n      summ[i][0] = receiver[i]\n\n    for j in range(1, m):\n      for i in range(n):\n        midNode = jump[i][j - 1]\n        jump[i][j] = jump[midNode][j - 1]\n        summ[i][j] = summ[i][j - 1] + summ[midNode][j - 1]\n\n    for i in range(n):\n      currSum = i\n      currPos = i\n      for j in range(m):\n        if (k >> j) & 1 == 1:\n          currSum += summ[currPos][j]\n          currPos = jump[currPos][j]\n      ans = max(ans, currSum)\n\n    return ans\n", "blocks": [{"type": "if", "start": 33, "end": 35}], "target_lines": [34, 35], "cfg": {"0": {"lineno": 0, "parents": [], "children": [35], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "getMaxFunctionValue", "code": "enter: getMaxFunctionValue(self, receiver, k)"}, "2": {"lineno": 12, "parents": [34], "children": [], "function": "getMaxFunctionValue", "code": "exit: getMaxFunctionValue(self, receiver, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "getMaxFunctionValue", "code": "n = len(receiver)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["log2", "int"], "function": "getMaxFunctionValue", "code": "m = int(math.log2(k)) + 1"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "getMaxFunctionValue", "code": "ans = 0"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "getMaxFunctionValue", "code": "jump = [[0] * m for _ in range(n)]"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "getMaxFunctionValue", "code": "summ = [[0] * m for _ in range(n)]"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "getMaxFunctionValue", "code": "__iv = iter(range(n))"}, "9": {"lineno": 19, "parents": [8, 12], "children": [10, 13], "calls": ["range"], "function": "getMaxFunctionValue", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "getMaxFunctionValue", "code": "i = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "getMaxFunctionValue", "code": "jump[i][0] = receiver[i]"}, "12": {"lineno": 21, "parents": [11], "children": [9], "function": "getMaxFunctionValue", "code": "summ[i][0] = receiver[i]"}, "13": {"lineno": 23, "parents": [9], "children": [14], "function": "getMaxFunctionValue", "code": "__iv = iter(range(1, m))"}, "14": {"lineno": 23, "parents": [17, 13], "children": [22, 15], "calls": ["range"], "function": "getMaxFunctionValue", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 23, "parents": [14], "children": [16], "function": "getMaxFunctionValue", "code": "j = next(__iv)"}, "16": {"lineno": 24, "parents": [15], "children": [17], "function": "getMaxFunctionValue", "code": "__iv = iter(range(n))"}, "17": {"lineno": 24, "parents": [16, 21], "children": [18, 14], "calls": ["range"], "function": "getMaxFunctionValue", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 24, "parents": [17], "children": [19], "function": "getMaxFunctionValue", "code": "i = next(__iv)"}, "19": {"lineno": 25, "parents": [18], "children": [20], "function": "getMaxFunctionValue", "code": "midNode = jump[i][j - 1]"}, "20": {"lineno": 26, "parents": [19], "children": [21], "function": "getMaxFunctionValue", "code": "jump[i][j] = jump[midNode][j - 1]"}, "21": {"lineno": 27, "parents": [20], "children": [17], "function": "getMaxFunctionValue", "code": "summ[i][j] = summ[i][j - 1] + summ[midNode][j - 1]"}, "22": {"lineno": 29, "parents": [14], "children": [23], "function": "getMaxFunctionValue", "code": "__iv = iter(range(n))"}, "23": {"lineno": 29, "parents": [33, 22], "children": [24, 34], "calls": ["range"], "function": "getMaxFunctionValue", "code": "_for: __iv.__length__hint__() > 0"}, "24": {"lineno": 29, "parents": [23], "children": [25], "function": "getMaxFunctionValue", "code": "i = next(__iv)"}, "25": {"lineno": 30, "parents": [24], "children": [26], "function": "getMaxFunctionValue", "code": "currSum = i"}, "26": {"lineno": 31, "parents": [25], "children": [27], "function": "getMaxFunctionValue", "code": "currPos = i"}, "27": {"lineno": 32, "parents": [26], "children": [28], "function": "getMaxFunctionValue", "code": "__iv = iter(range(m))"}, "28": {"lineno": 32, "parents": [32, 27, 30], "children": [33, 29], "calls": ["range"], "function": "getMaxFunctionValue", "code": "_for: __iv.__length__hint__() > 0"}, "29": {"lineno": 32, "parents": [28], "children": [30], "function": "getMaxFunctionValue", "code": "j = next(__iv)"}, "30": {"lineno": 33, "parents": [29], "children": [28, 31], "function": "getMaxFunctionValue", "code": "_if: k >> j & 1 == 1"}, "31": {"lineno": 34, "parents": [30], "children": [32], "function": "getMaxFunctionValue", "code": "currSum += summ[currPos][j]"}, "32": {"lineno": 35, "parents": [31], "children": [28], "function": "getMaxFunctionValue", "code": "currPos = jump[currPos][j]"}, "33": {"lineno": 36, "parents": [28], "children": [23], "calls": ["max"], "function": "getMaxFunctionValue", "code": "ans = max(ans, currSum)"}, "34": {"lineno": 38, "parents": [23], "children": [2], "function": "getMaxFunctionValue", "code": "return ans"}, "35": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2844, "task_title": "Minimum Operations to Make a Special Number", "difficulty": 2, "func_name": "minimumOperations", "description": "You are given a 0-indexed string `num` representing a non-negative integer.\n\nIn one operation, you can pick any digit of `num` and delete it. Note that if\nyou delete all the digits of `num`, `num` becomes `0`.\n\nReturn the minimum number of operations required to make `num` special.\n\nAn integer `x` is considered special if it is divisible by `25`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumOperations(self, num: str) -> int:\n    n = len(num)\n    seenFive = False\n    seenZero = False\n\n    for i in range(n - 1, -1, -1):\n      if seenZero and num[i] == '0':\n        return n - i - 2\n      if seenZero and num[i] == '5':\n        return n - i - 2\n      if seenFive and num[i] == '2':\n        return n - i - 2\n      if seenFive and num[i] == '7':\n        return n - i - 2\n      seenZero = seenZero or num[i] == '0'\n      seenFive = seenFive or num[i] == '5'\n\n    if seenZero:\n      return n - 1\n    else:\n      return n\n", "blocks": [{"type": "if", "start": 29, "end": 30}, {"type": "else", "start": 31, "end": 32}, {"type": "if", "start": 18, "end": 19}, {"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 24, "end": 25}], "target_lines": [19, 21, 23, 25, 30, 32], "cfg": {"0": {"lineno": 0, "parents": [], "children": [22], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumOperations", "code": "enter: minimumOperations(self, num)"}, "2": {"lineno": 12, "parents": [16, 20, 21, 10, 12, 14], "children": [], "function": "minimumOperations", "code": "exit: minimumOperations(self, num)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "minimumOperations", "code": "n = len(num)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "minimumOperations", "code": "seenFive = False"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "minimumOperations", "code": "seenZero = False"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "minimumOperations", "code": "__iv = iter(range(n - 1, -1, -1))"}, "7": {"lineno": 17, "parents": [18, 6], "children": [8, 19], "calls": ["range"], "function": "minimumOperations", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "minimumOperations", "code": "i = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10, 11], "function": "minimumOperations", "code": "_if: seenZero and num[i] == '0'"}, "10": {"lineno": 19, "parents": [9], "children": [2], "function": "minimumOperations", "code": "return n - i - 2"}, "11": {"lineno": 20, "parents": [9], "children": [12, 13], "function": "minimumOperations", "code": "_if: seenZero and num[i] == '5'"}, "12": {"lineno": 21, "parents": [11], "children": [2], "function": "minimumOperations", "code": "return n - i - 2"}, "13": {"lineno": 22, "parents": [11], "children": [14, 15], "function": "minimumOperations", "code": "_if: seenFive and num[i] == '2'"}, "14": {"lineno": 23, "parents": [13], "children": [2], "function": "minimumOperations", "code": "return n - i - 2"}, "15": {"lineno": 24, "parents": [13], "children": [16, 17], "function": "minimumOperations", "code": "_if: seenFive and num[i] == '7'"}, "16": {"lineno": 25, "parents": [15], "children": [2], "function": "minimumOperations", "code": "return n - i - 2"}, "17": {"lineno": 26, "parents": [15], "children": [18], "function": "minimumOperations", "code": "seenZero = seenZero or num[i] == '0'"}, "18": {"lineno": 27, "parents": [17], "children": [7], "function": "minimumOperations", "code": "seenFive = seenFive or num[i] == '5'"}, "19": {"lineno": 29, "parents": [7], "children": [20, 21], "function": "minimumOperations", "code": "_if: seenZero"}, "20": {"lineno": 30, "parents": [19], "children": [2], "function": "minimumOperations", "code": "return n - 1"}, "21": {"lineno": 32, "parents": [19], "children": [2], "function": "minimumOperations", "code": "return n"}, "22": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2846, "task_title": "Minimum Edge Weight Equilibrium Queries in a Tree", "difficulty": 3, "func_name": "minOperationsQueries", "description": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1`. You\nare given the integer `n` and a 2D integer array `edges` of length `n - 1`,\nwhere `edges[i] = [ui, vi, wi]` indicates that there is an edge between nodes\n`ui` and `vi` with weight `wi` in the tree.\n\nYou are also given a 2D integer array `queries` of length `m`, where\n`queries[i] = [ai, bi]`. For each query, find the minimum number of operations\nrequired to make the weight of every edge on the path from `ai` to `bi` equal.\nIn one operation, you can choose any edge of the tree and change its weight to\nany value.\n\nNote that:\n\n* Queries are independent of each other, meaning that the tree returns to its initial state on each new query.\n* The path from `ai` to `bi` is a sequence of distinct nodes starting with node `ai` and ending with node `bi` such that every two adjacent nodes in the sequence share an edge in the tree.\n\nReturn an array `answer` of length `m` where `answer[i]` is the answer to the\n`ith` query.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minOperationsQueries(self, n: int, edges: List[List[int]], queries: List[List[int]]) -> List[int]:\n    kMax = 26\n    m = int(math.log2(n)) + 1\n    ans = []\n    graph = [[] for _ in range(n)]\n    jump = [[0] * m for _ in range(n)]\n    count = [[] for _ in range(n)]\n    depth = [0] * n\n\n    for u, v, w in edges:\n      graph[u].append((v, w))\n      graph[v].append((u, w))\n\n    def dfs(u: int, prev: int, d: int):\n      if prev != -1:\n        jump[u][0] = prev\n      depth[u] = d\n      for v, w in graph[u]:\n        if v == prev:\n          continue\n        count[v] = count[u][:]\n        count[v][w] += 1\n        dfs(v, u, d + 1)\n\n    count[0] = [0] * (kMax + 1)\n    dfs(0, -1, 0)\n\n    for j in range(1, m):\n      for i in range(n):\n        jump[i][j] = jump[jump[i][j - 1]][j - 1]\n\n    def getLCA(u: int, v: int) -> int:\n      if depth[u] > depth[v]:\n        return getLCA(v, u)\n      for j in range(m):\n        if depth[v] - depth[u] >> j & 1:\n          v = jump[v][j]\n      if u == v:\n        return u\n      for j in range(m - 1, -1, -1):\n        if jump[u][j] != jump[v][j]:\n          u = jump[u][j]\n          v = jump[v][j]\n      return jump[v][0]\n\n    for u, v in queries:\n      lca = getLCA(u, v)\n      numEdges = depth[u] + depth[v] - 2 * depth[lca]\n      maxFreq = max(count[u][j] + count[v][j] - 2 * count[lca][j] for j in range(1, kMax + 1))\n      ans.append(numEdges - maxFreq)\n\n    return ans\n", "blocks": [{"type": "if", "start": 26, "end": 27}, {"type": "if", "start": 44, "end": 45}, {"type": "if", "start": 49, "end": 50}, {"type": "if", "start": 30, "end": 31}, {"type": "if", "start": 47, "end": 48}, {"type": "if", "start": 52, "end": 54}], "target_lines": [27, 31, 45, 48, 50, 53, 54], "cfg": {"0": {"lineno": 0, "parents": [], "children": [63], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minOperationsQueries", "code": "enter: minOperationsQueries(self, n, edges, queries)"}, "2": {"lineno": 12, "parents": [62], "children": [], "function": "minOperationsQueries", "code": "exit: minOperationsQueries(self, n, edges, queries)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "minOperationsQueries", "code": "kMax = 26"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["log2", "int"], "function": "minOperationsQueries", "code": "m = int(math.log2(n)) + 1"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "minOperationsQueries", "code": "ans = []"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "minOperationsQueries", "code": "graph = [[] for _ in range(n)]"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "minOperationsQueries", "code": "jump = [[0] * m for _ in range(n)]"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "minOperationsQueries", "code": "count = [[] for _ in range(n)]"}, "9": {"lineno": 19, "parents": [8], "children": [10], "function": "minOperationsQueries", "code": "depth = [0] * n"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "minOperationsQueries", "code": "__iv = iter(edges)"}, "11": {"lineno": 21, "parents": [10, 14], "children": [12, 28], "function": "minOperationsQueries", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "minOperationsQueries", "code": "u, v, w = next(__iv)"}, "13": {"lineno": 22, "parents": [12], "children": [14], "calls": ["append"], "function": "minOperationsQueries", "code": "graph[u].append((v, w))"}, "14": {"lineno": 23, "parents": [13], "children": [11], "calls": ["append"], "function": "minOperationsQueries", "code": "graph[v].append((u, w))"}, "15": {"lineno": 25, "parents": [27, 29], "children": [17], "function": "dfs", "code": "enter: dfs(u, prev, d)"}, "16": {"lineno": 25, "parents": [21], "children": [], "function": "dfs", "code": "exit: dfs(u, prev, d)"}, "17": {"lineno": 26, "parents": [15], "children": [18, 19], "function": "dfs", "code": "_if: prev != -1"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "dfs", "code": "jump[u][0] = prev"}, "19": {"lineno": 28, "parents": [17, 18], "children": [20], "function": "dfs", "code": "depth[u] = d"}, "20": {"lineno": 29, "parents": [19], "children": [21], "function": "dfs", "code": "__iv = iter(graph[u])"}, "21": {"lineno": 29, "parents": [24, 16, 27, 20], "children": [16, 22], "function": "dfs", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 29, "parents": [21], "children": [23], "function": "dfs", "code": "v, w = next(__iv)"}, "23": {"lineno": 30, "parents": [22], "children": [24, 25], "function": "dfs", "code": "_if: v == prev"}, "24": {"lineno": 31, "parents": [23], "children": [21], "function": "dfs", "code": "continue"}, "25": {"lineno": 32, "parents": [23], "children": [26], "function": "dfs", "code": "count[v] = count[u][:]"}, "26": {"lineno": 33, "parents": [25], "children": [27], "function": "dfs", "code": "count[v][w] += 1"}, "27": {"lineno": 34, "parents": [26], "children": [21], "calls": ["dfs"], "function": "dfs", "code": "dfs(v, u, d + 1)"}, "28": {"lineno": 36, "parents": [11], "children": [29], "function": "minOperationsQueries", "code": "count[0] = [0] * (kMax + 1)"}, "29": {"lineno": 37, "parents": [28], "children": [30], "calls": ["dfs"], "function": "minOperationsQueries", "code": "dfs(0, -1, 0)"}, "30": {"lineno": 39, "parents": [16, 29], "children": [31], "function": "minOperationsQueries", "code": "__iv = iter(range(1, m))"}, "31": {"lineno": 39, "parents": [34, 30], "children": [32, 55], "calls": ["range"], "function": "minOperationsQueries", "code": "_for: __iv.__length__hint__() > 0"}, "32": {"lineno": 39, "parents": [31], "children": [33], "function": "minOperationsQueries", "code": "j = next(__iv)"}, "33": {"lineno": 40, "parents": [32], "children": [34], "function": "minOperationsQueries", "code": "__iv = iter(range(n))"}, "34": {"lineno": 40, "parents": [33, 36], "children": [35, 31], "calls": ["range"], "function": "minOperationsQueries", "code": "_for: __iv.__length__hint__() > 0"}, "35": {"lineno": 40, "parents": [34], "children": [36], "function": "minOperationsQueries", "code": "i = next(__iv)"}, "36": {"lineno": 41, "parents": [35], "children": [34], "function": "minOperationsQueries", "code": "jump[i][j] = jump[jump[i][j - 1]][j - 1]"}, "37": {"lineno": 43, "parents": [58, 39], "children": [39], "function": "getLCA", "code": "enter: getLCA(u, v)"}, "38": {"lineno": 43, "parents": [40, 54, 47], "children": [], "function": "getLCA", "code": "exit: getLCA(u, v)"}, "39": {"lineno": 44, "parents": [37], "children": [40, 41], "calls": ["getLCA"], "function": "getLCA", "code": "_if: depth[u] > depth[v]"}, "40": {"lineno": 45, "parents": [38, 39], "children": [38], "function": "getLCA", "code": "return getLCA(v, u)"}, "41": {"lineno": 46, "parents": [38, 39], "children": [42], "function": "getLCA", "code": "__iv = iter(range(m))"}, "42": {"lineno": 46, "parents": [41, 44, 45], "children": [43, 46], "calls": ["range"], "function": "getLCA", "code": "_for: __iv.__length__hint__() > 0"}, "43": {"lineno": 46, "parents": [42], "children": [44], "function": "getLCA", "code": "j = next(__iv)"}, "44": {"lineno": 47, "parents": [43], "children": [42, 45], "function": "getLCA", "code": "_if: depth[v] - depth[u] >> j & 1"}, "45": {"lineno": 48, "parents": [44], "children": [42], "function": "getLCA", "code": "v = jump[v][j]"}, "46": {"lineno": 49, "parents": [42], "children": [48, 47], "function": "getLCA", "code": "_if: u == v"}, "47": {"lineno": 50, "parents": [46], "children": [38], "function": "getLCA", "code": "return u"}, "48": {"lineno": 51, "parents": [46], "children": [49], "function": "getLCA", "code": "__iv = iter(range(m - 1, -1, -1))"}, "49": {"lineno": 51, "parents": [48, 51, 53], "children": [50, 54], "calls": ["range"], "function": "getLCA", "code": "_for: __iv.__length__hint__() > 0"}, "50": {"lineno": 51, "parents": [49], "children": [51], "function": "getLCA", "code": "j = next(__iv)"}, "51": {"lineno": 52, "parents": [50], "children": [49, 52], "function": "getLCA", "code": "_if: jump[u][j] != jump[v][j]"}, "52": {"lineno": 53, "parents": [51], "children": [53], "function": "getLCA", "code": "u = jump[u][j]"}, "53": {"lineno": 54, "parents": [52], "children": [49], "function": "getLCA", "code": "v = jump[v][j]"}, "54": {"lineno": 55, "parents": [49], "children": [38], "function": "getLCA", "code": "return jump[v][0]"}, "55": {"lineno": 57, "parents": [31], "children": [56], "function": "minOperationsQueries", "code": "__iv = iter(queries)"}, "56": {"lineno": 57, "parents": [61, 55], "children": [57, 62], "function": "minOperationsQueries", "code": "_for: __iv.__length__hint__() > 0"}, "57": {"lineno": 57, "parents": [56], "children": [58], "function": "minOperationsQueries", "code": "u, v = next(__iv)"}, "58": {"lineno": 58, "parents": [57], "children": [59], "calls": ["getLCA"], "function": "minOperationsQueries", "code": "lca = getLCA(u, v)"}, "59": {"lineno": 59, "parents": [58, 38], "children": [60], "function": "minOperationsQueries", "code": "numEdges = depth[u] + depth[v] - 2 * depth[lca]"}, "60": {"lineno": 60, "parents": [59], "children": [61], "calls": ["max"], "function": "minOperationsQueries", "code": "maxFreq = max((count[u][j] + count[v][j] - 2 * count[lca][j] for j in range(1, kMax + 1)))"}, "61": {"lineno": 61, "parents": [60], "children": [56], "calls": ["append"], "function": "minOperationsQueries", "code": "ans.append(numEdges - maxFreq)"}, "62": {"lineno": 63, "parents": [56], "children": [2], "function": "minOperationsQueries", "code": "return ans"}, "63": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2850, "task_title": "Minimum Moves to Spread Stones Over Grid", "difficulty": 2, "func_name": "minimumMoves", "description": "You are given a 0-indexed 2D integer matrix `grid` of size `3 * 3`,\nrepresenting the number of stones in each cell. The grid contains exactly `9`\nstones, and there can be multiple stones in a single cell.\n\nIn one move, you can move a single stone from its current cell to any other\ncell if the two cells share a side.\n\nReturn the minimum number of moves required to place one stone in each cell.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumMoves(self, grid: List[List[int]]) -> int:\n    if sum(row.count(0) for row in grid) == 0:\n      return 0\n\n    ans = math.inf\n\n    for i in range(3):\n      for j in range(3):\n        if grid[i][j] == 0:\n          for x in range(3):\n            for y in range(3):\n              if grid[x][y] > 1:\n                grid[x][y] -= 1\n                grid[i][j] += 1\n                ans = min(ans, abs(x - i) + abs(y - j) + self.minimumMoves(grid))\n                grid[x][y] += 1\n                grid[i][j] -= 1\n\n    return ans\n", "blocks": [{"type": "if", "start": 13, "end": 14}, {"type": "if", "start": 20, "end": 28}, {"type": "if", "start": 23, "end": 28}], "target_lines": [14, 21, 22, 23, 24, 25, 26, 27, 28], "cfg": {"0": {"lineno": 0, "parents": [], "children": [26], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [22], "children": [3], "function": "minimumMoves", "code": "enter: minimumMoves(self, grid)"}, "2": {"lineno": 12, "parents": [25, 4], "children": [], "function": "minimumMoves", "code": "exit: minimumMoves(self, grid)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 5], "calls": ["sum"], "function": "minimumMoves", "code": "_if: sum((row.count(0) for row in grid)) == 0"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "minimumMoves", "code": "return 0"}, "5": {"lineno": 16, "parents": [3], "children": [6], "function": "minimumMoves", "code": "ans = math.inf"}, "6": {"lineno": 18, "parents": [5], "children": [7], "function": "minimumMoves", "code": "__iv = iter(range(3))"}, "7": {"lineno": 18, "parents": [10, 6], "children": [8, 25], "calls": ["range"], "function": "minimumMoves", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "minimumMoves", "code": "i = next(__iv)"}, "9": {"lineno": 19, "parents": [8], "children": [10], "function": "minimumMoves", "code": "__iv = iter(range(3))"}, "10": {"lineno": 19, "parents": [9, 12, 14], "children": [11, 7], "calls": ["range"], "function": "minimumMoves", "code": "_for: __iv.__length__hint__() > 0"}, "11": {"lineno": 19, "parents": [10], "children": [12], "function": "minimumMoves", "code": "j = next(__iv)"}, "12": {"lineno": 20, "parents": [11], "children": [10, 13], "function": "minimumMoves", "code": "_if: grid[i][j] == 0"}, "13": {"lineno": 21, "parents": [12], "children": [14], "function": "minimumMoves", "code": "__iv = iter(range(3))"}, "14": {"lineno": 21, "parents": [17, 13], "children": [10, 15], "calls": ["range"], "function": "minimumMoves", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 21, "parents": [14], "children": [16], "function": "minimumMoves", "code": "x = next(__iv)"}, "16": {"lineno": 22, "parents": [15], "children": [17], "function": "minimumMoves", "code": "__iv = iter(range(3))"}, "17": {"lineno": 22, "parents": [16, 24, 19], "children": [18, 14], "calls": ["range"], "function": "minimumMoves", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 22, "parents": [17], "children": [19], "function": "minimumMoves", "code": "y = next(__iv)"}, "19": {"lineno": 23, "parents": [18], "children": [17, 20], "function": "minimumMoves", "code": "_if: grid[x][y] > 1"}, "20": {"lineno": 24, "parents": [19], "children": [21], "function": "minimumMoves", "code": "grid[x][y] -= 1"}, "21": {"lineno": 25, "parents": [20], "children": [22], "function": "minimumMoves", "code": "grid[i][j] += 1"}, "22": {"lineno": 26, "parents": [21], "children": [23], "calls": ["abs", "abs", "minimumMoves", "min"], "function": "minimumMoves", "code": "ans = min(ans, abs(x - i) + abs(y - j) + self.minimumMoves(grid))"}, "23": {"lineno": 27, "parents": [2, 22], "children": [24], "function": "minimumMoves", "code": "grid[x][y] += 1"}, "24": {"lineno": 28, "parents": [23], "children": [17], "function": "minimumMoves", "code": "grid[i][j] -= 1"}, "25": {"lineno": 30, "parents": [7], "children": [2], "function": "minimumMoves", "code": "return ans"}, "26": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2851, "task_title": "String Transformation", "difficulty": 3, "func_name": "numberOfWays", "description": "You are given two strings `s` and `t` of equal length `n`. You can perform the\nfollowing operation on the string `s`:\n\n* Remove a suffix of `s` of length `l` where `0 < l < n` and append it at the start of `s`.  \nFor example, let `s = 'abcd'` then in one operation you can remove the suffix\n`'cd'` and append it in front of `s` making `s = 'cdab'`.\n\nYou are also given an integer `k`. Return the number of ways in which `s` can\nbe transformed into `t` in exactly `k` operations.\n\nSince the answer can be large, return it modulo `109 + 7`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def numberOfWays(self, s: str, t: str, k: int) -> int:\n    kMod = 1_000_000_007\n    n = len(s)\n    negOnePowK = 1 if k % 2 == 0 else -1  # (-1)^k\n    z = self._zFunction(s + t + t)\n\n    indices = [i - n for i in range(n, n + n) if z[i] >= n]\n    dp = [0] * 2\n    dp[1] = (pow(n - 1, k, kMod) - negOnePowK) * pow(n, kMod - 2, kMod)\n    dp[0] = dp[1] + negOnePowK\n    res = 0\n    for index in indices:\n      if index == 0:\n        res += dp[0]\n      else: \n        res += dp[1]\n    return res % kMod\n\n\n  def _zFunction(self, s: str) -> List[int]:\n    n = len(s)\n    z = [0] * n\n    l = 0\n    r = 0\n    for i in range(1, n):\n      if i < r:\n        z[i] = min(r - i, z[i - l])\n      while i + z[i] < n and s[z[i]] == s[i + z[i]]:\n        z[i] += 1\n      if i + z[i] > r:\n        l = i\n        r = i + z[i]\n    return z\n", "blocks": [{"type": "if", "start": 24, "end": 25}, {"type": "else", "start": 26, "end": 27}, {"type": "if", "start": 37, "end": 38}, {"type": "if", "start": 41, "end": 43}], "target_lines": [25, 27, 38, 42, 43], "cfg": {"0": {"lineno": 0, "parents": [], "children": [36], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "numberOfWays", "code": "enter: numberOfWays(self, s, t, k)"}, "2": {"lineno": 12, "parents": [18], "children": [], "function": "numberOfWays", "code": "exit: numberOfWays(self, s, t, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "numberOfWays", "code": "kMod = 1000000007"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "numberOfWays", "code": "n = len(s)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "numberOfWays", "code": "negOnePowK = 1 if k % 2 == 0 else -1"}, "6": {"lineno": 16, "parents": [5], "children": [7], "calls": ["_zFunction"], "function": "numberOfWays", "code": "z = self._zFunction(s + t + t)"}, "7": {"lineno": 18, "parents": [20, 6], "children": [8], "function": "numberOfWays", "code": "indices = [i - n for i in range(n, n + n) if z[i] >= n]"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "numberOfWays", "code": "dp = [0] * 2"}, "9": {"lineno": 20, "parents": [8], "children": [10], "calls": ["pow", "pow"], "function": "numberOfWays", "code": "dp[1] = (pow(n - 1, k, kMod) - negOnePowK) * pow(n, kMod - 2, kMod)"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "numberOfWays", "code": "dp[0] = dp[1] + negOnePowK"}, "11": {"lineno": 22, "parents": [10], "children": [12], "function": "numberOfWays", "code": "res = 0"}, "12": {"lineno": 23, "parents": [11], "children": [13], "function": "numberOfWays", "code": "__iv = iter(indices)"}, "13": {"lineno": 23, "parents": [16, 17, 12], "children": [18, 14], "function": "numberOfWays", "code": "_for: __iv.__length__hint__() > 0"}, "14": {"lineno": 23, "parents": [13], "children": [15], "function": "numberOfWays", "code": "index = next(__iv)"}, "15": {"lineno": 24, "parents": [14], "children": [16, 17], "function": "numberOfWays", "code": "_if: index == 0"}, "16": {"lineno": 25, "parents": [15], "children": [13], "function": "numberOfWays", "code": "res += dp[0]"}, "17": {"lineno": 27, "parents": [15], "children": [13], "function": "numberOfWays", "code": "res += dp[1]"}, "18": {"lineno": 28, "parents": [13], "children": [2], "function": "numberOfWays", "code": "return res % kMod"}, "19": {"lineno": 31, "parents": [6], "children": [21], "function": "_zFunction", "code": "enter: _zFunction(self, s)"}, "20": {"lineno": 31, "parents": [35], "children": [], "function": "_zFunction", "code": "exit: _zFunction(self, s)"}, "21": {"lineno": 32, "parents": [19], "children": [22], "calls": ["len"], "function": "_zFunction", "code": "n = len(s)"}, "22": {"lineno": 33, "parents": [21], "children": [23], "function": "_zFunction", "code": "z = [0] * n"}, "23": {"lineno": 34, "parents": [22], "children": [24], "function": "_zFunction", "code": "l = 0"}, "24": {"lineno": 35, "parents": [23], "children": [25], "function": "_zFunction", "code": "r = 0"}, "25": {"lineno": 36, "parents": [24], "children": [26], "function": "_zFunction", "code": "__iv = iter(range(1, n))"}, "26": {"lineno": 36, "parents": [32, 25, 34], "children": [35, 27], "calls": ["range"], "function": "_zFunction", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 36, "parents": [26], "children": [28], "function": "_zFunction", "code": "i = next(__iv)"}, "28": {"lineno": 37, "parents": [27], "children": [29, 30], "function": "_zFunction", "code": "_if: i < r"}, "29": {"lineno": 38, "parents": [28], "children": [30], "calls": ["min"], "function": "_zFunction", "code": "z[i] = min(r - i, z[i - l])"}, "30": {"lineno": 39, "parents": [28, 29, 31], "children": [32, 31], "function": "_zFunction", "code": "_while: i + z[i] < n and s[z[i]] == s[i + z[i]]"}, "31": {"lineno": 40, "parents": [30], "children": [30], "function": "_zFunction", "code": "z[i] += 1"}, "32": {"lineno": 41, "parents": [30], "children": [33, 26], "function": "_zFunction", "code": "_if: i + z[i] > r"}, "33": {"lineno": 42, "parents": [32], "children": [34], "function": "_zFunction", "code": "l = i"}, "34": {"lineno": 43, "parents": [33], "children": [26], "function": "_zFunction", "code": "r = i + z[i]"}, "35": {"lineno": 44, "parents": [26], "children": [20], "function": "_zFunction", "code": "return z"}, "36": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2876, "task_title": "Count Visited Nodes in a Directed Graph", "difficulty": 3, "func_name": "countVisitedNodes", "description": "There is a directed graph consisting of `n` nodes numbered from `0` to `n - 1`\nand `n` directed edges.\n\nYou are given a 0-indexed array `edges` where `edges[i]` indicates that there\nis an edge from node `i` to node `edges[i]`.\n\nConsider the following process on the graph:\n\n* You start from a node `x` and keep visiting other nodes through edges until you reach a node that you have already visited before on this same process.\n\nReturn an array `answer` where `answer[i]` is the number of different nodes\nthat you will visit if you perform the process starting from node `i`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def countVisitedNodes(self, edges: List[int]) -> List[int]:\n    n = len(edges)\n    ans = [0] * n\n    inDegrees = [0] * n\n    seen = [False] * n\n    stack = []\n\n    for v in edges:\n      inDegrees[v] += 1\n\n    q = collections.deque([i for i, d in enumerate(inDegrees) if d == 0])\n\n    while q:\n      u = q.popleft()\n      inDegrees[edges[u]] -= 1\n      if inDegrees[edges[u]] == 0:\n        q.append(edges[u])\n      stack.append(u)\n      seen[u] = True\n\n    for i in range(n):\n      if not seen[i]:\n        self._fillCycle(edges, i, seen, ans)\n\n    while stack:\n      u = stack.pop()\n      ans[u] = ans[edges[u]] + 1\n\n    return ans\n\n  def _fillCycle(self, edges: List[int], start: int, seen: List[bool], ans: List[int]) -> None:\n    cycleLength = 0\n    u = start\n    while not seen[u]:\n      cycleLength += 1\n      seen[u] = True\n      u = edges[u]\n    ans[start] = cycleLength\n    u = edges[start]\n    while u != start:\n      ans[u] = cycleLength\n      u = edges[u]\n", "blocks": [{"type": "if", "start": 27, "end": 28}, {"type": "if", "start": 33, "end": 34}], "target_lines": [28, 34], "cfg": {"0": {"lineno": 0, "parents": [], "children": [42], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "countVisitedNodes", "code": "enter: countVisitedNodes(self, edges)"}, "2": {"lineno": 12, "parents": [28], "children": [], "function": "countVisitedNodes", "code": "exit: countVisitedNodes(self, edges)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "countVisitedNodes", "code": "n = len(edges)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "countVisitedNodes", "code": "ans = [0] * n"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "countVisitedNodes", "code": "inDegrees = [0] * n"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "countVisitedNodes", "code": "seen = [False] * n"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "countVisitedNodes", "code": "stack = []"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "countVisitedNodes", "code": "__iv = iter(edges)"}, "9": {"lineno": 19, "parents": [8, 11], "children": [10, 12], "function": "countVisitedNodes", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "countVisitedNodes", "code": "v = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [9], "function": "countVisitedNodes", "code": "inDegrees[v] += 1"}, "12": {"lineno": 22, "parents": [9], "children": [13], "calls": ["deque"], "function": "countVisitedNodes", "code": "q = collections.deque([i for i, d in enumerate(inDegrees) if d == 0])"}, "13": {"lineno": 24, "parents": [19, 12], "children": [20, 14], "function": "countVisitedNodes", "code": "_while: q"}, "14": {"lineno": 25, "parents": [13], "children": [15], "calls": ["popleft"], "function": "countVisitedNodes", "code": "u = q.popleft()"}, "15": {"lineno": 26, "parents": [14], "children": [16], "function": "countVisitedNodes", "code": "inDegrees[edges[u]] -= 1"}, "16": {"lineno": 27, "parents": [15], "children": [17, 18], "function": "countVisitedNodes", "code": "_if: inDegrees[edges[u]] == 0"}, "17": {"lineno": 28, "parents": [16], "children": [18], "calls": ["append"], "function": "countVisitedNodes", "code": "q.append(edges[u])"}, "18": {"lineno": 29, "parents": [16, 17], "children": [19], "calls": ["append"], "function": "countVisitedNodes", "code": "stack.append(u)"}, "19": {"lineno": 30, "parents": [18], "children": [13], "function": "countVisitedNodes", "code": "seen[u] = True"}, "20": {"lineno": 32, "parents": [13], "children": [21], "function": "countVisitedNodes", "code": "__iv = iter(range(n))"}, "21": {"lineno": 32, "parents": [24, 20, 30, 23], "children": [25, 22], "calls": ["range"], "function": "countVisitedNodes", "code": "_for: __iv.__length__hint__() > 0"}, "22": {"lineno": 32, "parents": [21], "children": [23], "function": "countVisitedNodes", "code": "i = next(__iv)"}, "23": {"lineno": 33, "parents": [22], "children": [24, 21], "function": "countVisitedNodes", "code": "_if: not seen[i]"}, "24": {"lineno": 34, "parents": [23], "children": [21], "calls": ["_fillCycle"], "function": "countVisitedNodes", "code": "self._fillCycle(edges, i, seen, ans)"}, "25": {"lineno": 36, "parents": [27, 21], "children": [26, 28], "function": "countVisitedNodes", "code": "_while: stack"}, "26": {"lineno": 37, "parents": [25], "children": [27], "calls": ["pop"], "function": "countVisitedNodes", "code": "u = stack.pop()"}, "27": {"lineno": 38, "parents": [26], "children": [25], "function": "countVisitedNodes", "code": "ans[u] = ans[edges[u]] + 1"}, "28": {"lineno": 40, "parents": [25], "children": [2], "function": "countVisitedNodes", "code": "return ans"}, "29": {"lineno": 42, "parents": [24], "children": [31], "function": "_fillCycle", "code": "enter: _fillCycle(self, edges, start, seen, ans)"}, "30": {"lineno": 42, "parents": [39], "children": [], "function": "_fillCycle", "code": "exit: _fillCycle(self, edges, start, seen, ans)"}, "31": {"lineno": 43, "parents": [29], "children": [32], "function": "_fillCycle", "code": "cycleLength = 0"}, "32": {"lineno": 44, "parents": [31], "children": [33], "function": "_fillCycle", "code": "u = start"}, "33": {"lineno": 45, "parents": [32, 36], "children": [34, 37], "function": "_fillCycle", "code": "_while: not seen[u]"}, "34": {"lineno": 46, "parents": [33], "children": [35], "function": "_fillCycle", "code": "cycleLength += 1"}, "35": {"lineno": 47, "parents": [34], "children": [36], "function": "_fillCycle", "code": "seen[u] = True"}, "36": {"lineno": 48, "parents": [35], "children": [33], "function": "_fillCycle", "code": "u = edges[u]"}, "37": {"lineno": 49, "parents": [33], "children": [38], "function": "_fillCycle", "code": "ans[start] = cycleLength"}, "38": {"lineno": 50, "parents": [37], "children": [39], "function": "_fillCycle", "code": "u = edges[start]"}, "39": {"lineno": 51, "parents": [41, 38], "children": [40, 30], "function": "_fillCycle", "code": "_while: u != start"}, "40": {"lineno": 52, "parents": [39], "children": [41], "function": "_fillCycle", "code": "ans[u] = cycleLength"}, "41": {"lineno": 53, "parents": [40], "children": [39], "function": "_fillCycle", "code": "u = edges[u]"}, "42": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2901, "task_title": "Longest Unequal Adjacent Groups Subsequence II", "difficulty": 2, "func_name": "getWordsInLongestSubsequence", "description": "You are given a string array `words`, and an array `groups`, both arrays\nhaving length `n`.\n\nThe hamming distance between two strings of equal length is the number of\npositions at which the corresponding characters are different.\n\nYou need to select the longest subsequence from an array of indices `[0, 1,\n..., n - 1]`, such that for the subsequence denoted as `[i0, i1, ..., ik-1]`\nhaving length `k`, the following holds:\n\n* For adjacent indices in the subsequence, their corresponding groups are unequal, i.e., `groups[ij] != groups[ij+1]`, for each `j` where `0 < j + 1 < k`.\n* `words[ij]` and `words[ij+1]` are equal in length, and the hamming distance between them is `1`, where `0 < j + 1 < k`, for all indices in the subsequence.\n\nReturn a string array containing the words corresponding to the indices (in\norder) in the selected subsequence. If there are multiple answers, return any\nof them.\n\nNote: strings in `words` may be unequal in length.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def getWordsInLongestSubsequence(self, words: List[str], groups: List[int]) -> List[str]:\n    ans = []\n    n=len(words)\n    dp = [1] * n\n    prev = [-1] * n\n\n    for i in range(1, n):\n      for j in range(i):\n        if groups[i] == groups[j]:\n          continue\n        if len(words[i]) != len(words[j]):\n          continue\n        if sum(a != b for a, b in zip(words[i], words[j])) != 1:\n          continue\n        if dp[i] < dp[j] + 1:\n          dp[i] = dp[j] + 1\n          prev[i] = j\n\n    index = dp.index(max(dp))\n    while index != -1:\n      ans.append(words[index])\n      index = prev[index]\n\n    return ans[::-1]\n", "blocks": [{"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 22, "end": 23}, {"type": "if", "start": 24, "end": 25}, {"type": "if", "start": 26, "end": 28}], "target_lines": [21, 23, 25, 27, 28], "cfg": {"0": {"lineno": 0, "parents": [], "children": [27], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "getWordsInLongestSubsequence", "code": "enter: getWordsInLongestSubsequence(self, words, groups)"}, "2": {"lineno": 12, "parents": [26], "children": [], "function": "getWordsInLongestSubsequence", "code": "exit: getWordsInLongestSubsequence(self, words, groups)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "getWordsInLongestSubsequence", "code": "ans = []"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "getWordsInLongestSubsequence", "code": "n = len(words)"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "getWordsInLongestSubsequence", "code": "dp = [1] * n"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "getWordsInLongestSubsequence", "code": "prev = [-1] * n"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "getWordsInLongestSubsequence", "code": "__iv = iter(range(1, n))"}, "8": {"lineno": 18, "parents": [11, 7], "children": [9, 22], "calls": ["range"], "function": "getWordsInLongestSubsequence", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "getWordsInLongestSubsequence", "code": "i = next(__iv)"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "getWordsInLongestSubsequence", "code": "__iv = iter(range(i))"}, "11": {"lineno": 19, "parents": [16, 18, 19, 21, 10, 14], "children": [8, 12], "calls": ["range"], "function": "getWordsInLongestSubsequence", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 19, "parents": [11], "children": [13], "function": "getWordsInLongestSubsequence", "code": "j = next(__iv)"}, "13": {"lineno": 20, "parents": [12], "children": [14, 15], "function": "getWordsInLongestSubsequence", "code": "_if: groups[i] == groups[j]"}, "14": {"lineno": 21, "parents": [13], "children": [11], "function": "getWordsInLongestSubsequence", "code": "continue"}, "15": {"lineno": 22, "parents": [13], "children": [16, 17], "calls": ["len", "len"], "function": "getWordsInLongestSubsequence", "code": "_if: len(words[i]) != len(words[j])"}, "16": {"lineno": 23, "parents": [15], "children": [11], "function": "getWordsInLongestSubsequence", "code": "continue"}, "17": {"lineno": 24, "parents": [15], "children": [18, 19], "calls": ["sum"], "function": "getWordsInLongestSubsequence", "code": "_if: sum((a != b for a, b in zip(words[i], words[j]))) != 1"}, "18": {"lineno": 25, "parents": [17], "children": [11], "function": "getWordsInLongestSubsequence", "code": "continue"}, "19": {"lineno": 26, "parents": [17], "children": [11, 20], "function": "getWordsInLongestSubsequence", "code": "_if: dp[i] < dp[j] + 1"}, "20": {"lineno": 27, "parents": [19], "children": [21], "function": "getWordsInLongestSubsequence", "code": "dp[i] = dp[j] + 1"}, "21": {"lineno": 28, "parents": [20], "children": [11], "function": "getWordsInLongestSubsequence", "code": "prev[i] = j"}, "22": {"lineno": 30, "parents": [8], "children": [23], "calls": ["max", "index"], "function": "getWordsInLongestSubsequence", "code": "index = dp.index(max(dp))"}, "23": {"lineno": 31, "parents": [25, 22], "children": [24, 26], "function": "getWordsInLongestSubsequence", "code": "_while: index != -1"}, "24": {"lineno": 32, "parents": [23], "children": [25], "calls": ["append"], "function": "getWordsInLongestSubsequence", "code": "ans.append(words[index])"}, "25": {"lineno": 33, "parents": [24], "children": [23], "function": "getWordsInLongestSubsequence", "code": "index = prev[index]"}, "26": {"lineno": 35, "parents": [23], "children": [2], "function": "getWordsInLongestSubsequence", "code": "return ans[::-1]"}, "27": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2904, "task_title": "Shortest and Lexicographically Smallest Beautiful String", "difficulty": 2, "func_name": "shortestBeautifulSubstring", "description": "You are given a binary string `s` and a positive integer `k`.\n\nA substring of `s` is beautiful if the number of `1`'s in it is exactly `k`.\n\nLet `len` be the length of the shortest beautiful substring.\n\nReturn the lexicographically smallest beautiful substring of string `s` with\nlength equal to `len`. If `s` doesn't contain a beautiful substring, return an\nempty string.\n\nA string `a` is lexicographically larger than a string `b` (of the same\nlength) if in the first position where `a` and `b` differ, `a` has a character\nstrictly larger than the corresponding character in `b`.\n\n* For example, `\"abcd\"` is lexicographically larger than `\"abcc\"` because the first position they differ is at the fourth character, and `d` is greater than `c`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def shortestBeautifulSubstring(self, s: str, k: int) -> str:\n    bestLeft = -1\n    minLength = len(s) + 1\n    ones = 0\n\n    l = 0\n    for r, c in enumerate(s):\n      if c == '1':\n        ones += 1\n      while ones == k:\n        if r - l + 1 < minLength:\n          bestLeft = l\n          minLength = r - l + 1\n        elif r - l + 1 == minLength and s[l:l + minLength] < s[bestLeft:bestLeft + minLength]:\n          bestLeft = l\n        if s[l] == '1':\n          ones -= 1\n        l += 1\n\n    if bestLeft == -1:\n      return \"\"\n    else:\n      return s[bestLeft:bestLeft + minLength]\n", "blocks": [{"type": "if", "start": 31, "end": 32}, {"type": "else", "start": 33, "end": 34}, {"type": "if", "start": 19, "end": 20}, {"type": "if", "start": 22, "end": 24}, {"type": "if", "start": 27, "end": 28}, {"type": "if", "start": 25, "end": 26}], "target_lines": [20, 23, 24, 26, 28, 32, 34], "cfg": {"0": {"lineno": 0, "parents": [], "children": [24], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "shortestBeautifulSubstring", "code": "enter: shortestBeautifulSubstring(self, s, k)"}, "2": {"lineno": 12, "parents": [22, 23], "children": [], "function": "shortestBeautifulSubstring", "code": "exit: shortestBeautifulSubstring(self, s, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "shortestBeautifulSubstring", "code": "bestLeft = -1"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "shortestBeautifulSubstring", "code": "minLength = len(s) + 1"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "shortestBeautifulSubstring", "code": "ones = 0"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "shortestBeautifulSubstring", "code": "l = 0"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "shortestBeautifulSubstring", "code": "__iv = iter(enumerate(s))"}, "8": {"lineno": 18, "parents": [12, 7], "children": [9, 21], "calls": ["enumerate"], "function": "shortestBeautifulSubstring", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "shortestBeautifulSubstring", "code": "r, c = next(__iv)"}, "10": {"lineno": 19, "parents": [9], "children": [11, 12], "function": "shortestBeautifulSubstring", "code": "_if: c == '1'"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "shortestBeautifulSubstring", "code": "ones += 1"}, "12": {"lineno": 21, "parents": [10, 11, 20], "children": [8, 13], "function": "shortestBeautifulSubstring", "code": "_while: ones == k"}, "13": {"lineno": 22, "parents": [12], "children": [16, 14], "function": "shortestBeautifulSubstring", "code": "_if: r - l + 1 < minLength"}, "14": {"lineno": 23, "parents": [13], "children": [15], "function": "shortestBeautifulSubstring", "code": "bestLeft = l"}, "15": {"lineno": 24, "parents": [14], "children": [18], "function": "shortestBeautifulSubstring", "code": "minLength = r - l + 1"}, "16": {"lineno": 25, "parents": [13], "children": [17, 18], "function": "shortestBeautifulSubstring", "code": "_if: r - l + 1 == minLength and s[l:l + minLength] < s[bestLeft:bestLeft + minLength]"}, "17": {"lineno": 26, "parents": [16], "children": [18], "function": "shortestBeautifulSubstring", "code": "bestLeft = l"}, "18": {"lineno": 27, "parents": [16, 17, 15], "children": [19, 20], "function": "shortestBeautifulSubstring", "code": "_if: s[l] == '1'"}, "19": {"lineno": 28, "parents": [18], "children": [20], "function": "shortestBeautifulSubstring", "code": "ones -= 1"}, "20": {"lineno": 29, "parents": [18, 19], "children": [12], "function": "shortestBeautifulSubstring", "code": "l += 1"}, "21": {"lineno": 31, "parents": [8], "children": [22, 23], "function": "shortestBeautifulSubstring", "code": "_if: bestLeft == -1"}, "22": {"lineno": 32, "parents": [21], "children": [2], "function": "shortestBeautifulSubstring", "code": "return ''"}, "23": {"lineno": 34, "parents": [21], "children": [2], "function": "shortestBeautifulSubstring", "code": "return s[bestLeft:bestLeft + minLength]"}, "24": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2911, "task_title": "Minimum Changes to Make K Semi-palindromes", "difficulty": 3, "func_name": "minimumChanges", "description": "Given a string `s` and an integer `k`, partition `s` into `k` substrings such\nthat the letter changes needed to make each substring a semi-palindrome are\nminimized.\n\nReturn the minimum number of letter changes required.\n\nA semi-palindrome is a special type of string that can be divided into\npalindromes based on a repeating pattern. To check if a string is a semi-\npalindrome:\u200b\n\n1. Choose a positive divisor `d` of the string's length. `d` can range from `1` up to, but not including, the string's length. For a string of length `1`, it does not have a valid divisor as per this definition, since the only divisor is its length, which is not allowed.\n2. For a given divisor `d`, divide the string into groups where each group contains characters from the string that follow a repeating pattern of length `d`. Specifically, the first group consists of characters at positions `1`, `1 + d`, `1 + 2d`, and so on; the second group includes characters at positions `2`, `2 + d`, `2 + 2d`, etc.\n3. The string is considered a semi-palindrome if each of these groups forms a palindrome.\n\nConsider the string `\"abcabc\"`:\n\n* The length of `\"abcabc\"` is `6`. Valid divisors are `1`, `2`, and `3`.\n* For `d = 1`: The entire string `\"abcabc\"` forms one group. Not a palindrome.\n* For `d = 2`: \n* Group 1 (positions `1, 3, 5`): `\"acb\"`\n* Group 2 (positions `2, 4, 6`): `\"bac\"`\n* Neither group forms a palindrome.\n* For `d = 3`: \n* Group 1 (positions `1, 4`): `\"aa\"`\n* Group 2 (positions `2, 5`): `\"bb\"`\n* Group 3 (positions `3, 6`): `\"cc\"`\n* All groups form palindromes. Therefore, `\"abcabc\"` is a semi-palindrome.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumChanges(self, s: str, k: int) -> int:\n    n = len(s)\n    factors = self._getFactors(n)\n    cost = self._getCost(s, n, factors)\n    dp = [[n] * (k + 1) for _ in range(n + 1)]\n\n    dp[n][0] = 0\n\n    for i in range(n - 1, -1, -1):\n      for j in range(1, k + 1):\n        for l in range(i + 1, n):\n          dp[i][j] = min(dp[i][j], dp[l + 1][j - 1] + cost[i][l])\n\n    return dp[0][k]\n\n  def _getFactors(self, n: int) -> List[List[int]]:\n    factors = [[1] for _ in range(n + 1)]\n    for d in range(2, n):\n      for i in range(d * 2, n + 1, d):\n        factors[i].append(d)\n    return factors\n\n  def _getCost(self, s: str, n: int, factors: List[List[int]]) -> List[List[int]]:\n    cost = [[0] * n for _ in range(n)]\n    for i in range(n):\n      for j in range(i + 1, n):\n        length = j - i + 1\n        minCost = length\n        for d in factors[length]:\n          minCost = min(minCost, self._getCostD(s, i, j, d))\n        cost[i][j] = minCost\n    return cost\n\n  def _getCostD(self, s: str, i: int, j: int, d: int) -> int:\n    cost = 0\n    for offset in range(d):\n      l = i + offset\n      r = j - d + 1 + offset\n      while l < r:\n        if s[l] != s[r]:\n          cost += 1\n        l += d\n        r -= d\n    return cost\n", "blocks": [{"type": "if", "start": 51, "end": 52}], "target_lines": [52], "cfg": {"0": {"lineno": 0, "parents": [], "children": [61], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumChanges", "code": "enter: minimumChanges(self, s, k)"}, "2": {"lineno": 12, "parents": [18], "children": [], "function": "minimumChanges", "code": "exit: minimumChanges(self, s, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "minimumChanges", "code": "n = len(s)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["_getFactors"], "function": "minimumChanges", "code": "factors = self._getFactors(n)"}, "5": {"lineno": 15, "parents": [4, 20], "children": [6], "calls": ["_getCost"], "function": "minimumChanges", "code": "cost = self._getCost(s, n, factors)"}, "6": {"lineno": 16, "parents": [5, 31], "children": [7], "function": "minimumChanges", "code": "dp = [[n] * (k + 1) for _ in range(n + 1)]"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "minimumChanges", "code": "dp[n][0] = 0"}, "8": {"lineno": 20, "parents": [7], "children": [9], "function": "minimumChanges", "code": "__iv = iter(range(n - 1, -1, -1))"}, "9": {"lineno": 20, "parents": [8, 12], "children": [10, 18], "calls": ["range"], "function": "minimumChanges", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 20, "parents": [9], "children": [11], "function": "minimumChanges", "code": "i = next(__iv)"}, "11": {"lineno": 21, "parents": [10], "children": [12], "function": "minimumChanges", "code": "__iv = iter(range(1, k + 1))"}, "12": {"lineno": 21, "parents": [11, 15], "children": [9, 13], "calls": ["range"], "function": "minimumChanges", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 21, "parents": [12], "children": [14], "function": "minimumChanges", "code": "j = next(__iv)"}, "14": {"lineno": 22, "parents": [13], "children": [15], "function": "minimumChanges", "code": "__iv = iter(range(i + 1, n))"}, "15": {"lineno": 22, "parents": [17, 14], "children": [16, 12], "calls": ["range"], "function": "minimumChanges", "code": "_for: __iv.__length__hint__() > 0"}, "16": {"lineno": 22, "parents": [15], "children": [17], "function": "minimumChanges", "code": "l = next(__iv)"}, "17": {"lineno": 23, "parents": [16], "children": [15], "calls": ["min"], "function": "minimumChanges", "code": "dp[i][j] = min(dp[i][j], dp[l + 1][j - 1] + cost[i][l])"}, "18": {"lineno": 25, "parents": [9], "children": [2], "function": "minimumChanges", "code": "return dp[0][k]"}, "19": {"lineno": 27, "parents": [4], "children": [21], "function": "_getFactors", "code": "enter: _getFactors(self, n)"}, "20": {"lineno": 27, "parents": [29], "children": [], "function": "_getFactors", "code": "exit: _getFactors(self, n)"}, "21": {"lineno": 28, "parents": [19], "children": [22], "function": "_getFactors", "code": "factors = [[1] for _ in range(n + 1)]"}, "22": {"lineno": 29, "parents": [21], "children": [23], "function": "_getFactors", "code": "__iv = iter(range(2, n))"}, "23": {"lineno": 29, "parents": [26, 22], "children": [24, 29], "calls": ["range"], "function": "_getFactors", "code": "_for: __iv.__length__hint__() > 0"}, "24": {"lineno": 29, "parents": [23], "children": [25], "function": "_getFactors", "code": "d = next(__iv)"}, "25": {"lineno": 30, "parents": [24], "children": [26], "function": "_getFactors", "code": "__iv = iter(range(d * 2, n + 1, d))"}, "26": {"lineno": 30, "parents": [25, 28], "children": [27, 23], "calls": ["range"], "function": "_getFactors", "code": "_for: __iv.__length__hint__() > 0"}, "27": {"lineno": 30, "parents": [26], "children": [28], "function": "_getFactors", "code": "i = next(__iv)"}, "28": {"lineno": 31, "parents": [27], "children": [26], "calls": ["append"], "function": "_getFactors", "code": "factors[i].append(d)"}, "29": {"lineno": 32, "parents": [23], "children": [20], "function": "_getFactors", "code": "return factors"}, "30": {"lineno": 34, "parents": [5], "children": [32], "function": "_getCost", "code": "enter: _getCost(self, s, n, factors)"}, "31": {"lineno": 34, "parents": [46], "children": [], "function": "_getCost", "code": "exit: _getCost(self, s, n, factors)"}, "32": {"lineno": 35, "parents": [30], "children": [33], "function": "_getCost", "code": "cost = [[0] * n for _ in range(n)]"}, "33": {"lineno": 36, "parents": [32], "children": [34], "function": "_getCost", "code": "__iv = iter(range(n))"}, "34": {"lineno": 36, "parents": [33, 37], "children": [35, 46], "calls": ["range"], "function": "_getCost", "code": "_for: __iv.__length__hint__() > 0"}, "35": {"lineno": 36, "parents": [34], "children": [36], "function": "_getCost", "code": "i = next(__iv)"}, "36": {"lineno": 37, "parents": [35], "children": [37], "function": "_getCost", "code": "__iv = iter(range(i + 1, n))"}, "37": {"lineno": 37, "parents": [36, 45], "children": [34, 38], "calls": ["range"], "function": "_getCost", "code": "_for: __iv.__length__hint__() > 0"}, "38": {"lineno": 37, "parents": [37], "children": [39], "function": "_getCost", "code": "j = next(__iv)"}, "39": {"lineno": 38, "parents": [38], "children": [40], "function": "_getCost", "code": "length = j - i + 1"}, "40": {"lineno": 39, "parents": [39], "children": [41], "function": "_getCost", "code": "minCost = length"}, "41": {"lineno": 40, "parents": [40], "children": [42], "function": "_getCost", "code": "__iv = iter(factors[length])"}, "42": {"lineno": 40, "parents": [48, 41, 44], "children": [43, 45], "function": "_getCost", "code": "_for: __iv.__length__hint__() > 0"}, "43": {"lineno": 40, "parents": [42], "children": [44], "function": "_getCost", "code": "d = next(__iv)"}, "44": {"lineno": 41, "parents": [43], "children": [42], "calls": ["_getCostD", "min"], "function": "_getCost", "code": "minCost = min(minCost, self._getCostD(s, i, j, d))"}, "45": {"lineno": 42, "parents": [42], "children": [37], "function": "_getCost", "code": "cost[i][j] = minCost"}, "46": {"lineno": 43, "parents": [34], "children": [31], "function": "_getCost", "code": "return cost"}, "47": {"lineno": 45, "parents": [44], "children": [49], "function": "_getCostD", "code": "enter: _getCostD(self, s, i, j, d)"}, "48": {"lineno": 45, "parents": [60], "children": [], "function": "_getCostD", "code": "exit: _getCostD(self, s, i, j, d)"}, "49": {"lineno": 46, "parents": [47], "children": [50], "function": "_getCostD", "code": "cost = 0"}, "50": {"lineno": 47, "parents": [49], "children": [51], "function": "_getCostD", "code": "__iv = iter(range(d))"}, "51": {"lineno": 47, "parents": [50, 55], "children": [52, 60], "calls": ["range"], "function": "_getCostD", "code": "_for: __iv.__length__hint__() > 0"}, "52": {"lineno": 47, "parents": [51], "children": [53], "function": "_getCostD", "code": "offset = next(__iv)"}, "53": {"lineno": 48, "parents": [52], "children": [54], "function": "_getCostD", "code": "l = i + offset"}, "54": {"lineno": 49, "parents": [53], "children": [55], "function": "_getCostD", "code": "r = j - d + 1 + offset"}, "55": {"lineno": 50, "parents": [59, 54], "children": [56, 51], "function": "_getCostD", "code": "_while: l < r"}, "56": {"lineno": 51, "parents": [55], "children": [57, 58], "function": "_getCostD", "code": "_if: s[l] != s[r]"}, "57": {"lineno": 52, "parents": [56], "children": [58], "function": "_getCostD", "code": "cost += 1"}, "58": {"lineno": 53, "parents": [56, 57], "children": [59], "function": "_getCostD", "code": "l += d"}, "59": {"lineno": 54, "parents": [58], "children": [55], "function": "_getCostD", "code": "r -= d"}, "60": {"lineno": 55, "parents": [51], "children": [48], "function": "_getCostD", "code": "return cost"}, "61": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2932, "task_title": "Maximum Strong Pair XOR I", "difficulty": 1, "func_name": "maximumStrongPairXor", "description": "You are given a 0-indexed integer array `nums`. A pair of integers `x` and `y`\nis called a strong pair if it satisfies the condition:\n\n* `|x - y| <= min(x, y)`\n\nYou need to select two integers from `nums` such that they form a strong pair\nand their bitwise `XOR` is the maximum among all strong pairs in the array.\n\nReturn the maximum `XOR` value out of all possible strong pairs in the array\n`nums`.\n\nNote that you can pick the same integer twice to form a pair.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator, Optional\n\nclass TrieNode:\n  def __init__(self):\n    self.children: List[Optional[TrieNode]] = [None] * 2\n    self.min = math.inf\n    self.max = -math.inf\n\n\nclass BitTrie:\n  def __init__(self, maxBit: int):\n    self.maxBit = maxBit\n    self.root = TrieNode()\n\n  def insert(self, num: int) -> None:\n    node = self.root\n    for i in range(self.maxBit, -1, -1):\n      bit = num >> i & 1\n      if not node.children[bit]:\n        node.children[bit] = TrieNode()\n      node = node.children[bit]\n      node.min = min(node.min, num)\n      node.max = max(node.max, num)\n\n  def getMaxXor(self, x: int) -> int:\n    maxXor = 0\n    node = self.root\n    for i in range(self.maxBit, -1, -1):\n      bit = x >> i & 1\n      toggleBit = bit ^ 1\n      if node.children[toggleBit] and node.children[toggleBit].max > x and node.children[toggleBit].min <= 2 * x:\n        maxXor = maxXor | 1 << i\n        node = node.children[toggleBit]\n      elif node.children[bit]:\n        node = node.children[bit]\n      else:\n        return 0\n    return maxXor\n\n\nclass Solution:\n  def maximumStrongPairXor(self, nums: List[int]) -> int:\n    maxNum = max(nums)\n    maxBit = int(math.log2(maxNum))\n    bitTrie = BitTrie(maxBit)\n\n    for num in nums:\n      bitTrie.insert(num)\n\n    return max(bitTrie.getMaxXor(num) for num in nums)\n", "blocks": [{"type": "if", "start": 27, "end": 28}, {"type": "if", "start": 39, "end": 41}, {"type": "if", "start": 42, "end": 43}, {"type": "else", "start": 44, "end": 45}], "target_lines": [28, 40, 41, 43, 45], "cfg": {"0": {"lineno": 0, "parents": [], "children": [48], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self)"}, "2": {"lineno": 12, "parents": [5], "children": [], "function": "__init__", "code": "exit: __init__(self)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "__init__", "code": "self.children: List[Optional[TrieNode]] = [None] * 2"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "__init__", "code": "self.min = math.inf"}, "5": {"lineno": 15, "parents": [4], "children": [2], "function": "__init__", "code": "self.max = -math.inf"}, "6": {"lineno": 19, "parents": [], "children": [8], "function": "__init__", "code": "enter: __init__(self, maxBit)"}, "7": {"lineno": 19, "parents": [9], "children": [], "function": "__init__", "code": "exit: __init__(self, maxBit)"}, "8": {"lineno": 20, "parents": [6], "children": [9], "function": "__init__", "code": "self.maxBit = maxBit"}, "9": {"lineno": 21, "parents": [8], "children": [7], "calls": ["TrieNode"], "function": "__init__", "code": "self.root = TrieNode()"}, "10": {"lineno": 23, "parents": [46], "children": [12], "function": "insert", "code": "enter: insert(self, num)"}, "11": {"lineno": 23, "parents": [14], "children": [], "function": "insert", "code": "exit: insert(self, num)"}, "12": {"lineno": 24, "parents": [10], "children": [13], "function": "insert", "code": "node = self.root"}, "13": {"lineno": 25, "parents": [12], "children": [14], "function": "insert", "code": "__iv = iter(range(self.maxBit, -1, -1))"}, "14": {"lineno": 25, "parents": [21, 13], "children": [11, 15], "calls": ["range"], "function": "insert", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 25, "parents": [14], "children": [16], "function": "insert", "code": "i = next(__iv)"}, "16": {"lineno": 26, "parents": [15], "children": [17], "function": "insert", "code": "bit = num >> i & 1"}, "17": {"lineno": 27, "parents": [16], "children": [18, 19], "function": "insert", "code": "_if: not node.children[bit]"}, "18": {"lineno": 28, "parents": [17], "children": [19], "calls": ["TrieNode"], "function": "insert", "code": "node.children[bit] = TrieNode()"}, "19": {"lineno": 29, "parents": [17, 18], "children": [20], "function": "insert", "code": "node = node.children[bit]"}, "20": {"lineno": 30, "parents": [19], "children": [21], "calls": ["min"], "function": "insert", "code": "node.min = min(node.min, num)"}, "21": {"lineno": 31, "parents": [20], "children": [14], "calls": ["max"], "function": "insert", "code": "node.max = max(node.max, num)"}, "22": {"lineno": 33, "parents": [], "children": [24], "function": "getMaxXor", "code": "enter: getMaxXor(self, x)"}, "23": {"lineno": 33, "parents": [36, 37], "children": [], "function": "getMaxXor", "code": "exit: getMaxXor(self, x)"}, "24": {"lineno": 34, "parents": [22], "children": [25], "function": "getMaxXor", "code": "maxXor = 0"}, "25": {"lineno": 35, "parents": [24], "children": [26], "function": "getMaxXor", "code": "node = self.root"}, "26": {"lineno": 36, "parents": [25], "children": [27], "function": "getMaxXor", "code": "__iv = iter(range(self.maxBit, -1, -1))"}, "27": {"lineno": 36, "parents": [33, 26, 35], "children": [28, 37], "calls": ["range"], "function": "getMaxXor", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 36, "parents": [27], "children": [29], "function": "getMaxXor", "code": "i = next(__iv)"}, "29": {"lineno": 37, "parents": [28], "children": [30], "function": "getMaxXor", "code": "bit = x >> i & 1"}, "30": {"lineno": 38, "parents": [29], "children": [31], "function": "getMaxXor", "code": "toggleBit = bit ^ 1"}, "31": {"lineno": 39, "parents": [30], "children": [32, 34], "function": "getMaxXor", "code": "_if: node.children[toggleBit] and node.children[toggleBit].max > x and (node.children[toggleBit].min <= 2 * x)"}, "32": {"lineno": 40, "parents": [31], "children": [33], "function": "getMaxXor", "code": "maxXor = maxXor | 1 << i"}, "33": {"lineno": 41, "parents": [32], "children": [27], "function": "getMaxXor", "code": "node = node.children[toggleBit]"}, "34": {"lineno": 42, "parents": [31], "children": [35, 36], "function": "getMaxXor", "code": "_if: node.children[bit]"}, "35": {"lineno": 43, "parents": [34], "children": [27], "function": "getMaxXor", "code": "node = node.children[bit]"}, "36": {"lineno": 45, "parents": [34], "children": [23], "function": "getMaxXor", "code": "return 0"}, "37": {"lineno": 46, "parents": [27], "children": [23], "function": "getMaxXor", "code": "return maxXor"}, "38": {"lineno": 50, "parents": [], "children": [40], "function": "maximumStrongPairXor", "code": "enter: maximumStrongPairXor(self, nums)"}, "39": {"lineno": 50, "parents": [47], "children": [], "function": "maximumStrongPairXor", "code": "exit: maximumStrongPairXor(self, nums)"}, "40": {"lineno": 51, "parents": [38], "children": [41], "calls": ["max"], "function": "maximumStrongPairXor", "code": "maxNum = max(nums)"}, "41": {"lineno": 52, "parents": [40], "children": [42], "calls": ["log2", "int"], "function": "maximumStrongPairXor", "code": "maxBit = int(math.log2(maxNum))"}, "42": {"lineno": 53, "parents": [41], "children": [43], "calls": ["BitTrie"], "function": "maximumStrongPairXor", "code": "bitTrie = BitTrie(maxBit)"}, "43": {"lineno": 55, "parents": [42], "children": [44], "function": "maximumStrongPairXor", "code": "__iv = iter(nums)"}, "44": {"lineno": 55, "parents": [11, 43, 46], "children": [45, 47], "calls": ["max"], "function": "maximumStrongPairXor", "code": "_for: __iv.__length__hint__() > 0"}, "45": {"lineno": 55, "parents": [44], "children": [46], "function": "maximumStrongPairXor", "code": "num = next(__iv)"}, "46": {"lineno": 56, "parents": [45], "children": [44], "calls": ["insert"], "function": "maximumStrongPairXor", "code": "bitTrie.insert(num)"}, "47": {"lineno": 58, "parents": [44], "children": [39], "function": "maximumStrongPairXor", "code": "return max((bitTrie.getMaxXor(num) for num in nums))"}, "48": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2940, "task_title": "Find Building Where Alice and Bob Can Meet", "difficulty": 3, "func_name": "leftmostBuildingQueries", "description": "You are given a 0-indexed array `heights` of positive integers, where\n`heights[i]` represents the height of the `ith` building.\n\nIf a person is in building `i`, they can move to any other building `j` if and\nonly if `i < j` and `heights[i] < heights[j]`.\n\nYou are also given another array `queries` where `queries[i] = [ai, bi]`. On\nthe `ith` query, Alice is in building `ai` while Bob is in building `bi`.\n\nReturn an array `ans` where `ans[i]` is the index of the leftmost building\nwhere Alice and Bob can meet on the `ith` query. If Alice and Bob cannot move\nto a common building on query `i`, set `ans[i]` to `-1`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass IndexedQuery:\n  def __init__(self, queryIndex: int, a: int, b: int):\n    self.queryIndex = queryIndex\n    self.a = a\n    self.b = b\n\n  def __iter__(self):\n    yield self.queryIndex\n    yield self.a\n    yield self.b\n\n\nclass Solution:\n  def leftmostBuildingQueries(self, heights: List[int], queries: List[List[int]]) -> List[int]:\n    ans = [-1] * len(queries)\n    stack = []\n\n    heightsIndex = len(heights) - 1\n    for queryIndex, a, b in sorted([IndexedQuery(i, min(a, b), max(a, b)) for i, (a, b) in enumerate(queries)], key=lambda iq: -iq.b):\n      if a == b or heights[a] < heights[b]:\n        ans[queryIndex] = b\n      else:\n        while heightsIndex > b:\n          while stack and heights[stack[-1]] <= heights[heightsIndex]:\n            stack.pop()\n          stack.append(heightsIndex)\n          heightsIndex -= 1\n        j = self._lastGreater(stack, a, heights)\n        if j != -1:\n          ans[queryIndex] = stack[j]\n\n    return ans\n\n  def _lastGreater(self, A: List[int], target: int, heights: List[int]):\n    l = -1\n    r = len(A) - 1\n    while l < r:\n      m = (l + r + 1) // 2\n      if heights[A[m]] > heights[target]:\n        l = m\n      else:\n        r = m - 1\n    return l\n", "blocks": [{"type": "if", "start": 30, "end": 31}, {"type": "else", "start": 32, "end": 40}, {"type": "if", "start": 49, "end": 50}, {"type": "else", "start": 51, "end": 52}, {"type": "if", "start": 39, "end": 40}], "target_lines": [31, 33, 34, 35, 36, 37, 38, 39, 40, 50, 52], "cfg": {"0": {"lineno": 0, "parents": [], "children": [40], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, queryIndex, a, b)"}, "2": {"lineno": 12, "parents": [5], "children": [], "function": "__init__", "code": "exit: __init__(self, queryIndex, a, b)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "__init__", "code": "self.queryIndex = queryIndex"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "__init__", "code": "self.a = a"}, "5": {"lineno": 15, "parents": [4], "children": [2], "function": "__init__", "code": "self.b = b"}, "6": {"lineno": 17, "parents": [], "children": [8], "function": "__iter__", "code": "enter: __iter__(self)"}, "7": {"lineno": 17, "parents": [10], "children": [], "function": "__iter__", "code": "exit: __iter__(self)"}, "8": {"lineno": 18, "parents": [6], "children": [9], "function": "__iter__", "code": "yield self.queryIndex"}, "9": {"lineno": 19, "parents": [8], "children": [10], "function": "__iter__", "code": "yield self.a"}, "10": {"lineno": 20, "parents": [9], "children": [7], "function": "__iter__", "code": "yield self.b"}, "11": {"lineno": 24, "parents": [], "children": [13], "function": "leftmostBuildingQueries", "code": "enter: leftmostBuildingQueries(self, heights, queries)"}, "12": {"lineno": 24, "parents": [29], "children": [], "function": "leftmostBuildingQueries", "code": "exit: leftmostBuildingQueries(self, heights, queries)"}, "13": {"lineno": 25, "parents": [11], "children": [14], "calls": ["len"], "function": "leftmostBuildingQueries", "code": "ans = [-1] * len(queries)"}, "14": {"lineno": 26, "parents": [13], "children": [15], "function": "leftmostBuildingQueries", "code": "stack = []"}, "15": {"lineno": 28, "parents": [14], "children": [16], "calls": ["len"], "function": "leftmostBuildingQueries", "code": "heightsIndex = len(heights) - 1"}, "16": {"lineno": 29, "parents": [15], "children": [17], "function": "leftmostBuildingQueries", "code": "__iv = iter(sorted([IndexedQuery(i, min(a, b), max(a, b)) for i, (a, b) in enumerate(queries)], key=lambda iq: -iq.b))"}, "17": {"lineno": 29, "parents": [16, 27, 20, 28], "children": [18, 29], "calls": ["sorted"], "function": "leftmostBuildingQueries", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 29, "parents": [17], "children": [19], "function": "leftmostBuildingQueries", "code": "queryIndex, a, b = next(__iv)"}, "19": {"lineno": 30, "parents": [18], "children": [20, 21], "function": "leftmostBuildingQueries", "code": "_if: a == b or heights[a] < heights[b]"}, "20": {"lineno": 31, "parents": [25, 19], "children": [17], "function": "leftmostBuildingQueries", "code": "ans[queryIndex] = b"}, "21": {"lineno": 33, "parents": [25, 19], "children": [26, 22], "function": "leftmostBuildingQueries", "code": "_while: heightsIndex > b"}, "22": {"lineno": 34, "parents": [21, 23], "children": [24, 23], "function": "leftmostBuildingQueries", "code": "_while: stack and heights[stack[-1]] <= heights[heightsIndex]"}, "23": {"lineno": 35, "parents": [22], "children": [26, 22], "calls": ["pop"], "function": "leftmostBuildingQueries", "code": "stack.pop()"}, "24": {"lineno": 36, "parents": [22], "children": [25], "calls": ["append"], "function": "leftmostBuildingQueries", "code": "stack.append(heightsIndex)"}, "25": {"lineno": 37, "parents": [24], "children": [20, 21], "function": "leftmostBuildingQueries", "code": "heightsIndex -= 1"}, "26": {"lineno": 38, "parents": [21, 23], "children": [27], "calls": ["_lastGreater"], "function": "leftmostBuildingQueries", "code": "j = self._lastGreater(stack, a, heights)"}, "27": {"lineno": 39, "parents": [26, 31], "children": [17, 28], "function": "leftmostBuildingQueries", "code": "_if: j != -1"}, "28": {"lineno": 40, "parents": [27], "children": [17], "function": "leftmostBuildingQueries", "code": "ans[queryIndex] = stack[j]"}, "29": {"lineno": 42, "parents": [17], "children": [12], "function": "leftmostBuildingQueries", "code": "return ans"}, "30": {"lineno": 44, "parents": [26], "children": [32], "function": "_lastGreater", "code": "enter: _lastGreater(self, A, target, heights)"}, "31": {"lineno": 44, "parents": [39], "children": [], "function": "_lastGreater", "code": "exit: _lastGreater(self, A, target, heights)"}, "32": {"lineno": 45, "parents": [30], "children": [33], "function": "_lastGreater", "code": "l = -1"}, "33": {"lineno": 46, "parents": [32], "children": [34], "calls": ["len"], "function": "_lastGreater", "code": "r = len(A) - 1"}, "34": {"lineno": 47, "parents": [33, 37, 38], "children": [35, 39], "function": "_lastGreater", "code": "_while: l < r"}, "35": {"lineno": 48, "parents": [34], "children": [36], "function": "_lastGreater", "code": "m = (l + r + 1) // 2"}, "36": {"lineno": 49, "parents": [35], "children": [37, 38], "function": "_lastGreater", "code": "_if: heights[A[m]] > heights[target]"}, "37": {"lineno": 50, "parents": [36], "children": [34], "function": "_lastGreater", "code": "l = m"}, "38": {"lineno": 52, "parents": [36], "children": [34], "function": "_lastGreater", "code": "r = m - 1"}, "39": {"lineno": 53, "parents": [34], "children": [31], "function": "_lastGreater", "code": "return l"}, "40": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2948, "task_title": "Make Lexicographically Smallest Array by Swapping Elements", "difficulty": 2, "func_name": "lexicographicallySmallestArray", "description": "You are given a 0-indexed array of positive integers `nums` and a positive\ninteger `limit`.\n\nIn one operation, you can choose any two indices `i` and `j` and swap\n`nums[i]` and `nums[j]` if `|nums[i] - nums[j]| <= limit`.\n\nReturn the lexicographically smallest array that can be obtained by performing\nthe operation any number of times.\n\nAn array `a` is lexicographically smaller than an array `b` if in the first\nposition where `a` and `b` differ, array `a` has an element that is less than\nthe corresponding element in `b`. For example, the array `[2,10,3]` is\nlexicographically smaller than the array `[10,2,3]` because they differ at\nindex `0` and `2 < 10`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def lexicographicallySmallestArray(self, nums: List[int], limit: int) -> List[int]:\n    ans = [0] * len(nums)\n    numAndIndexes = sorted([(num, i) for i, num in enumerate(nums)])\n    numAndIndexesGroups: List[List[Tuple[int, int]]] = []\n\n    for numAndIndex in numAndIndexes:\n      if not numAndIndexesGroups or numAndIndex[0] - numAndIndexesGroups[-1][-1][0] > limit:\n        numAndIndexesGroups.append([numAndIndex])\n      else:\n        numAndIndexesGroups[-1].append(numAndIndex)\n\n    for numAndIndexesGroup in numAndIndexesGroups:\n      sortedNums = [num for num, _ in numAndIndexesGroup]\n      sortedIndices = sorted([index for _, index in numAndIndexesGroup])\n      for num, index in zip(sortedNums, sortedIndices):\n        ans[index] = num\n\n    return ans\n", "blocks": [{"type": "if", "start": 18, "end": 19}, {"type": "else", "start": 20, "end": 21}], "target_lines": [19, 21], "cfg": {"0": {"lineno": 0, "parents": [], "children": [22], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "lexicographicallySmallestArray", "code": "enter: lexicographicallySmallestArray(self, nums, limit)"}, "2": {"lineno": 12, "parents": [21], "children": [], "function": "lexicographicallySmallestArray", "code": "exit: lexicographicallySmallestArray(self, nums, limit)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "lexicographicallySmallestArray", "code": "ans = [0] * len(nums)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["sorted"], "function": "lexicographicallySmallestArray", "code": "numAndIndexes = sorted([(num, i) for i, num in enumerate(nums)])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "lexicographicallySmallestArray", "code": "numAndIndexesGroups: List[List[Tuple[int, int]]] = []"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "lexicographicallySmallestArray", "code": "__iv = iter(numAndIndexes)"}, "7": {"lineno": 17, "parents": [10, 11, 6], "children": [8, 12], "function": "lexicographicallySmallestArray", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "lexicographicallySmallestArray", "code": "numAndIndex = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10, 11], "function": "lexicographicallySmallestArray", "code": "_if: not numAndIndexesGroups or numAndIndex[0] - numAndIndexesGroups[-1][-1][0] > limit"}, "10": {"lineno": 19, "parents": [9], "children": [7], "calls": ["append"], "function": "lexicographicallySmallestArray", "code": "numAndIndexesGroups.append([numAndIndex])"}, "11": {"lineno": 21, "parents": [9], "children": [7], "calls": ["append"], "function": "lexicographicallySmallestArray", "code": "numAndIndexesGroups[-1].append(numAndIndex)"}, "12": {"lineno": 23, "parents": [7], "children": [13], "function": "lexicographicallySmallestArray", "code": "__iv = iter(numAndIndexesGroups)"}, "13": {"lineno": 23, "parents": [18, 12], "children": [21, 14], "function": "lexicographicallySmallestArray", "code": "_for: __iv.__length__hint__() > 0"}, "14": {"lineno": 23, "parents": [13], "children": [15], "function": "lexicographicallySmallestArray", "code": "numAndIndexesGroup = next(__iv)"}, "15": {"lineno": 24, "parents": [14], "children": [16], "function": "lexicographicallySmallestArray", "code": "sortedNums = [num for num, _ in numAndIndexesGroup]"}, "16": {"lineno": 25, "parents": [15], "children": [17], "calls": ["sorted"], "function": "lexicographicallySmallestArray", "code": "sortedIndices = sorted([index for _, index in numAndIndexesGroup])"}, "17": {"lineno": 26, "parents": [16], "children": [18], "function": "lexicographicallySmallestArray", "code": "__iv = iter(zip(sortedNums, sortedIndices))"}, "18": {"lineno": 26, "parents": [17, 20], "children": [19, 13], "calls": ["zip"], "function": "lexicographicallySmallestArray", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 26, "parents": [18], "children": [20], "function": "lexicographicallySmallestArray", "code": "num, index = next(__iv)"}, "20": {"lineno": 27, "parents": [19], "children": [18], "function": "lexicographicallySmallestArray", "code": "ans[index] = num"}, "21": {"lineno": 29, "parents": [13], "children": [2], "function": "lexicographicallySmallestArray", "code": "return ans"}, "22": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2953, "task_title": "Count Complete Substrings", "difficulty": 3, "func_name": "countCompleteSubstrings", "description": "You are given a string `word` and an integer `k`.\n\nA substring `s` of `word` is complete if:\n\n* Each character in `s` occurs exactly `k` times.\n* The difference between two adjacent characters is at most `2`. That is, for any two adjacent characters `c1` and `c2` in `s`, the absolute difference in their positions in the alphabet is at most `2`.\n\nReturn the number of complete substrings of `word`.\n\nA substring is a non-empty contiguous sequence of characters in a string.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def countCompleteSubstrings(self, word: str, k: int) -> int:\n    uniqueLetters = len(set(word))\n    return sum(self._countCompleteStrings(word, k, windowSize) for windowSize in range(k, k * uniqueLetters + 1, k))\n\n  def _countCompleteStrings(self, word: str, k: int, windowSize: int) -> int:\n    res = 0\n    countLetters = 0\n    count = collections.Counter()\n\n    for i, c in enumerate(word):\n      count[c] += 1\n      countLetters += 1\n      if i > 0 and abs(ord(c) - ord(word[i - 1])) > 2:\n        count = collections.Counter()\n        count[c] += 1\n        countLetters = 1\n      if countLetters == windowSize + 1:\n        count[word[i - windowSize]] -= 1\n        countLetters -= 1\n      if countLetters == windowSize:\n        res += all(freq == 0 or freq == k for freq in count.values())\n\n    return res\n", "blocks": [{"type": "if", "start": 24, "end": 27}, {"type": "if", "start": 28, "end": 30}, {"type": "if", "start": 31, "end": 32}], "target_lines": [25, 26, 27, 29, 30, 32], "cfg": {"0": {"lineno": 0, "parents": [], "children": [25], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "countCompleteSubstrings", "code": "enter: countCompleteSubstrings(self, word, k)"}, "2": {"lineno": 12, "parents": [4], "children": [], "function": "countCompleteSubstrings", "code": "exit: countCompleteSubstrings(self, word, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["set", "len", "sum"], "function": "countCompleteSubstrings", "code": "uniqueLetters = len(set(word))"}, "4": {"lineno": 14, "parents": [3], "children": [2], "function": "countCompleteSubstrings", "code": "return sum((self._countCompleteStrings(word, k, windowSize) for windowSize in range(k, k * uniqueLetters + 1, k)))"}, "5": {"lineno": 16, "parents": [], "children": [7], "function": "_countCompleteStrings", "code": "enter: _countCompleteStrings(self, word, k, windowSize)"}, "6": {"lineno": 16, "parents": [24], "children": [], "function": "_countCompleteStrings", "code": "exit: _countCompleteStrings(self, word, k, windowSize)"}, "7": {"lineno": 17, "parents": [5], "children": [8], "function": "_countCompleteStrings", "code": "res = 0"}, "8": {"lineno": 18, "parents": [7], "children": [9], "function": "_countCompleteStrings", "code": "countLetters = 0"}, "9": {"lineno": 19, "parents": [8], "children": [10], "calls": ["Counter"], "function": "_countCompleteStrings", "code": "count = collections.Counter()"}, "10": {"lineno": 21, "parents": [9], "children": [11], "function": "_countCompleteStrings", "code": "__iv = iter(enumerate(word))"}, "11": {"lineno": 21, "parents": [10, 22, 23], "children": [24, 12], "calls": ["enumerate"], "function": "_countCompleteStrings", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "_countCompleteStrings", "code": "i, c = next(__iv)"}, "13": {"lineno": 22, "parents": [12], "children": [14], "function": "_countCompleteStrings", "code": "count[c] += 1"}, "14": {"lineno": 23, "parents": [13], "children": [15], "function": "_countCompleteStrings", "code": "countLetters += 1"}, "15": {"lineno": 24, "parents": [14], "children": [16, 19], "function": "_countCompleteStrings", "code": "_if: i > 0 and abs(ord(c) - ord(word[i - 1])) > 2"}, "16": {"lineno": 25, "parents": [15], "children": [17], "calls": ["Counter"], "function": "_countCompleteStrings", "code": "count = collections.Counter()"}, "17": {"lineno": 26, "parents": [16], "children": [18], "function": "_countCompleteStrings", "code": "count[c] += 1"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "_countCompleteStrings", "code": "countLetters = 1"}, "19": {"lineno": 28, "parents": [18, 15], "children": [20, 22], "function": "_countCompleteStrings", "code": "_if: countLetters == windowSize + 1"}, "20": {"lineno": 29, "parents": [19], "children": [21], "function": "_countCompleteStrings", "code": "count[word[i - windowSize]] -= 1"}, "21": {"lineno": 30, "parents": [20], "children": [22], "function": "_countCompleteStrings", "code": "countLetters -= 1"}, "22": {"lineno": 31, "parents": [19, 21], "children": [11, 23], "function": "_countCompleteStrings", "code": "_if: countLetters == windowSize"}, "23": {"lineno": 32, "parents": [22], "children": [11], "calls": ["all"], "function": "_countCompleteStrings", "code": "res += all((freq == 0 or freq == k for freq in count.values()))"}, "24": {"lineno": 34, "parents": [11], "children": [6], "function": "_countCompleteStrings", "code": "return res"}, "25": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2959, "task_title": "Number of Possible Sets of Closing Branches", "difficulty": 3, "func_name": "numberOfSets", "description": "There is a company with `n` branches across the country, some of which are\nconnected by roads. Initially, all branches are reachable from each other by\ntraveling some roads.\n\nThe company has realized that they are spending an excessive amount of time\ntraveling between their branches. As a result, they have decided to close down\nsome of these branches (possibly none). However, they want to ensure that the\nremaining branches have a distance of at most `maxDistance` from each other.\n\nThe distance between two branches is the minimum total traveled length needed\nto reach one branch from another.\n\nYou are given integers `n`, `maxDistance`, and a 0-indexed 2D array `roads`,\nwhere `roads[i] = [ui, vi, wi]` represents the undirected road between\nbranches `ui` and `vi` with length `wi`.\n\nReturn the number of possible sets of closing branches, so that any branch has\na distance of at most `maxDistance` from any other.\n\nNote that, after closing a branch, the company will no longer have access to\nany roads connected to it.\n\nNote that, multiple roads are allowed.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def numberOfSets(self, n: int, maxDistance: int, roads: List[List[int]]) -> int:\n    return sum(self._floydWarshall(n, maxDistance, roads, mask) <= maxDistance for mask in range(1 << n))\n\n  def _floydWarshall(self, n: int, maxDistanceThreshold: int, roads: List[List[int]], mask: int) -> List[List[int]]:\n    maxDistance = 0\n    dist = [[maxDistanceThreshold + 1] * n for _ in range(n)]\n\n    for i in range(n):\n      if mask >> i & 1:\n        dist[i][i] = 0\n\n    for u, v, w in roads:\n      if mask >> u & 1 and mask >> v & 1:\n        dist[u][v] = min(dist[u][v], w)\n        dist[v][u] = min(dist[v][u], w)\n\n    for k in range(n):\n      if mask >> k & 1:\n        for i in range(n):\n          if mask >> i & 1:\n            for j in range(n):\n              if mask >> j & 1:\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    for i in range(n):\n      if mask >> i & 1:\n        for j in range(i + 1, n):\n          if mask >> j & 1:\n            maxDistance = max(maxDistance, dist[i][j])\n\n    return maxDistance\n", "blocks": [{"type": "if", "start": 20, "end": 21}, {"type": "if", "start": 24, "end": 26}, {"type": "if", "start": 29, "end": 34}, {"type": "if", "start": 37, "end": 40}, {"type": "if", "start": 31, "end": 34}, {"type": "if", "start": 39, "end": 40}, {"type": "if", "start": 33, "end": 34}], "target_lines": [21, 25, 26, 30, 31, 32, 33, 34, 38, 39, 40], "cfg": {"0": {"lineno": 0, "parents": [], "children": [42], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "calls": ["sum"], "function": "numberOfSets", "code": "enter: numberOfSets(self, n, maxDistance, roads)"}, "2": {"lineno": 12, "parents": [3], "children": [], "function": "numberOfSets", "code": "exit: numberOfSets(self, n, maxDistance, roads)"}, "3": {"lineno": 13, "parents": [1], "children": [2], "function": "numberOfSets", "code": "return sum((self._floydWarshall(n, maxDistance, roads, mask) <= maxDistance for mask in range(1 << n)))"}, "4": {"lineno": 15, "parents": [], "children": [6], "function": "_floydWarshall", "code": "enter: _floydWarshall(self, n, maxDistanceThreshold, roads, mask)"}, "5": {"lineno": 15, "parents": [41], "children": [], "function": "_floydWarshall", "code": "exit: _floydWarshall(self, n, maxDistanceThreshold, roads, mask)"}, "6": {"lineno": 16, "parents": [4], "children": [7], "function": "_floydWarshall", "code": "maxDistance = 0"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "_floydWarshall", "code": "dist = [[maxDistanceThreshold + 1] * n for _ in range(n)]"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "_floydWarshall", "code": "__iv = iter(range(n))"}, "9": {"lineno": 19, "parents": [8, 11, 12], "children": [10, 13], "calls": ["range"], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "_floydWarshall", "code": "i = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [9, 12], "function": "_floydWarshall", "code": "_if: mask >> i & 1"}, "12": {"lineno": 21, "parents": [11], "children": [9], "function": "_floydWarshall", "code": "dist[i][i] = 0"}, "13": {"lineno": 23, "parents": [9], "children": [14], "function": "_floydWarshall", "code": "__iv = iter(roads)"}, "14": {"lineno": 23, "parents": [16, 18, 13], "children": [19, 15], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 23, "parents": [14], "children": [16], "function": "_floydWarshall", "code": "u, v, w = next(__iv)"}, "16": {"lineno": 24, "parents": [15], "children": [17, 14], "function": "_floydWarshall", "code": "_if: mask >> u & 1 and mask >> v & 1"}, "17": {"lineno": 25, "parents": [16], "children": [18], "calls": ["min"], "function": "_floydWarshall", "code": "dist[u][v] = min(dist[u][v], w)"}, "18": {"lineno": 26, "parents": [17], "children": [14], "calls": ["min"], "function": "_floydWarshall", "code": "dist[v][u] = min(dist[v][u], w)"}, "19": {"lineno": 28, "parents": [14], "children": [20], "function": "_floydWarshall", "code": "__iv = iter(range(n))"}, "20": {"lineno": 28, "parents": [24, 19, 22], "children": [32, 21], "calls": ["range"], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 28, "parents": [20], "children": [22], "function": "_floydWarshall", "code": "k = next(__iv)"}, "22": {"lineno": 29, "parents": [21], "children": [20, 23], "function": "_floydWarshall", "code": "_if: mask >> k & 1"}, "23": {"lineno": 30, "parents": [22], "children": [24], "function": "_floydWarshall", "code": "__iv = iter(range(n))"}, "24": {"lineno": 30, "parents": [26, 28, 23], "children": [25, 20], "calls": ["range"], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "25": {"lineno": 30, "parents": [24], "children": [26], "function": "_floydWarshall", "code": "i = next(__iv)"}, "26": {"lineno": 31, "parents": [25], "children": [24, 27], "function": "_floydWarshall", "code": "_if: mask >> i & 1"}, "27": {"lineno": 32, "parents": [26], "children": [28], "function": "_floydWarshall", "code": "__iv = iter(range(n))"}, "28": {"lineno": 32, "parents": [27, 30, 31], "children": [24, 29], "calls": ["range"], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "29": {"lineno": 32, "parents": [28], "children": [30], "function": "_floydWarshall", "code": "j = next(__iv)"}, "30": {"lineno": 33, "parents": [29], "children": [28, 31], "function": "_floydWarshall", "code": "_if: mask >> j & 1"}, "31": {"lineno": 34, "parents": [30], "children": [28], "calls": ["min"], "function": "_floydWarshall", "code": "dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])"}, "32": {"lineno": 36, "parents": [20], "children": [33], "function": "_floydWarshall", "code": "__iv = iter(range(n))"}, "33": {"lineno": 36, "parents": [32, 35, 37], "children": [41, 34], "calls": ["range"], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "34": {"lineno": 36, "parents": [33], "children": [35], "function": "_floydWarshall", "code": "i = next(__iv)"}, "35": {"lineno": 37, "parents": [34], "children": [33, 36], "function": "_floydWarshall", "code": "_if: mask >> i & 1"}, "36": {"lineno": 38, "parents": [35], "children": [37], "function": "_floydWarshall", "code": "__iv = iter(range(i + 1, n))"}, "37": {"lineno": 38, "parents": [40, 36, 39], "children": [33, 38], "calls": ["range"], "function": "_floydWarshall", "code": "_for: __iv.__length__hint__() > 0"}, "38": {"lineno": 38, "parents": [37], "children": [39], "function": "_floydWarshall", "code": "j = next(__iv)"}, "39": {"lineno": 39, "parents": [38], "children": [40, 37], "function": "_floydWarshall", "code": "_if: mask >> j & 1"}, "40": {"lineno": 40, "parents": [39], "children": [37], "calls": ["max"], "function": "_floydWarshall", "code": "maxDistance = max(maxDistance, dist[i][j])"}, "41": {"lineno": 42, "parents": [33], "children": [5], "function": "_floydWarshall", "code": "return maxDistance"}, "42": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2973, "task_title": "Find Number of Coins to Place in Tree Nodes", "difficulty": 3, "func_name": "placedCoins", "description": "You are given an undirected tree with `n` nodes labeled from `0` to `n - 1`,\nand rooted at node `0`. You are given a 2D integer array `edges` of length `n\n- 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between\nnodes `ai` and `bi` in the tree.\n\nYou are also given a 0-indexed integer array `cost` of length `n`, where\n`cost[i]` is the cost assigned to the `ith` node.\n\nYou need to place some coins on every node of the tree. The number of coins to\nbe placed at node `i` can be calculated as:\n\n* If size of the subtree of node `i` is less than `3`, place `1` coin.\n* Otherwise, place an amount of coins equal to the maximum product of cost values assigned to `3` distinct nodes in the subtree of node `i`. If this product is negative, place `0` coins.\n\nReturn an array `coin` of size `n` such that `coin[i]` is the number of coins\nplaced at node `i`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass ChildCost:\n  def __init__(self, cost: int):\n    self.numNodes = 1\n    self.maxPosCosts = [cost] if cost > 0 else []\n    self.minNegCosts = [cost] if cost < 0 else []\n\n  def update(self, childCost: 'ChildCost') -> None:\n    self.numNodes += childCost.numNodes\n    self.maxPosCosts.extend(childCost.maxPosCosts)\n    self.minNegCosts.extend(childCost.minNegCosts)\n    self.maxPosCosts.sort(reverse=True)\n    self.minNegCosts.sort()\n    self.maxPosCosts = self.maxPosCosts[:3]\n    self.minNegCosts = self.minNegCosts[:2]\n\n  def maxProduct(self) -> int:\n    if self.numNodes < 3:\n      return 1\n    if not self.maxPosCosts:\n      return 0\n    res = 0\n    if len(self.maxPosCosts) == 3:\n      res = self.maxPosCosts[0] * self.maxPosCosts[1] * self.maxPosCosts[2]\n    if len(self.minNegCosts) == 2:\n      res = max(res, self.minNegCosts[0] * self.minNegCosts[1] * self.maxPosCosts[0])\n    return res\n\n\nclass Solution:\n  def placedCoins(self, edges: List[List[int]], cost: List[int]) -> List[int]:\n    n = len(cost)\n    ans = [0] * n\n    tree = [[] for _ in range(n)]\n\n    for u, v in edges:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    def dfs(u: int, prev: int) -> None:\n      res = ChildCost(cost[u])\n      for v in tree[u]:\n        if v != prev:\n          res.update(dfs(v, u))\n      ans[u] = res.maxProduct()\n      return res\n\n    dfs(0, -1)\n    return ans\n", "blocks": [{"type": "if", "start": 27, "end": 28}, {"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 32, "end": 33}, {"type": "if", "start": 34, "end": 35}, {"type": "if", "start": 52, "end": 53}], "target_lines": [28, 30, 33, 35, 53], "cfg": {"0": {"lineno": 0, "parents": [], "children": [49], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, cost)"}, "2": {"lineno": 12, "parents": [5], "children": [], "function": "__init__", "code": "exit: __init__(self, cost)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "__init__", "code": "self.numNodes = 1"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "__init__", "code": "self.maxPosCosts = [cost] if cost > 0 else []"}, "5": {"lineno": 15, "parents": [4], "children": [2], "function": "__init__", "code": "self.minNegCosts = [cost] if cost < 0 else []"}, "6": {"lineno": 17, "parents": [44], "children": [8], "function": "update", "code": "enter: update(self, childCost)"}, "7": {"lineno": 17, "parents": [14], "children": [], "function": "update", "code": "exit: update(self, childCost)"}, "8": {"lineno": 18, "parents": [6], "children": [9], "function": "update", "code": "self.numNodes += childCost.numNodes"}, "9": {"lineno": 19, "parents": [8], "children": [10], "calls": ["extend"], "function": "update", "code": "self.maxPosCosts.extend(childCost.maxPosCosts)"}, "10": {"lineno": 20, "parents": [9], "children": [11], "calls": ["extend"], "function": "update", "code": "self.minNegCosts.extend(childCost.minNegCosts)"}, "11": {"lineno": 21, "parents": [10], "children": [12], "calls": ["sort"], "function": "update", "code": "self.maxPosCosts.sort(reverse=True)"}, "12": {"lineno": 22, "parents": [11], "children": [13], "calls": ["sort"], "function": "update", "code": "self.minNegCosts.sort()"}, "13": {"lineno": 23, "parents": [12], "children": [14], "function": "update", "code": "self.maxPosCosts = self.maxPosCosts[:3]"}, "14": {"lineno": 24, "parents": [13], "children": [7], "function": "update", "code": "self.minNegCosts = self.minNegCosts[:2]"}, "15": {"lineno": 26, "parents": [45], "children": [17], "function": "maxProduct", "code": "enter: maxProduct(self)"}, "16": {"lineno": 26, "parents": [18, 26, 20], "children": [], "function": "maxProduct", "code": "exit: maxProduct(self)"}, "17": {"lineno": 27, "parents": [15], "children": [18, 19], "function": "maxProduct", "code": "_if: self.numNodes < 3"}, "18": {"lineno": 28, "parents": [17], "children": [16], "function": "maxProduct", "code": "return 1"}, "19": {"lineno": 29, "parents": [17], "children": [20, 21], "function": "maxProduct", "code": "_if: not self.maxPosCosts"}, "20": {"lineno": 30, "parents": [19], "children": [16], "function": "maxProduct", "code": "return 0"}, "21": {"lineno": 31, "parents": [19], "children": [22], "function": "maxProduct", "code": "res = 0"}, "22": {"lineno": 32, "parents": [21], "children": [24, 23], "calls": ["len"], "function": "maxProduct", "code": "_if: len(self.maxPosCosts) == 3"}, "23": {"lineno": 33, "parents": [22], "children": [24], "function": "maxProduct", "code": "res = self.maxPosCosts[0] * self.maxPosCosts[1] * self.maxPosCosts[2]"}, "24": {"lineno": 34, "parents": [22, 23], "children": [25, 26], "calls": ["len"], "function": "maxProduct", "code": "_if: len(self.minNegCosts) == 2"}, "25": {"lineno": 35, "parents": [24], "children": [26], "calls": ["max"], "function": "maxProduct", "code": "res = max(res, self.minNegCosts[0] * self.minNegCosts[1] * self.maxPosCosts[0])"}, "26": {"lineno": 36, "parents": [24, 25], "children": [16], "function": "maxProduct", "code": "return res"}, "27": {"lineno": 40, "parents": [], "children": [29], "function": "placedCoins", "code": "enter: placedCoins(self, edges, cost)"}, "28": {"lineno": 40, "parents": [48], "children": [], "function": "placedCoins", "code": "exit: placedCoins(self, edges, cost)"}, "29": {"lineno": 41, "parents": [27], "children": [30], "calls": ["len"], "function": "placedCoins", "code": "n = len(cost)"}, "30": {"lineno": 42, "parents": [29], "children": [31], "function": "placedCoins", "code": "ans = [0] * n"}, "31": {"lineno": 43, "parents": [30], "children": [32], "function": "placedCoins", "code": "tree = [[] for _ in range(n)]"}, "32": {"lineno": 45, "parents": [31], "children": [33], "function": "placedCoins", "code": "__iv = iter(edges)"}, "33": {"lineno": 45, "parents": [32, 36], "children": [34, 47], "function": "placedCoins", "code": "_for: __iv.__length__hint__() > 0"}, "34": {"lineno": 45, "parents": [33], "children": [35], "function": "placedCoins", "code": "u, v = next(__iv)"}, "35": {"lineno": 46, "parents": [34], "children": [36], "calls": ["append"], "function": "placedCoins", "code": "tree[u].append(v)"}, "36": {"lineno": 47, "parents": [35], "children": [33], "calls": ["append"], "function": "placedCoins", "code": "tree[v].append(u)"}, "37": {"lineno": 49, "parents": [44, 47], "children": [39], "function": "dfs", "code": "enter: dfs(u, prev)"}, "38": {"lineno": 49, "parents": [46], "children": [], "function": "dfs", "code": "exit: dfs(u, prev)"}, "39": {"lineno": 50, "parents": [37], "children": [40], "calls": ["ChildCost"], "function": "dfs", "code": "res = ChildCost(cost[u])"}, "40": {"lineno": 51, "parents": [39], "children": [41], "function": "dfs", "code": "__iv = iter(tree[u])"}, "41": {"lineno": 51, "parents": [38, 7, 40, 43, 44], "children": [42, 45], "function": "dfs", "code": "_for: __iv.__length__hint__() > 0"}, "42": {"lineno": 51, "parents": [41], "children": [43], "function": "dfs", "code": "v = next(__iv)"}, "43": {"lineno": 52, "parents": [42], "children": [41, 44], "function": "dfs", "code": "_if: v != prev"}, "44": {"lineno": 53, "parents": [43], "children": [41], "calls": ["dfs", "update"], "function": "dfs", "code": "res.update(dfs(v, u))"}, "45": {"lineno": 54, "parents": [41], "children": [46], "calls": ["maxProduct"], "function": "dfs", "code": "ans[u] = res.maxProduct()"}, "46": {"lineno": 55, "parents": [16, 45], "children": [38], "function": "dfs", "code": "return res"}, "47": {"lineno": 57, "parents": [33], "children": [48], "calls": ["dfs"], "function": "placedCoins", "code": "dfs(0, -1)"}, "48": {"lineno": 58, "parents": [38, 47], "children": [28], "function": "placedCoins", "code": "return ans"}, "49": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2976, "task_title": "Minimum Cost to Convert String I", "difficulty": 2, "func_name": "minimumCost", "description": "You are given two 0-indexed strings `source` and `target`, both of length `n`\nand consisting of lowercase English letters. You are also given two 0-indexed\ncharacter arrays `original` and `changed`, and an integer array `cost`, where\n`cost[i]` represents the cost of changing the character `original[i]` to the\ncharacter `changed[i]`.\n\nYou start with the string `source`. In one operation, you can pick a character\n`x` from the string and change it to the character `y` at a cost of `z` if\nthere exists any index `j` such that `cost[j] == z`, `original[j] == x`, and\n`changed[j] == y`.\n\nReturn the minimum cost to convert the string `source` to the string `target`\nusing any number of operations. If it is impossible to convert `source` to\n`target`, return `-1`.\n\nNote that there may exist indices `i`, `j` such that `original[j] ==\noriginal[i]` and `changed[j] == changed[i]`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n    ans = 0\n    dist = [[math.inf] * 26 for _ in range(26)]\n\n    for a, b, c in zip(original, changed, cost):\n      u = ord(a) - ord('a')\n      v = ord(b) - ord('a')\n      dist[u][v] = min(dist[u][v], c)\n\n    for k in range(26):\n      for i in range(26):\n        if dist[i][k] < math.inf:\n          for j in range(26):\n            if dist[k][j] < math.inf:\n              dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    for s, t in zip(source, target):\n      if s == t:\n        continue\n      u = ord(s) - ord('a')\n      v = ord(t) - ord('a')\n      if dist[u][v] == math.inf:\n        return -1\n      ans += dist[u][v]\n\n    return ans\n", "blocks": [{"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 33, "end": 34}, {"type": "if", "start": 23, "end": 26}, {"type": "if", "start": 25, "end": 26}], "target_lines": [24, 25, 26, 30, 34], "cfg": {"0": {"lineno": 0, "parents": [], "children": [34], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumCost", "code": "enter: minimumCost(self, source, target, original, changed, cost)"}, "2": {"lineno": 12, "parents": [33, 31], "children": [], "function": "minimumCost", "code": "exit: minimumCost(self, source, target, original, changed, cost)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "minimumCost", "code": "ans = 0"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "minimumCost", "code": "dist = [[math.inf] * 26 for _ in range(26)]"}, "5": {"lineno": 16, "parents": [4], "children": [6], "function": "minimumCost", "code": "__iv = iter(zip(original, changed, cost))"}, "6": {"lineno": 16, "parents": [10, 5], "children": [11, 7], "calls": ["zip"], "function": "minimumCost", "code": "_for: __iv.__length__hint__() > 0"}, "7": {"lineno": 16, "parents": [6], "children": [8], "function": "minimumCost", "code": "a, b, c = next(__iv)"}, "8": {"lineno": 17, "parents": [7], "children": [9], "calls": ["ord", "ord"], "function": "minimumCost", "code": "u = ord(a) - ord('a')"}, "9": {"lineno": 18, "parents": [8], "children": [10], "calls": ["ord", "ord"], "function": "minimumCost", "code": "v = ord(b) - ord('a')"}, "10": {"lineno": 19, "parents": [9], "children": [6], "calls": ["min"], "function": "minimumCost", "code": "dist[u][v] = min(dist[u][v], c)"}, "11": {"lineno": 21, "parents": [6], "children": [12], "function": "minimumCost", "code": "__iv = iter(range(26))"}, "12": {"lineno": 21, "parents": [11, 15], "children": [13, 23], "calls": ["range"], "function": "minimumCost", "code": "_for: __iv.__length__hint__() > 0"}, "13": {"lineno": 21, "parents": [12], "children": [14], "function": "minimumCost", "code": "k = next(__iv)"}, "14": {"lineno": 22, "parents": [13], "children": [15], "function": "minimumCost", "code": "__iv = iter(range(26))"}, "15": {"lineno": 22, "parents": [17, 19, 14], "children": [16, 12], "calls": ["range"], "function": "minimumCost", "code": "_for: __iv.__length__hint__() > 0"}, "16": {"lineno": 22, "parents": [15], "children": [17], "function": "minimumCost", "code": "i = next(__iv)"}, "17": {"lineno": 23, "parents": [16], "children": [18, 15], "function": "minimumCost", "code": "_if: dist[i][k] < math.inf"}, "18": {"lineno": 24, "parents": [17], "children": [19], "function": "minimumCost", "code": "__iv = iter(range(26))"}, "19": {"lineno": 24, "parents": [18, 21, 22], "children": [20, 15], "calls": ["range"], "function": "minimumCost", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 24, "parents": [19], "children": [21], "function": "minimumCost", "code": "j = next(__iv)"}, "21": {"lineno": 25, "parents": [20], "children": [19, 22], "function": "minimumCost", "code": "_if: dist[k][j] < math.inf"}, "22": {"lineno": 26, "parents": [21], "children": [19], "calls": ["min"], "function": "minimumCost", "code": "dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])"}, "23": {"lineno": 28, "parents": [12], "children": [24], "function": "minimumCost", "code": "__iv = iter(zip(source, target))"}, "24": {"lineno": 28, "parents": [32, 27, 23], "children": [25, 33], "calls": ["zip"], "function": "minimumCost", "code": "_for: __iv.__length__hint__() > 0"}, "25": {"lineno": 28, "parents": [24], "children": [26], "function": "minimumCost", "code": "s, t = next(__iv)"}, "26": {"lineno": 29, "parents": [25], "children": [27, 28], "function": "minimumCost", "code": "_if: s == t"}, "27": {"lineno": 30, "parents": [26], "children": [24], "function": "minimumCost", "code": "continue"}, "28": {"lineno": 31, "parents": [26], "children": [29], "calls": ["ord", "ord"], "function": "minimumCost", "code": "u = ord(s) - ord('a')"}, "29": {"lineno": 32, "parents": [28], "children": [30], "calls": ["ord", "ord"], "function": "minimumCost", "code": "v = ord(t) - ord('a')"}, "30": {"lineno": 33, "parents": [29], "children": [32, 31], "function": "minimumCost", "code": "_if: dist[u][v] == math.inf"}, "31": {"lineno": 34, "parents": [30], "children": [2], "function": "minimumCost", "code": "return -1"}, "32": {"lineno": 35, "parents": [30], "children": [24], "function": "minimumCost", "code": "ans += dist[u][v]"}, "33": {"lineno": 37, "parents": [24], "children": [2], "function": "minimumCost", "code": "return ans"}, "34": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2977, "task_title": "Minimum Cost to Convert String II", "difficulty": 3, "func_name": "minimumCost", "description": "You are given two 0-indexed strings `source` and `target`, both of length `n`\nand consisting of lowercase English characters. You are also given two\n0-indexed string arrays `original` and `changed`, and an integer array `cost`,\nwhere `cost[i]` represents the cost of converting the string `original[i]` to\nthe string `changed[i]`.\n\nYou start with the string `source`. In one operation, you can pick a substring\n`x` from the string, and change it to `y` at a cost of `z` if there exists any\nindex `j` such that `cost[j] == z`, `original[j] == x`, and `changed[j] == y`.\nYou are allowed to do any number of operations, but any pair of operations\nmust satisfy either of these two conditions:\n\n* The substrings picked in the operations are `source[a..b]` and `source[c..d]` with either `b < c` or `d < a`. In other words, the indices picked in both operations are disjoint.\n* The substrings picked in the operations are `source[a..b]` and `source[c..d]` with `a == c` and `b == d`. In other words, the indices picked in both operations are identical.\n\nReturn the minimum cost to convert the string `source` to the string `target`\nusing any number of operations. If it is impossible to convert `source` to\n`target`, return `-1`.\n\nNote that there may exist indices `i`, `j` such that `original[j] ==\noriginal[i]` and `changed[j] == changed[i]`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n    subLengths = set(len(s) for s in original)\n    subToId = self._getSubToId(original, changed)\n    subCount = len(subToId)\n    dist = [[math.inf for _ in range(subCount)] for _ in range(subCount)]\n    dp = [math.inf for _ in range(len(source) + 1)]\n\n    for a, b, c in zip(original, changed, cost):\n      u = subToId[a]\n      v = subToId[b]\n      dist[u][v] = min(dist[u][v], c)\n\n    for k in range(subCount):\n      for i in range(subCount):\n        if dist[i][k] < math.inf:\n          for j in range(subCount):\n            if dist[k][j] < math.inf:\n              dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    dp[0] = 0\n\n    for i, (s, t) in enumerate(zip(source, target)):\n      if dp[i] == math.inf:\n        continue\n      if s == t:\n        dp[i + 1] = min(dp[i + 1], dp[i])\n      for subLength in subLengths:\n        if i + subLength > len(source):\n          continue\n        subSource = source[i:i + subLength]\n        subTarget = target[i:i + subLength]\n        if subSource not in subToId or subTarget not in subToId:\n          continue\n        u = subToId[subSource]\n        v = subToId[subTarget]\n        if dist[u][v] != math.inf:\n          dp[i + subLength] = min(dp[i + subLength], dp[i] + dist[u][v])\n\n    if dp[len(source)] == math.inf:\n      return -1\n    else:\n      return dp[len(source)]\n\n  def _getSubToId(self, original: str, changed: str) -> Dict[str, int]:\n    subToId = {}\n    for s in original + changed:\n      if s not in subToId:\n        subToId[s] = len(subToId)\n    return subToId\n", "blocks": [{"type": "if", "start": 50, "end": 51}, {"type": "else", "start": 52, "end": 53}, {"type": "if", "start": 34, "end": 35}, {"type": "if", "start": 36, "end": 37}, {"type": "if", "start": 58, "end": 59}, {"type": "if", "start": 26, "end": 29}, {"type": "if", "start": 39, "end": 40}, {"type": "if", "start": 43, "end": 44}, {"type": "if", "start": 47, "end": 48}, {"type": "if", "start": 28, "end": 29}], "target_lines": [27, 28, 29, 35, 37, 40, 44, 48, 51, 53, 59], "cfg": {"0": {"lineno": 0, "parents": [], "children": [59], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumCost", "code": "enter: minimumCost(self, source, target, original, changed, cost)"}, "2": {"lineno": 12, "parents": [48, 49], "children": [], "function": "minimumCost", "code": "exit: minimumCost(self, source, target, original, changed, cost)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["set"], "function": "minimumCost", "code": "subLengths = set((len(s) for s in original))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["_getSubToId"], "function": "minimumCost", "code": "subToId = self._getSubToId(original, changed)"}, "5": {"lineno": 15, "parents": [51, 4], "children": [6], "calls": ["len"], "function": "minimumCost", "code": "subCount = len(subToId)"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "minimumCost", "code": "dist = [[math.inf for _ in range(subCount)] for _ in range(subCount)]"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "minimumCost", "code": "dp = [math.inf for _ in range(len(source) + 1)]"}, "8": {"lineno": 19, "parents": [7], "children": [9], "function": "minimumCost", "code": "__iv = iter(zip(original, changed, cost))"}, "9": {"lineno": 19, "parents": [8, 13], "children": [10, 14], "calls": ["zip"], "function": "minimumCost", "code": "_for: __iv.__length__hint__() > 0"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "minimumCost", "code": "a, b, c = next(__iv)"}, "11": {"lineno": 20, "parents": [10], "children": [12], "function": "minimumCost", "code": "u = subToId[a]"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "minimumCost", "code": "v = subToId[b]"}, "13": {"lineno": 22, "parents": [12], "children": [9], "calls": ["min"], "function": "minimumCost", "code": "dist[u][v] = min(dist[u][v], c)"}, "14": {"lineno": 24, "parents": [9], "children": [15], "function": "minimumCost", "code": "__iv = iter(range(subCount))"}, "15": {"lineno": 24, "parents": [18, 14], "children": [16, 26], "calls": ["range"], "function": "minimumCost", "code": "_for: __iv.__length__hint__() > 0"}, "16": {"lineno": 24, "parents": [15], "children": [17], "function": "minimumCost", "code": "k = next(__iv)"}, "17": {"lineno": 25, "parents": [16], "children": [18], "function": "minimumCost", "code": "__iv = iter(range(subCount))"}, "18": {"lineno": 25, "parents": [17, 20, 22], "children": [19, 15], "calls": ["range"], "function": "minimumCost", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 25, "parents": [18], "children": [20], "function": "minimumCost", "code": "i = next(__iv)"}, "20": {"lineno": 26, "parents": [19], "children": [18, 21], "function": "minimumCost", "code": "_if: dist[i][k] < math.inf"}, "21": {"lineno": 27, "parents": [20], "children": [22], "function": "minimumCost", "code": "__iv = iter(range(subCount))"}, "22": {"lineno": 27, "parents": [24, 25, 21], "children": [18, 23], "calls": ["range"], "function": "minimumCost", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 27, "parents": [22], "children": [24], "function": "minimumCost", "code": "j = next(__iv)"}, "24": {"lineno": 28, "parents": [23], "children": [25, 22], "function": "minimumCost", "code": "_if: dist[k][j] < math.inf"}, "25": {"lineno": 29, "parents": [24], "children": [22], "calls": ["min"], "function": "minimumCost", "code": "dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])"}, "26": {"lineno": 31, "parents": [15], "children": [27], "function": "minimumCost", "code": "dp[0] = 0"}, "27": {"lineno": 33, "parents": [26], "children": [28], "function": "minimumCost", "code": "__iv = iter(enumerate(zip(source, target)))"}, "28": {"lineno": 33, "parents": [35, 27, 31], "children": [29, 47], "calls": ["zip", "enumerate"], "function": "minimumCost", "code": "_for: __iv.__length__hint__() > 0"}, "29": {"lineno": 33, "parents": [28], "children": [30], "function": "minimumCost", "code": "i, (s, t) = next(__iv)"}, "30": {"lineno": 34, "parents": [29], "children": [32, 31], "function": "minimumCost", "code": "_if: dp[i] == math.inf"}, "31": {"lineno": 35, "parents": [30], "children": [28], "function": "minimumCost", "code": "continue"}, "32": {"lineno": 36, "parents": [30], "children": [33, 34], "function": "minimumCost", "code": "_if: s == t"}, "33": {"lineno": 37, "parents": [32], "children": [34], "calls": ["min"], "function": "minimumCost", "code": "dp[i + 1] = min(dp[i + 1], dp[i])"}, "34": {"lineno": 38, "parents": [32, 33], "children": [35], "function": "minimumCost", "code": "__iv = iter(subLengths)"}, "35": {"lineno": 38, "parents": [34, 38, 42, 45, 46], "children": [36, 28], "function": "minimumCost", "code": "_for: __iv.__length__hint__() > 0"}, "36": {"lineno": 38, "parents": [35], "children": [37], "function": "minimumCost", "code": "subLength = next(__iv)"}, "37": {"lineno": 39, "parents": [36], "children": [38, 39], "calls": ["len"], "function": "minimumCost", "code": "_if: i + subLength > len(source)"}, "38": {"lineno": 40, "parents": [37], "children": [35], "function": "minimumCost", "code": "continue"}, "39": {"lineno": 41, "parents": [37], "children": [40], "function": "minimumCost", "code": "subSource = source[i:i + subLength]"}, "40": {"lineno": 42, "parents": [39], "children": [41], "function": "minimumCost", "code": "subTarget = target[i:i + subLength]"}, "41": {"lineno": 43, "parents": [40], "children": [42, 43], "function": "minimumCost", "code": "_if: subSource not in subToId or subTarget not in subToId"}, "42": {"lineno": 44, "parents": [41], "children": [35], "function": "minimumCost", "code": "continue"}, "43": {"lineno": 45, "parents": [41], "children": [44], "function": "minimumCost", "code": "u = subToId[subSource]"}, "44": {"lineno": 46, "parents": [43], "children": [45], "function": "minimumCost", "code": "v = subToId[subTarget]"}, "45": {"lineno": 47, "parents": [44], "children": [35, 46], "function": "minimumCost", "code": "_if: dist[u][v] != math.inf"}, "46": {"lineno": 48, "parents": [45], "children": [35], "calls": ["min"], "function": "minimumCost", "code": "dp[i + subLength] = min(dp[i + subLength], dp[i] + dist[u][v])"}, "47": {"lineno": 50, "parents": [28], "children": [48, 49], "function": "minimumCost", "code": "_if: dp[len(source)] == math.inf"}, "48": {"lineno": 51, "parents": [47], "children": [2], "function": "minimumCost", "code": "return -1"}, "49": {"lineno": 53, "parents": [47], "children": [2], "function": "minimumCost", "code": "return dp[len(source)]"}, "50": {"lineno": 55, "parents": [4], "children": [52], "function": "_getSubToId", "code": "enter: _getSubToId(self, original, changed)"}, "51": {"lineno": 55, "parents": [58], "children": [], "function": "_getSubToId", "code": "exit: _getSubToId(self, original, changed)"}, "52": {"lineno": 56, "parents": [50], "children": [53], "function": "_getSubToId", "code": "subToId = {}"}, "53": {"lineno": 57, "parents": [52], "children": [54], "function": "_getSubToId", "code": "__iv = iter(original + changed)"}, "54": {"lineno": 57, "parents": [56, 57, 53], "children": [58, 55], "function": "_getSubToId", "code": "_for: __iv.__length__hint__() > 0"}, "55": {"lineno": 57, "parents": [54], "children": [56], "function": "_getSubToId", "code": "s = next(__iv)"}, "56": {"lineno": 58, "parents": [55], "children": [57, 54], "function": "_getSubToId", "code": "_if: s not in subToId"}, "57": {"lineno": 59, "parents": [56], "children": [54], "calls": ["len"], "function": "_getSubToId", "code": "subToId[s] = len(subToId)"}, "58": {"lineno": 60, "parents": [54], "children": [51], "function": "_getSubToId", "code": "return subToId"}, "59": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 2983, "task_title": "Palindrome Rearrangement Queries", "difficulty": 3, "func_name": "canMakePalindromeQueries", "description": "You are given a 0-indexed string `s` having an even length `n`.\n\nYou are also given a 0-indexed 2D integer array, `queries`, where `queries[i]\n= [ai, bi, ci, di]`.\n\nFor each query `i`, you are allowed to perform the following operations:\n\n* Rearrange the characters within the substring `s[ai:bi]`, where `0 <= ai <= bi < n / 2`.\n* Rearrange the characters within the substring `s[ci:di]`, where `n / 2 <= ci <= di < n`.\n\nFor each query, your task is to determine whether it is possible to make `s` a\npalindrome by performing the operations.\n\nEach query is answered independently of the others.\n\nReturn a 0-indexed array `answer`, where `answer[i] == true` if it is possible\nto make `s` a palindrome by performing operations specified by the `ith`\nquery, and `false` otherwise.\n\n* A substring is a contiguous sequence of characters within a string.\n* `s[x:y]` represents the substring consisting of characters from the index `x` to index `y` in `s`, both inclusive.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def canMakePalindromeQueries(self, s: str, queries: List[List[int]]) -> List[bool]:\n    n = len(s)\n    mirroredDiffs = self._getMirroredDiffs(s)\n    counts = self._getCounts(s)\n    ans = []\n\n    def subtractArrays(a: List[int], b: List[int]):\n      return [x - y for x, y in zip(a, b)]\n\n    for a, b, c, d in queries:\n      b += 1\n      d += 1\n      ra = n - a\n      rb = n - b\n      rc = n - c\n      rd = n - d\n\n      if (min(a, rd) > 0 and mirroredDiffs[min(a, rd)] > 0) or (n // 2 > max(b, rc) and mirroredDiffs[n // 2] - mirroredDiffs[max(b, rc)] > 0) or (rd > b and mirroredDiffs[rd] - mirroredDiffs[b] > 0) or (a > rc and mirroredDiffs[a] - mirroredDiffs[rc] > 0):\n        ans.append(False)\n      else:\n        leftRangeCount = subtractArrays(counts[b], counts[a])\n        rightRangeCount = subtractArrays(counts[d], counts[c])\n        if a > rd:\n          rightRangeCount = subtractArrays(rightRangeCount, subtractArrays(counts[min(a, rc)], counts[rd]))\n        if rc > b:\n          rightRangeCount = subtractArrays(rightRangeCount, subtractArrays(counts[rc], counts[max(b, rd)]))\n        if c > rb:\n          leftRangeCount = subtractArrays(leftRangeCount, subtractArrays(counts[min(c, ra)], counts[rb]))\n        if ra > d:\n          leftRangeCount = subtractArrays(leftRangeCount, subtractArrays(counts[ra], counts[max(d, rb)]))\n        ans.append(min(leftRangeCount) >= 0 and min(rightRangeCount) >= 0 and leftRangeCount == rightRangeCount)\n\n    return ans\n\n  def _getMirroredDiffs(self, s: str) -> List[int]:\n    diffs = [0]\n    for i, j in zip(range(len(s)), reversed(range(len(s)))):\n      if i >= j:\n        break\n      diffs.append(diffs[-1] + (s[i] != s[j]))\n    return diffs\n\n  def _getCounts(self, s: str) -> List[List[int]]:\n    count = [0] * 26\n    counts = [count.copy()]\n    for c in s:\n      count[ord(c) - ord('a')] += 1\n      counts.append(count.copy())\n    return counts\n", "blocks": [{"type": "if", "start": 29, "end": 30}, {"type": "else", "start": 31, "end": 42}, {"type": "if", "start": 49, "end": 50}, {"type": "if", "start": 34, "end": 35}, {"type": "if", "start": 36, "end": 37}, {"type": "if", "start": 38, "end": 39}, {"type": "if", "start": 40, "end": 41}], "target_lines": [30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50], "cfg": {"0": {"lineno": 0, "parents": [], "children": [53], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "canMakePalindromeQueries", "code": "enter: canMakePalindromeQueries(self, s, queries)"}, "2": {"lineno": 12, "parents": [32], "children": [], "function": "canMakePalindromeQueries", "code": "exit: canMakePalindromeQueries(self, s, queries)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "canMakePalindromeQueries", "code": "n = len(s)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["_getMirroredDiffs"], "function": "canMakePalindromeQueries", "code": "mirroredDiffs = self._getMirroredDiffs(s)"}, "5": {"lineno": 15, "parents": [34, 4], "children": [6], "calls": ["_getCounts"], "function": "canMakePalindromeQueries", "code": "counts = self._getCounts(s)"}, "6": {"lineno": 16, "parents": [44, 5], "children": [10], "function": "canMakePalindromeQueries", "code": "ans = []"}, "7": {"lineno": 18, "parents": [21, 22, 24, 26, 28, 30], "children": [9], "function": "subtractArrays", "code": "enter: subtractArrays(a, b)"}, "8": {"lineno": 18, "parents": [9], "children": [], "function": "subtractArrays", "code": "exit: subtractArrays(a, b)"}, "9": {"lineno": 19, "parents": [7], "children": [8], "function": "subtractArrays", "code": "return [x - y for x, y in zip(a, b)]"}, "10": {"lineno": 21, "parents": [6], "children": [11], "function": "canMakePalindromeQueries", "code": "__iv = iter(queries)"}, "11": {"lineno": 21, "parents": [10, 20, 31], "children": [32, 12], "function": "canMakePalindromeQueries", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 21, "parents": [11], "children": [13], "function": "canMakePalindromeQueries", "code": "a, b, c, d = next(__iv)"}, "13": {"lineno": 22, "parents": [12], "children": [14], "function": "canMakePalindromeQueries", "code": "b += 1"}, "14": {"lineno": 23, "parents": [13], "children": [15], "function": "canMakePalindromeQueries", "code": "d += 1"}, "15": {"lineno": 24, "parents": [14], "children": [16], "function": "canMakePalindromeQueries", "code": "ra = n - a"}, "16": {"lineno": 25, "parents": [15], "children": [17], "function": "canMakePalindromeQueries", "code": "rb = n - b"}, "17": {"lineno": 26, "parents": [16], "children": [18], "function": "canMakePalindromeQueries", "code": "rc = n - c"}, "18": {"lineno": 27, "parents": [17], "children": [19], "function": "canMakePalindromeQueries", "code": "rd = n - d"}, "19": {"lineno": 29, "parents": [18], "children": [20, 21], "function": "canMakePalindromeQueries", "code": "_if: min(a, rd) > 0 and mirroredDiffs[min(a, rd)] > 0 or (n // 2 > max(b, rc) and mirroredDiffs[n // 2] - mirroredDiffs[max(b, rc)] > 0) or (rd > b and mirroredDiffs[rd] - mirroredDiffs[b] > 0) or (a > rc and mirroredDiffs[a] - mirroredDiffs[rc] > 0)"}, "20": {"lineno": 30, "parents": [19], "children": [11], "calls": ["append"], "function": "canMakePalindromeQueries", "code": "ans.append(False)"}, "21": {"lineno": 32, "parents": [19], "children": [22], "calls": ["subtractArrays"], "function": "canMakePalindromeQueries", "code": "leftRangeCount = subtractArrays(counts[b], counts[a])"}, "22": {"lineno": 33, "parents": [8, 21], "children": [23], "calls": ["subtractArrays"], "function": "canMakePalindromeQueries", "code": "rightRangeCount = subtractArrays(counts[d], counts[c])"}, "23": {"lineno": 34, "parents": [8, 22], "children": [24, 25], "function": "canMakePalindromeQueries", "code": "_if: a > rd"}, "24": {"lineno": 35, "parents": [23], "children": [25], "calls": ["subtractArrays", "subtractArrays"], "function": "canMakePalindromeQueries", "code": "rightRangeCount = subtractArrays(rightRangeCount, subtractArrays(counts[min(a, rc)], counts[rd]))"}, "25": {"lineno": 36, "parents": [24, 8, 23], "children": [26, 27], "function": "canMakePalindromeQueries", "code": "_if: rc > b"}, "26": {"lineno": 37, "parents": [25], "children": [27], "calls": ["subtractArrays", "subtractArrays"], "function": "canMakePalindromeQueries", "code": "rightRangeCount = subtractArrays(rightRangeCount, subtractArrays(counts[rc], counts[max(b, rd)]))"}, "27": {"lineno": 38, "parents": [8, 25, 26], "children": [28, 29], "function": "canMakePalindromeQueries", "code": "_if: c > rb"}, "28": {"lineno": 39, "parents": [27], "children": [29], "calls": ["subtractArrays", "subtractArrays"], "function": "canMakePalindromeQueries", "code": "leftRangeCount = subtractArrays(leftRangeCount, subtractArrays(counts[min(c, ra)], counts[rb]))"}, "29": {"lineno": 40, "parents": [8, 27, 28], "children": [30, 31], "function": "canMakePalindromeQueries", "code": "_if: ra > d"}, "30": {"lineno": 41, "parents": [29], "children": [31], "calls": ["subtractArrays", "subtractArrays"], "function": "canMakePalindromeQueries", "code": "leftRangeCount = subtractArrays(leftRangeCount, subtractArrays(counts[ra], counts[max(d, rb)]))"}, "31": {"lineno": 42, "parents": [8, 29, 30], "children": [11], "calls": ["append"], "function": "canMakePalindromeQueries", "code": "ans.append(min(leftRangeCount) >= 0 and min(rightRangeCount) >= 0 and (leftRangeCount == rightRangeCount))"}, "32": {"lineno": 44, "parents": [11], "children": [2], "function": "canMakePalindromeQueries", "code": "return ans"}, "33": {"lineno": 46, "parents": [4], "children": [35], "function": "_getMirroredDiffs", "code": "enter: _getMirroredDiffs(self, s)"}, "34": {"lineno": 46, "parents": [42], "children": [], "function": "_getMirroredDiffs", "code": "exit: _getMirroredDiffs(self, s)"}, "35": {"lineno": 47, "parents": [33], "children": [36], "function": "_getMirroredDiffs", "code": "diffs = [0]"}, "36": {"lineno": 48, "parents": [35], "children": [37], "function": "_getMirroredDiffs", "code": "__iv = iter(zip(range(len(s)), reversed(range(len(s)))))"}, "37": {"lineno": 48, "parents": [41, 36], "children": [42, 38], "calls": ["len", "range", "len", "range", "reversed", "zip"], "function": "_getMirroredDiffs", "code": "_for: __iv.__length__hint__() > 0"}, "38": {"lineno": 48, "parents": [37], "children": [39], "function": "_getMirroredDiffs", "code": "i, j = next(__iv)"}, "39": {"lineno": 49, "parents": [38], "children": [40, 41], "function": "_getMirroredDiffs", "code": "_if: i >= j"}, "40": {"lineno": 50, "parents": [39], "children": [42], "function": "_getMirroredDiffs", "code": "break"}, "41": {"lineno": 51, "parents": [39], "children": [37], "calls": ["append"], "function": "_getMirroredDiffs", "code": "diffs.append(diffs[-1] + (s[i] != s[j]))"}, "42": {"lineno": 52, "parents": [40, 37], "children": [34], "function": "_getMirroredDiffs", "code": "return diffs"}, "43": {"lineno": 54, "parents": [5], "children": [45], "function": "_getCounts", "code": "enter: _getCounts(self, s)"}, "44": {"lineno": 54, "parents": [52], "children": [], "function": "_getCounts", "code": "exit: _getCounts(self, s)"}, "45": {"lineno": 55, "parents": [43], "children": [46], "function": "_getCounts", "code": "count = [0] * 26"}, "46": {"lineno": 56, "parents": [45], "children": [47], "function": "_getCounts", "code": "counts = [count.copy()]"}, "47": {"lineno": 57, "parents": [46], "children": [48], "function": "_getCounts", "code": "__iv = iter(s)"}, "48": {"lineno": 57, "parents": [51, 47], "children": [49, 52], "function": "_getCounts", "code": "_for: __iv.__length__hint__() > 0"}, "49": {"lineno": 57, "parents": [48], "children": [50], "function": "_getCounts", "code": "c = next(__iv)"}, "50": {"lineno": 58, "parents": [49], "children": [51], "function": "_getCounts", "code": "count[ord(c) - ord('a')] += 1"}, "51": {"lineno": 59, "parents": [50], "children": [48], "calls": ["copy", "append"], "function": "_getCounts", "code": "counts.append(count.copy())"}, "52": {"lineno": 60, "parents": [48], "children": [44], "function": "_getCounts", "code": "return counts"}, "53": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 3001, "task_title": "Minimum Moves to Capture The Queen", "difficulty": 2, "func_name": "minMovesToCaptureTheQueen", "description": "There is a 1-indexed `8 x 8` chessboard containing `3` pieces.\n\nYou are given `6` integers `a`, `b`, `c`, `d`, `e`, and `f` where:\n\n* `(a, b)` denotes the position of the white rook.\n* `(c, d)` denotes the position of the white bishop.\n* `(e, f)` denotes the position of the black queen.\n\nGiven that you can only move the white pieces, return the minimum number of\nmoves required to capture the black queen.\n\nNote that:\n\n* Rooks can move any number of squares either vertically or horizontally, but cannot jump over other pieces.\n* Bishops can move any number of squares diagonally, but cannot jump over other pieces.\n* A rook or a bishop can capture the queen if it is located in a square that they can move to.\n* The queen does not move.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minMovesToCaptureTheQueen(self, a: int, b: int, c: int, d: int, e: int, f: int) -> int:\n    if a == e:\n      if c == a and (b < d < f or b > d > f):\n        return 2\n      else:\n        return 1\n    if b == f:\n      if d == f and (a < c < e or a > c > e):\n        return 2\n      else:\n        return 1\n    if c + d == e + f:\n      if a + b == c + d and (c < a < e or c > a > e):\n        return 2\n      else:\n        return 1\n    if c - d == e - f:\n      if a - b == c - d and (c < a < e or c > a > e):\n        return 2\n      else:\n        return 1\n    return 2\n", "blocks": [{"type": "if", "start": 13, "end": 17}, {"type": "if", "start": 18, "end": 22}, {"type": "if", "start": 23, "end": 27}, {"type": "if", "start": 28, "end": 32}, {"type": "if", "start": 14, "end": 15}, {"type": "else", "start": 16, "end": 17}, {"type": "if", "start": 19, "end": 20}, {"type": "else", "start": 21, "end": 22}, {"type": "if", "start": 24, "end": 25}, {"type": "else", "start": 26, "end": 27}, {"type": "if", "start": 29, "end": 30}, {"type": "else", "start": 31, "end": 32}], "target_lines": [14, 15, 17, 19, 20, 22, 24, 25, 27, 29, 30, 32], "cfg": {"0": {"lineno": 0, "parents": [], "children": [20], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minMovesToCaptureTheQueen", "code": "enter: minMovesToCaptureTheQueen(self, a, b, c, d, e, f)"}, "2": {"lineno": 12, "parents": [5, 6, 9, 10, 13, 14, 17, 18, 19], "children": [], "function": "minMovesToCaptureTheQueen", "code": "exit: minMovesToCaptureTheQueen(self, a, b, c, d, e, f)"}, "3": {"lineno": 13, "parents": [1], "children": [4, 7], "function": "minMovesToCaptureTheQueen", "code": "_if: a == e"}, "4": {"lineno": 14, "parents": [3], "children": [5, 6], "function": "minMovesToCaptureTheQueen", "code": "_if: c == a and (b < d < f or b > d > f)"}, "5": {"lineno": 15, "parents": [4], "children": [2], "function": "minMovesToCaptureTheQueen", "code": "return 2"}, "6": {"lineno": 17, "parents": [4], "children": [2], "function": "minMovesToCaptureTheQueen", "code": "return 1"}, "7": {"lineno": 18, "parents": [3], "children": [8, 11], "function": "minMovesToCaptureTheQueen", "code": "_if: b == f"}, "8": {"lineno": 19, "parents": [7], "children": [9, 10], "function": "minMovesToCaptureTheQueen", "code": "_if: d == f and (a < c < e or a > c > e)"}, "9": {"lineno": 20, "parents": [8], "children": [2], "function": "minMovesToCaptureTheQueen", "code": "return 2"}, "10": {"lineno": 22, "parents": [8], "children": [2], "function": "minMovesToCaptureTheQueen", "code": "return 1"}, "11": {"lineno": 23, "parents": [7], "children": [12, 15], "function": "minMovesToCaptureTheQueen", "code": "_if: c + d == e + f"}, "12": {"lineno": 24, "parents": [11], "children": [13, 14], "function": "minMovesToCaptureTheQueen", "code": "_if: a + b == c + d and (c < a < e or c > a > e)"}, "13": {"lineno": 25, "parents": [12], "children": [2], "function": "minMovesToCaptureTheQueen", "code": "return 2"}, "14": {"lineno": 27, "parents": [12], "children": [2], "function": "minMovesToCaptureTheQueen", "code": "return 1"}, "15": {"lineno": 28, "parents": [11], "children": [16, 19], "function": "minMovesToCaptureTheQueen", "code": "_if: c - d == e - f"}, "16": {"lineno": 29, "parents": [15], "children": [17, 18], "function": "minMovesToCaptureTheQueen", "code": "_if: a - b == c - d and (c < a < e or c > a > e)"}, "17": {"lineno": 30, "parents": [16], "children": [2], "function": "minMovesToCaptureTheQueen", "code": "return 2"}, "18": {"lineno": 32, "parents": [16], "children": [2], "function": "minMovesToCaptureTheQueen", "code": "return 1"}, "19": {"lineno": 33, "parents": [15], "children": [2], "function": "minMovesToCaptureTheQueen", "code": "return 2"}, "20": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 3006, "task_title": "Find Beautiful Indices in the Given Array I", "difficulty": 2, "func_name": "beautifulIndices", "description": "You are given a 0-indexed string `s`, a string `a`, a string `b`, and an\ninteger `k`.\n\nAn index `i` is beautiful if:\n\n* `0 <= i <= s.length - a.length`\n* `s[i..(i + a.length - 1)] == a`\n* There exists an index `j` such that: \n* `0 <= j <= s.length - b.length`\n* `s[j..(j + b.length - 1)] == b`\n* `|j - i| <= k`\n\nReturn the array that contains beautiful indices in sorted order from smallest\nto largest.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:\n    ans = []\n    indicesA = self._kmp(s, a)\n    indicesB = self._kmp(s, b)\n    indicesBIndex = 0\n\n    for i in indicesA:\n      while indicesBIndex < len(indicesB) and indicesB[indicesBIndex] - i < -k:\n        indicesBIndex += 1\n      if indicesBIndex < len(indicesB) and indicesB[indicesBIndex] - i <= k:\n        ans.append(i)\n\n    return ans\n\n  def _kmp(self, s: str, pattern: str) -> List[int]:\n    def getLPS(pattern: str) -> List[int]:\n      lps = [0] * len(pattern)\n      j = 0\n      for i in range(1, len(pattern)):\n        while j > 0 and pattern[j] != pattern[i]:\n          j = lps[j - 1]\n        if pattern[i] == pattern[j]:\n          lps[i] = j + 1\n          j += 1\n      return lps\n\n    res = []\n    lps = getLPS(pattern)\n    i = 0\n    j = 0\n    while i < len(s):\n      if s[i] == pattern[j]:\n        i += 1\n        j += 1\n        if j == len(pattern):\n          res.append(i - j)\n          j = lps[j - 1]\n      elif j != 0:\n        j = lps[j - 1]\n      else:\n        i += 1\n    return res\n", "blocks": [{"type": "if", "start": 21, "end": 22}, {"type": "if", "start": 43, "end": 48}, {"type": "if", "start": 33, "end": 35}, {"type": "if", "start": 46, "end": 48}, {"type": "if", "start": 49, "end": 50}, {"type": "else", "start": 51, "end": 52}], "target_lines": [22, 34, 35, 44, 45, 46, 47, 48, 50, 52], "cfg": {"0": {"lineno": 0, "parents": [], "children": [45], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "beautifulIndices", "code": "enter: beautifulIndices(self, s, a, b, k)"}, "2": {"lineno": 12, "parents": [14], "children": [], "function": "beautifulIndices", "code": "exit: beautifulIndices(self, s, a, b, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "beautifulIndices", "code": "ans = []"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["_kmp"], "function": "beautifulIndices", "code": "indicesA = self._kmp(s, a)"}, "5": {"lineno": 15, "parents": [16, 4], "children": [6], "calls": ["_kmp"], "function": "beautifulIndices", "code": "indicesB = self._kmp(s, b)"}, "6": {"lineno": 16, "parents": [16, 5], "children": [7], "function": "beautifulIndices", "code": "indicesBIndex = 0"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "beautifulIndices", "code": "__iv = iter(indicesA)"}, "8": {"lineno": 18, "parents": [12, 13, 7], "children": [9, 14], "function": "beautifulIndices", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "beautifulIndices", "code": "i = next(__iv)"}, "10": {"lineno": 19, "parents": [9, 11], "children": [11, 12], "function": "beautifulIndices", "code": "_while: indicesBIndex < len(indicesB) and indicesB[indicesBIndex] - i < -k"}, "11": {"lineno": 20, "parents": [10], "children": [10], "function": "beautifulIndices", "code": "indicesBIndex += 1"}, "12": {"lineno": 21, "parents": [10], "children": [8, 13], "function": "beautifulIndices", "code": "_if: indicesBIndex < len(indicesB) and indicesB[indicesBIndex] - i <= k"}, "13": {"lineno": 22, "parents": [12], "children": [8], "calls": ["append"], "function": "beautifulIndices", "code": "ans.append(i)"}, "14": {"lineno": 24, "parents": [8], "children": [2], "function": "beautifulIndices", "code": "return ans"}, "15": {"lineno": 26, "parents": [4, 5], "children": [30], "function": "_kmp", "code": "enter: _kmp(self, s, pattern)"}, "16": {"lineno": 26, "parents": [44], "children": [], "function": "_kmp", "code": "exit: _kmp(self, s, pattern)"}, "17": {"lineno": 27, "parents": [31], "children": [19], "function": "getLPS", "code": "enter: getLPS(pattern)"}, "18": {"lineno": 27, "parents": [29], "children": [], "function": "getLPS", "code": "exit: getLPS(pattern)"}, "19": {"lineno": 28, "parents": [17], "children": [20], "calls": ["len"], "function": "getLPS", "code": "lps = [0] * len(pattern)"}, "20": {"lineno": 29, "parents": [19], "children": [21], "function": "getLPS", "code": "j = 0"}, "21": {"lineno": 30, "parents": [20], "children": [22], "function": "getLPS", "code": "__iv = iter(range(1, len(pattern)))"}, "22": {"lineno": 30, "parents": [26, 28, 21], "children": [29, 23], "calls": ["len", "range"], "function": "getLPS", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 30, "parents": [22], "children": [24], "function": "getLPS", "code": "i = next(__iv)"}, "24": {"lineno": 31, "parents": [25, 23], "children": [25, 26], "function": "getLPS", "code": "_while: j > 0 and pattern[j] != pattern[i]"}, "25": {"lineno": 32, "parents": [24], "children": [24], "function": "getLPS", "code": "j = lps[j - 1]"}, "26": {"lineno": 33, "parents": [24], "children": [27, 22], "function": "getLPS", "code": "_if: pattern[i] == pattern[j]"}, "27": {"lineno": 34, "parents": [26], "children": [28], "function": "getLPS", "code": "lps[i] = j + 1"}, "28": {"lineno": 35, "parents": [27], "children": [22], "function": "getLPS", "code": "j += 1"}, "29": {"lineno": 36, "parents": [22], "children": [18], "function": "getLPS", "code": "return lps"}, "30": {"lineno": 38, "parents": [15], "children": [31], "function": "_kmp", "code": "res = []"}, "31": {"lineno": 39, "parents": [30], "children": [32], "calls": ["getLPS"], "function": "_kmp", "code": "lps = getLPS(pattern)"}, "32": {"lineno": 40, "parents": [18, 31], "children": [33], "function": "_kmp", "code": "i = 0"}, "33": {"lineno": 41, "parents": [32], "children": [34], "function": "_kmp", "code": "j = 0"}, "34": {"lineno": 42, "parents": [33, 38, 40, 42, 43], "children": [35, 44], "calls": ["len"], "function": "_kmp", "code": "_while: i < len(s)"}, "35": {"lineno": 43, "parents": [34], "children": [41, 36], "function": "_kmp", "code": "_if: s[i] == pattern[j]"}, "36": {"lineno": 44, "parents": [35], "children": [37], "function": "_kmp", "code": "i += 1"}, "37": {"lineno": 45, "parents": [36], "children": [38], "function": "_kmp", "code": "j += 1"}, "38": {"lineno": 46, "parents": [37], "children": [34, 39], "calls": ["len"], "function": "_kmp", "code": "_if: j == len(pattern)"}, "39": {"lineno": 47, "parents": [38], "children": [40], "calls": ["append"], "function": "_kmp", "code": "res.append(i - j)"}, "40": {"lineno": 48, "parents": [39], "children": [34], "function": "_kmp", "code": "j = lps[j - 1]"}, "41": {"lineno": 49, "parents": [35], "children": [42, 43], "function": "_kmp", "code": "_if: j != 0"}, "42": {"lineno": 50, "parents": [41], "children": [34], "function": "_kmp", "code": "j = lps[j - 1]"}, "43": {"lineno": 52, "parents": [41], "children": [34], "function": "_kmp", "code": "i += 1"}, "44": {"lineno": 53, "parents": [34], "children": [16], "function": "_kmp", "code": "return res"}, "45": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 3029, "task_title": "Minimum Time to Revert Word to Initial State I", "difficulty": 2, "func_name": "minimumTimeToInitialState", "description": "You are given a 0-indexed string `word` and an integer `k`.\n\nAt every second, you must perform the following operations:\n\n* Remove the first `k` characters of `word`.\n* Add any `k` characters to the end of `word`.\n\nNote that you do not necessarily need to add the same characters that you\nremoved. However, you must perform both operations at every second.\n\nReturn the minimum time greater than zero required for `word` to revert to its\ninitial state.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumTimeToInitialState(self, word: str, k: int) -> int:\n    n = len(word)\n    maxOps = (n - 1) // k + 1\n    z = self._zFunction(word)\n\n    for ans in range(1, maxOps):\n      if z[ans * k] >= n - ans * k:\n        return ans\n\n    return maxOps\n\n  def _zFunction(self, s: str) -> List[int]:\n    n = len(s)\n    z = [0] * n\n    l = 0\n    r = 0\n    for i in range(1, n):\n      if i < r:\n        z[i] = min(r - i, z[i - l])\n      while i + z[i] < n and s[z[i]] == s[i + z[i]]:\n        z[i] += 1\n      if i + z[i] > r:\n        l = i\n        r = i + z[i]\n    return z\n", "blocks": [{"type": "if", "start": 18, "end": 19}, {"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 33, "end": 35}], "target_lines": [19, 30, 34, 35], "cfg": {"0": {"lineno": 0, "parents": [], "children": [29], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumTimeToInitialState", "code": "enter: minimumTimeToInitialState(self, word, k)"}, "2": {"lineno": 12, "parents": [10, 11], "children": [], "function": "minimumTimeToInitialState", "code": "exit: minimumTimeToInitialState(self, word, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "minimumTimeToInitialState", "code": "n = len(word)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "minimumTimeToInitialState", "code": "maxOps = (n - 1) // k + 1"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["_zFunction"], "function": "minimumTimeToInitialState", "code": "z = self._zFunction(word)"}, "6": {"lineno": 17, "parents": [13, 5], "children": [7], "function": "minimumTimeToInitialState", "code": "__iv = iter(range(1, maxOps))"}, "7": {"lineno": 17, "parents": [9, 6], "children": [8, 11], "calls": ["range"], "function": "minimumTimeToInitialState", "code": "_for: __iv.__length__hint__() > 0"}, "8": {"lineno": 17, "parents": [7], "children": [9], "function": "minimumTimeToInitialState", "code": "ans = next(__iv)"}, "9": {"lineno": 18, "parents": [8], "children": [10, 7], "function": "minimumTimeToInitialState", "code": "_if: z[ans * k] >= n - ans * k"}, "10": {"lineno": 19, "parents": [9], "children": [2], "function": "minimumTimeToInitialState", "code": "return ans"}, "11": {"lineno": 21, "parents": [7], "children": [2], "function": "minimumTimeToInitialState", "code": "return maxOps"}, "12": {"lineno": 23, "parents": [5], "children": [14], "function": "_zFunction", "code": "enter: _zFunction(self, s)"}, "13": {"lineno": 23, "parents": [28], "children": [], "function": "_zFunction", "code": "exit: _zFunction(self, s)"}, "14": {"lineno": 24, "parents": [12], "children": [15], "calls": ["len"], "function": "_zFunction", "code": "n = len(s)"}, "15": {"lineno": 25, "parents": [14], "children": [16], "function": "_zFunction", "code": "z = [0] * n"}, "16": {"lineno": 26, "parents": [15], "children": [17], "function": "_zFunction", "code": "l = 0"}, "17": {"lineno": 27, "parents": [16], "children": [18], "function": "_zFunction", "code": "r = 0"}, "18": {"lineno": 28, "parents": [17], "children": [19], "function": "_zFunction", "code": "__iv = iter(range(1, n))"}, "19": {"lineno": 28, "parents": [25, 18, 27], "children": [20, 28], "calls": ["range"], "function": "_zFunction", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 28, "parents": [19], "children": [21], "function": "_zFunction", "code": "i = next(__iv)"}, "21": {"lineno": 29, "parents": [20], "children": [22, 23], "function": "_zFunction", "code": "_if: i < r"}, "22": {"lineno": 30, "parents": [21], "children": [23], "calls": ["min"], "function": "_zFunction", "code": "z[i] = min(r - i, z[i - l])"}, "23": {"lineno": 31, "parents": [24, 21, 22], "children": [24, 25], "function": "_zFunction", "code": "_while: i + z[i] < n and s[z[i]] == s[i + z[i]]"}, "24": {"lineno": 32, "parents": [23], "children": [23], "function": "_zFunction", "code": "z[i] += 1"}, "25": {"lineno": 33, "parents": [23], "children": [26, 19], "function": "_zFunction", "code": "_if: i + z[i] > r"}, "26": {"lineno": 34, "parents": [25], "children": [27], "function": "_zFunction", "code": "l = i"}, "27": {"lineno": 35, "parents": [26], "children": [19], "function": "_zFunction", "code": "r = i + z[i]"}, "28": {"lineno": 36, "parents": [19], "children": [13], "function": "_zFunction", "code": "return z"}, "29": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 3030, "task_title": "Find the Grid of Region Average", "difficulty": 2, "func_name": "resultGrid", "description": "You are given a 0-indexed `m x n` grid `image` which represents a grayscale\nimage, where `image[i][j]` represents a pixel with intensity in the\nrange`[0..255]`. You are also given a non-negative integer `threshold`.\n\nTwo pixels `image[a][b]` and `image[c][d]` are said to be adjacent if `|a - c|\n+ |b - d| == 1`.\n\nA region is a `3 x 3` subgrid where the absolute difference in intensity\nbetween any two adjacent pixels is less than or equal to `threshold`.\n\nAll pixels in a region belong to that region, note that a pixel can belong to\nmultiple regions.\n\nYou need to calculate a 0-indexed `m x n` grid `result`, where `result[i][j]`\nis the average intensity of the region to which `image[i][j]` belongs, rounded\ndown to the nearest integer. If `image[i][j]` belongs to multiple regions,\n`result[i][j]` is the average of the rounded down average intensities of these\nregions, rounded down to the nearest integer. If `image[i][j]` does not belong\nto any region, `result[i][j]` is equal to `image[i][j]`.\n\nReturn the grid `result`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def resultGrid(self, image: List[List[int]], threshold: int) -> List[List[int]]:\n    m = len(image)\n    n = len(image[0])\n    sums = [[0] * n for _ in range(m)]\n    counts = [[0] * n for _ in range(m)]\n\n    for i in range(m - 2):\n      for j in range(n - 2):\n        if self._isRegion(image, i, j, threshold):\n          subgridSum = sum(image[x][y] for x in range(i, i + 3) for y in range(j, j + 3))\n          for x in range(i, i + 3):\n            for y in range(j, j + 3):\n              sums[x][y] += subgridSum // 9\n              counts[x][y] += 1\n\n    for i in range(m):\n      for j in range(n):\n        if counts[i][j] > 0:\n          image[i][j] = sums[i][j] // counts[i][j]\n\n    return image\n\n  def _isRegion(self, image: List[List[int]], i: int, j: int, threshold: int) -> bool:\n    for x in range(i, i + 3):\n      for y in range(j, j + 3):\n        if x > i and abs(image[x][y] - image[x - 1][y]) > threshold:\n          return False\n        if y > j and abs(image[x][y] - image[x][y - 1]) > threshold:\n          return False\n    return True\n", "blocks": [{"type": "if", "start": 20, "end": 25}, {"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 37, "end": 38}, {"type": "if", "start": 39, "end": 40}], "target_lines": [21, 22, 23, 24, 25, 30, 38, 40], "cfg": {"0": {"lineno": 0, "parents": [], "children": [45], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "resultGrid", "code": "enter: resultGrid(self, image, threshold)"}, "2": {"lineno": 12, "parents": [31], "children": [], "function": "resultGrid", "code": "exit: resultGrid(self, image, threshold)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "resultGrid", "code": "m = len(image)"}, "4": {"lineno": 14, "parents": [3], "children": [5], "calls": ["len"], "function": "resultGrid", "code": "n = len(image[0])"}, "5": {"lineno": 15, "parents": [4], "children": [6], "function": "resultGrid", "code": "sums = [[0] * n for _ in range(m)]"}, "6": {"lineno": 16, "parents": [5], "children": [7], "function": "resultGrid", "code": "counts = [[0] * n for _ in range(m)]"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "resultGrid", "code": "__iv = iter(range(m - 2))"}, "8": {"lineno": 18, "parents": [11, 7], "children": [9, 23], "calls": ["range"], "function": "resultGrid", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "resultGrid", "code": "i = next(__iv)"}, "10": {"lineno": 19, "parents": [9], "children": [11], "function": "resultGrid", "code": "__iv = iter(range(n - 2))"}, "11": {"lineno": 19, "parents": [16, 33, 10, 13], "children": [8, 12], "calls": ["range"], "function": "resultGrid", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 19, "parents": [11], "children": [13], "function": "resultGrid", "code": "j = next(__iv)"}, "13": {"lineno": 20, "parents": [12], "children": [11, 14], "calls": ["_isRegion"], "function": "resultGrid", "code": "_if: self._isRegion(image, i, j, threshold)"}, "14": {"lineno": 21, "parents": [33, 13], "children": [15], "calls": ["sum"], "function": "resultGrid", "code": "subgridSum = sum((image[x][y] for x in range(i, i + 3) for y in range(j, j + 3)))"}, "15": {"lineno": 22, "parents": [14], "children": [16], "function": "resultGrid", "code": "__iv = iter(range(i, i + 3))"}, "16": {"lineno": 22, "parents": [19, 15], "children": [17, 11], "calls": ["range"], "function": "resultGrid", "code": "_for: __iv.__length__hint__() > 0"}, "17": {"lineno": 22, "parents": [16], "children": [18], "function": "resultGrid", "code": "x = next(__iv)"}, "18": {"lineno": 23, "parents": [17], "children": [19], "function": "resultGrid", "code": "__iv = iter(range(j, j + 3))"}, "19": {"lineno": 23, "parents": [18, 22], "children": [16, 20], "calls": ["range"], "function": "resultGrid", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 23, "parents": [19], "children": [21], "function": "resultGrid", "code": "y = next(__iv)"}, "21": {"lineno": 24, "parents": [20], "children": [22], "function": "resultGrid", "code": "sums[x][y] += subgridSum // 9"}, "22": {"lineno": 25, "parents": [21], "children": [19], "function": "resultGrid", "code": "counts[x][y] += 1"}, "23": {"lineno": 27, "parents": [8], "children": [24], "function": "resultGrid", "code": "__iv = iter(range(m))"}, "24": {"lineno": 27, "parents": [27, 23], "children": [25, 31], "calls": ["range"], "function": "resultGrid", "code": "_for: __iv.__length__hint__() > 0"}, "25": {"lineno": 27, "parents": [24], "children": [26], "function": "resultGrid", "code": "i = next(__iv)"}, "26": {"lineno": 28, "parents": [25], "children": [27], "function": "resultGrid", "code": "__iv = iter(range(n))"}, "27": {"lineno": 28, "parents": [26, 29, 30], "children": [24, 28], "calls": ["range"], "function": "resultGrid", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 28, "parents": [27], "children": [29], "function": "resultGrid", "code": "j = next(__iv)"}, "29": {"lineno": 29, "parents": [28], "children": [27, 30], "function": "resultGrid", "code": "_if: counts[i][j] > 0"}, "30": {"lineno": 30, "parents": [29], "children": [27], "function": "resultGrid", "code": "image[i][j] = sums[i][j] // counts[i][j]"}, "31": {"lineno": 32, "parents": [24], "children": [2], "function": "resultGrid", "code": "return image"}, "32": {"lineno": 34, "parents": [13], "children": [34], "function": "_isRegion", "code": "enter: _isRegion(self, image, i, j, threshold)"}, "33": {"lineno": 34, "parents": [41, 43, 44], "children": [], "function": "_isRegion", "code": "exit: _isRegion(self, image, i, j, threshold)"}, "34": {"lineno": 35, "parents": [32], "children": [35], "function": "_isRegion", "code": "__iv = iter(range(i, i + 3))"}, "35": {"lineno": 35, "parents": [34, 38], "children": [36, 44], "calls": ["range"], "function": "_isRegion", "code": "_for: __iv.__length__hint__() > 0"}, "36": {"lineno": 35, "parents": [35], "children": [37], "function": "_isRegion", "code": "x = next(__iv)"}, "37": {"lineno": 36, "parents": [36], "children": [38], "function": "_isRegion", "code": "__iv = iter(range(j, j + 3))"}, "38": {"lineno": 36, "parents": [42, 37], "children": [35, 39], "calls": ["range"], "function": "_isRegion", "code": "_for: __iv.__length__hint__() > 0"}, "39": {"lineno": 36, "parents": [38], "children": [40], "function": "_isRegion", "code": "y = next(__iv)"}, "40": {"lineno": 37, "parents": [39], "children": [41, 42], "function": "_isRegion", "code": "_if: x > i and abs(image[x][y] - image[x - 1][y]) > threshold"}, "41": {"lineno": 38, "parents": [40], "children": [33], "function": "_isRegion", "code": "return False"}, "42": {"lineno": 39, "parents": [40], "children": [43, 38], "function": "_isRegion", "code": "_if: y > j and abs(image[x][y] - image[x][y - 1]) > threshold"}, "43": {"lineno": 40, "parents": [42], "children": [33], "function": "_isRegion", "code": "return False"}, "44": {"lineno": 41, "parents": [35], "children": [33], "function": "_isRegion", "code": "return True"}, "45": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 3043, "task_title": "Find the Length of the Longest Common Prefix", "difficulty": 2, "func_name": "longestCommonPrefix", "description": "You are given two arrays with positive integers `arr1` and `arr2`.\n\nA prefix of a positive integer is an integer formed by one or more of its\ndigits, starting from its leftmost digit. For example, `123` is a prefix of\nthe integer `12345`, while `234` is not.\n\nA common prefix of two integers `a` and `b` is an integer `c`, such that `c`\nis a prefix of both `a` and `b`. For example, `5655359` and `56554` have a\ncommon prefix `565` while `1223` and `43456` do not have a common prefix.\n\nYou need to find the length of the longest common prefix between all pairs of\nintegers `(x, y)` such that `x` belongs to `arr1` and `y` belongs to `arr2`.\n\nReturn the length of the longest common prefix among all pairs. If no common\nprefix exists among them, return `0`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass TrieNode:\n  def __init__(self):\n    self.children: Dict[str, TrieNode] = {}\n\n\nclass Trie:\n  def __init__(self):\n    self.root = TrieNode()\n\n  def insert(self, word: str) -> None:\n    node: TrieNode = self.root\n    for c in word:\n      node = node.children.setdefault(c, TrieNode())\n    node.isWord = True\n\n  def search(self, word: str) -> int:\n    prefixLength = 0\n    node = self.root\n    for c in word:\n      if c not in node.children:\n        break\n      node = node.children[c]\n      prefixLength += 1\n    return prefixLength\n\n\nclass Solution:\n  def longestCommonPrefix(self, arr1: List[int], arr2: List[int]) -> int:\n    trie = Trie()\n\n    for num in arr1:\n      trie.insert(str(num))\n\n    return max(trie.search(str(num)) for num in arr2)\n", "blocks": [{"type": "if", "start": 30, "end": 31}], "target_lines": [31], "cfg": {"0": {"lineno": 0, "parents": [], "children": [35], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self)"}, "2": {"lineno": 12, "parents": [3], "children": [], "function": "__init__", "code": "exit: __init__(self)"}, "3": {"lineno": 13, "parents": [1], "children": [2], "function": "__init__", "code": "self.children: Dict[str, TrieNode] = {}"}, "4": {"lineno": 17, "parents": [], "children": [6], "function": "__init__", "code": "enter: __init__(self)"}, "5": {"lineno": 17, "parents": [6], "children": [], "function": "__init__", "code": "exit: __init__(self)"}, "6": {"lineno": 18, "parents": [4], "children": [5], "calls": ["TrieNode"], "function": "__init__", "code": "self.root = TrieNode()"}, "7": {"lineno": 20, "parents": [33], "children": [9], "function": "insert", "code": "enter: insert(self, word)"}, "8": {"lineno": 20, "parents": [14], "children": [], "function": "insert", "code": "exit: insert(self, word)"}, "9": {"lineno": 21, "parents": [7], "children": [10], "function": "insert", "code": "node: TrieNode = self.root"}, "10": {"lineno": 22, "parents": [9], "children": [11], "function": "insert", "code": "__iv = iter(word)"}, "11": {"lineno": 22, "parents": [10, 13], "children": [12, 14], "function": "insert", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 22, "parents": [11], "children": [13], "function": "insert", "code": "c = next(__iv)"}, "13": {"lineno": 23, "parents": [12], "children": [11], "calls": ["TrieNode", "setdefault"], "function": "insert", "code": "node = node.children.setdefault(c, TrieNode())"}, "14": {"lineno": 24, "parents": [11], "children": [8], "function": "insert", "code": "node.isWord = True"}, "15": {"lineno": 26, "parents": [], "children": [17], "function": "search", "code": "enter: search(self, word)"}, "16": {"lineno": 26, "parents": [26], "children": [], "function": "search", "code": "exit: search(self, word)"}, "17": {"lineno": 27, "parents": [15], "children": [18], "function": "search", "code": "prefixLength = 0"}, "18": {"lineno": 28, "parents": [17], "children": [19], "function": "search", "code": "node = self.root"}, "19": {"lineno": 29, "parents": [18], "children": [20], "function": "search", "code": "__iv = iter(word)"}, "20": {"lineno": 29, "parents": [25, 19], "children": [26, 21], "function": "search", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 29, "parents": [20], "children": [22], "function": "search", "code": "c = next(__iv)"}, "22": {"lineno": 30, "parents": [21], "children": [24, 23], "function": "search", "code": "_if: c not in node.children"}, "23": {"lineno": 31, "parents": [22], "children": [26], "function": "search", "code": "break"}, "24": {"lineno": 32, "parents": [22], "children": [25], "function": "search", "code": "node = node.children[c]"}, "25": {"lineno": 33, "parents": [24], "children": [20], "function": "search", "code": "prefixLength += 1"}, "26": {"lineno": 34, "parents": [20, 23], "children": [16], "function": "search", "code": "return prefixLength"}, "27": {"lineno": 38, "parents": [], "children": [29], "function": "longestCommonPrefix", "code": "enter: longestCommonPrefix(self, arr1, arr2)"}, "28": {"lineno": 38, "parents": [34], "children": [], "function": "longestCommonPrefix", "code": "exit: longestCommonPrefix(self, arr1, arr2)"}, "29": {"lineno": 39, "parents": [27], "children": [30], "calls": ["Trie"], "function": "longestCommonPrefix", "code": "trie = Trie()"}, "30": {"lineno": 41, "parents": [29], "children": [31], "function": "longestCommonPrefix", "code": "__iv = iter(arr1)"}, "31": {"lineno": 41, "parents": [8, 33, 30], "children": [32, 34], "calls": ["max"], "function": "longestCommonPrefix", "code": "_for: __iv.__length__hint__() > 0"}, "32": {"lineno": 41, "parents": [31], "children": [33], "function": "longestCommonPrefix", "code": "num = next(__iv)"}, "33": {"lineno": 42, "parents": [32], "children": [31], "calls": ["str", "insert"], "function": "longestCommonPrefix", "code": "trie.insert(str(num))"}, "34": {"lineno": 44, "parents": [31], "children": [28], "function": "longestCommonPrefix", "code": "return max((trie.search(str(num)) for num in arr2))"}, "35": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 3044, "task_title": "Most Frequent Prime", "difficulty": 2, "func_name": "mostFrequentPrime", "description": "You are given a `m x n` 0-indexed 2D matrix `mat`. From every cell, you can\ncreate numbers in the following way:\n\n* There could be at most `8` paths from the cells namely: east, south-east, south, south-west, west, north-west, north, and north-east.\n* Select a path from them and append digits in this path to the number being formed by traveling in this direction.\n* Note that numbers are generated at every step, for example, if the digits along the path are `1, 9, 1`, then there will be three numbers generated along the way: `1, 19, 191`.\n\nReturn the most frequent prime number greater than `10` out of all the numbers\ncreated by traversing the matrix or `-1` if no such prime number exists. If\nthere are multiple prime numbers with the highest frequency, then return the\nlargest among them.\n\nNote: It is invalid to change the direction during the move.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def mostFrequentPrime(self, mat: List[List[int]]) -> int:\n    dirs = ((1, 0), (1, -1), (0, -1), (-1, -1),\n            (-1, 0), (-1, 1), (0, 1), (1, 1))\n    m = len(mat)\n    n = len(mat[0])\n    count = collections.Counter()\n\n    def isPrime(num: int) -> bool:\n      return not any(num % i == 0 for i in range(2, int(num**0.5 + 1)))\n\n    for i in range(m):\n      for j in range(n):\n        for dx, dy in dirs:\n          num = 0\n          x = i\n          y = j\n          while 0 <= x < m and 0 <= y < n:\n            num = num * 10 + mat[x][y]\n            if num > 10 and isPrime(num):\n              count[num] += 1\n            x += dx\n            y += dy\n\n    if not count.items():\n      return -1\n    return max(count.items(), key=lambda x: (x[1], x[0]))[0]\n", "blocks": [{"type": "if", "start": 35, "end": 36}, {"type": "if", "start": 30, "end": 31}], "target_lines": [31, 36], "cfg": {"0": {"lineno": 0, "parents": [], "children": [31], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "mostFrequentPrime", "code": "enter: mostFrequentPrime(self, mat)"}, "2": {"lineno": 12, "parents": [29, 30], "children": [], "function": "mostFrequentPrime", "code": "exit: mostFrequentPrime(self, mat)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "mostFrequentPrime", "code": "dirs = ((1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (0, 1), (1, 1))"}, "4": {"lineno": 15, "parents": [3], "children": [5], "calls": ["len"], "function": "mostFrequentPrime", "code": "m = len(mat)"}, "5": {"lineno": 16, "parents": [4], "children": [6], "calls": ["len"], "function": "mostFrequentPrime", "code": "n = len(mat[0])"}, "6": {"lineno": 17, "parents": [5], "children": [10], "calls": ["Counter"], "function": "mostFrequentPrime", "code": "count = collections.Counter()"}, "7": {"lineno": 19, "parents": [], "children": [9], "calls": ["any"], "function": "isPrime", "code": "enter: isPrime(num)"}, "8": {"lineno": 19, "parents": [9], "children": [], "function": "isPrime", "code": "exit: isPrime(num)"}, "9": {"lineno": 20, "parents": [7], "children": [8], "function": "isPrime", "code": "return not any((num % i == 0 for i in range(2, int(num ** 0.5 + 1))))"}, "10": {"lineno": 22, "parents": [6], "children": [11], "function": "mostFrequentPrime", "code": "__iv = iter(range(m))"}, "11": {"lineno": 22, "parents": [10, 14], "children": [12, 28], "calls": ["range"], "function": "mostFrequentPrime", "code": "_for: __iv.__length__hint__() > 0"}, "12": {"lineno": 22, "parents": [11], "children": [13], "function": "mostFrequentPrime", "code": "i = next(__iv)"}, "13": {"lineno": 23, "parents": [12], "children": [14], "function": "mostFrequentPrime", "code": "__iv = iter(range(n))"}, "14": {"lineno": 23, "parents": [17, 13], "children": [11, 15], "calls": ["range"], "function": "mostFrequentPrime", "code": "_for: __iv.__length__hint__() > 0"}, "15": {"lineno": 23, "parents": [14], "children": [16], "function": "mostFrequentPrime", "code": "j = next(__iv)"}, "16": {"lineno": 24, "parents": [15], "children": [17], "function": "mostFrequentPrime", "code": "__iv = iter(dirs)"}, "17": {"lineno": 24, "parents": [16, 22], "children": [18, 14], "function": "mostFrequentPrime", "code": "_for: __iv.__length__hint__() > 0"}, "18": {"lineno": 24, "parents": [17], "children": [19], "function": "mostFrequentPrime", "code": "dx, dy = next(__iv)"}, "19": {"lineno": 25, "parents": [18], "children": [20], "function": "mostFrequentPrime", "code": "num = 0"}, "20": {"lineno": 26, "parents": [19], "children": [21], "function": "mostFrequentPrime", "code": "x = i"}, "21": {"lineno": 27, "parents": [20], "children": [22], "function": "mostFrequentPrime", "code": "y = j"}, "22": {"lineno": 28, "parents": [27, 21], "children": [17, 23], "function": "mostFrequentPrime", "code": "_while: 0 <= x < m and 0 <= y < n"}, "23": {"lineno": 29, "parents": [22], "children": [24], "function": "mostFrequentPrime", "code": "num = num * 10 + mat[x][y]"}, "24": {"lineno": 30, "parents": [23], "children": [25, 26], "function": "mostFrequentPrime", "code": "_if: num > 10 and isPrime(num)"}, "25": {"lineno": 31, "parents": [24], "children": [26], "function": "mostFrequentPrime", "code": "count[num] += 1"}, "26": {"lineno": 32, "parents": [24, 25], "children": [27], "function": "mostFrequentPrime", "code": "x += dx"}, "27": {"lineno": 33, "parents": [26], "children": [22], "function": "mostFrequentPrime", "code": "y += dy"}, "28": {"lineno": 35, "parents": [11], "children": [29, 30], "calls": ["items"], "function": "mostFrequentPrime", "code": "_if: not count.items()"}, "29": {"lineno": 36, "parents": [28], "children": [2], "function": "mostFrequentPrime", "code": "return -1"}, "30": {"lineno": 37, "parents": [28], "children": [2], "function": "mostFrequentPrime", "code": "return max(count.items(), key=lambda x: (x[1], x[0]))[0]"}, "31": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 3072, "task_title": "Distribute Elements Into Two Arrays II", "difficulty": 3, "func_name": "resultArray", "description": "You are given a 1-indexed array of integers `nums` of length `n`.\n\nWe define a function `greaterCount` such that `greaterCount(arr, val)` returns\nthe number of elements in `arr` that are strictly greater than `val`.\n\nYou need to distribute all the elements of `nums` between two arrays `arr1`\nand `arr2` using `n` operations. In the first operation, append `nums[1]` to\n`arr1`. In the second operation, append `nums[2]` to `arr2`. Afterwards, in\nthe `ith` operation:\n\n* If `greaterCount(arr1, nums[i]) > greaterCount(arr2, nums[i])`, append `nums[i]` to `arr1`.\n* If `greaterCount(arr1, nums[i]) < greaterCount(arr2, nums[i])`, append `nums[i]` to `arr2`.\n* If `greaterCount(arr1, nums[i]) == greaterCount(arr2, nums[i])`, append `nums[i]` to the array with a lesser number of elements.\n* If there is still a tie, append `nums[i]` to `arr1`.\n\nThe array `result` is formed by concatenating the arrays `arr1` and `arr2`.\nFor example, if `arr1 == [1,2,3]` and `arr2 == [4,5,6]`, then `result =\n[1,2,3,4,5,6]`.\n\nReturn the integer array `result`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass FenwickTree:\n  def __init__(self, n: int):\n    self.sums = [0] * (n + 1)\n\n  def update(self, i: int, delta: int) -> None:\n    while i < len(self.sums):\n      self.sums[i] += delta\n      i += FenwickTree.lowbit(i)\n\n  def get(self, i: int) -> int:\n    summ = 0\n    while i > 0:\n      summ += self.sums[i]\n      i -= FenwickTree.lowbit(i)\n    return summ\n\n  @staticmethod\n  def lowbit(i: int) -> int:\n    return i & -i\n\n\nclass Solution:\n  def resultArray(self, nums: List[int]) -> List[int]:\n    arr1 = []\n    arr2 = []\n    ranks = self._getRanks(nums)\n    tree1 = FenwickTree(len(ranks))\n    tree2 = FenwickTree(len(ranks))\n\n    def add(num: int, arr: List[int], tree: FenwickTree) -> None:\n      arr.append(num)\n      tree.update(ranks[num], 1)\n\n    add(nums[0], arr1, tree1)\n    add(nums[1], arr2, tree2)\n\n    for i in range(2, len(nums)):\n      greaterCount1 = len(arr1) - tree1.get(ranks[nums[i]])\n      greaterCount2 = len(arr2) - tree2.get(ranks[nums[i]])\n      if greaterCount1 > greaterCount2:\n        add(nums[i], arr1, tree1)\n      elif greaterCount1 < greaterCount2:\n        add(nums[i], arr2, tree2)\n      elif len(arr1) > len(arr2):\n        add(nums[i], arr2, tree2)\n      else:\n        add(nums[i], arr1, tree1)\n\n    return arr1 + arr2\n\n  def _getRanks(self, nums: List[int]) -> Dict[int, int]:\n    ranks = collections.Counter()\n    rank = 0\n    for num in sorted(set(nums)):\n      rank += 1\n      ranks[num] = rank\n    return ranks\n", "blocks": [{"type": "if", "start": 50, "end": 51}, {"type": "if", "start": 52, "end": 53}, {"type": "if", "start": 54, "end": 55}, {"type": "else", "start": 56, "end": 57}], "target_lines": [51, 53, 55, 57], "cfg": {"0": {"lineno": 0, "parents": [], "children": [55], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [3], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [2], "function": "__init__", "code": "self.sums = [0] * (n + 1)"}, "4": {"lineno": 15, "parents": [29], "children": [6], "function": "update", "code": "enter: update(self, i, delta)"}, "5": {"lineno": 15, "parents": [6], "children": [], "function": "update", "code": "exit: update(self, i, delta)"}, "6": {"lineno": 16, "parents": [8, 17, 4], "children": [5, 7], "calls": ["len"], "function": "update", "code": "_while: i < len(self.sums)"}, "7": {"lineno": 17, "parents": [6], "children": [8], "function": "update", "code": "self.sums[i] += delta"}, "8": {"lineno": 18, "parents": [7], "children": [6], "calls": ["lowbit"], "function": "update", "code": "i += FenwickTree.lowbit(i)"}, "9": {"lineno": 20, "parents": [35, 36], "children": [11], "function": "get", "code": "enter: get(self, i)"}, "10": {"lineno": 20, "parents": [15], "children": [], "function": "get", "code": "exit: get(self, i)"}, "11": {"lineno": 21, "parents": [9], "children": [12], "function": "get", "code": "summ = 0"}, "12": {"lineno": 22, "parents": [17, 11, 14], "children": [13, 15], "function": "get", "code": "_while: i > 0"}, "13": {"lineno": 23, "parents": [12], "children": [14], "function": "get", "code": "summ += self.sums[i]"}, "14": {"lineno": 24, "parents": [13], "children": [12], "calls": ["lowbit"], "function": "get", "code": "i -= FenwickTree.lowbit(i)"}, "15": {"lineno": 25, "parents": [12], "children": [10], "function": "get", "code": "return summ"}, "16": {"lineno": 28, "parents": [8, 14], "children": [18], "function": "lowbit", "code": "enter: lowbit(i)"}, "17": {"lineno": 28, "parents": [18], "children": [], "function": "lowbit", "code": "exit: lowbit(i)"}, "18": {"lineno": 29, "parents": [16], "children": [17], "function": "lowbit", "code": "return i & -i"}, "19": {"lineno": 33, "parents": [], "children": [21], "function": "resultArray", "code": "enter: resultArray(self, nums)"}, "20": {"lineno": 33, "parents": [44], "children": [], "function": "resultArray", "code": "exit: resultArray(self, nums)"}, "21": {"lineno": 34, "parents": [19], "children": [22], "function": "resultArray", "code": "arr1 = []"}, "22": {"lineno": 35, "parents": [21], "children": [23], "function": "resultArray", "code": "arr2 = []"}, "23": {"lineno": 36, "parents": [22], "children": [24], "calls": ["_getRanks"], "function": "resultArray", "code": "ranks = self._getRanks(nums)"}, "24": {"lineno": 37, "parents": [46, 23], "children": [25], "calls": ["len", "FenwickTree"], "function": "resultArray", "code": "tree1 = FenwickTree(len(ranks))"}, "25": {"lineno": 38, "parents": [24], "children": [30], "calls": ["len", "FenwickTree"], "function": "resultArray", "code": "tree2 = FenwickTree(len(ranks))"}, "26": {"lineno": 40, "parents": [38, 40, 42, 43, 30, 31], "children": [28], "function": "add", "code": "enter: add(num, arr, tree)"}, "27": {"lineno": 40, "parents": [5, 29], "children": [], "function": "add", "code": "exit: add(num, arr, tree)"}, "28": {"lineno": 41, "parents": [26], "children": [29], "calls": ["append"], "function": "add", "code": "arr.append(num)"}, "29": {"lineno": 42, "parents": [28], "children": [27], "calls": ["update"], "function": "add", "code": "tree.update(ranks[num], 1)"}, "30": {"lineno": 44, "parents": [25], "children": [31], "calls": ["add"], "function": "resultArray", "code": "add(nums[0], arr1, tree1)"}, "31": {"lineno": 45, "parents": [27, 30], "children": [32], "calls": ["add"], "function": "resultArray", "code": "add(nums[1], arr2, tree2)"}, "32": {"lineno": 47, "parents": [27, 31], "children": [33], "function": "resultArray", "code": "__iv = iter(range(2, len(nums)))"}, "33": {"lineno": 47, "parents": [32, 38, 40, 27, 42, 43], "children": [34, 44], "calls": ["len", "range"], "function": "resultArray", "code": "_for: __iv.__length__hint__() > 0"}, "34": {"lineno": 47, "parents": [33], "children": [35], "function": "resultArray", "code": "i = next(__iv)"}, "35": {"lineno": 48, "parents": [34], "children": [36], "calls": ["len", "get"], "function": "resultArray", "code": "greaterCount1 = len(arr1) - tree1.get(ranks[nums[i]])"}, "36": {"lineno": 49, "parents": [10, 35], "children": [37], "calls": ["len", "get"], "function": "resultArray", "code": "greaterCount2 = len(arr2) - tree2.get(ranks[nums[i]])"}, "37": {"lineno": 50, "parents": [10, 36], "children": [38, 39], "function": "resultArray", "code": "_if: greaterCount1 > greaterCount2"}, "38": {"lineno": 51, "parents": [37], "children": [33], "calls": ["add"], "function": "resultArray", "code": "add(nums[i], arr1, tree1)"}, "39": {"lineno": 52, "parents": [37], "children": [40, 41], "function": "resultArray", "code": "_if: greaterCount1 < greaterCount2"}, "40": {"lineno": 53, "parents": [39], "children": [33], "calls": ["add"], "function": "resultArray", "code": "add(nums[i], arr2, tree2)"}, "41": {"lineno": 54, "parents": [39], "children": [42, 43], "calls": ["len", "len"], "function": "resultArray", "code": "_if: len(arr1) > len(arr2)"}, "42": {"lineno": 55, "parents": [41], "children": [33], "calls": ["add"], "function": "resultArray", "code": "add(nums[i], arr2, tree2)"}, "43": {"lineno": 57, "parents": [41], "children": [33], "calls": ["add"], "function": "resultArray", "code": "add(nums[i], arr1, tree1)"}, "44": {"lineno": 59, "parents": [33], "children": [20], "function": "resultArray", "code": "return arr1 + arr2"}, "45": {"lineno": 61, "parents": [23], "children": [47], "function": "_getRanks", "code": "enter: _getRanks(self, nums)"}, "46": {"lineno": 61, "parents": [54], "children": [], "function": "_getRanks", "code": "exit: _getRanks(self, nums)"}, "47": {"lineno": 62, "parents": [45], "children": [48], "calls": ["Counter"], "function": "_getRanks", "code": "ranks = collections.Counter()"}, "48": {"lineno": 63, "parents": [47], "children": [49], "function": "_getRanks", "code": "rank = 0"}, "49": {"lineno": 64, "parents": [48], "children": [50], "function": "_getRanks", "code": "__iv = iter(sorted(set(nums)))"}, "50": {"lineno": 64, "parents": [49, 53], "children": [51, 54], "calls": ["set", "sorted"], "function": "_getRanks", "code": "_for: __iv.__length__hint__() > 0"}, "51": {"lineno": 64, "parents": [50], "children": [52], "function": "_getRanks", "code": "num = next(__iv)"}, "52": {"lineno": 65, "parents": [51], "children": [53], "function": "_getRanks", "code": "rank += 1"}, "53": {"lineno": 66, "parents": [52], "children": [50], "function": "_getRanks", "code": "ranks[num] = rank"}, "54": {"lineno": 67, "parents": [50], "children": [46], "function": "_getRanks", "code": "return ranks"}, "55": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 3095, "task_title": "Shortest Subarray With OR at Least K I", "difficulty": 1, "func_name": "minimumSubarrayLength", "description": "You are given an array `nums` of non-negative integers and an integer `k`.\n\nAn array is called special if the bitwise `OR` of all of its elements is at\nleast `k`.\n\nReturn the length of the shortest special non-empty subarray of `nums`, or\nreturn `-1` if no special subarray exists.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumSubarrayLength(self, nums: List[int], k: int) -> int:\n    ans = len(nums) + 1\n    ors = 0\n    count = collections.Counter()\n\n    l = 0\n    for r, num in enumerate(nums):\n      ors = self._orNum(ors, num, count)\n      while ors >= k and l <= r:\n        ans = min(ans, r - l + 1)\n        ors = self._undoOrNum(ors, nums[l], count)\n        l += 1\n\n    return -1 if ans == len(nums) + 1 else ans\n\n  def _orNum(self, ors: int, num: int, count: Dict[int, int]) -> int:\n    for i in range(30):\n      if num >> i & 1:\n        count[i] += 1\n        if count[i] == 1:\n          ors += 1 << i\n    return ors\n\n  def _undoOrNum(self, ors: int, num: int, count: Dict[int, int]) -> int:\n    for i in range(30):\n      if num >> i & 1:\n        count[i] -= 1\n        if count[i] == 0:\n          ors -= 1 << i\n    return ors\n", "blocks": [{"type": "if", "start": 29, "end": 32}, {"type": "if", "start": 37, "end": 40}, {"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 39, "end": 40}], "target_lines": [30, 31, 32, 38, 39, 40], "cfg": {"0": {"lineno": 0, "parents": [], "children": [36], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumSubarrayLength", "code": "enter: minimumSubarrayLength(self, nums, k)"}, "2": {"lineno": 12, "parents": [15], "children": [], "function": "minimumSubarrayLength", "code": "exit: minimumSubarrayLength(self, nums, k)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["len"], "function": "minimumSubarrayLength", "code": "ans = len(nums) + 1"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "minimumSubarrayLength", "code": "ors = 0"}, "5": {"lineno": 15, "parents": [4], "children": [6], "calls": ["Counter"], "function": "minimumSubarrayLength", "code": "count = collections.Counter()"}, "6": {"lineno": 17, "parents": [5], "children": [7], "function": "minimumSubarrayLength", "code": "l = 0"}, "7": {"lineno": 18, "parents": [6], "children": [8], "function": "minimumSubarrayLength", "code": "__iv = iter(enumerate(nums))"}, "8": {"lineno": 18, "parents": [11, 7], "children": [9, 15], "calls": ["enumerate"], "function": "minimumSubarrayLength", "code": "_for: __iv.__length__hint__() > 0"}, "9": {"lineno": 18, "parents": [8], "children": [10], "function": "minimumSubarrayLength", "code": "r, num = next(__iv)"}, "10": {"lineno": 19, "parents": [9], "children": [11], "calls": ["_orNum"], "function": "minimumSubarrayLength", "code": "ors = self._orNum(ors, num, count)"}, "11": {"lineno": 20, "parents": [17, 10, 14], "children": [8, 12], "function": "minimumSubarrayLength", "code": "_while: ors >= k and l <= r"}, "12": {"lineno": 21, "parents": [11], "children": [13], "calls": ["min"], "function": "minimumSubarrayLength", "code": "ans = min(ans, r - l + 1)"}, "13": {"lineno": 22, "parents": [12], "children": [14], "calls": ["_undoOrNum"], "function": "minimumSubarrayLength", "code": "ors = self._undoOrNum(ors, nums[l], count)"}, "14": {"lineno": 23, "parents": [27, 13], "children": [11], "function": "minimumSubarrayLength", "code": "l += 1"}, "15": {"lineno": 25, "parents": [8], "children": [2], "function": "minimumSubarrayLength", "code": "return -1 if ans == len(nums) + 1 else ans"}, "16": {"lineno": 27, "parents": [10], "children": [18], "function": "_orNum", "code": "enter: _orNum(self, ors, num, count)"}, "17": {"lineno": 27, "parents": [25], "children": [], "function": "_orNum", "code": "exit: _orNum(self, ors, num, count)"}, "18": {"lineno": 28, "parents": [16], "children": [19], "function": "_orNum", "code": "__iv = iter(range(30))"}, "19": {"lineno": 28, "parents": [24, 18, 21, 23], "children": [25, 20], "calls": ["range"], "function": "_orNum", "code": "_for: __iv.__length__hint__() > 0"}, "20": {"lineno": 28, "parents": [19], "children": [21], "function": "_orNum", "code": "i = next(__iv)"}, "21": {"lineno": 29, "parents": [20], "children": [19, 22], "function": "_orNum", "code": "_if: num >> i & 1"}, "22": {"lineno": 30, "parents": [21], "children": [23], "function": "_orNum", "code": "count[i] += 1"}, "23": {"lineno": 31, "parents": [22], "children": [24, 19], "function": "_orNum", "code": "_if: count[i] == 1"}, "24": {"lineno": 32, "parents": [23], "children": [19], "function": "_orNum", "code": "ors += 1 << i"}, "25": {"lineno": 33, "parents": [19], "children": [17], "function": "_orNum", "code": "return ors"}, "26": {"lineno": 35, "parents": [13], "children": [28], "function": "_undoOrNum", "code": "enter: _undoOrNum(self, ors, num, count)"}, "27": {"lineno": 35, "parents": [35], "children": [], "function": "_undoOrNum", "code": "exit: _undoOrNum(self, ors, num, count)"}, "28": {"lineno": 36, "parents": [26], "children": [29], "function": "_undoOrNum", "code": "__iv = iter(range(30))"}, "29": {"lineno": 36, "parents": [33, 34, 28, 31], "children": [35, 30], "calls": ["range"], "function": "_undoOrNum", "code": "_for: __iv.__length__hint__() > 0"}, "30": {"lineno": 36, "parents": [29], "children": [31], "function": "_undoOrNum", "code": "i = next(__iv)"}, "31": {"lineno": 37, "parents": [30], "children": [32, 29], "function": "_undoOrNum", "code": "_if: num >> i & 1"}, "32": {"lineno": 38, "parents": [31], "children": [33], "function": "_undoOrNum", "code": "count[i] -= 1"}, "33": {"lineno": 39, "parents": [32], "children": [34, 29], "function": "_undoOrNum", "code": "_if: count[i] == 0"}, "34": {"lineno": 40, "parents": [33], "children": [29], "function": "_undoOrNum", "code": "ors -= 1 << i"}, "35": {"lineno": 41, "parents": [29], "children": [27], "function": "_undoOrNum", "code": "return ors"}, "36": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 3102, "task_title": "Minimize Manhattan Distances", "difficulty": 3, "func_name": "minimumDistance", "description": "You are given a array `points` representing integer coordinates of some points\non a 2D plane, where `points[i] = [xi, yi]`.\n\nThe distance between two points is defined as their Manhattan distance.\n\nReturn the minimum possible value for maximum distance between any two points\nby removing exactly one point.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumDistance(self, points: List[List[int]]) -> int:\n    i, j = self._maxManhattanDistance(points, -1)\n    xi, yi = self._maxManhattanDistance(points, i)\n    xj, yj = self._maxManhattanDistance(points, j)\n    return min(self._manhattan(points, xi, yi), self._manhattan(points, xj, yj))\n\n  def _maxManhattanDistance(self, points: List[List[int]], excludedIndex: int) -> int:\n    minSum = math.inf\n    maxSum = -math.inf\n    minDiff = math.inf\n    maxDiff = -math.inf\n    minSumIndex = -1\n    maxSumIndex = -1\n    minDiffIndex = -1\n    maxDiffIndex = -1\n\n    for i, (x, y) in enumerate(points):\n      if i == excludedIndex:\n        continue\n      summ = x + y\n      diff = x - y\n      if summ < minSum:\n        minSum = summ\n        minSumIndex = i\n      if summ > maxSum:\n        maxSum = summ\n        maxSumIndex = i\n      if diff < minDiff:\n        minDiff = diff\n        minDiffIndex = i\n      if diff > maxDiff:\n        maxDiff = diff\n        maxDiffIndex = i\n\n    if maxSum - minSum >= maxDiff - minDiff:\n      return [minSumIndex, maxSumIndex]\n    else:\n      return [minDiffIndex, maxDiffIndex]\n\n  def _manhattan(self, points: List[List[int]], i: int, j: int) -> int:\n    return abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n", "blocks": [{"type": "if", "start": 46, "end": 47}, {"type": "else", "start": 48, "end": 49}, {"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 33, "end": 35}, {"type": "if", "start": 36, "end": 38}, {"type": "if", "start": 39, "end": 41}, {"type": "if", "start": 42, "end": 44}], "target_lines": [30, 34, 35, 37, 38, 40, 41, 43, 44, 47, 49], "cfg": {"0": {"lineno": 0, "parents": [], "children": [42], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumDistance", "code": "enter: minimumDistance(self, points)"}, "2": {"lineno": 12, "parents": [6], "children": [], "function": "minimumDistance", "code": "exit: minimumDistance(self, points)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["_maxManhattanDistance"], "function": "minimumDistance", "code": "i, j = self._maxManhattanDistance(points, -1)"}, "4": {"lineno": 14, "parents": [8, 3], "children": [5], "calls": ["_maxManhattanDistance"], "function": "minimumDistance", "code": "xi, yi = self._maxManhattanDistance(points, i)"}, "5": {"lineno": 15, "parents": [8, 4], "children": [6], "calls": ["_maxManhattanDistance", "_manhattan", "_manhattan", "min"], "function": "minimumDistance", "code": "xj, yj = self._maxManhattanDistance(points, j)"}, "6": {"lineno": 16, "parents": [8, 40, 5], "children": [2], "function": "minimumDistance", "code": "return min(self._manhattan(points, xi, yi), self._manhattan(points, xj, yj))"}, "7": {"lineno": 18, "parents": [3, 4, 5], "children": [9], "function": "_maxManhattanDistance", "code": "enter: _maxManhattanDistance(self, points, excludedIndex)"}, "8": {"lineno": 18, "parents": [37, 38], "children": [], "function": "_maxManhattanDistance", "code": "exit: _maxManhattanDistance(self, points, excludedIndex)"}, "9": {"lineno": 19, "parents": [7], "children": [10], "function": "_maxManhattanDistance", "code": "minSum = math.inf"}, "10": {"lineno": 20, "parents": [9], "children": [11], "function": "_maxManhattanDistance", "code": "maxSum = -math.inf"}, "11": {"lineno": 21, "parents": [10], "children": [12], "function": "_maxManhattanDistance", "code": "minDiff = math.inf"}, "12": {"lineno": 22, "parents": [11], "children": [13], "function": "_maxManhattanDistance", "code": "maxDiff = -math.inf"}, "13": {"lineno": 23, "parents": [12], "children": [14], "function": "_maxManhattanDistance", "code": "minSumIndex = -1"}, "14": {"lineno": 24, "parents": [13], "children": [15], "function": "_maxManhattanDistance", "code": "maxSumIndex = -1"}, "15": {"lineno": 25, "parents": [14], "children": [16], "function": "_maxManhattanDistance", "code": "minDiffIndex = -1"}, "16": {"lineno": 26, "parents": [15], "children": [17], "function": "_maxManhattanDistance", "code": "maxDiffIndex = -1"}, "17": {"lineno": 28, "parents": [16], "children": [18], "function": "_maxManhattanDistance", "code": "__iv = iter(enumerate(points))"}, "18": {"lineno": 28, "parents": [17, 35, 21, 33], "children": [19, 36], "calls": ["enumerate"], "function": "_maxManhattanDistance", "code": "_for: __iv.__length__hint__() > 0"}, "19": {"lineno": 28, "parents": [18], "children": [20], "function": "_maxManhattanDistance", "code": "i, (x, y) = next(__iv)"}, "20": {"lineno": 29, "parents": [19], "children": [21, 22], "function": "_maxManhattanDistance", "code": "_if: i == excludedIndex"}, "21": {"lineno": 30, "parents": [20], "children": [18], "function": "_maxManhattanDistance", "code": "continue"}, "22": {"lineno": 31, "parents": [20], "children": [23], "function": "_maxManhattanDistance", "code": "summ = x + y"}, "23": {"lineno": 32, "parents": [22], "children": [24], "function": "_maxManhattanDistance", "code": "diff = x - y"}, "24": {"lineno": 33, "parents": [23], "children": [25, 27], "function": "_maxManhattanDistance", "code": "_if: summ < minSum"}, "25": {"lineno": 34, "parents": [24], "children": [26], "function": "_maxManhattanDistance", "code": "minSum = summ"}, "26": {"lineno": 35, "parents": [25], "children": [27], "function": "_maxManhattanDistance", "code": "minSumIndex = i"}, "27": {"lineno": 36, "parents": [24, 26], "children": [28, 30], "function": "_maxManhattanDistance", "code": "_if: summ > maxSum"}, "28": {"lineno": 37, "parents": [27], "children": [29], "function": "_maxManhattanDistance", "code": "maxSum = summ"}, "29": {"lineno": 38, "parents": [28], "children": [30], "function": "_maxManhattanDistance", "code": "maxSumIndex = i"}, "30": {"lineno": 39, "parents": [27, 29], "children": [33, 31], "function": "_maxManhattanDistance", "code": "_if: diff < minDiff"}, "31": {"lineno": 40, "parents": [30], "children": [32], "function": "_maxManhattanDistance", "code": "minDiff = diff"}, "32": {"lineno": 41, "parents": [31], "children": [33], "function": "_maxManhattanDistance", "code": "minDiffIndex = i"}, "33": {"lineno": 42, "parents": [32, 30], "children": [34, 18], "function": "_maxManhattanDistance", "code": "_if: diff > maxDiff"}, "34": {"lineno": 43, "parents": [33], "children": [35], "function": "_maxManhattanDistance", "code": "maxDiff = diff"}, "35": {"lineno": 44, "parents": [34], "children": [18], "function": "_maxManhattanDistance", "code": "maxDiffIndex = i"}, "36": {"lineno": 46, "parents": [18], "children": [37, 38], "function": "_maxManhattanDistance", "code": "_if: maxSum - minSum >= maxDiff - minDiff"}, "37": {"lineno": 47, "parents": [36], "children": [8], "function": "_maxManhattanDistance", "code": "return [minSumIndex, maxSumIndex]"}, "38": {"lineno": 49, "parents": [36], "children": [8], "function": "_maxManhattanDistance", "code": "return [minDiffIndex, maxDiffIndex]"}, "39": {"lineno": 51, "parents": [5], "children": [41], "calls": ["abs", "abs"], "function": "_manhattan", "code": "enter: _manhattan(self, points, i, j)"}, "40": {"lineno": 51, "parents": [41], "children": [], "function": "_manhattan", "code": "exit: _manhattan(self, points, i, j)"}, "41": {"lineno": 52, "parents": [39], "children": [40], "function": "_manhattan", "code": "return abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])"}, "42": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 3108, "task_title": "Minimum Cost Walk in Weighted Graph", "difficulty": 3, "func_name": "minimumCost", "description": "There is an undirected weighted graph with `n` vertices labeled from `0` to `n\n- 1`.\n\nYou are given the integer `n` and an array `edges`, where `edges[i] = [ui, vi,\nwi]` indicates that there is an edge between vertices `ui` and `vi` with a\nweight of `wi`.\n\nA walk on a graph is a sequence of vertices and edges. The walk starts and\nends with a vertex, and each edge connects the vertex that comes before it and\nthe vertex that comes after it. It's important to note that a walk may visit\nthe same edge or vertex more than once.\n\nThe cost of a walk starting at node `u` and ending at node `v` is defined as\nthe bitwise `AND` of the weights of the edges traversed during the walk. In\nother words, if the sequence of edge weights encountered during the walk is\n`w0, w1, w2, ..., wk`, then the cost is calculated as `w0 & w1 & w2 & ... &\nwk`, where `&` denotes the bitwise `AND` operator.\n\nYou are also given a 2D array `query`, where `query[i] = [si, ti]`. For each\nquery, you need to find the minimum cost of the walk starting at vertex `si`\nand ending at vertex `ti`. If there exists no such walk, the answer is `-1`.\n\nReturn the array `answer`, where `answer[i]` denotes the minimum cost of a\nwalk for query `i`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n    self.weight = [(1 << 17) - 1] * n\n\n  def unionByRank(self, u: int, v: int, w: int) -> None:\n    i = self._find(u)\n    j = self._find(v)\n    newWeight = self.weight[i] & self.weight[j] & w\n    self.weight[i] = newWeight\n    self.weight[j] = newWeight\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def getMinCost(self, u: int, v: int) -> int:\n    if u == v:\n      return 0\n    i = self._find(u)\n    j = self._find(v)\n    if i == j:\n      return self.weight[i]\n    else:\n      return -1\n\n  def _find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self._find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def minimumCost(self, n: int, edges: List[List[int]], query: List[List[int]]) -> List[int]:\n    uf = UnionFind(n)\n\n    for u, v, w in edges:\n      uf.unionByRank(u, v, w)\n\n    return [uf.getMinCost(u, v) for u, v in query]\n", "blocks": [{"type": "if", "start": 23, "end": 24}, {"type": "if", "start": 25, "end": 26}, {"type": "if", "start": 34, "end": 35}, {"type": "if", "start": 38, "end": 39}, {"type": "else", "start": 40, "end": 41}, {"type": "if", "start": 44, "end": 45}, {"type": "if", "start": 27, "end": 28}, {"type": "else", "start": 29, "end": 31}], "target_lines": [24, 26, 28, 30, 31, 35, 39, 41, 45], "cfg": {"0": {"lineno": 0, "parents": [], "children": [43], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "__init__", "code": "enter: __init__(self, n)"}, "2": {"lineno": 12, "parents": [5], "children": [], "function": "__init__", "code": "exit: __init__(self, n)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "calls": ["range", "list"], "function": "__init__", "code": "self.id = list(range(n))"}, "4": {"lineno": 14, "parents": [3], "children": [5], "function": "__init__", "code": "self.rank = [0] * n"}, "5": {"lineno": 15, "parents": [4], "children": [2], "function": "__init__", "code": "self.weight = [(1 << 17) - 1] * n"}, "6": {"lineno": 17, "parents": [41], "children": [8], "function": "unionByRank", "code": "enter: unionByRank(self, u, v, w)"}, "7": {"lineno": 17, "parents": [16, 18, 20, 14], "children": [], "function": "unionByRank", "code": "exit: unionByRank(self, u, v, w)"}, "8": {"lineno": 18, "parents": [6], "children": [9], "calls": ["_find"], "function": "unionByRank", "code": "i = self._find(u)"}, "9": {"lineno": 19, "parents": [8, 31], "children": [10], "calls": ["_find"], "function": "unionByRank", "code": "j = self._find(v)"}, "10": {"lineno": 20, "parents": [9, 31], "children": [11], "function": "unionByRank", "code": "newWeight = self.weight[i] & self.weight[j] & w"}, "11": {"lineno": 21, "parents": [10], "children": [12], "function": "unionByRank", "code": "self.weight[i] = newWeight"}, "12": {"lineno": 22, "parents": [11], "children": [13], "function": "unionByRank", "code": "self.weight[j] = newWeight"}, "13": {"lineno": 23, "parents": [12], "children": [14, 15], "function": "unionByRank", "code": "_if: i == j"}, "14": {"lineno": 24, "parents": [13], "children": [7], "function": "unionByRank", "code": "return"}, "15": {"lineno": 25, "parents": [13], "children": [16, 17], "function": "unionByRank", "code": "_if: self.rank[i] < self.rank[j]"}, "16": {"lineno": 26, "parents": [15], "children": [7], "function": "unionByRank", "code": "self.id[i] = j"}, "17": {"lineno": 27, "parents": [15], "children": [18, 19], "function": "unionByRank", "code": "_if: self.rank[i] > self.rank[j]"}, "18": {"lineno": 28, "parents": [17], "children": [7], "function": "unionByRank", "code": "self.id[j] = i"}, "19": {"lineno": 30, "parents": [17], "children": [20], "function": "unionByRank", "code": "self.id[i] = j"}, "20": {"lineno": 31, "parents": [19], "children": [7], "function": "unionByRank", "code": "self.rank[j] += 1"}, "21": {"lineno": 33, "parents": [], "children": [23], "function": "getMinCost", "code": "enter: getMinCost(self, u, v)"}, "22": {"lineno": 33, "parents": [24, 28, 29], "children": [], "function": "getMinCost", "code": "exit: getMinCost(self, u, v)"}, "23": {"lineno": 34, "parents": [21], "children": [24, 25], "function": "getMinCost", "code": "_if: u == v"}, "24": {"lineno": 35, "parents": [23], "children": [22], "function": "getMinCost", "code": "return 0"}, "25": {"lineno": 36, "parents": [23], "children": [26], "calls": ["_find"], "function": "getMinCost", "code": "i = self._find(u)"}, "26": {"lineno": 37, "parents": [25, 31], "children": [27], "calls": ["_find"], "function": "getMinCost", "code": "j = self._find(v)"}, "27": {"lineno": 38, "parents": [26, 31], "children": [28, 29], "function": "getMinCost", "code": "_if: i == j"}, "28": {"lineno": 39, "parents": [27], "children": [22], "function": "getMinCost", "code": "return self.weight[i]"}, "29": {"lineno": 41, "parents": [27], "children": [22], "function": "getMinCost", "code": "return -1"}, "30": {"lineno": 43, "parents": [33, 8, 9, 26, 25], "children": [32], "function": "_find", "code": "enter: _find(self, u)"}, "31": {"lineno": 43, "parents": [34], "children": [], "function": "_find", "code": "exit: _find(self, u)"}, "32": {"lineno": 44, "parents": [30], "children": [33, 34], "function": "_find", "code": "_if: self.id[u] != u"}, "33": {"lineno": 45, "parents": [32], "children": [34], "calls": ["_find"], "function": "_find", "code": "self.id[u] = self._find(self.id[u])"}, "34": {"lineno": 46, "parents": [32, 33, 31], "children": [31], "function": "_find", "code": "return self.id[u]"}, "35": {"lineno": 50, "parents": [], "children": [37], "function": "minimumCost", "code": "enter: minimumCost(self, n, edges, query)"}, "36": {"lineno": 50, "parents": [42], "children": [], "function": "minimumCost", "code": "exit: minimumCost(self, n, edges, query)"}, "37": {"lineno": 51, "parents": [35], "children": [38], "calls": ["UnionFind"], "function": "minimumCost", "code": "uf = UnionFind(n)"}, "38": {"lineno": 53, "parents": [37], "children": [39], "function": "minimumCost", "code": "__iv = iter(edges)"}, "39": {"lineno": 53, "parents": [41, 38, 7], "children": [40, 42], "function": "minimumCost", "code": "_for: __iv.__length__hint__() > 0"}, "40": {"lineno": 53, "parents": [39], "children": [41], "function": "minimumCost", "code": "u, v, w = next(__iv)"}, "41": {"lineno": 54, "parents": [40], "children": [39], "calls": ["unionByRank"], "function": "minimumCost", "code": "uf.unionByRank(u, v, w)"}, "42": {"lineno": 56, "parents": [39], "children": [36], "function": "minimumCost", "code": "return [uf.getMinCost(u, v) for u, v in query]"}, "43": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 3112, "task_title": "Minimum Time to Visit Disappearing Nodes", "difficulty": 2, "func_name": "minimumTime", "description": "There is an undirected graph of `n` nodes. You are given a 2D array `edges`,\nwhere `edges[i] = [ui, vi, lengthi]` describes an edge between node `ui` and\nnode `vi` with a traversal time of `lengthi` units.\n\nAdditionally, you are given an array `disappear`, where `disappear[i]` denotes\nthe time when the node `i` disappears from the graph and you won't be able to\nvisit it.\n\nNotice that the graph might be disconnected and might contain multiple edges.\n\nReturn the array `answer`, with `answer[i]` denoting the minimum units of time\nrequired to reach node `i` from node 0. If node `i` is unreachable from node 0\nthen `answer[i]` is `-1`.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def minimumTime(self, n: int, edges: List[List[int]], disappear: List[int]) -> List[int]:\n    graph = [[] for _ in range(n)]\n\n    for u, v, w in edges:\n      graph[u].append((v, w))\n      graph[v].append((u, w))\n\n    return self._dijkstra(graph, 0, disappear)\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int, disappear: List[int]) -> List[int]:\n    dist = [math.inf] * len(graph)\n\n    dist[src] = 0\n    minHeap = [(dist[src], src)]\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      if d > dist[u]:\n        continue\n      for v, w in graph[u]:\n        if d + w < disappear[v] and d + w < dist[v]:\n          dist[v] = d + w\n          heapq.heappush(minHeap, (dist[v], v))\n\n    res=[]\n    for d in dist:\n      if d != math.inf:\n        res.append(d)\n      else:\n        res.append(-1)\n    return res\n", "blocks": [{"type": "if", "start": 29, "end": 30}, {"type": "if", "start": 38, "end": 39}, {"type": "else", "start": 40, "end": 41}, {"type": "if", "start": 32, "end": 34}], "target_lines": [30, 33, 34, 39, 41], "cfg": {"0": {"lineno": 0, "parents": [], "children": [33], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "minimumTime", "code": "enter: minimumTime(self, n, edges, disappear)"}, "2": {"lineno": 12, "parents": [9], "children": [], "function": "minimumTime", "code": "exit: minimumTime(self, n, edges, disappear)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "minimumTime", "code": "graph = [[] for _ in range(n)]"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "minimumTime", "code": "__iv = iter(edges)"}, "5": {"lineno": 15, "parents": [8, 4], "children": [9, 6], "calls": ["_dijkstra"], "function": "minimumTime", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [11, 5], "children": [7], "function": "minimumTime", "code": "u, v, w = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8], "calls": ["append"], "function": "minimumTime", "code": "graph[u].append((v, w))"}, "8": {"lineno": 17, "parents": [7], "children": [5], "calls": ["append"], "function": "minimumTime", "code": "graph[v].append((u, w))"}, "9": {"lineno": 19, "parents": [11, 5], "children": [2], "function": "minimumTime", "code": "return self._dijkstra(graph, 0, disappear)"}, "10": {"lineno": 21, "parents": [5], "children": [12], "function": "_dijkstra", "code": "enter: _dijkstra(self, graph, src, disappear)"}, "11": {"lineno": 21, "parents": [32], "children": [], "function": "_dijkstra", "code": "exit: _dijkstra(self, graph, src, disappear)"}, "12": {"lineno": 22, "parents": [10], "children": [13], "calls": ["len"], "function": "_dijkstra", "code": "dist = [math.inf] * len(graph)"}, "13": {"lineno": 24, "parents": [12], "children": [14], "function": "_dijkstra", "code": "dist[src] = 0"}, "14": {"lineno": 25, "parents": [13], "children": [15], "function": "_dijkstra", "code": "minHeap = [(dist[src], src)]"}, "15": {"lineno": 27, "parents": [18, 20, 14], "children": [16, 25], "function": "_dijkstra", "code": "_while: minHeap"}, "16": {"lineno": 28, "parents": [15], "children": [17], "calls": ["heappop"], "function": "_dijkstra", "code": "d, u = heapq.heappop(minHeap)"}, "17": {"lineno": 29, "parents": [16], "children": [18, 19], "function": "_dijkstra", "code": "_if: d > dist[u]"}, "18": {"lineno": 30, "parents": [17], "children": [15], "function": "_dijkstra", "code": "continue"}, "19": {"lineno": 31, "parents": [17], "children": [20], "function": "_dijkstra", "code": "__iv = iter(graph[u])"}, "20": {"lineno": 31, "parents": [24, 19, 22], "children": [21, 15], "function": "_dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "21": {"lineno": 31, "parents": [20], "children": [22], "function": "_dijkstra", "code": "v, w = next(__iv)"}, "22": {"lineno": 32, "parents": [21], "children": [20, 23], "function": "_dijkstra", "code": "_if: d + w < disappear[v] and d + w < dist[v]"}, "23": {"lineno": 33, "parents": [22], "children": [24], "function": "_dijkstra", "code": "dist[v] = d + w"}, "24": {"lineno": 34, "parents": [23], "children": [20], "calls": ["heappush"], "function": "_dijkstra", "code": "heapq.heappush(minHeap, (dist[v], v))"}, "25": {"lineno": 36, "parents": [15], "children": [26], "function": "_dijkstra", "code": "res = []"}, "26": {"lineno": 37, "parents": [25], "children": [27], "function": "_dijkstra", "code": "__iv = iter(dist)"}, "27": {"lineno": 37, "parents": [26, 30, 31], "children": [32, 28], "function": "_dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "28": {"lineno": 37, "parents": [27], "children": [29], "function": "_dijkstra", "code": "d = next(__iv)"}, "29": {"lineno": 38, "parents": [28], "children": [30, 31], "function": "_dijkstra", "code": "_if: d != math.inf"}, "30": {"lineno": 39, "parents": [29], "children": [27], "calls": ["append"], "function": "_dijkstra", "code": "res.append(d)"}, "31": {"lineno": 41, "parents": [29], "children": [27], "calls": ["append"], "function": "_dijkstra", "code": "res.append(-1)"}, "32": {"lineno": 42, "parents": [27], "children": [11], "function": "_dijkstra", "code": "return res"}, "33": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
{"task_num": 3123, "task_title": "Find Edges in Shortest Paths", "difficulty": 3, "func_name": "findAnswer", "description": "You are given an undirected weighted graph of `n` nodes numbered from 0 to `n\n- 1`. The graph consists of `m` edges represented by a 2D array `edges`, where\n`edges[i] = [ai, bi, wi]` indicates that there is an edge between nodes `ai`\nand `bi` with weight `wi`.\n\nConsider all the shortest paths from node 0 to node `n - 1` in the graph. You\nneed to find a boolean array `answer` where `answer[i]` is `true` if the edge\n`edges[i]` is part of at least one shortest path. Otherwise, `answer[i]` is\n`false`.\n\nReturn the array `answer`.\n\nNote that the graph may not be connected.\n\n", "python_solution": "import math\nimport itertools\nimport bisect\nimport collections\nimport string\nimport heapq\nimport functools\nimport sortedcontainers\nfrom typing import List, Dict, Tuple, Iterator\n\nclass Solution:\n  def findAnswer(self, n: int, edges: List[List[int]]) -> List[bool]:\n    graph = [[] for _ in range(n)]\n\n    for u, v, w in edges:\n      graph[u].append((v, w))\n      graph[v].append((u, w))\n\n    from0 = self._dijkstra(graph, 0)\n    from1 = self._dijkstra(graph, n - 1)\n    return [from0[u] + w + from1[v] == from0[-1] or from0[v] + w + from1[u] == from0[-1] for u, v, w in edges]\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int) -> List[int]:\n    dist = [10**9] * len(graph)\n\n    dist[src] = 0\n    minHeap = [(dist[src], src)]\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      if d > dist[u]:\n        continue\n      for v, w in graph[u]:\n        if d + w < dist[v]:\n          dist[v] = d + w\n          heapq.heappush(minHeap, (dist[v], v))\n\n    return dist\n", "blocks": [{"type": "if", "start": 31, "end": 32}, {"type": "if", "start": 34, "end": 36}], "target_lines": [32, 35, 36], "cfg": {"0": {"lineno": 0, "parents": [], "children": [28], "function": "", "code": "start"}, "1": {"lineno": 12, "parents": [], "children": [3], "function": "findAnswer", "code": "enter: findAnswer(self, n, edges)"}, "2": {"lineno": 12, "parents": [11], "children": [], "function": "findAnswer", "code": "exit: findAnswer(self, n, edges)"}, "3": {"lineno": 13, "parents": [1], "children": [4], "function": "findAnswer", "code": "graph = [[] for _ in range(n)]"}, "4": {"lineno": 15, "parents": [3], "children": [5], "function": "findAnswer", "code": "__iv = iter(edges)"}, "5": {"lineno": 15, "parents": [8, 4], "children": [9, 6], "function": "findAnswer", "code": "_for: __iv.__length__hint__() > 0"}, "6": {"lineno": 15, "parents": [5], "children": [7], "function": "findAnswer", "code": "u, v, w = next(__iv)"}, "7": {"lineno": 16, "parents": [6], "children": [8], "calls": ["append"], "function": "findAnswer", "code": "graph[u].append((v, w))"}, "8": {"lineno": 17, "parents": [7], "children": [5], "calls": ["append"], "function": "findAnswer", "code": "graph[v].append((u, w))"}, "9": {"lineno": 19, "parents": [5], "children": [10], "calls": ["_dijkstra"], "function": "findAnswer", "code": "from0 = self._dijkstra(graph, 0)"}, "10": {"lineno": 20, "parents": [9, 13], "children": [11], "calls": ["_dijkstra"], "function": "findAnswer", "code": "from1 = self._dijkstra(graph, n - 1)"}, "11": {"lineno": 21, "parents": [10, 13], "children": [2], "function": "findAnswer", "code": "return [from0[u] + w + from1[v] == from0[-1] or from0[v] + w + from1[u] == from0[-1] for u, v, w in edges]"}, "12": {"lineno": 23, "parents": [9, 10], "children": [14], "function": "_dijkstra", "code": "enter: _dijkstra(self, graph, src)"}, "13": {"lineno": 23, "parents": [27], "children": [], "function": "_dijkstra", "code": "exit: _dijkstra(self, graph, src)"}, "14": {"lineno": 24, "parents": [12], "children": [15], "calls": ["len"], "function": "_dijkstra", "code": "dist = [10 ** 9] * len(graph)"}, "15": {"lineno": 26, "parents": [14], "children": [16], "function": "_dijkstra", "code": "dist[src] = 0"}, "16": {"lineno": 27, "parents": [15], "children": [17], "function": "_dijkstra", "code": "minHeap = [(dist[src], src)]"}, "17": {"lineno": 29, "parents": [16, 20, 22], "children": [18, 27], "function": "_dijkstra", "code": "_while: minHeap"}, "18": {"lineno": 30, "parents": [17], "children": [19], "calls": ["heappop"], "function": "_dijkstra", "code": "d, u = heapq.heappop(minHeap)"}, "19": {"lineno": 31, "parents": [18], "children": [20, 21], "function": "_dijkstra", "code": "_if: d > dist[u]"}, "20": {"lineno": 32, "parents": [19], "children": [17], "function": "_dijkstra", "code": "continue"}, "21": {"lineno": 33, "parents": [19], "children": [22], "function": "_dijkstra", "code": "__iv = iter(graph[u])"}, "22": {"lineno": 33, "parents": [24, 26, 21], "children": [17, 23], "function": "_dijkstra", "code": "_for: __iv.__length__hint__() > 0"}, "23": {"lineno": 33, "parents": [22], "children": [24], "function": "_dijkstra", "code": "v, w = next(__iv)"}, "24": {"lineno": 34, "parents": [23], "children": [25, 22], "function": "_dijkstra", "code": "_if: d + w < dist[v]"}, "25": {"lineno": 35, "parents": [24], "children": [26], "function": "_dijkstra", "code": "dist[v] = d + w"}, "26": {"lineno": 36, "parents": [25], "children": [22], "calls": ["heappush"], "function": "_dijkstra", "code": "heapq.heappush(minHeap, (dist[v], v))"}, "27": {"lineno": 38, "parents": [17], "children": [13], "function": "_dijkstra", "code": "return dist"}, "28": {"lineno": 0, "parents": [0], "children": [], "function": "", "code": "stop"}}}
